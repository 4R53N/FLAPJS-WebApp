{"version":3,"sources":["webpack:///./src/app/config.js","webpack:///./src/app/modules/fsa/controller/events/EventHandler.js","webpack:///./src/app/modules/fsa/graph/FSAGraphParser.js","webpack:///./src/app/icons/IconButton.js","webpack:///./src/app/machine/Symbols.js","webpack:///./src/app/system/notification/Notifications.js","webpack:///./src/app/system/localsave/LocalSave.js","webpack:///./src/app/util/ColorHelper.js","webpack:///./src/app/modules/fsa/graph/FSAEdge.js","webpack:///./src/app/modules/fsa/graph/FSANode.js","webpack:///./src/app/content/viewport/Viewport.js","webpack:///./src/app/modules/abstract/panels/options/OptionGroup.js","webpack:///./src/app/util/MathHelper.js","webpack:///./src/app/modules/abstract/panels/options/OptionHotkey.js","webpack:///./src/app/util/Downloader.js","webpack:///./src/app/modules/fsa/panels/overview/infoblock/InfoBlock.js","webpack:///./src/app/machine/DFA.js","webpack:///./src/app/system/styleopt/components/StyleInput.js","webpack:///./src/app/content/workspace/renderer/HighlightRenderer.js","webpack:///./src/app/router.js","webpack:///./src/app/modules/abstract/exporter/AbstractGraphExporter.js","webpack:///./src/app/machine/NFA.js","webpack:///./src/app/modules/fsa/graph/GraphLayout.js","webpack:///./src/app/modules/fsa/testing/TestingManager.js","webpack:///./src/app/modules/fsa/notifications/TransitionErrorMessage.js","webpack:///./src/app/machine/util/solveNFA.js","webpack:///./src/app/modules/abstract/AbstractModule.js","webpack:///./src/app/modules/fsa/graph/FSAGraph.js","webpack:///./src/app/system/formattedinput/FormattedInput.js","webpack:///./src/app/util/Eventable.js","webpack:///./src/app/content/App.js","webpack:///./src/app/icons/IconToggle.js","webpack:///./src/app/icons/DropDownIcon.js","webpack:///./src/app/icons/BoxAddIcon.js","webpack:///./src/app/machine/FSA.js","webpack:///./src/app/icons/UploadIcon.js","webpack:///./src/app/icons/SaveIcon.js","webpack:///./src/app/system/inputadapter/AbstractInputController.js","webpack:///./src/app/graph/GraphNode.js","webpack:///./src/app/graph/GraphElement.js","webpack:///./src/app/graph/GraphEdge.js","webpack:///./src/app/icons/UndoIcon.js","webpack:///./src/app/icons/RedoIcon.js","webpack:///./src/app/modules/fsa/notifications/StateUnreachableWarningMessage.js","webpack:///./src/app/content/drawer/Drawer.js","webpack:///./src/app/changelog.js","webpack:///./src/app/modules/abstract/exporter/GraphImageExporter.js","webpack:///./src/app/modules/fsa/panels/overview/alphabetlist/AlphabetTag.js","webpack:///./src/app/modules/fsa/renderer/InitialMarkerRenderer.js","webpack:///./src/app/modules/fsa/builder/DFAErrorChecker.js","webpack:///./src/app/modules/fsa/FSAModule.js","webpack:///./src/app/modules/fsa/notifications/NFAToDFAConversionWarningMessage.js","webpack:///./src/app/system/inputadapter/InputAdapter.js","webpack:///./src/app/system/notification/components/NotificationView.js","webpack:///./src/app/system/undomanager/UndoManager.js","webpack:///./src/app/modules/abstract/exporter/GraphImporter.js","webpack:///./src/app/icons/flat/PNGIcon.js","webpack:///./src/app/icons/flat/JPGIcon.js","webpack:///./src/app/modules/abstract/panels/exporting/ExportingPanel.js","webpack:///./src/app/modules/abstract/panels/options/OptionsPanel.js","webpack:///./src/app/system/localsave/LocalSaveManager.js","webpack:///./src/app/system/styleopt/StyleOptionRegistry.js","webpack:///./src/app/system/notification/NotificationManager.js","webpack:///./src/app/modules/fsa/panels/overview/OverviewPanel.js","webpack:///./src/app/modules/fsa/panels/overview/stateslist/StatesList.js","webpack:///./src/app/icons/TriangleIcon.js","webpack:///./src/app/modules/fsa/panels/overview/stateslist/StateTag.js","webpack:///./src/app/modules/fsa/panels/overview/alphabetlist/AlphabetList.js","webpack:///./src/app/modules/fsa/panels/overview/transitiontable/TransitionTable.js","webpack:///./src/app/modules/fsa/panels/overview/transitionfunction/TransitionFunction.js","webpack:///./src/app/modules/fsa/panels/overview/formaldefinition/FormalDefinition.js","webpack:///./src/app/modules/fsa/panels/testing/TestingPanel.js","webpack:///./src/app/modules/fsa/testing/TestMode.js","webpack:///./src/app/modules/fsa/testing/TestingInputList.js","webpack:///./src/app/modules/fsa/panels/testing/TestingInput.js","webpack:///./src/app/icons/AddIcon.js","webpack:///./src/app/icons/RemoveIcon.js","webpack:///./src/app/modules/fsa/panels/testing/StatusButton.js","webpack:///./src/app/icons/SuccessIcon.js","webpack:///./src/app/icons/FailureIcon.js","webpack:///./src/app/icons/RunningManIcon.js","webpack:///./src/app/modules/fsa/panels/testing/components/UploadTestButton.js","webpack:///./src/app/icons/PageNewContentIcon.js","webpack:///./src/app/icons/CloseIcon.js","webpack:///./src/app/modules/fsa/panels/analysis/AnalysisPanel.js","webpack:///./src/app/modules/fsa/panels/about/AboutPanel.js","webpack:///./src/app/modules/fsa/controller/InputController.js","webpack:///./src/app/modules/abstract/AbstractModuleInputController.js","webpack:///./src/app/modules/abstract/ViewportInputHandler.js","webpack:///./src/app/modules/fsa/controller/GraphPicker.js","webpack:///./src/app/graph/QuadraticEdge.js","webpack:///./src/app/modules/fsa/controller/GraphController.js","webpack:///./src/app/modules/abstract/AbstractModuleGraphController.js","webpack:///./src/app/graph/NodalGraph.js","webpack:///./src/app/modules/fsa/controller/MachineController.js","webpack:///./src/app/modules/abstract/AbstractModuleMachineController.js","webpack:///./src/app/machine/util/convertNFA.js","webpack:///./src/app/modules/fsa/renderer/FSAGraphRenderer.js","webpack:///./src/app/modules/fsa/renderer/NodeRenderer.js","webpack:///./src/app/modules/fsa/renderer/EdgeRenderer.js","webpack:///./src/app/modules/fsa/renderer/FSAGraphOverlayRenderer.js","webpack:///./src/app/content/workspace/renderer/SelectionBoxRenderer.js","webpack:///./src/app/modules/fsa/renderer/ViewportRenderer.js","webpack:///./src/app/content/viewport/TrashCan.js","webpack:///./src/app/modules/fsa/renderer/TestTray.js","webpack:///./src/app/icons/PlayIcon.js","webpack:///./src/app/icons/PauseIcon.js","webpack:///./src/app/icons/StopIcon.js","webpack:///./src/app/content/viewport/CursorMode.js","webpack:///./src/app/icons/CreateIcon.js","webpack:///./src/app/icons/MoveIcon.js","webpack:///./src/app/modules/fsa/builder/FSABuilder.js","webpack:///./src/app/modules/fsa/builder/MachineBuilder.js","webpack:///./src/app/modules/fsa/builder/MachineLabeler.js","webpack:///./src/app/modules/fsa/notifications/StateMissingTransitionErrorMessage.js","webpack:///./src/app/modules/fsa/builder/NFAErrorChecker.js","webpack:///./src/app/modules/fsa/EventManager.js","webpack:///./src/app/modules/fsa/controller/events/GraphNodeInitialEventHandler.js","webpack:///./src/app/modules/fsa/controller/events/GraphNodeMoveEventHandler.js","webpack:///./src/app/modules/fsa/controller/events/GraphNodeMoveAllEventHandler.js","webpack:///./src/app/modules/fsa/controller/events/GraphEdgeMoveEventHandler.js","webpack:///./src/app/modules/fsa/controller/events/GraphEdgeDestinationEventHandler.js","webpack:///./src/app/modules/fsa/controller/events/GraphEdgeLabelEventHandler.js","webpack:///./src/app/modules/fsa/controller/events/UserCreateNodeEventHandler.js","webpack:///./src/app/modules/fsa/controller/events/UserToggleNodeEventHandler.js","webpack:///./src/app/modules/fsa/controller/events/UserDeleteNodesEventHandler.js","webpack:///./src/app/modules/fsa/controller/events/UserRenameNodeEventHandler.js","webpack:///./src/app/modules/fsa/controller/events/UserCreateEdgeEventHandler.js","webpack:///./src/app/modules/fsa/controller/events/UserDeleteEdgeEventHandler.js","webpack:///./src/app/modules/fsa/controller/events/UserImportGraphEventHandler.js","webpack:///./src/app/modules/fsa/controller/events/SafeGraphEventHandler.js","webpack:///./src/app/modules/fsa/controller/events/UserChangeMachineEventHandler.js","webpack:///./src/app/modules/fsa/controller/events/UserConvertMachineEventHandler.js","webpack:///./src/app/modules/fsa/controller/events/UserRenameMachineEventHandler.js","webpack:///./src/app/modules/fsa/controller/events/UserRenameSymbolEventHandler.js","webpack:///./src/app/modules/fsa/controller/events/UserDeleteSymbolEventHandler.js","webpack:///./src/app/modules/fsa/editor/LabelEditor.js","webpack:///./src/app/modules/fsa/exporter/FSAGraphExporter.js","webpack:///./src/app/icons/flat/JSONIcon.js","webpack:///./src/app/modules/fsa/exporter/JFLAPGraphExporter.js","webpack:///./src/app/icons/flat/XMLIcon.js","webpack:///./src/app/content/HotKeys.js","webpack:///./src/app/content/toolbar/Toolbar.js","webpack:///./src/app/content/toolbar/UploadButton.js","webpack:///./src/app/content/toolbar/HelpButton.js","webpack:///./src/app/content/toolbar/MachineName.js","webpack:///./src/app/icons/PageNewIcon.js","webpack:///./src/app/icons/HelpIcon.js","webpack:///./src/app/icons/LanguageIcon.js","webpack:///./src/app/icons/OfflineIcon.js","webpack:///./src/app/icons/BugReportIcon.js","webpack:///./src/app/content/drawer/DrawerExpander.js","webpack:///./src/app/content/workspace/Workspace.js","webpack:///./src/app/content/workspace/Subtitle.js","webpack:///./src/app/tutorial/Tutorial.js","webpack:///./src/app/system/inputadapter/InputPointer.js","webpack:///./src/app/system/inputadapter/ViewportAdapter.js","webpack:///./src/app/system/notification/components/NotificationMessage.js","webpack:///./src/app/landing/components/LandingPage.js","webpack:///./src/app/landing/components/Logo.js","webpack:///./src/app/landing/components/Quote.js","webpack:///./src/app/index.js","webpack:///./src/app/machine/util/solveDFA.js","webpack:///./src/app/icons/WorkingIcon.js","webpack:///./src/app/modules/fsa/notifications/StateErrorMessage.js","webpack:///./src/app/icons/MoreIcon.js","webpack:///./src/app/icons/OfflinePinIcon.js"],"names":["LOCAL_STORAGE_ID","cfg","_resetOnLoad","_userDefined","_dirty","setValue","key","value","this","hasOwnProperty","Error","bind","doesSupportLocalStorage","Storage","loadConfig","jsonString","localStorage","getItem","console","log","jsonData","JSON","parse","clearConfig","saveConfig","Object","assign","e","arguments","length","undefined","stringify","setItem","removeItem","__webpack_exports__","MACHINE_ERRORS_MESSAGE_TAG","MACHINE_CONVERSION_MESSAGE_TAG","ERROR_CHECK_INTERVAL","GRAPH_IMMEDIATE_INTERVAL","SMOOTH_OFFSET_DAMPING","SCROLL_SENSITIVITY","MIN_SCALE","MAX_SCALE","INIT_WAITTIME","STR_TRANSITION_DEFAULT_LABEL","STR_STATE_LABEL","PARALLEL_EDGE_HEIGHT","SELF_LOOP_HEIGHT","SUBMIT_KEY","CLEAR_KEY","TAB_KEY","UP_KEY","DOWN_KEY","DELETE_KEY","DELETE_FORWARD_KEY","DEFAULT_GRAPH_SIZE","NODE_RADIUS","NODE_RADIUS_SQU","NODE_DIAMETER","NODE_RADIUS_INNER","INITIAL_MARKER_OFFSET_X","EDGE_RADIUS","EDGE_RADIUS_SQU","ARROW_WIDTH","PLACEHOLDER_LENGTH","ENDPOINT_RADIUS","ENDPOINT_RADIUS_SQU","HOVER_RADIUS_OFFSET","CURSOR_RADIUS","CURSOR_RADIUS_SQU","DOUBLE_TAP_TICKS","LONG_TAP_TICKS","SPAWN_RADIUS","DEFAULT_SHOULD_DESTROY_POINTLESS_EDGE","DRAGGING_BUFFER","DRAGGING_BUFFER_SQU","PADDING_RADIUS_SQU","EventHandler","eventLogger","controller","eventName","postEventName","_classCallCheck","onEvent","on","removeEventListener","_this","result","applyUndo","applyRedo","eventData","captureEvent","apply","once","postData","capturePostEvent","data","dst","clear","_FSAGraph_js__WEBPACK_IMPORTED_MODULE_0__","nodeDatas","nodeCount","Math","min","edgeDatas","edgeCount","initialIndex","nodeIndices","Map","i","nodeData","node","createNode","setNodeLabel","setNodeAccept","setNodeCustom","set","initialNode","get","setStartNode","_i","edgeData","sourceNode","destinationNode","edge","createEdge","quadData","setEdgeLabel","setQuadratic","objectify","graph","graphNodes","getNodes","graphEdges","getEdges","graphInitial","getStartNode","Array","elementID","getGraphElementID","id","x","y","label","getNodeLabel","accept","getNodeAccept","custom","getNodeCustom","_i2","_elementID","quad","getQuadratic","edgeSource","getSourceNode","edgeDestination","getDestinationNode","sourceIndex","has","destinationIndex","from","to","radians","getEdgeLabel","nodes","edges","initial","_version","XML","NULL","nodeElements","getElementsByTagName","edgeElements","nodeElementIDs","nodeElement","nodeElementID","getAttribute","xElements","xElement","hasChildNodes","xValue","childNodes","parseFloat","nodeValue","yElements","yElement","yValue","final","boundingRect","getBoundingRect","minX","minY","width","height","_i3","len","transitionMapping","_i4","edgeElement","sourceID","fromElements","fromElement","fromValue","destinationID","toElements","toElement","toValue","symbol","readElements","readElement","readValue","transitionID","symbols","push","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","keys","Symbol","iterator","next","done","transitionKey","split","join","_FSAEdge_js__WEBPACK_IMPORTED_MODULE_1__","err","return","doc","DOMParser","parseFromString","structure","type","createElement","innerHTML","appendChild","automaton","state","setAttribute","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","getEdgeSymbolsFromLabel","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","transition","read","IconButton","props","_possibleConstructorReturn","_getPrototypeOf","call","react__WEBPACK_IMPORTED_MODULE_0___default","a","className","title","style","disabled","onClick","children","Component","EMPTY","ARROW","EMPTY_SET","INSTANCE","_NotificationManager_js__WEBPACK_IMPORTED_MODULE_0__","_LocalSaveManager_js__WEBPACK_IMPORTED_MODULE_0__","RGB_WHITE","RGB_BLACK","blendRGB","percent","rgb1","rgb2","blendAmount","abs","round","invertRGB","rgb","blackwhite","HEXtoRGB","hex","indexOf","slice","red","substring","green","blue","parseInt","RGBtoHEX","toString","RGBtoHSV","r","g","b","max","d","h","s","v","HSVtoRGB","floor","f","p","q","t","SYMBOL_SEPARATOR","EMPTY_CHAR","FSAEdge","_get","prototype","graph_QuadraticEdge_js__WEBPACK_IMPORTED_MODULE_0__","FSANode","_accept","_custom","config_js__WEBPACK_IMPORTED_MODULE_1__","usePosition","graph_GraphNode_js__WEBPACK_IMPORTED_MODULE_0__","VIEWPORT_RENDER_LAYER","Viewport","ref","labelEditor","prevMode","NORMAL","mode","_this2","currentModule","ViewportRenderer","getInputController","getGraphController","getMachineController","getRenderer","_ref","_extends","parent","WAITING","TESTING","DANGEROUS","OptionGroup","dropdown","createRef","open","icons_IconToggle_js__WEBPACK_IMPORTED_MODULE_2__","defaultValue","pointerEvents","icons_DropDownIcon_js__WEBPACK_IMPORTED_MODULE_3__","display","isOpen","guid","s4","random","lerp","dt","stringHash","hash","imul","charCodeAt","OptionHotkey","keyName","downloadText","filename","textData","downloadURL","getTextDataURI","downloadSVG","filetype","svg","svgString","XMLSerializer","serializeToString","blob","Blob","url","URL","createObjectURL","canvas","document","ctx","getContext","pixelRatio","window","devicePixelRatio","setTransform","image","Image","onload","drawImage","revokeObjectURL","imageURI","toDataURL","replace","src","element","headerIndex","body","click","removeChild","encodeURIComponent","InfoBlock","SRC","SYMBOL","DST","DFA","error","isValidDFA","fromState","toState","_states","includes","_transitions","_FSA_js__WEBPACK_IMPORTED_MODULE_0__","StyleInput","onChange","_assertThisInitialized","newValue","target","setStyle","propName","prop","inputType","inputID","getStyle","htmlFor","HIGHLIGHT_RADIUS_OFFSET","HIGHLIGHT_LINE_WIDTH","HIGHLIGHT_LINE_ARRAY","HighlightRenderer","center","getCenterPoint","endpoint","getEndPoint","cx","cy","strokeDashoffset","offset","strokeDasharray","strokeWidth","fill","ROUTER","_current","routeTo","component","getCurrentPage","AbstractGraphExporter","module","getFileType","fileBlob","getLabel","toUpperCase","NFA","_Symbols_js__WEBPACK_IMPORTED_MODULE_1__","transitions","getOutgoingTransitions","_dst","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","states","doClosureTransition","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","ps","nfaStates","getStates","j","concat","getReachableState","reachable","startNode","_from","_to","GraphLayout","reachableNode","unreachableNode","filter","numOfReachable","numOfUnreachable","numOfNode","maxNum","radius","currentStep","degree","PI","sin","cos","degree_re","degree_un","_node","_node2","TestingManager","machineController","viewport","inputList","_TestingInputList_js__WEBPACK_IMPORTED_MODULE_2__","shouldCheckError","isImmediateErrorCheck","errorCheckMode","NO_ERROR_CHECK","stepByStepMode","testMode","_TestMode_js__WEBPACK_IMPORTED_MODULE_1__","initialize","machineBuilder","getMachineBuilder","setMachineType","getMachineType","DELAYED_ERROR_CHECK","IMMEDIATE_ERROR_CHECK","isStarted","onStop","onStart","setState","prev","content_viewport_Viewport_js__WEBPACK_IMPORTED_MODULE_0__","TransitionErrorMessage","targetIndex","targetLabel","targets","message","machine_Symbols_js__WEBPACK_IMPORTED_MODULE_1__","graphController","buttonValue","_targets","targetLength","focusOnEdge","_targets2","deleteTargetEdges","close","text","I18N","solveNFA","nfa","input","cachedStates","cachedSymbols","getStartState","index","currState","checkedStates","counter","solveNFAbyStep","nextStates","nextIndex","cstate","doTerminalTransition","nextState","isFinalState","DEFAULT_GRAPH_EXPORTERS","DEFAULT_IMAGE_EXPORTERS","_exporter_GraphImageExporter_js__WEBPACK_IMPORTED_MODULE_1__","DEFAULT_PANELS","_panels_exporting_ExportingPanel_js__WEBPACK_IMPORTED_MODULE_2__","_panels_options_OptionsPanel_js__WEBPACK_IMPORTED_MODULE_3__","AbstractModule","app","_importer","_exporter_GraphImporter_js__WEBPACK_IMPORTED_MODULE_0__","renderLayer","getModuleName","exporters","getGraphExporters","FSAGraph","_FSANode_js__WEBPACK_IMPORTED_MODULE_1__","_FSAEdge_js__WEBPACK_IMPORTED_MODULE_2__","_nodes","edgeLabel","_edges","_otherEdge","otherSymbols","isSelfLoop","flag","parallelEdgeHeight","HALFPI","otherEdge","isQuadratic","maxNodeSize","getNodeSize","x1","y1","x2","y2","dist12sq","vertical","m","x0","y0","sqrt","graph_NodalGraph_js__WEBPACK_IMPORTED_MODULE_0__","FormattedInput","ignoreSaveOnExit","prevValue","onBlur","onKeyUp","nextProps","hasFocus","select","focus","blur","activeElement","captureOnExit","formatValue","resetValue","onSubmit","_this3","multiline","shiftKey","preventDefault","stopPropagation","_prev","_this4","callback","separator","selectionStart","selectionEnd","formatter","_this5","rows","_ref2","Eventable","__eventListeners","mixin","targetClass","targetPrototype","registerEvent","unregisterEvent","delete","addEventListener","listener","_listeners","splice","clearEventListeners","countEventListeners","getEventListeners","_len","args","_key","emit","_len2","_key2","_listeners3","onEventProcessed","App","container","workspace","drawer","toolbar","inputAdapter","system_inputadapter_InputAdapter_js__WEBPACK_IMPORTED_MODULE_12__","getViewport","setMinScale","config_js__WEBPACK_IMPORTED_MODULE_3__","setMaxScale","setOffsetDamping","undoManager","system_undomanager_UndoManager_js__WEBPACK_IMPORTED_MODULE_15__","_module","modules_fsa_FSAModule_js__WEBPACK_IMPORTED_MODULE_4__","hotKeys","_HotKeys_js__WEBPACK_IMPORTED_MODULE_5__","tutorial","tutorial_Tutorial_js__WEBPACK_IMPORTED_MODULE_11__","isDangerous","isFullscreen","isWaitingForFile","onDragOver","onDragEnter","onDragLeave","onFileDrop","_init","workspaceDOM","getCurrentModule","start","system_localsave_LocalSave_js__WEBPACK_IMPORTED_MODULE_6__","registerHandler","unregisterHandler","terminate","destroy","moduleName","loadFromStorage","getDefaultGraphExporter","importFromData","exportToData","saveToStorage","ev","_viewport_Viewport_js__WEBPACK_IMPORTED_MODULE_10__","dataTransfer","items","file","kind","getAsFile","files","getGraphImporter","importFile","catch","system_notification_Notifications_js__WEBPACK_IMPORTED_MODULE_13__","addErrorMessage","clearData","full","screen","update","_ref5","_toolbar_Toolbar_js__WEBPACK_IMPORTED_MODULE_7__","system_notification_components_NotificationView_js__WEBPACK_IMPORTED_MODULE_14__","notificationManager","visibility","shouldHideContent","opacity","_workspace_Workspace_js__WEBPACK_IMPORTED_MODULE_8__","_ref3","_drawer_Drawer_js__WEBPACK_IMPORTED_MODULE_9__","_ref4","react_hot_loader_root__WEBPACK_IMPORTED_MODULE_1__","IconToggle","DropDownIcon","xmlns","viewBox","BoxAddIcon","FSA","_finalStates","_customAlphabet","fsa","oldState","newState","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","unshift","isFinal","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","isUsedAlphabet","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","getUsedAlphabet","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","alphabet","getAlphabet","foundSymbols","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","usedAlphabet","startState","finalStates","UploadIcon","SaveIcon","AbstractInputController","pointer","zoomValue","GraphNode","_label","graph_GraphElement_js__WEBPACK_IMPORTED_MODULE_0__","GraphElement","_id","graphElementID","GraphEdge","isPlaceholder","dy","dx","atan2","halfPlaceholderLength","getPlaceholderLength","placeholderLength","getHashString","UndoIcon","RedoIcon","StateUnreachableWarningMessage","focusOnNode","deleteTargetNodes","labeler","sortDefaultNodeLabels","DEFAULT_TAB_INDEX","MAX_PANEL_THRESHOLD","MIN_PANEL_SIZE","Drawer","tabIndex","dragging","onTouchStart","onMouseDown","onScroll","_ontouchmove","_ontouchend","openDrawer","updatePanelSize","touch","changedTouches","onStartDraggingDrawerBorder","clientX","clientY","onStopDraggingDrawerBorder","onMouseMove","onMouseUp","InfoPanel","getModulePanels","onWheel","map","PanelClass","panelID","modules_abstract_AbstractModule_js__WEBPACK_IMPORTED_MODULE_3__","_DrawerExpander_js__WEBPACK_IMPORTED_MODULE_2__","UNLOCALIZED_NAME","setTab","size","matchMedia","matches","getBoundingClientRect","offsetHeight","offsetWidth","setProperty","EXPORTING_PANEL_TAB_INDEX","OPTIONS_PANEL_TAB_INDEX","changeLog","show","version","GraphImageExporter","imageType","_imageType","_workspace","workspaceDim","baseVal","getSVGForExport","util_Downloader_js__WEBPACK_IMPORTED_MODULE_3__","icons_flat_PNGIcon_js__WEBPACK_IMPORTED_MODULE_1__","icons_flat_JPGIcon_js__WEBPACK_IMPORTED_MODULE_2__","_AbstractGraphExporter_js__WEBPACK_IMPORTED_MODULE_0__","AlphabetTag","onValueChange","onFocus","onKeyDown","newSymbol","oldSymbol","renameSymbol","createSymbol","deleteSymbol","keyCode","config_js__WEBPACK_IMPORTED_MODULE_2__","trim","spellCheck","maxLength","InitialMarkerRenderer","modules_fsa_graph_FSANode_js__WEBPACK_IMPORTED_MODULE_1__","stroke","DFAErrorChecker","errorNodes","errorEdges","warningNodes","warningEdges","shouldNotifyErrors","machine","getMachine","warnNodes","warnEdges","nodeTransitionMap","placeholderEdges","emptyEdges","dupeEdges","labels","currentAlphabet","missingNodes","nodeTransitions","messageTag","config_js__WEBPACK_IMPORTED_MODULE_0__","system_notification_Notifications_js__WEBPACK_IMPORTED_MODULE_2__","clearMessages","unReachedNodes","getUnreachableNodes","addMessage","modules_fsa_notifications_StateUnreachableWarningMessage_js__WEBPACK_IMPORTED_MODULE_3__","modules_fsa_notifications_TransitionErrorMessage_js__WEBPACK_IMPORTED_MODULE_5__","modules_fsa_notifications_StateMissingTransitionErrorMessage_js__WEBPACK_IMPORTED_MODULE_4__","getNodeCount","shift","nextNodes","pop","nextNode","VERSION","PANELS","_panels_about_AboutPanel_js__WEBPACK_IMPORTED_MODULE_5__","_panels_testing_TestingPanel_js__WEBPACK_IMPORTED_MODULE_3__","_panels_overview_OverviewPanel_js__WEBPACK_IMPORTED_MODULE_2__","_panels_analysis_AnalysisPanel_js__WEBPACK_IMPORTED_MODULE_4__","EXPORTERS","_exporter_FSAGraphExporter_js__WEBPACK_IMPORTED_MODULE_17__","_exporter_JFLAPGraphExporter_js__WEBPACK_IMPORTED_MODULE_18__","FSAModule","_refreshRate","_ticks","_inputController","_controller_InputController_js__WEBPACK_IMPORTED_MODULE_6__","getInputAdapter","_graphController","_controller_GraphController_js__WEBPACK_IMPORTED_MODULE_7__","_machineController","_controller_MachineController_js__WEBPACK_IMPORTED_MODULE_8__","_machineBuilder","_builder_FSABuilder_js__WEBPACK_IMPORTED_MODULE_12__","getGraph","_eventManager","_EventManager_js__WEBPACK_IMPORTED_MODULE_14__","getUndoManager","_testingManager","_testing_TestingManager_js__WEBPACK_IMPORTED_MODULE_16__","isTrashMode","system_notification_Notifications_js__WEBPACK_IMPORTED_MODULE_1__","_graph_GraphLayout_js__WEBPACK_IMPORTED_MODULE_13__","formatAlphabetString","_editor_LabelEditor_js__WEBPACK_IMPORTED_MODULE_15__","_renderer_FSAGraphRenderer_js__WEBPACK_IMPORTED_MODULE_9__","_renderer_FSAGraphOverlayRenderer_js__WEBPACK_IMPORTED_MODULE_10__","_renderer_ViewportRenderer_js__WEBPACK_IMPORTED_MODULE_11__","modules_abstract_AbstractModule_js__WEBPACK_IMPORTED_MODULE_0__","NFAToDFAConversionWarningMessage","convertMachineTo","stateCount","pow","InputAdapter","_controller","_element","_cursor","_mousemove","_mouseup","_touchmove","_touchend","_timer","_pointer","_viewport","_ViewportAdapter_js__WEBPACK_IMPORTED_MODULE_2__","_dragging","_altinput","_holdInputDelay","_dblInputDelay","_scrollSensitivity","_minTapRadius","_draggingRadiusSqu","_prevEmptyInput","_prevEmptyTime","_prevEmptyX","_prevEmptyY","onContextMenu","onMouseDownThenMove","onMouseDownThenUp","onTouchStartThenMove","onTouchStartThenEnd","onDelayedInputDown","SVGElement","setElement","_InputPointer_js__WEBPACK_IMPORTED_MODULE_1__","onTouchMove","cursor","button","ctrlKey","onInputDown","mouse","transformScreenToView","setPosition","onInputMove","onInputUp","deltaY","getScale","onZoomChange","setScale","onPreInputEvent","beginInput","setTimeout","onDragMove","getDistanceSquToInitial","onDragStart","cancelInputEvent","timer","clearTimeout","onDragStop","onAltInputEvent","onInputEvent","dist","Date","now","onDblInputEvent","endInput","onPostInputEvent","isActive","NotificationView","getMessages","getID","ComponentClass","getComponentClass","componentProps","getComponentProps","_NotificationMessage_js__WEBPACK_IMPORTED_MODULE_2__","MAX_HISTORY_LENGTH","UndoManager","history","offsetIndex","eventHandler","canUndo","event","canRedo","GraphImporter","File","Promise","reject","fileName","name","_loop","exporter","canImport","doesSupportFile","endsWith","importFromFile","_loop2","doesSupportData","PNGIcon","points","JPGIcon","ExportingPanel","icons_IconButton_js__WEBPACK_IMPORTED_MODULE_3__","getTitle","getMachineName","exportToFile","getIconClass","graphExporters","imageExporters","getImageExporters","renderExporterButton","defineProperty","OptionsPanel","styleOpts","system_styleopt_StyleOptionRegistry_js__WEBPACK_IMPORTED_MODULE_6__","theme","customTheme","skipWelcome","system_localsave_LocalSave_js__WEBPACK_IMPORTED_MODULE_4__","getStringFromStorage","disableExitWarning","onChangeTheme","onChangeModule","root","getElementById","opts","invertFunc","opt","color","util_ColorHelper_js__WEBPACK_IMPORTED_MODULE_5__","getOptionByProp","darkFunc","inverted","registerStyleOption","onLoadSave","getOptions","isDefaultStyle","prevTheme","resetStyle","_OptionGroup_js__WEBPACK_IMPORTED_MODULE_8__","_OptionHotkey_js__WEBPACK_IMPORTED_MODULE_9__","marginTop","checked","setStringToStorage","getPropsByGroup","system_styleopt_components_StyleInput_js__WEBPACK_IMPORTED_MODULE_7__","alert","confirm","prompt","LocalSaveManager","_handlers","Set","_intervalID","_intervalMillis","onIntervalUpdate","millis","handler","add","onUnloadSave","setInterval","clearInterval","onAutoSave","saveKey","stringData","hidden","msHidden","webkitHidden","_typeof","StyleOption","elementSource","groupName","group","_callback","_value","_defaultValue","computedStyle","shouldPropagateChange","getComputedStyle","getPropertyValue","val","StyleOptionRegistry","_options","_groups","changeCallback","option","computedStyles","values","updateStyle","Message","tags","componentClass","_handler","util_MathHelper_js__WEBPACK_IMPORTED_MODULE_0__","_type","messages","tag","NotificationManager","_messageQueue","shouldReplaceRelated","_message","isArray","hasTag","OverviewPanel","viewFormal","onChangeMachineType","onAutoLayout","onChangeAutoRename","onSubmitAutoStatePrefix","onAutoStateFormat","switchDefinition","applyAutoLayout","changeMachineTo","setAutoRenameNodes","getLabeler","prefix","_formaldefinition_FormalDefinition__WEBPACK_IMPORTED_MODULE_9__","_stateslist_StatesList_js__WEBPACK_IMPORTED_MODULE_5__","_alphabetlist_AlphabetList_js__WEBPACK_IMPORTED_MODULE_6__","_transitionfunction_TransitionFunction_js__WEBPACK_IMPORTED_MODULE_8__","_transitiontable_TransitionTable_js__WEBPACK_IMPORTED_MODULE_7__","paddingBottom","marginBottom","flexDirection","system_formattedinput_FormattedInput_js__WEBPACK_IMPORTED_MODULE_4__","background","outline","border","padding","margin","appearance","shouldAutoRenameNodes","isEmpty","StatesList","onStateCreate","_infoblock_InfoBlock_js__WEBPACK_IMPORTED_MODULE_2__","icons_TriangleIcon_js__WEBPACK_IMPORTED_MODULE_5__","_StateTag_js__WEBPACK_IMPORTED_MODULE_6__","icons_BoxAddIcon_js__WEBPACK_IMPORTED_MODULE_4__","TriangleIcon","StateTag","newLabel","getNodesByLabel","renameNode","deleteTargetNode","isCustom","AlphabetList","editingTag","editing","onSymbolCreate","onStopEditing","_AlphabetTag_js__WEBPACK_IMPORTED_MODULE_5__","SYMBOL_AXIS","STATE_AXIS","TransitionTable","rowAxis","rowAxisType","getTransitions","isNFAMachine","hasEmptyColumn","scope","machine_Symbols_js__WEBPACK_IMPORTED_MODULE_4__","getDestinationFromSourceAndSymbol","startsWith","getSymbolFromSourceAndDestination","isSet","doTransition","TransitionFunction","sort","isNFA","_infoblock_InfoBlock__WEBPACK_IMPORTED_MODULE_2__","emptrans","machine_Symbols_js__WEBPACK_IMPORTED_MODULE_3__","empclassName","trans","EQUAL","DELTA","FormalDefinition","getFinalStates","machine_Symbols_js__WEBPACK_IMPORTED_MODULE_2__","TEST_FILENAME","REFRESH_TEST_TICKS","TestingPanel","uploadInput","getTestingManager","getErrorCheckMode","noTestMode","_savedGraphHash","_ticksSinceHash","stepByStepModeChecked","onChangeErrorCheckMode","onUploadFileChange","onGraphChange","onTestsRunAll","onTestsClear","onTestsSave","onTestsNew","onTestsUpload","getHashCode","resetTests","importTests","tester","setErrorCheckMode","machineErrorChecker","setStepByStepMode","testList","getTests","testByIndex","clearTests","clearTestName","hideTestInputList","getTestsAsStrings","showTestInputList","isTestInvalid","isValidMachine","graphHash","icons_IconButton_js__WEBPACK_IMPORTED_MODULE_6__","icons_PageNewContentIcon_js__WEBPACK_IMPORTED_MODULE_9__","_components_UploadTestButton_js__WEBPACK_IMPORTED_MODULE_7__","icons_UploadIcon_js__WEBPACK_IMPORTED_MODULE_8__","icons_SaveIcon_js__WEBPACK_IMPORTED_MODULE_10__","icons_CloseIcon_js__WEBPACK_IMPORTED_MODULE_11__","_TestingInput_js__WEBPACK_IMPORTED_MODULE_5__","modules_fsa_testing_TestingManager_js__WEBPACK_IMPORTED_MODULE_4__","STEPTIME","SKIPTIME","TestMode","testingManager","indexofString","running","started","skipToEnd","onNodeDestroy","prepareForNewTest","hasNextStep","step","onNextStep","onPause","hasPrevInput","previous","_state","prevInput","getCurrentInput","hasNextInput","testInput","machine_util_solveNFA_js__WEBPACK_IMPORTED_MODULE_1__","setResult","nextInput","getCurrentCache","nextChar","getFirstGraphNodeByLabel","skipFunc","curr_state","SUCCESS","FAILURE","PENDING","TestingInputList","addInput","inputIndex","reader","FileReader","testInputs","abort","readAsText","first","dirty","markDirty","TestingInput","onStatusClick","onSubmitClick","getInputByIndex","isInputFirst","getInput","newTest","removeInputByIndex","shouldTestOnly","getCurrentInputIndex","_StatusButton_js__WEBPACK_IMPORTED_MODULE_7__","active","placeholder","icons_IconButton_js__WEBPACK_IMPORTED_MODULE_4__","icons_AddIcon_js__WEBPACK_IMPORTED_MODULE_5__","icons_RemoveIcon_js__WEBPACK_IMPORTED_MODULE_6__","AddIcon","RemoveIcon","StatusButton","icons_IconButton_js__WEBPACK_IMPORTED_MODULE_2__","icons_SuccessIcon_js__WEBPACK_IMPORTED_MODULE_3__","icons_FailureIcon_js__WEBPACK_IMPORTED_MODULE_4__","icons_RunningManIcon_js__WEBPACK_IMPORTED_MODULE_6__","SuccessIcon","FailureIcon","RunningManIcon","UploadTestButton","PageNewContentIcon","CloseIcon","AnalysisPanel","optimizeUnreachOption","optimizeRedundOption","onConvertToDFA","onConvertToNFA","onOptimizeMachine","unreachableArray","modules_fsa_notifications_NFAToDFAConversionWarningMessage_js__WEBPACK_IMPORTED_MODULE_3__","onDeleteAllUnreachable","canOptimize","AboutPanel","InputController","_picker","_GraphPicker_js__WEBPACK_IMPORTED_MODULE_2__","prevPointerX","prevPointerY","isNewEdge","ghostInitialMarker","shouldDestroyPointlessEdges","_swapMouseScheme","_trashMode","_disabled","picker","_inputAdapter","getPointerX","getPointerY","updateTarget","hasTarget","getPicker","setInitialTarget","targetType","initialTarget","initialTargetType","hasSelection","isTargetInSelection","clearSelection","getStepByStepMode","prevX","prevY","deleteSelectedNodes","deleteTargetEdge","isMoveMode","openLabelEditor","toggleNode","modules_fsa_graph_FSANode_js__WEBPACK_IMPORTED_MODULE_3__","modules_fsa_graph_FSAEdge_js__WEBPACK_IMPORTED_MODULE_4__","targetQuad","prevQuad","edgeQuad","beginSelection","_targetQuad","prevEdgeTo","moveMultipleNodesTo","getSelection","moveNodeTo","moveEdgeTo","moveEndpointTo","getNodeAt","isSelecting","updateSelection","formatEdge","deleteEdge","changeDestinationNode","prevInitial","endSelection","clearTarget","enabled","shouldInputFirst","isAltInput","isDragging","isPointerActive","modules_abstract_AbstractModuleInputController_js__WEBPACK_IMPORTED_MODULE_0__","AbstractModuleInputController","setController","_viewportInputHandler","_ViewportInputHandler_js__WEBPACK_IMPORTED_MODULE_1__","system_inputadapter_AbstractInputController_js__WEBPACK_IMPORTED_MODULE_0__","ViewportInputHandler","_prevX","_prevY","getAdapter","addOffset","GraphPicker","selectionBox","fromX","fromY","toX","toY","visible","getNodeByInitialMarkerAt","getEdgeByEndPointAt","getEdgeAt","end","box","mx","my","lx","ly","getNodesWithin","GraphCurvedEdge","_quad","_coords","fromx","fromy","midpointx","midpointy","angleOffset","outrad","inrad","maxdr","getDirectionalVector","getSelfLoopHeight","prevDest","angle","formatAsPlaceholder","formatAsSelfLoop","coords","getQuadraticAsCoords","px","py","nodeSize","getMidPoint","qcoords","qx","qy","graph_GraphEdge_js__WEBPACK_IMPORTED_MODULE_0__","GraphController","modules_fsa_graph_FSAGraph_js__WEBPACK_IMPORTED_MODULE_4__","inputController","labelEditorElement","modules_fsa_graph_GraphLayout_js__WEBPACK_IMPORTED_MODULE_3__","applyLayout","isPrevCustom","newNodeLabel","getNextDefaultNodeLabel","selectedNode","selection","deleteNode","other","diameter","nextDX","nextDY","pos","getInputEventPosition","changeInputEventPosition","setQuadraticByCoords","prevLabel","openEditor","setOffset","ax","ay","modules_abstract_AbstractModuleGraphController_js__WEBPACK_IMPORTED_MODULE_0__","moveNodesOutOfEdges","xint","yint","m0","horizontal","toMove","signx","signy","toMovex","toMovey","util_Eventable_js__WEBPACK_IMPORTED_MODULE_2__","AbstractModuleGraphController","_graph","NodalGraph","nodeClass","_GraphNode_js__WEBPACK_IMPORTED_MODULE_0__","edgeClass","_GraphEdge_js__WEBPACK_IMPORTED_MODULE_1__","_nodeClass","_edgeClass","_nodeMapping","_edgeMapping","util_MathHelper_js__WEBPACK_IMPORTED_MODULE_2__","nullSourceEdges","_edge","setGraphElementID","clearEdges","clearNodes","getEdgeCount","maxX","maxY","minNX","Number","MAX_VALUE","minNY","maxNX","MIN_VALUE","maxNY","minEX","minEY","maxEX","maxEY","startPoint","endPoint","centerPoint","getStartPoint","sx","sy","ex","ey","string","MachineController","machineName","getLabelFormatter","machineType","setMachineName","modules_fsa_graph_GraphLayout_js__WEBPACK_IMPORTED_MODULE_2__","currentMachineType","machine_util_convertNFA_js__WEBPACK_IMPORTED_MODULE_3__","machine_DFA_js__WEBPACK_IMPORTED_MODULE_4__","setGraphToMachine","addCustomSymbol","removeCustomSymbol","prevSymbol","nextSymbol","_result","renameCustomSymbol","_symbols","isCustomSymbol","modules_abstract_AbstractModuleMachineController_js__WEBPACK_IMPORTED_MODULE_0__","util_Eventable_js__WEBPACK_IMPORTED_MODULE_1__","AbstractModuleMachineController","convertToDFA","machine_DFA_js__WEBPACK_IMPORTED_MODULE_0__","powerSetStates","newDFAStateFromNFA","getPowerSet","powerSetState","getStateFromSet","expandPowersetStateToDFA","trapState","newAlphabet","newTransition","dfa","hasState","terminals","dfaState","expandNFAStateToDFA","getSetFromState","setFinalState","FSAGraphRenderer","_NodeRenderer_js__WEBPACK_IMPORTED_MODULE_2__","_EdgeRenderer_js__WEBPACK_IMPORTED_MODULE_3__","_InitialMarkerRenderer_js__WEBPACK_IMPORTED_MODULE_4__","NodeRenderer","userSelect","fontSize","textAnchor","EdgeRenderer","SIXTH_PI","arrowAngle","quadCoords","edgeDir","getEdgeDirection","flipLabel","quadLine","_cx","_cy","transform","str","yy","alignmentBaseline","FSAGraphOverlayRenderer","getSelectionBox","content_workspace_renderer_HighlightRenderer_js__WEBPACK_IMPORTED_MODULE_2__","content_workspace_renderer_SelectionBoxRenderer_js__WEBPACK_IMPORTED_MODULE_1__","SelectionBoxRenderer","LabelEditor","getLabelEditor","_TestTray_js__WEBPACK_IMPORTED_MODULE_2__","content_viewport_CursorMode_js__WEBPACK_IMPORTED_MODULE_3__","content_viewport_TrashCan_js__WEBPACK_IMPORTED_MODULE_1__","TrashCan","staticTrash","setTrashMode","_Viewport_js__WEBPACK_IMPORTED_MODULE_2__","isUsingTouch","onMouseEnter","onTrashEnter","onMouseLeave","onTrashLeave","onTrashClick","MAX_STRING_PREV_LENGTH","MAX_ELLIPSIS_COUNT","TestTray","testIndex","getCurrentTestStringIndex","testOffset","onResume","isRunning","icons_PlayIcon_js__WEBPACK_IMPORTED_MODULE_3__","icons_PauseIcon_js__WEBPACK_IMPORTED_MODULE_4__","onPreviousStep","hasPrevStep","isSkipping","icons_UndoIcon_js__WEBPACK_IMPORTED_MODULE_6__","icons_RedoIcon_js__WEBPACK_IMPORTED_MODULE_7__","icons_StopIcon_js__WEBPACK_IMPORTED_MODULE_5__","PlayIcon","PauseIcon","StopIcon","CursorMode","actionMode","isActionMode","setInputScheme","icons_CreateIcon_js__WEBPACK_IMPORTED_MODULE_3__","icons_MoveIcon_js__WEBPACK_IMPORTED_MODULE_4__","CreateIcon","MoveIcon","FSABuilder","_machine","machine_NFA_js__WEBPACK_IMPORTED_MODULE_5__","_machineType","_machineValidDFA","_alphabet","_errorTimer","_DFAErrorChecker_js__WEBPACK_IMPORTED_MODULE_2__","onDelayedGraphChange","onDelayedErrorCheck","toNFA","checkErrors","allowNull","modules_fsa_graph_FSAEdge_js__WEBPACK_IMPORTED_MODULE_7__","symbolLength","subsymbol","machine_Symbols_js__WEBPACK_IMPORTED_MODULE_8__","_NFAErrorChecker_js__WEBPACK_IMPORTED_MODULE_3__","fillFSA","_MachineBuilder_js__WEBPACK_IMPORTED_MODULE_1__","modules_fsa_graph_FSANode_js__WEBPACK_IMPORTED_MODULE_6__","setStartState","DEFAULT_AUTO_RENAME","MachineBuilder","_MachineLabeler_js__WEBPACK_IMPORTED_MODULE_1__","onGraphNodeLabelChange","targetNodes","enable","shouldAutoLabel","MachineLabeler","isDefaultInitial","defaultNodes","customLabels","defaultName","getDefaultNodeLabelByIndex","nodeIndex","isUniqueNodeLabel","StateMissingTransitionErrorMessage","NFAErrorChecker","unReachedNode","modules_fsa_notifications_TransitionErrorMessage_js__WEBPACK_IMPORTED_MODULE_4__","EventManager","eventHandlers","events","_controller_events_GraphNodeMoveEventHandler_js__WEBPACK_IMPORTED_MODULE_1__","_controller_events_GraphNodeMoveAllEventHandler_js__WEBPACK_IMPORTED_MODULE_2__","_controller_events_GraphEdgeMoveEventHandler_js__WEBPACK_IMPORTED_MODULE_3__","_controller_events_GraphEdgeDestinationEventHandler_js__WEBPACK_IMPORTED_MODULE_4__","_controller_events_GraphNodeInitialEventHandler_js__WEBPACK_IMPORTED_MODULE_0__","_controller_events_GraphEdgeLabelEventHandler_js__WEBPACK_IMPORTED_MODULE_5__","_controller_events_UserCreateNodeEventHandler_js__WEBPACK_IMPORTED_MODULE_6__","_controller_events_UserRenameNodeEventHandler_js__WEBPACK_IMPORTED_MODULE_9__","_controller_events_UserToggleNodeEventHandler_js__WEBPACK_IMPORTED_MODULE_7__","_controller_events_UserDeleteNodesEventHandler_js__WEBPACK_IMPORTED_MODULE_8__","_controller_events_UserCreateEdgeEventHandler_js__WEBPACK_IMPORTED_MODULE_10__","_controller_events_UserDeleteEdgeEventHandler_js__WEBPACK_IMPORTED_MODULE_11__","_controller_events_UserImportGraphEventHandler_js__WEBPACK_IMPORTED_MODULE_12__","_controller_events_SafeGraphEventHandler_js__WEBPACK_IMPORTED_MODULE_13__","_controller_events_UserChangeMachineEventHandler_js__WEBPACK_IMPORTED_MODULE_14__","_controller_events_UserConvertMachineEventHandler_js__WEBPACK_IMPORTED_MODULE_15__","_controller_events_UserRenameMachineEventHandler_js__WEBPACK_IMPORTED_MODULE_16__","_controller_events_UserRenameSymbolEventHandler_js__WEBPACK_IMPORTED_MODULE_17__","_controller_events_UserDeleteSymbolEventHandler_js__WEBPACK_IMPORTED_MODULE_18__","GraphEdgeDestinationEventHandler","nextInitial","nodeID","prevID","getNodeByElementID","_EventHandler_js__WEBPACK_IMPORTED_MODULE_0__","GraphNodeMoveEventHandler","targetNode","nextX","nextY","GraphNodeMoveAllEventHandler","nodeIDs","GraphEdgeMoveEventHandler","targetEdge","nextQuad","edgeID","getEdgeByElementID","nextDestination","prevDestination","GraphEdgeLabelEventHandler","nextLabel","UserCreateNodeEventHandler","UserToggleNodeEventHandler","prevAccept","UserDeleteNodesEventHandler","graphData","modules_fsa_graph_FSAGraphParser_js__WEBPACK_IMPORTED_MODULE_1__","targetID","UserRenameNodeEventHandler","prevCustom","UserCreateEdgeEventHandler","fromID","toID","setSourceNode","UserDeleteEdgeEventHandler","prevTo","UserImportGraphEventHandler","graphName","SafeGraphEventHandler","UserChangeMachineEventHandler","nextMachineType","prevMachineType","prevType","nextType","UserConvertMachineEventHandler","UserRenameMachineEventHandler","nextMachineName","prevMachineName","prevName","nextName","UserRenameSymbolEventHandler","targetIDs","UserDeleteSymbolEventHandler","LABEL_OFFSET_Y","EDITOR_OFFSET_Y","RECOMMENDED_SYMBOLS","DEFAULT_SYMBOLS","modules_fsa_graph_FSAEdge_js__WEBPACK_IMPORTED_MODULE_3__","DELETE_ON_EMPTY","parentElement","inputElement","_prevValue","onFormat","defaultText","saveOnExit","appendValue","closeEditor","targetStyle","screenPos","transformViewToScreen","getOffsetX","getOffsetY","offsetX","offsetY","top","left","appendSymbol","ctm","getScreenCTM","FSAGraphExporter","newGraph","modules_fsa_graph_FSAGraphParser_js__WEBPACK_IMPORTED_MODULE_2__","machineData","customSymbols","statePrefix","getModuleVersion","timestamp","getCustomSymbols","fromJSON","toJSON","resolve","onerror","code","icons_flat_JSONIcon_js__WEBPACK_IMPORTED_MODULE_1__","modules_abstract_exporter_AbstractGraphExporter_js__WEBPACK_IMPORTED_MODULE_0__","JSONIcon","JFLAPGraphExporter","xmlData","xmlString","icons_flat_XMLIcon_js__WEBPACK_IMPORTED_MODULE_1__","XMLIcon","HotKeys","which","metaKey","redo","undo","imageExporter","_exporter","_machineName","BUG_REPORT_URL","Toolbar","langOn","onMachineNameChange","onMachineNameKeyDown","langOnClick","renameMachine","offline","navigator","onLine","_MachineName_js__WEBPACK_IMPORTED_MODULE_5__","serviceWorker","getRegistration","icons_OfflineIcon_js__WEBPACK_IMPORTED_MODULE_15__","getLocalizedModuleName","icons_PageNewIcon_js__WEBPACK_IMPORTED_MODULE_9__","_UploadButton_js__WEBPACK_IMPORTED_MODULE_3__","icons_UndoIcon_js__WEBPACK_IMPORTED_MODULE_11__","icons_RedoIcon_js__WEBPACK_IMPORTED_MODULE_12__","content_drawer_Drawer_js__WEBPACK_IMPORTED_MODULE_18__","icons_BugReportIcon_js__WEBPACK_IMPORTED_MODULE_17__","_HelpButton_js__WEBPACK_IMPORTED_MODULE_4__","icons_HelpIcon_js__WEBPACK_IMPORTED_MODULE_13__","icons_LanguageIcon_js__WEBPACK_IMPORTED_MODULE_14__","maxWidth","fetchLanguageFile","UploadButton","getImportFileTypes","HelpButton","hasMessages","MachineName","PageNewIcon","HelpIcon","LanguageIcon","OfflineIcon","BugReportIcon","DrawerExpander","closeDrawer","WORKSPACE_OFFSET_X","WORKSPACE_OFFSET_Y","EXPORT_PADDING_X","EXPORT_PADDING_Y","GRAPH_RENDER_LAYER","GRAPH_OVERLAY_RENDER_LAYER","Workspace","bounds","w","clone","cloneNode","uiElements","getElementsByClassName","remove","GraphRenderer","GraphOverlayRenderer","halfSize","_Subtitle_js__WEBPACK_IMPORTED_MODULE_3__","Subtitle","messageTimer","Tutorial","system_localsave_LocalSave_js__WEBPACK_IMPORTED_MODULE_1__","system_notification_Notifications_js__WEBPACK_IMPORTED_MODULE_0__","InputPointer","adapter","_adapter","_active","_x","_y","_inputpos","ViewportAdapter","_offsetX","_offsetY","_nextOffsetX","_nextOffsetY","_offsetDamping","_scaleFactor","_minScale","_maxScale","scale","damping","dscale","NotificationMessage","onExitMessage","getType","LAUNCH_BUTTON_TEXT","SMALL_LAUNCH_BUTTON_TEXT","SMALLER_LAUNCH_BUTTON_TEXT","TUTORIAL_BUTTON_TEXT","QUOTES","QUOTE_INDEX","CONTENT_QUOTE","CONTENT_SUBQUOTE","TUTORIAL_LINK","HELP_LINK","ABOUT_LINK","REPORT_BUG_LINK","GITHUB_LINK","PROFMINNES_LINK","MAYA_LINK","NOAH_LINK","DAVID_LINK","ERIK_LINK","LIXUAN_LINK","ANDREW_LINK","SETH_LINK","RAVNEET_LINK","LandingPage","footer","returnHome","onLaunchButton","onTutorialButton","onReturnHomeButton","onReportBugButton","onAboutButton","onHelpButton","onGithubButton","onscroll","scrollHeight","documentElement","clientHeight","innerHeight","scroll","pageYOffset","bottom","router_js__WEBPACK_IMPORTED_MODULE_3__","content_App_js__WEBPACK_IMPORTED_MODULE_6__","scrollTo","behavior","launchText","_Logo_js__WEBPACK_IMPORTED_MODULE_4__","_Quote_js__WEBPACK_IMPORTED_MODULE_5__","Logo","Quote","loadApplication","requestAnimationFrame","updateApplication","config_js__WEBPACK_IMPORTED_MODULE_6__","system_localsave_LocalSave_js__WEBPACK_IMPORTED_MODULE_7__","returnValue","isUpdateAvailable","then","hasUpdate","changelog_js__WEBPACK_IMPORTED_MODULE_2__","FRAMES_PER_SECOND","prevtime","all","__webpack_require__","_","default","content_App_js__WEBPACK_IMPORTED_MODULE_4__","landing_components_LandingPage_js__WEBPACK_IMPORTED_MODULE_5__","time","page","react_dom__WEBPACK_IMPORTED_MODULE_1___default","render","solveDFA","WorkingIcon","_unused_webpack_default_export","StateErrorMessage","MoreIcon","OfflinePinIcon"],"mappings":"uMAAA,IAAAA,EAAA,SAEAC,EAAA,CACAC,cAAA,EACAC,cAAA,EACAC,QAAA,GACAH,EAAAI,SAAA,SAAAC,EAAAC,GACA,IAAAC,KAAAC,eAAAH,GAQA,UAAAI,MAAA,wDANAF,KAAAL,cAAA,EACAK,KAAAJ,QAAA,EACAI,KAAAF,GAAAC,GAMAI,KAAAV,aACAA,EA2EA,SAAAW,IAEA,0BAAAC,QAGA,SAAAC,IAEA,IAAAC,EAAAC,aAAAC,QAAAjB,GAEA,GAAAe,EAOA,IAEAG,QAAAC,IAAA,qBACA,IAAAC,EAAAC,KAAAC,MAAAP,GACA,GAAAK,EAAA,cAGAG,IAGAC,KAIAC,OAAAC,OAAAzB,EAAAmB,GAGA,MAAAO,GAGAJ,SAxBAL,QAAAC,IAAA,2BA4BA,SAAAK,IAEA,GADAI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,IACA3B,EAAAE,cAAAF,EAAAG,OAEA,IAEAc,QAAAC,IAAA,oBACA,IAAAJ,EAAAM,KAAAU,UAAA9B,GACAe,aAAAgB,QAAAhC,EAAAe,GAEAd,EAAAG,QAAA,EAEA,MAAAuB,GAGAJ,KAKA,SAAAA,IAEAP,aAAAiB,WAAAjC,GAEAC,EAAAG,QAAA,EA3Ie8B,EAAA,IAKfjC,EAAAkC,2BAAA,eACAlC,EAAAmC,+BAAA,oBAEAnC,EAAAoC,qBAAA,IACApC,EAAAqC,yBAAA,GAGArC,EAAAsC,sBAAA,GACAtC,EAAAuC,mBAAA,MACAvC,EAAAwC,UAAA,GACAxC,EAAAyC,UAAA,GAGAzC,EAAA0C,cAAA,KAGA1C,EAAA2C,6BAAA,GACA3C,EAAA4C,gBAAA,IACA5C,EAAA6C,qBAAA,GACA7C,EAAA8C,iBAAA,GAGA9C,EAAA+C,WAAA,GACA/C,EAAAgD,UAAA,GACAhD,EAAAiD,QAAA,EACAjD,EAAAkD,OAAA,GACAlD,EAAAmD,SAAA,GACAnD,EAAAoD,WAAA,EAKApD,EAAAqD,mBAAA,GAGArD,EAAAsD,mBAAA,IAEAtD,EAAAuD,YAAA,GACAvD,EAAAwD,gBAAAxD,EAAAuD,YAAAvD,EAAAuD,YACAvD,EAAAyD,cAAA,EAAAzD,EAAAuD,YACAvD,EAAA0D,kBAAA,GAEA1D,EAAA2D,0BAAA3D,EAAAuD,YAAAvD,EAAAuD,YAAA,GAEAvD,EAAA4D,YAAA,GACA5D,EAAA6D,gBAAA7D,EAAA4D,YAAA5D,EAAA4D,YACA5D,EAAA8D,YAAA,GACA9D,EAAA+D,mBAAA,EAAA/D,EAAAuD,YACAvD,EAAAgE,gBAAA,EACAhE,EAAAiE,oBAAAjE,EAAAgE,gBAAAhE,EAAAgE,gBAEAhE,EAAAkE,oBAAA,EACAlE,EAAAmE,cAAA,EACAnE,EAAAoE,kBAAApE,EAAAmE,cAAAnE,EAAAmE,cAGAnE,EAAAqE,iBAAA,IACArE,EAAAsE,eAAA,IACAtE,EAAAuE,aAAA,GACAvE,EAAAwE,uCAAA,EACAxE,EAAAyE,gBAAA,GACAzE,EAAA0E,oBAAA1E,EAAAyE,gBAAAzE,EAAAyE,gBAGAzE,EAAA2E,mBAAA,wZAvFA5E,sFAEAC,yEA2FAW,6FAKAE,gFAmCAU,gFAoBAD,mvBCzJAsD,wBAEA,SAAAA,aAAAC,EAAAC,EAAAC,EAAAC,GACAC,gBAAA1E,KAAAqE,cACArE,KAAAsE,cACAtE,KAAAuE,aACAvE,KAAAwE,YACAxE,KAAAyE,iBAAA,KAEAzE,KAAA2E,QAAA3E,KAAA2E,QAAAxE,KAAAH,MAEAA,KAAAuE,WAAAK,GAAA5E,KAAAwE,UAAAxE,KAAA2E,2EAKA3E,KAAAuE,WAAAM,oBAAA7E,KAAAwE,UAAAxE,KAAA2E,2CAIA,IAAAG,EAAA9E,KACA+E,EAAA,GACAA,EAAAC,UAAAhF,KAAAgF,UAAA7E,KAAAH,KAAA+E,GACAA,EAAAE,UAAAjF,KAAAiF,UAAA9E,KAAAH,KAAA+E,GAEAA,EAAAG,UAAAlF,KAAAmF,aAAAC,MAAApF,KAAAoB,WAEApB,KAAAyE,cAGAzE,KAAAuE,WAAAc,KAAArF,KAAAyE,cAAA,WACAM,EAAAO,SAAAR,EAAAS,iBAAAH,MAAAN,EAAA1D,WAEA0D,EAAAR,YAAAa,aAAAJ,MAKAA,EAAAO,SAAAP,EAAAG,UAGAlF,KAAAsE,YAAAa,aAAAJ,2CAMA,oDAKA,2CAGA5D,sCAKAA,0JAMAkD,wCAAe3C,oBAAA,inBAlEf2C,wdCGA,QAEAxD,EAAA,CACAC,MADA,SACA0E,GACA,IADAC,EACArE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAEAqE,EACAA,EAAAC,QADAD,EAAA,IAAAE,EAAA,EAUA,IAPA,IAAAC,EAAAJ,EAAA,UACAK,EAAAC,KAAAC,IAAAH,EAAAvE,QAAA,EAAAmE,EAAA,cACAQ,EAAAR,EAAA,UACAS,EAAAH,KAAAC,IAAAC,EAAA3E,QAAA,EAAAmE,EAAA,cACAU,EAAAV,EAAA,WAEAW,EAAA,IAAAC,IACAC,EAAA,EAAAA,EAAAR,IAAAQ,EACA,CACA,IAAAC,EAAAV,EAAAS,GACA,GAAAC,EAAA,CAGA,IAAAC,EAAAd,EAAAe,WAAAF,EAAA,KAAAA,EAAA,KAAAA,EAAA,IACAC,EAAAE,aAAAH,EAAA,WACAC,EAAAG,cAAAJ,EAAA,YACAC,EAAAI,cAAAL,EAAA,YAEAH,EAAAS,IAAAP,EAAAE,IAGA,IAAAM,EAAAV,EAAAW,IAAAZ,GACAW,GAEApB,EAAAsB,aAAAF,GAGA,QAAAG,EAAA,EAAAA,EAAAf,IAAAe,EACA,CACA,IAAAC,EAAAjB,EAAAgB,GACA,GAAAC,EAAA,CACA,IAAAC,EAAAf,EAAAW,IAAAG,EAAA,YAEA,GAAAC,EAAA,CACA,IAAAC,EAAAhB,EAAAW,IAAAG,EAAA,UAEAG,EAAA3B,EAAA4B,WAAAH,EAAAC,EAAAF,EAAA,IACAK,EAAAL,EAAA,SACAG,EAAAG,aAAAN,EAAA,WACAG,EAAAI,aAAAF,EAAA,WAAAA,EAAA,aAGA,OAAA7B,GAEAgC,UAlDA,SAkDAC,GAUA,IARA,IAAAC,EAAAD,EAAAE,YAAA,GACA/B,EAAA8B,EAAAtG,QAAA,EACAwG,EAAAH,EAAAI,YAAA,GACA7B,EAAA4B,EAAAxG,QAAA,EACA0G,EAAAL,EAAAM,eAEApC,EAAA,IAAAqC,MAAApC,GACAM,EAAA,IAAAC,IACAC,EAAA,EAAAA,EAAAR,IAAAQ,EACA,CACA,IAAAE,EAAAoB,EAAAtB,GACA,GAAAE,EACA,CAEA,IAAA2B,EAAA3B,EAAA4B,oBAEAhC,EAAAS,IAAAL,EAAAF,GACAT,EAAAS,GAAA,CACA+B,GAAAF,EACAG,EAAA9B,EAAA8B,GAAA,EAAAC,EAAA/B,EAAA+B,GAAA,EACAC,MAAAhC,EAAAiC,gBAAA,GACAC,OAAAlC,EAAAmC,kBAAA,EACAC,OAAApC,EAAAqC,kBAAA,IAMA,IADA,IAAA5C,EAAA,IAAAiC,MAAAhC,GACA4C,EAAA,EAAAA,EAAA5C,IAAA4C,EACA,CACA,IAAAzB,EAAAS,EAAAgB,GACA,GAAAzB,EACA,CAEA,IAAA0B,EAAA1B,EAAAe,oBAEAY,EAAA3B,EAAA4B,gBAAA,GACAC,EAAA7B,EAAA8B,gBACAC,EAAA/B,EAAAgC,qBACAC,EAAAlD,EAAAmD,IAAAL,GAAA9C,EAAAW,IAAAmC,IAAA,EACAM,EAAApD,EAAAmD,IAAAH,GAAAhD,EAAAW,IAAAqC,IAAA,EACAnD,EAAA6C,GAAA,CACAT,GAAAU,EACAU,KAAAH,EACAI,GAAAF,EACAR,KAAA,CAAAW,QAAAX,EAAA,WAAA1H,OAAA0H,EAAA,WACAR,MAAAnB,EAAAuC,gBAAA,KAOA,OACA9D,YACA+D,MAAAhE,EACAK,YACA4D,MAAA7D,EACA8D,QAPA3D,EAAAW,IAAAiB,IAAA,EAQAgC,SAjHA,WAsHAC,EAAA,CACAlJ,MADA,SACA0E,GACA,IADAC,EACArE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA6I,KAEAxE,EACAA,EAAAC,QADAD,EAAA,IAAAE,EAAA,EAWA,IARA,IAAAuE,EAAA1E,EAAA2E,qBAAA,aACAtE,EAAAqE,EAAA7I,OACA+I,EAAA5E,EAAA2E,qBAAA,kBACAlE,EAAAmE,EAAA/I,OACA6E,EAAA,IAGAmE,EAAA,IAAAjE,IACAC,EAAA,EAAAA,EAAAR,IAAAQ,EACA,CACA,IAAAiE,EAAAJ,EAAA7D,GACA,GAAAiE,EAAA,CACA,IAAAC,EAAAD,EAAAE,aAAA,MACA,GAAAD,EAAA,CAGA,IAAAlC,EAAA,EACAoC,EAAAH,EAAAH,qBAAA,KAEA,GAAAM,EAAApJ,OAAA,EACA,CACA,IAAAqJ,EAAAD,EAAA,GACA,GAAAC,EAAAC,gBACA,CAEA,IAAAC,EAAAF,EAAAG,WAAA,GACA,GAAAD,EAEA,IAEAvC,EAAAyC,WAAAF,EAAAG,YAAA,EAEA,MAAA5J,GAEAkH,EAAA,IAOA,IAAAC,EAAA,EACA0C,EAAAV,EAAAH,qBAAA,KAEA,GAAAa,EAAA3J,OAAA,EACA,CACA,IAAA4J,EAAAD,EAAA,GACA,GAAAC,EAAAN,gBACA,CAEA,IAAAO,EAAAD,EAAAJ,WAAA,GACA,GAAAK,EAEA,IAEA5C,EAAAwC,WAAAI,EAAAH,YAAA,EAEA,MAAA5J,GAEAmH,EAAA,IAOA,IAEAwB,EAFAQ,EAAAH,qBAAA,WAEA9I,OAAA,EAKA8J,EAFAb,EAAAH,qBAAA,SAEA9I,OAAA,EAGAkF,EAAAd,EAAAe,WAAA6B,EAAAC,GACA/B,EAAAE,aAAA6D,EAAAE,aAAA,aACAjE,EAAAG,cAAAyE,GAEArB,IAAA5D,EAAAqE,GACAF,EAAAzD,IAAA2D,EAAAhE,KAIA,IAAAM,EAAAwD,EAAAvD,IAAAZ,GACAW,GAEApB,EAAAsB,aAAAF,GAUA,IANA,IAAAuE,EAAA3F,EAAA4F,kBACAC,EAAAF,EAAAE,KACAC,EAAAH,EAAAG,KACAC,EAAAJ,EAAAI,MACAC,EAAAL,EAAAK,OACA9D,EAAAlC,EAAAmC,WACA8D,EAAA,EAAAC,EAAAhE,EAAAtG,OAAAqK,EAAAC,IAAAD,EAEA/D,EAAA+D,GAAArD,GAAAiD,EAAAE,EAAA,EACA7D,EAAA+D,GAAApD,GAAAiD,EAAAE,EAAA,EAKA,IADA,IAAAG,EAAA,IAAAxF,IACAyF,EAAA,EAAAA,EAAA5F,IAAA4F,EACA,CACA,IAAAC,EAAA1B,EAAAyB,GACA,GAAAC,EAAA,CAGA,IAAAC,EAAA,KACAC,EAAAF,EAAA3B,qBAAA,QAEA,GAAA6B,EAAA3K,OAAA,EACA,CACA,IAAA4K,EAAAD,EAAA,GACA,GAAAC,EAAAtB,gBACA,CAEA,IAAAuB,EAAAD,EAAApB,WAAA,GACAqB,IAEAH,EAAAG,EAAAnB,YAMA,GAAAV,EAAAf,IAAAyC,GAAA,CAGA,IAAAI,EAAA,GACAC,EAAAN,EAAA3B,qBAAA,MAEA,GAAAiC,EAAA/K,OAAA,EACA,CACA,IAAAgL,EAAAD,EAAA,GACA,GAAAC,EAAA1B,gBACA,CAEA,IAAA2B,EAAAD,EAAAxB,WAAA,GACAyB,IAEAH,EAAAG,EAAAvB,WAAA,KAMA,IAAAwB,EAAA,GACAC,EAAAV,EAAA3B,qBAAA,QAEA,GAAAqC,EAAAnL,OAAA,EACA,CACA,IAAAoL,EAAAD,EAAA,GACA,GAAAC,EAAA9B,gBACA,CAEA,IAAA+B,EAAAD,EAAA5B,WAAA,GACA6B,IAEAH,EAAAG,EAAA3B,WAAA,KAKA,IAAA4B,EAAAZ,EAAA,KAAAI,EACAS,OAAA,EACAhB,EAAAtC,IAAAqD,GAEAC,EAAAhB,EAAA9E,IAAA6F,IAIAC,EAAA,GACAhB,EAAAhF,IAAA+F,EAAAC,IAEAA,EAAAC,KAAAN,KAvLA,IAAAO,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IA0LA,QAAA2L,EAAAC,GAAAtB,EAAAuB,OAAAC,OAAAC,cAAAP,GAAAG,EAAAC,GAAAI,QAAAC,MAAAT,GAAA,EACA,KADAU,GACAP,EAAAlN,MACAD,GAAA0N,GAAAC,MAAA,MACA,OAAA3N,GAAAuB,OAAA,CAEA,IACAkH,GADAqD,EAAA9E,IAAA0G,IACAE,KAAAC,EAAA,GAEAzG,GAAAmD,EAAAvD,IAAAhH,GAAA,IACAqH,GAAAkD,EAAAvD,IAAAhH,GAAA,IAGA2F,EAAA4B,WAAAH,GAAAC,IACAI,aAAAgB,MAvMA,MAAAqF,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,GAAAW,QAAAX,GAAAW,SAAA,WAAAd,EAAA,MAAAC,GA0MA,OAAAvH,GAEAgC,UA9MA,SA8MAC,GAEA,IAAAC,EAAAD,EAAAE,YAAA,GACA/B,EAAA8B,EAAAtG,QAAA,EACAwG,EAAAH,EAAAI,YAAA,GAEAC,GADAF,EAAAxG,OACAqG,EAAAM,gBAMA8F,GADA,IAAAC,WACAC,gBAJA,uHAIA,mBACAC,EAAAH,EAAA3D,qBAAA,gBAEA+D,EAAAJ,EAAAK,cAAA,QACAD,EAAAE,UAAA,KACAH,EAAAI,YAAAH,GAEA,IAAAI,EAAAR,EAAAK,cAAA,aACAF,EAAAI,YAAAC,GAGA,IADA,IAAAnI,EAAA,IAAAC,IACAC,EAAA,EAAAA,EAAAR,IAAAQ,EACA,CACA,IAAAE,EAAAoB,EAAAtB,GACAF,EAAAS,IAAAL,EAAAF,GAGA,IAAAkI,EAAAT,EAAAK,cAAA,SACAI,EAAAnG,GAAA,GAAA/B,EACAkI,EAAAC,aAAA,OAAAjI,EAAAiC,gBACA8F,EAAAD,YAAAE,GAGA,IAAAlG,EAAAyF,EAAAK,cAAA,KACA9F,EAAA+F,UAAA,IAAA7H,EAAA8B,GAAA,GACAkG,EAAAF,YAAAhG,GAGA,IAAAC,EAAAwF,EAAAK,cAAA,KACA7F,EAAA8F,UAAA,IAAA7H,EAAA+B,GAAA,GACAiG,EAAAF,YAAA/F,GAGAP,IAAAxB,GAEAgI,EAAAF,YAAAP,EAAAK,cAAA,YAIA5H,EAAAmC,iBAEA6F,EAAAF,YAAAP,EAAAK,cAAA,UApDA,IAAAM,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IAwDA,QAAAsN,EAAAC,EAAAhH,EAAAuF,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA,KADArH,EACAwH,EAAA7O,MACA6M,EAAAxF,EAAA0H,0BADAC,GAAA,EAAAC,GAAA,EAAAC,OAAA3N,EAAA,IAEA,QAAA4N,EAAAC,EAAAvC,EAAAQ,OAAAC,cAAA0B,GAAAG,EAAAC,EAAA7B,QAAAC,MAAAwB,GAAA,EACA,KADAxC,EACA2C,EAAAnP,MAEAqP,EAAAtB,EAAAK,cAAA,cACAG,EAAAD,YAAAe,GAGA,IAAA5F,EAAAsE,EAAAK,cAAA,QACA3E,EAAA4E,UAAA,IAAAjI,EAAAW,IAAAM,EAAA8B,kBAAA,GACAkG,EAAAf,YAAA7E,GAGA,IAAAC,EAAAqE,EAAAK,cAAA,MACA1E,EAAA2E,UAAA,IAAAjI,EAAAW,IAAAM,EAAAgC,uBAAA,GACAgG,EAAAf,YAAA5E,GAGA,IAAA4F,EAAAvB,EAAAK,cAAA,QACAkB,EAAAjB,UAAA,IAAA7B,GAAA,IACA6C,EAAAf,YAAAgB,IArBA,MAAAzB,GAAAoB,GAAA,EAAAC,EAAArB,EAAA,YAAAmB,GAAA,MAAAI,EAAAtB,QAAAsB,EAAAtB,SAAA,WAAAmB,EAAA,MAAAC,KAzDA,MAAArB,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,GAkFA,OAAAb,4cAvZA,0HAEAjN,oGAoHAmJ,+hECtHAsF,sCAEA,SAAAA,WAAAC,GACA,OAAA7K,gBAAA1E,KAAAsP,YAAAE,2BAAAxP,KAAAyP,gBAAAH,YAAAI,KAAA1P,KACAuP,0GAKA,OAAAI,2CAAAC,EAAAzB,cAAA,UACA0B,UAAA,eAAA7P,KAAAuP,MAAAM,UACAzH,GAAApI,KAAAuP,MAAAnH,GACA0H,MAAA9P,KAAAuP,MAAAO,MACAC,MAAA/P,KAAAuP,MAAAQ,MACAC,SAAAhQ,KAAAuP,MAAAS,SACAC,QAAAjQ,KAAAuP,MAAAU,SACAjQ,KAAAuP,MAAAW,mJAhBAP,2CAAAC,EAAAO,oBAqBAb,sCAAe5N,oBAAA,6jBArBf4N,gbCHA,QAAAc,EAAA,IACAC,EAAA,IACAC,EAAA,0aAFAF,oFACAC,oFACAC,4LCCA,QAAAC,EAAA,IAAAC,EAAA,IACAD,EAAe7O,EAAA,6cADf6O,qTCAA,QAAAA,EAAA,IAAAE,EAAA,IACAF,EAAe7O,EAAA,+bADf6O,+ZCHA,QAAAG,EAAA,cACAC,EAAA,QAEA,SAAAC,EAAAC,EAAAC,GACA,IADAC,EACA3P,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAAAqE,EACArE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,GAEA4P,EAAAlL,KAAAmL,IAAAJ,GAMA,OALAE,MAAAF,EAAA,EAAAF,EAAAD,GAEAjL,EAAA,GAAAqL,EAAA,GAAAhL,KAAAoL,MAAAF,GAAAD,EAAA,GAAAD,EAAA,KACArL,EAAA,GAAAqL,EAAA,GAAAhL,KAAAoL,MAAAF,GAAAD,EAAA,GAAAD,EAAA,KACArL,EAAA,GAAAqL,EAAA,GAAAhL,KAAAoL,MAAAF,GAAAD,EAAA,GAAAD,EAAA,KACArL,EAGA,SAAA0L,EAAAC,GACA,IADAC,EACAjQ,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GADAqE,EACArE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,GAwBA,OAtBAiQ,EAGA,KAAAD,EAAA,QAAAA,EAAA,QAAAA,EAAA,QAEA3L,EAAA,KACAA,EAAA,KACAA,EAAA,OAIAA,EAAA,OACAA,EAAA,OACAA,EAAA,SAKAA,EAAA,OAAA2L,EAAA,GACA3L,EAAA,OAAA2L,EAAA,GACA3L,EAAA,OAAA2L,EAAA,IAEA3L,EAIA,SAAA6L,EAAAC,GACA,IADA9L,EACArE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,GAIA,GAFA,IAAAmQ,EAAAC,QAAA,OAAAD,IAAAE,MAAA,IACA,IAAAF,EAAAlQ,SAAAkQ,IAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IACA,IAAAA,EAAAlQ,OAAA,UAAAnB,MAAA,4BACA,IAAAwR,EAAAH,EAAAI,UAAA,KACAC,EAAAL,EAAAI,UAAA,KACAE,EAAAN,EAAAI,UAAA,KAKA,OAHAlM,EAAA,GAAAqM,SAAAJ,EAAA,IACAjM,EAAA,GAAAqM,SAAAF,EAAA,IACAnM,EAAA,GAAAqM,SAAAD,EAAA,IACApM,EAEA,SAAAsM,EAAAX,GAEA,WAAAA,EAAA,GAAAA,EAAA,MAAAA,EAAA,cAAAY,SAAA,IAAAP,MAAA,GAEA,SAAAQ,EAAAb,GACA,IADA3L,EACArE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,GAEA8Q,EAAAd,EAAA,OACAe,EAAAf,EAAA,OACAgB,EAAAhB,EAAA,OACAiB,EAAAvM,KAAAuM,IAAAH,EAAAC,EAAAC,GACArM,EAAAD,KAAAC,IAAAmM,EAAAC,EAAAC,GACAE,EAAAD,EAAAtM,EAEAwM,EAAA,EACAC,EAAA,GAAAH,EAAA,EAAAC,EAAAD,EACAI,EAAAJ,EACA,GAAAA,GAAAtM,EAEAwM,EAAA,MAGA,CACA,OAAAF,GAEA,KAAAH,EAAAK,GAAAJ,EAAAC,GAAAE,GAAAH,EAAAC,EAAA,WACA,KAAAD,EAAAI,GAAAH,EAAAF,GAAAI,EAAA,QACA,KAAAF,EAAAG,GAAAL,EAAAC,GAAAG,EAAA,EAGAC,GAAA,EAMA,OAHA9M,EAAA,GAAA8M,EACA9M,EAAA,GAAA+M,EACA/M,EAAA,GAAAgN,EACAhN,EAEA,SAAAiN,EAAAH,EAAAC,EAAAC,GACA,IADAhN,EACArE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,GAEA8Q,EAAA,EAAAC,EAAA,EAAAC,EAAA,EACA/L,EAAAP,KAAA6M,MAAA,EAAAJ,GACAK,EAAA,EAAAL,EAAAlM,EACAwM,EAAAJ,GAAA,EAAAD,GACAM,EAAAL,GAAA,EAAAG,EAAAJ,GACAO,EAAAN,GAAA,KAAAG,GAAAJ,GACA,OAAAnM,EAAA,GAEA,OAAA6L,EAAAO,EAAAN,EAAAY,EAAAX,EAAAS,EAAA,MACA,OAAAX,EAAAY,EAAAX,EAAAM,EAAAL,EAAAS,EAAA,MACA,OAAAX,EAAAW,EAAAV,EAAAM,EAAAL,EAAAW,EAAA,MACA,OAAAb,EAAAW,EAAAV,EAAAW,EAAAV,EAAAK,EAAA,MACA,OAAAP,EAAAa,EAAAZ,EAAAU,EAAAT,EAAAK,EAAA,MACA,OAAAP,EAAAO,EAAAN,EAAAU,EAAAT,EAAAU,EAMA,OAHArN,EAAA,OAAAyM,EACAzM,EAAA,OAAA0M,EACA1M,EAAA,OAAA2M,EACA3M,0aAlHAiL,yFACAC,yFAEAC,wFAWAO,yFA4BAG,wFAcAS,wFAIAE,wFAiCAS,uvEC3FA,IAAAM,iBAAA,IACAC,WAAA,IAEAC,iCAEA,SAAAA,QAAA9K,EAAAoB,GACA,IADAC,EACArI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KACA,OAAAsD,gBAAA1E,KAAAkT,SAAA1D,2BAAAxP,KAAAyP,gBAAAyD,SAAAxD,KAAA1P,KACAoI,EAAAoB,EAAAC,sGAIAlB,GAEA,iBAAAA,EAEA4K,KAAA1D,gBAAAyD,QAAAE,WAAA,eAAApT,MAAA0P,KAAA1P,KAAAuI,GAIA4K,KAAA1D,gBAAAyD,QAAAE,WAAA,eAAApT,MAAA0P,KAAA1P,KAAAiT,8DAMA,OAAAjT,KAAA2J,eAAA8D,MAAAuF,wJAtBAK,oDAAA,YA0BAH,mCAAexR,oBAAA,+kBA7BfsR,qIACAC,yHAEAC,4zECFAI,6BAEA,SAAAA,QAAAlL,EAAAC,EAAAC,GACA,IAAAxD,EAAA,OAAAJ,gBAAA1E,KAAAsT,UACAxO,EAAA0K,2BAAAxP,KAAAyP,gBAAA6D,SAAA5D,KAAA1P,KAAAoI,EAAAC,EAAAC,KAEAiL,SAAA,EAGAzO,EAAA0O,SAAA,EANA1O,iGASA/E,GAEAC,KAAAuT,QAAAxT,0CAKA,OAAAC,KAAAuT,8CAGAxT,GAEAC,KAAAwT,QAAAzT,0CAKA,OAAAC,KAAAwT,8CAMA,OAAAC,uCAAA,EAAAzQ,oDAKA,IADA0Q,IACAtS,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACA,OAAA+R,KAAA1D,gBAAA6D,QAAAF,WAAA,gBAAApT,MAAA0P,KAAA1P,KAAA0T,GAAA,KAAA1T,KAAAuT,QAAA,+IAzCAI,gDAAA,YA6CAL,mCAAe5R,oBAAA,+kBA7Cf4R,+4ECAA,IAAAM,sBAAA,WAEAC,oCAEA,SAAAA,SAAAtE,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAA6T,WACA/O,EAAA0K,2BAAAxP,KAAAyP,gBAAAoE,UAAAnE,KAAA1P,KAAAuP,KAEAuE,IAAA,KACAhP,EAAAiP,YAAA,KAEAjP,EAAAyJ,MAAA,CACAyF,SAAAH,SAAAI,OACAC,KAAAL,SAAAI,QARAnP,oGAcA,IAAAqP,EAAAnU,KACAoU,EAAApU,KAAAuP,MAAA6E,cAKAC,GAJAD,EAAAE,qBACAF,EAAAG,qBACAH,EAAAI,uBAEAJ,EAAAK,YAAAb,wBAEA,OAAAjE,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,+BAAA7P,KAAAuO,MAAA2F,KAAAJ,IAAA,SAAAY,GAAA,OAAAP,EAAAL,IAAAY,IACAL,GACA1E,2CAAAC,EAAAzB,cAAAkG,EAAAM,SAAA,GAAA3U,KAAAuP,MAAA,CAAAqF,OAAA5U,gJA3BA2P,2CAAAC,EAAAO,WA+BA0D,SAAAI,OAAA,SACAJ,SAAAgB,QAAA,UACAhB,SAAAiB,QAAA,UACAjB,SAAAkB,UAAA,yBAEAlB,oCAAenS,oBAAA,+kBAtCfkS,+IAEAC,q1ECCAmB,uCAEA,SAAAA,YAAAzF,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAAgV,cACAlQ,EAAA0K,2BAAAxP,KAAAyP,gBAAAuF,aAAAtF,KAAA1P,KAAAuP,KAEA0F,SAAAtF,2CAAAC,EAAAsF,YAHApQ,0GAQA,QAAA9E,KAAAiV,SAAA1G,OAAAvO,KAAAiV,SAAA1G,MAAA4G,sCAIA,IAAAhB,EAAAnU,KACA,OAAA2P,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,gBAAA7P,KAAAuP,MAAAM,WACAF,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,gBAAAI,QAAA,SAAA9O,GAAA,OAAAgT,EAAAc,SAAAhF,QAAA9O,KACAwO,2CAAAC,EAAAzB,cAAA,aAAAnO,KAAAuP,MAAAO,OACAH,2CAAAC,EAAAzB,cAAA,iBAAAnO,KAAAuP,MAAAhH,MAAA,KACAoH,2CAAAC,EAAAzB,cAAAiH,iDAAA,GAAAhN,GAAA,WAAA0L,IAAA,SAAAY,GAAA,OAAAP,EAAAc,SAAAP,GAAAW,aAAArV,KAAAuP,MAAA8F,aACAtF,MAAA,CAAAuF,cAAA,SACA3F,2CAAAC,EAAAzB,cAAAoH,mDAAA,UAGA5F,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,iBACAE,MAAA,CAAAyF,QAAAxV,KAAAyV,SAAA,iBACAzV,KAAAuP,MAAAW,qJA3BAP,2CAAAC,EAAAO,oBAiCA6E,uCAAetT,oBAAA,mnBAjCfsT,iXCNA,SAAAU,IAEA,SAAAC,IAEA,OAAA7P,KAAA6M,MAAA,SAAA7M,KAAA8P,WAAA5D,SAAA,IAAAL,UAAA,GAEA,OAAAgE,QAAA,IAAAA,IAAA,IAAAA,IAAA,IAAAA,IAAA,IAAAA,YAGA,SAAAE,EAAAjG,EAAAwC,EAAA0D,GAEA,OAAAlG,GAAA,EAAAkG,GAAA1D,EAAA0D,EAGA,SAAAC,IAGA,IAFA,IADAhW,EACAqB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,GAEA4U,EAAA,EACA3P,EAAA,EAAAsF,EAAA5L,EAAAsB,OAAAgF,EAAAsF,EAAAtF,IAEA2P,EAAAlQ,KAAAmQ,KAAA,GAAAD,GAAAjW,EAAAmW,WAAA7P,GAAA,EAEA,OAAA2P,kgBArBAN,mFASAG,mFAKAE,2hECXAI,wCAEA,SAAAA,aAAA5G,GACA,OAAA7K,gBAAA1E,KAAAmW,cAAA3G,2BAAAxP,KAAAyP,gBAAA0G,cAAAzG,KAAA1P,KACAuP,8GAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,kCAAA7P,KAAAuP,MAAAM,WACAF,2CAAAC,EAAAzB,cAAA,aAAAnO,KAAAuP,MAAAhH,OACAoH,2CAAAC,EAAAzB,cAAA,YAAAnO,KAAAuP,MAAA6G,qJAXAzG,2CAAAC,EAAAO,oBAgBAgG,wCAAezU,oBAAA,qnBAhBfyU,4cCHA,QAGA,SAAAE,EAAAC,EAAAC,GAEAC,EAAAF,EAAAG,EAAAF,IAGA,SAAAG,EAAAJ,EAAAK,EAAAC,EAAApL,EAAAC,GAEA,IACAoL,GADA,IAAAC,eACAC,kBAAAH,GACAI,EAAA,IAAAC,KAAA,CAAAJ,GAAA,CAAA3I,KAAA,kBACAgJ,EAAAC,IAAAC,gBAAAJ,GAEAK,EAAAC,SAAAnJ,cAAA,UACAoJ,EAAAF,EAAAG,WAAA,MACAC,EAAAC,OAAAC,kBAAA,EACAN,EAAA7L,QAAAiM,EACAJ,EAAA5L,SAAAgM,EACAJ,EAAAtH,MAAAvE,QAAA,KACA6L,EAAAtH,MAAAtE,SAAA,KACA8L,EAAAK,aAAAH,EAAA,IAAAA,EAAA,KAEA,IAAAI,EAAA,IAAAC,MACAD,EAAAE,OAAA,WACAR,EAAAS,UAAAH,EAAA,KACAV,IAAAc,gBAAAf,GAEA,IAAAgB,EAAAb,EAAAc,UAAA,SAAAxB,GAAAyB,QAAA,SAAAzB,EAAA,sBACAH,EAAAF,EAAA,IAAAK,EAAAuB,IAEAL,EAAAQ,IAAAnB,EAGA,SAAAV,EAAAF,EAAAY,GAEA,IAAAoB,EAAAhB,SAAAnJ,cAAA,KACAoK,EAAArB,EAAA1F,QAAA,KACA0F,IAAAvF,UAAA,EAAA4G,EAAA,gEAAAjC,EAAA,IAAAY,EAAAvF,UAAA4G,EAAA,GACAD,EAAA9J,aAAA,OAAA0I,GACAoB,EAAA9J,aAAA,WAAA8H,GAEAgC,EAAAvI,MAAAyF,QAAA,OACA8B,SAAAkB,KAAAnK,YAAAiK,GAEAA,EAAAG,QACAnB,SAAAkB,KAAAE,YAAAJ,GAGA,SAAA7B,EAAAjR,GAEA,wCAAAmT,mBAAAnT,yaApDA,gGACA,gGAEA6Q,2FAKAK,0FA2BAF,0FAeAC,0qEC3CAmC,qCAEA,SAAAA,UAAArJ,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAA4Y,YACA9T,EAAA0K,2BAAAxP,KAAAyP,gBAAAmJ,WAAAlJ,KAAA1P,KAAAuP,KAEA0F,SAAAtF,2CAAAC,EAAAsF,YAHApQ,sGAQA,QAAA9E,KAAAiV,SAAA1G,OAAAvO,KAAAiV,SAAA1G,MAAA4G,sCAIA,IAAAhB,EAAAnU,KACA,OAAA2P,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,uBAAA7P,KAAAuP,MAAAM,WACAF,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,mBAAAI,QAAA,SAAA9O,GAAA,OAAAgT,EAAAc,SAAAhF,QAAA9O,KACAwO,2CAAAC,EAAAzB,cAAA,aAAAnO,KAAAuP,MAAAO,OACAH,2CAAAC,EAAAzB,cAAAiH,iDAAA,GAAAhN,GAAA,WAAA0L,IAAA,SAAAY,GAAA,OAAAP,EAAAc,SAAAP,GAAAW,aAAArV,KAAAuP,MAAA8F,aACAtF,MAAA,CAAAuF,cAAA,SACA3F,2CAAAC,EAAAzB,cAAAoH,mDAAA,UAGA5F,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,oBACAE,MAAA,CAAAyF,QAAAxV,KAAAyV,SAAA,iBACAzV,KAAAuP,MAAAW,mJA1BAP,2CAAAC,EAAAO,oBAgCAyI,qCAAelX,oBAAA,2nBAhCfkX,u8DCLA,IAAAC,IAAA,EACAC,OAAA,EACAC,IAAA,EAEAC,mBAEA,SAAAA,MACA,OAAAtU,gBAAA1E,KAAAgZ,KAAAxJ,2BAAAxP,KAAAyP,gBAAAuJ,KAAAtJ,KAAA1P,qFAQA,OADAU,QAAAuY,MAAA,mDACAjZ,KAAAkZ,mDAIAC,EAAAC,EAAA7M,GAEA,IAAAvM,KAAAqZ,QAAAC,SAAAH,GAEA,UAAAjZ,MAAA,UAAAiZ,EAAA,qBAGA,IAAAnZ,KAAAqZ,QAAAC,SAAAF,GAEA,UAAAlZ,MAAA,UAAAkZ,EAAA,qBARA,IAAAtM,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAWA,QAAA2L,EAAAC,EAAAlN,KAAAuZ,aAAAnM,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADAsC,EACAnC,EAAAlN,MAEA,GAAAqP,EAAAyJ,MAAAM,GAAA/J,EAAA0J,SAAAvM,GAAA6C,EAAA2J,MAAAK,EAEA,OAGA,GAAAhK,EAAAyJ,MAAAM,GAAA/J,EAAA0J,SAAAvM,EAEA,UAAArM,MAAA,kEArBA,MAAA0N,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GA0BAhN,KAAAuZ,aAAA1M,KAAA,CAAAsM,EAAA5M,EAAA6M,sIA1CAI,qCAAA,YA8CAR,+BAAetX,oBAAA,mjBAlDfmX,6FACAC,mGACAC,6FAEAC,y9DCJAS,sCAEA,SAAAA,WAAAlK,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAAyZ,aACA3U,EAAA0K,2BAAAxP,KAAAyP,gBAAAgK,YAAA/J,KAAA1P,KAAAuP,KAEAmK,SAAA5U,EAAA4U,SAAAvZ,KAAAwZ,8CAAA7U,KAHAA,wGAMA3D,GAEA,IAAAyY,EAAAzY,EAAA0Y,OAAA9Z,MACAA,EAAAC,KAAAuP,MAAAxP,MACA2Z,EAAA1Z,KAAAuP,MAAAmK,SAEA3Z,EAAA+Z,SAAAF,GACAF,KAAA3Z,oCAMA,IAAA+P,EAAA9P,KAAAuP,MAAAO,MACA/P,EAAAC,KAAAuP,MAAAxP,MACAga,EAAAha,EAAAia,KACAC,EAAAla,EAAAmO,KACAgM,EAAA,YAAAH,EAEA,OAAApK,2CAAAC,EAAAzB,cAAA,QAAA/F,GAAApI,KAAAuP,MAAAnH,GAAAyH,UAAA7P,KAAAuP,MAAAM,UAAAE,MAAA/P,KAAAuP,MAAAQ,OACAJ,2CAAAC,EAAAzB,cAAA,SAAA/F,GAAA8R,EAAAhM,KAAA+L,EAAAla,QAAAoa,WAAAT,SAAA1Z,KAAA0Z,SAAA1J,SAAAhQ,KAAAuP,MAAAS,WACAL,2CAAAC,EAAAzB,cAAA,SAAAiM,QAAAF,GAAApK,6IA9BAH,2CAAAC,EAAAO,oBAkCAsJ,sCAAe/X,oBAAA,umBAlCf+X,qlECCA,IAAAY,wBAAA,EACAC,qBAAA,EACAC,qBAAA,MAEAC,6CAEA,SAAAA,kBAAAjL,GACA,OAAA7K,gBAAA1E,KAAAwa,mBAAAhL,2BAAAxP,KAAAyP,gBAAA+K,mBAAA9K,KAAA1P,KACAuP,wHAKA,IAAAsK,EAAA7Z,KAAAuP,MAAAsK,OACA3L,EAAAlO,KAAAuP,MAAArB,KAEA7F,EAAA,EACAC,EAAA,EACA4J,EAAAuB,uCAAA,EAAA7P,cACA,OAAAsK,GAEA,WACA7F,EAAAwR,EAAAxR,GAAA,EACAC,EAAAuR,EAAAvR,GAAA,EACA4J,EAAAuB,uCAAA,EAAAzQ,YACA,MACA,WACA,IAAAyX,EAAAZ,EAAAa,iBACArS,EAAAoS,EAAApS,GAAA,EACAC,EAAAmS,EAAAnS,GAAA,EACA4J,EAAAuB,uCAAA,EAAApQ,YACA,MACA,eACA,IAAAsX,EAAAd,EAAAe,cACAvS,EAAAsS,EAAAtS,GAAA,EACAC,EAAAqS,EAAArS,GAAA,EACA4J,EAAAuB,uCAAA,EAAAhQ,gBACA,MACA,cACA4E,EAAAwR,EAAAxR,EAAAoL,uCAAA,EAAArQ,yBAAA,EACAkF,EAAAuR,EAAAvR,GAAA,EACA4J,EAAAuB,uCAAA,EAAApQ,YAIA,OAAAsM,2CAAAC,EAAAzB,cAAA,KAAA0B,UAAA,6BACAF,2CAAAC,EAAAzB,cAAA,UAAA0B,UAAA,mBAAA7P,KAAAuP,MAAAM,UACAgL,GAAAxS,EAAAyS,GAAAxS,EACA4J,IAAAmI,wBACAU,iBAAA/a,KAAAuP,MAAAyL,QAAA,EACAC,gBAAAV,qBACAW,YAAAZ,qBACAa,KAAA,0JAhDAxL,2CAAAC,EAAAO,oBAqDAqK,6CAAe9Y,oBAAA,qnBAzDf2Y,sKACAC,gKACAC,gKAEAC,sZCPA,QAAAY,EAAA,CACAC,SAAA,KACAC,QAFA,SAEAC,GAEAvb,KAAAqb,SAAAE,GAEAC,eANA,WAQA,OAAAxb,KAAAqb,aAIAD,EAAe1Z,EAAA,uZAZf0Z,4uBCAAK,iCAEA,SAAAA,wBAAA/W,gBAAA1E,KAAAyb,uGAEAjW,EAAAkW,GAEA,UAAAxb,MAAA,gCAAAF,KAAA2b,cAAA,0CAGAD,GAEA,UAAAxb,MAAA,gCAAAF,KAAA2b,cAAA,+CAKA,gDAGAC,EAAAF,GAEA,UAAAxb,MAAA,gCAAAF,KAAA2b,cAAA,0CAGArF,EAAAoF,GAEA,UAAAxb,MAAA,gCAAAF,KAAA2b,cAAA,+CAKA,6CAKA,4CAKA,OAAA3b,KAAA6b,kDAKA,+CAKA,mBAAA7b,KAAA2b,cAAAG,oDAKA,UAAA5b,MAAA,iMAIAub,iDAAe/Z,oBAAA,2nBA5Df+Z,+hECGA,IAAA5C,IAAA,EACAC,OAAA,EACAC,IAAA,EAEAgD,mBAEA,SAAAA,MACA,OAAArX,gBAAA1E,KAAA+b,KAAAvM,2BAAAxP,KAAAyP,gBAAAsM,KAAArM,KAAA1P,4FAMA,IACA+E,EADA3D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,GACA0L,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAEA,QAAA2L,EAAAC,EAAAlN,KAAAuZ,aAAAnM,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KACAP,EADAU,EAAAlN,MACA+Y,QACA/T,EAAAuU,SAAA/M,OAAAyP,yCAAA,GAEAjX,EAAA8H,KAAAN,IAPA,MAAAqB,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAUA,OAAAjI,uCAIAwJ,EAAAhC,GACA,IACAxH,EADA3D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,GACAqN,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IAEA,QAAAsN,EAAAC,EAAA7O,KAAAuZ,aAAAnM,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA,KADAW,EACAR,EAAA7O,MACAqP,EAAAyJ,MAAAtK,GAAAa,EAAA0J,SAAAvM,GAEAxH,EAAA8H,KAAAuC,EAAA2J,OANA,MAAAnL,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,GASA,OAAA5J,8CAGAwJ,GACA,IACAxJ,EADA3D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,GAGA2D,EAAA8H,KAAA0B,GACA,QAAAlI,EAAA,EAAAA,EAAAtB,EAAA1D,SAAAgF,EACA,CACA,IAAA4V,EAAAjc,KAAAkc,uBAAAnX,EAAAsB,IADA0I,GAAA,EAAAC,GAAA,EAAAC,OAAA3N,EAAA,IAEA,QAAA4N,EAAAC,EAAA8M,EAAA7O,OAAAC,cAAA0B,GAAAG,EAAAC,EAAA7B,QAAAC,MAAAwB,GAAA,EACA,KADAK,EACAF,EAAAnP,MACA,GAAAqP,EAAA0J,SAAAkD,yCAAA,EACA,CACA,IAAAG,EAAA/M,EAAA2J,KACAhU,EAAAuU,SAAA6C,IAEApX,EAAA8H,KAAAsP,KATA,MAAAvO,GAAAoB,GAAA,EAAAC,EAAArB,EAAA,YAAAmB,GAAA,MAAAI,EAAAtB,QAAAsB,EAAAtB,SAAA,WAAAmB,EAAA,MAAAC,IAcA,OAAAlK,+CAGAwJ,EAAAhC,GACA,IACAxH,EADA3D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,GACAgb,GAAA,EAAAC,GAAA,EAAAC,OAAAhb,EAAA,IAEA,QAAAib,EAAAC,EAAAxc,KAAAuZ,aAAAnM,OAAAC,cAAA+O,GAAAG,EAAAC,EAAAlP,QAAAC,MAAA6O,GAAA,EACA,KADAhN,EACAmN,EAAAxc,MACA,GAAAqP,EAAAyJ,MAAAtK,GAAAa,EAAA0J,SAAAvM,EACA,CAEA,IAAAkQ,EAAAzc,KAAA0c,oBAAAtN,EAAA2J,MAFA4D,GAAA,EAAAC,GAAA,EAAAC,OAAAvb,EAAA,IAGA,QAAAwb,EAAAC,EAAAN,EAAArP,OAAAC,cAAAsP,GAAAG,EAAAC,EAAAzP,QAAAC,MAAAoP,GAAA,EACA,KADAnK,EACAsK,EAAA/c,MACAgF,EAAAuU,SAAA9G,IAEAzN,EAAA8H,KAAA2F,IAPA,MAAA5E,GAAAgP,GAAA,EAAAC,EAAAjP,EAAA,YAAA+O,GAAA,MAAAI,EAAAlP,QAAAkP,EAAAlP,SAAA,WAAA+O,EAAA,MAAAC,MALA,MAAAjP,GAAAyO,GAAA,EAAAC,EAAA1O,EAAA,YAAAwO,GAAA,MAAAI,EAAA3O,QAAA2O,EAAA3O,SAAA,WAAAwO,EAAA,MAAAC,GAkBA,OAAAvX,wCAMA,IAFA,IAAAiY,EAAA,KACAC,EAAAjd,KAAAkd,YACA7W,EAAA,EAAAA,EAAA4W,EAAA5b,OAAAgF,IACA,QAAA8W,EAAA,EAAAxR,EAAAqR,EAAA3b,OAAA8b,EAAAxR,EAAAwR,IACAH,EAAAnQ,KAAAmQ,EAAAG,GAAAC,OAAAH,EAAA5W,KAGA,OAAA2W,oIAxFAxD,qCAAA,YA4FAuC,+BAAera,oBAAA,mjBAhGfmX,6FACAC,mGACAC,6FAEAgD,mcCNA,SAAAsB,EAAA3V,GAEA,IAAA4V,EAAA,GACAC,EAAA7V,EAAAM,eACAsV,EAAAzQ,KAAA0Q,GACA,QAAAlX,EAAA,EAAAA,EAAAiX,EAAAjc,OAAAgF,IACA,KAAAyG,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IACA,QAAA2L,EAAAC,EAAAxF,EAAAI,WAAAsF,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADA1F,EACA6F,EAAAlN,MACAqH,EAAAoW,OAAAF,EAAAjX,KAEAiX,EAAAhE,SAAAlS,EAAAqW,MAEAH,EAAAzQ,KAAAzF,EAAAqW,OAPA,MAAA7P,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,IAYA,OAAAsQ,qCAGAI,0LAEAhW,GAEA,cADAtG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,UAEA,UAAAlB,MAAA,uBAEA,IAAAyd,EAAAN,EAAA3V,GAKA,IAAAkW,EAAAlW,EAAAE,WAAAiW,OAJA,SAAAtX,GAEA,OAAAoX,EAAArE,SAAA/S,KAKAuX,EAAAH,EAAAtc,OACA0c,EAAAH,EAAAvc,OACA2c,EAAAtW,EAAAE,WAAAvG,OACA4c,EAAAnY,KAAAuM,IAAAyL,EAAAC,GACA,MAAAC,EAAA,CAKA,IAAAE,EAEAA,EADAJ,EAAA,IAAAC,EAAA,GACAE,EAAA,QAGAA,EAAA,QAGA,IAAAE,EAAA,EACA,MAAAL,EACA,CACA,IAAAM,EAAA,EAAAtY,KAAAuY,GAAAL,EADAvP,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IAEA,QAAAsN,EAAAC,EAAAnH,EAAAE,WAAAwF,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA,KADAlI,EACAqI,EAAA7O,MACAwG,EAAA+B,EAAAxC,KAAAwY,IAAAF,EAAAD,EAAArY,KAAAuY,IAAAH,EACA3X,EAAA8B,EAAAvC,KAAAyY,IAAAH,EAAAD,EAAArY,KAAAuY,IAAAH,EACAC,GAAA,GANA,MAAAvQ,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,QASA,CACA,IAAA6P,EAAA,EAAA1Y,KAAAuY,GAAAP,EACAW,EAAA,EAAA3Y,KAAAuY,GAAAN,EAEAI,EAAA,EAJA,IAAApP,GAAA,EAAAC,GAAA,EAAAC,OAAA3N,EAAA,IAKA,QAAA4N,EAAAC,EAAAwO,EAAAvQ,OAAAC,cAAA0B,GAAAG,EAAAC,EAAA7B,QAAAC,MAAAwB,GAAA,EACA,KADA2P,EACAxP,EAAAnP,MACA2e,EAAApW,EAAAxC,KAAAwY,IAAAE,EAAAL,EAAArY,KAAAuY,IAAAH,EACAQ,EAAArW,EAAAvC,KAAAyY,IAAAC,EAAAL,EAAArY,KAAAuY,IAAAH,EACAC,GAAA,GATA,MAAAvQ,GAAAoB,GAAA,EAAAC,EAAArB,EAAA,YAAAmB,GAAA,MAAAI,EAAAtB,QAAAsB,EAAAtB,SAAA,WAAAmB,EAAA,MAAAC,GAWAkP,EAAA,EAXA,IAAA/B,GAAA,EAAAC,GAAA,EAAAC,OAAAhb,EAAA,IAYA,QAAAib,EAAAC,EAAAoB,EAAAxQ,OAAAC,cAAA+O,GAAAG,EAAAC,EAAAlP,QAAAC,MAAA6O,GAAA,EACA,KADAuC,EACApC,EAAAxc,MACA4e,EAAArW,EAAAxC,KAAAwY,IAAAG,EAAAN,EAAArY,KAAAuY,KAAAH,EAAA,KACAS,EAAAtW,EAAAvC,KAAAyY,IAAAE,EAAAN,EAAArY,KAAAuY,KAAAH,EAAA,KACAC,GAAA,GAhBA,MAAAvQ,GAAAyO,GAAA,EAAAC,EAAA1O,EAAA,YAAAwO,GAAA,MAAAI,EAAA3O,QAAA2O,EAAA3O,SAAA,WAAAwO,EAAA,MAAAC,qDA8BAoB,EAAehc,EAAA,qcA7Ff2b,8GAqBAK,6/BClBAkB,0BAEA,SAAAA,iBACAla,gBAAA1E,KAAA4e,gBACA5e,KAAA6e,kBAAA,KACA7e,KAAA8e,SAAA,KAEA9e,KAAA+e,UAAA,IAAAC,kDAAA,EAEAhf,KAAAif,kBAAA,EACAjf,KAAAkf,uBAAA,EACAlf,KAAAmf,eAAAP,eAAAQ,eACApf,KAAAqf,gBAAA,EAEArf,KAAAsf,SAAA,IAAAC,0CAAA,EAAAvf,2EAGA0b,EAAAoD,GAEA9e,KAAA6e,kBAAAnD,EAAAlH,uBACAxU,KAAA8e,WAEA9e,KAAAsf,SAAAE,WAAA9D,gFAQAxH,GAEA,IAAAuL,EAAAzf,KAAA6e,kBAAAa,oBAKA,GAFAD,EAAAE,eAAAF,EAAAG,kBAEA1L,GAAA0K,eAAAQ,eAEApf,KAAAif,kBAAA,EACAjf,KAAAmf,eAAAjL,OAEA,GAAAA,GAAA0K,eAAAiB,oBAEA7f,KAAAif,kBAAA,EACAjf,KAAAkf,uBAAA,EACAlf,KAAAmf,eAAAjL,MAEA,IAAAA,GAAA0K,eAAAkB,sBAQA,UAAA5f,MAAA,6BAAAgU,EAAA,KANAlU,KAAAif,kBAAA,EACAjf,KAAAkf,uBAAA,EACAlf,KAAAmf,eAAAjL,+CAUA,OAAAlU,KAAAmf,yDAGAjL,GAEAlU,KAAAqf,iBAAAnL,EACAA,GAEAlU,KAAAsf,SAAAS,aAAA/f,KAAAsf,SAAAU,SACAhgB,KAAAsf,SAAAW,UACAjgB,KAAA8e,SAAAoB,SAAA,SAAAC,EAAA5Q,GACA,GAAA4Q,EAAAjM,MAAAkM,0DAAA,EAAAtL,QAEA,OACAd,SAAAmM,EAAAjM,KACAA,KAAAkM,0DAAA,EAAAtL,aAWA9U,KAAAsf,SAAAS,aAAA/f,KAAAsf,SAAAU,SACAhgB,KAAA8e,SAAAoB,SAAA,SAAAC,EAAA5Q,GACA,OAAA2E,KAAAiM,EAAAnM,yDAOA,OAAAhU,KAAAqf,8JAGAT,eAAAQ,eAAA,OACAR,eAAAiB,oBAAA,UACAjB,eAAAkB,sBAAA,yBAEAlB,0CAAeld,oBAAA,imBAxGfkd,omECAAyB,kDAEA,SAAAA,uBAAA9Q,GACA,IAAAzK,EAAAJ,gBAAA1E,KAAAqgB,yBACAvb,EAAA0K,2BAAAxP,KAAAyP,gBAAA4Q,wBAAA3Q,KAAA1P,KAAAuP,KAEA+Q,YAAA,EACAxb,EAAAyb,YAAA,GACA,IAAAC,EAAAjR,EAAAkR,QAAA1gB,MAAAygB,QALA1T,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAMA,QAAA2L,EAAAC,EAAAsT,EAAApT,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADA+M,EACA5M,EAAAlN,MACA+E,EAAAyb,YAAAlf,OAAA,IAEAyD,EAAAyb,aAAA,MAEAzb,EAAAyb,aAAA,IAAA1G,EAAA3Q,gBAAAV,eAAA,MAAAqR,EAAAzQ,qBAAAyQ,EAAAzQ,qBAAAZ,eAAA,aAAAkY,gDAAA,MAAA7G,EAAAlQ,gBAZA,MAAAiE,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAAA,OAeAlI,EAAAmL,QAAAnL,EAAAmL,QAAA9P,KAAAwZ,8CAAA7U,KAfAA,+HAkBA3D,GAEA,IAAAwf,EAAA3gB,KAAAuP,MAAAoR,gBAEAC,GADA5gB,KAAAuP,MAAAsP,kBACA1d,EAAA0Y,OAAA9Z,OACA0gB,EAAAzgB,KAAAuP,MAAAkR,QACA,OAAAG,GAEA,aAEA,IAAAC,EAAAJ,EAAA1gB,MAAAygB,QACAM,EAAAD,EAAAxf,OACA,GAAAyf,EAAA,GAAA9gB,KAAAsgB,YAAAQ,EACA,CAEA,IAAAjH,EAAAgH,EAAA7gB,KAAAsgB,eACAtgB,KAAAsgB,aAAAQ,IAAA9gB,KAAAsgB,YAAA,GAGAK,EAAAI,YAAAlH,GAGA,MACA,gBAEA,IAAAmH,EAAAP,EAAA1gB,MAAAygB,QAEAG,EAAAM,kBAAAD,GAGAP,EAAAS,QAEA,MACA,QACA,UAAAhhB,MAAA,sEAOA,OAAAyP,2CAAAC,EAAAzB,cAAA,WACAwB,2CAAAC,EAAAzB,cAAA,SAAAnO,KAAAuP,MAAAkR,QAAA1gB,MAAAohB,KAAA,KAAAnhB,KAAAugB,aACA5Q,2CAAAC,EAAAzB,cAAA,UAAApO,MAAA,SAAAkQ,QAAAjQ,KAAAiQ,SAAAmR,KAAApP,SAAA,0BACArC,2CAAAC,EAAAzB,cAAA,UAAApO,MAAA,YAAAkQ,QAAAjQ,KAAAiQ,SAAAmR,KAAApP,SAAA,mLAjEArC,2CAAAC,EAAAO,oBAsEAkQ,kDAAe3e,oBAAA,6nBAtEf2e,4dCAA,SAAAgB,EAAAC,EAAAC,GAEA,iBAAAA,QAAAnU,OAAAC,aAEA,IAAAmU,EAAA,GACAC,EAAA,GACAD,EAAA3U,KAAA,CAAA0B,MAAA+S,EAAAI,gBAAAC,MAAA,IALA,IAAA7U,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAMA,QAAA2L,EAAAC,EAAAoU,EAAA5E,oBAAA4E,EAAAI,iBAAAtU,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADA8U,EACA3U,EAAAlN,MACAyhB,EAAA3U,KAAA,CAAA0B,MAAAqT,EAAAD,MAAA,KARA,MAAA/T,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAeA,IALA,IAAA6U,EAAA,GAGAC,EAAA,EAEAN,EAAAngB,OAAA,GACA,CAGA,GADA0gB,EAAAT,EADAC,EAAAjU,OAAAvN,MACAyhB,EAAAC,EAAAI,GACA,SAIA,KADAC,EACA,IAEA,SAIA,SAMA,SAAAC,EAAAT,EAAA/U,EAAAiV,EAAAC,EAAAI,GAGA,IAAAtT,EAAA,KACAyT,EAAA,GACAC,EAAA,EAEA,MAAA1V,GAEAkV,EAAA5U,KAAAN,GARA,IAAAkC,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IAWA,QAAAsN,EAAAC,EAAA2S,EAAApU,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA,KADAyT,EACAtT,EAAA7O,MAIA,GAHAwO,EAAA2T,EAAA3T,MAGA,OAFAhC,EAAA2V,EAAAP,MAAAF,EAAApgB,OAAAogB,EAAAS,EAAAP,OAAA,MAGA,CAEAM,EAAAC,EAAAP,MAAA,EAFA,IAAA5S,GAAA,EAAAC,GAAA,EAAAC,OAAA3N,EAAA,IAGA,QAAA4N,EAAAC,EAAAmS,EAAAa,qBAAA5T,EAAAhC,GAAAa,OAAAC,cAAA0B,GAAAG,EAAAC,EAAA7B,QAAAC,MAAAwB,GAAA,EACA,KADAqT,EACAlT,EAAAnP,MACAiiB,EAAAnV,KAAA,CAAA0B,MAAA6T,EAAAT,MAAAM,KALA,MAAArU,GAAAoB,GAAA,EAAAC,EAAArB,EAAA,YAAAmB,GAAA,MAAAI,EAAAtB,QAAAsB,EAAAtB,SAAA,WAAAmB,EAAA,MAAAC,QASA,CACA,GAAAqS,EAAAe,aAAA9T,GAAA,SACAsT,EAAAhV,KAAA0B,GAIA0T,EAAAC,EAAAP,OAhCA,MAAA/T,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,GA2CA,OAFA6S,EAAAngB,OAAA,EACAmgB,EAAA3U,KAAAzH,MAAAoc,EAAAQ,IACA,8cAhFAX,6FAoCAU,slCClCA,IAAAO,wBAAA,GACAC,wBAAA,CACA,IAAAC,6DAAA,SACA,IAAAA,6DAAA,UAGAC,eAAA,CAAAC,iEAAA,EAAAC,6DAAA,GAEAC,0BAEA,SAAAA,eAAAC,GACAne,gBAAA1E,KAAA4iB,gBACA5iB,KAAA8iB,UAAA,IAAAC,wDAAA,EAAA/iB,2EAGA6iB,oCAEAA,mCAEAA,wCAEAG,GAAA,yDACA,UAAA9iB,MAAA,wCAAAF,KAAAijB,gBAAA,kDACA,UAAA/iB,MAAA,wCAAAF,KAAAijB,gBAAA,oDACA,UAAA/iB,MAAA,0CAAAF,KAAAijB,gBAAA,uDAGA,IAAAC,EAAAljB,KAAAmjB,oBACA,GAAAD,EAAA7hB,OAAA,SAAA6hB,EAAA,GAEA,UAAAhjB,MAAA,8CAAAF,KAAAijB,gBAAA,iDAEA,OAAAV,oEACA,OAAAD,mEACA,OAAAtiB,KAAA8iB,oDACA,oDACA,sDACA,UAAA5iB,MAAA,wEACA,uKAGA0iB,0CAAelhB,oBAAA,2lBAzCf4gB,yJACAC,yJAKAE,uIAEAG,gkECVA,IAAAtgB,qBAAA,GAEA8gB,+BAEA,SAAAA,WACA,OAAA1e,gBAAA1E,KAAAojB,UAAA5T,2BAAAxP,KAAAyP,gBAAA2T,UAAA1T,KAAA1P,KACAqjB,yCAAA,EAAAC,yCAAA,qGAGA/c,GAEA,GAAAvG,KAAAujB,OAAAliB,QAAA,YAAAnB,MAAA,wCAGA,OAAAF,KAAAujB,OAAAliB,OAAA,CAEA,IAAAgF,EAAArG,KAAAujB,OAAA/R,QAAAjL,GACA,GAAAF,EAAA,EACA,CAEA,IAAA8Z,EAAAngB,KAAAujB,OAAA,GACAvjB,KAAAujB,OAAA,GAAAhd,EACAvG,KAAAujB,OAAAld,GAAA8Z,OAEA,GAAA9Z,EAAA,EAEA,UAAAnG,MAAA,kFAMA,OAAAF,KAAAujB,OAAAliB,OAAA,EAAArB,KAAAujB,OAAA,2CAKAnc,GAEA,IAAA6B,EAAA7B,EAAA8B,gBACAC,EAAA/B,EAAAgC,qBACAoa,EAAApc,EAAA0H,0BAHAhC,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAMA,QAAA2L,EAAAC,EAAAlN,KAAAyjB,OAAArW,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADA4W,EACAzW,EAAAlN,MACA,GAAA2jB,IAAAtc,IACAsc,EAAAxa,kBAAAD,GAAAya,EAAAta,uBAAAD,GACA,CACA,IAAAwa,EAAAD,EAAA5U,0BACA,GAAA0U,EAAAniB,OAAA,EACA,CACA,IAAA0D,EAAA4e,EAAAvG,OAAAoG,GACAE,EAAAnc,aAAAxC,EAAA2I,KAAA4V,yCAAA,IAIA,OAAAI,IAnBA,MAAA9V,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAyBA,IAAA5F,EAAAwc,aACA,CACA,IAAAC,GAAA,EAGAC,EAAAxhB,qBACAyhB,EAAAje,KAAAuY,GAAA,EALA5P,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IAMA,QAAAsN,EAAAC,EAAA7O,KAAAyjB,OAAArW,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA,KADAuV,EACApV,EAAA7O,MACA,KAAAikB,EAAAC,eAAAne,KAAAmL,IAAA+S,EAAAhb,eAAA3H,SAAA,EAAAyiB,KACAE,EAAA5a,uBAAAH,GAAA+a,EAAA9a,kBAAAC,GACA,CACA/B,EAAAI,aAAAuc,EAAAD,GACAE,EAAAxc,aAAAuc,EAAAD,GACAD,GAAA,EAGA,QAhBA,MAAAjW,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,GAqBA,IAAAkV,EACA,CACA,IAAAK,EAAApe,KAAAuM,IAAApJ,EAAAkb,cAAAhb,EAAAgb,eACAC,EAAAnb,EAAAZ,EACAgc,EAAApb,EAAAX,EACAgc,EAAAnb,EAAAd,EACAkc,EAAApb,EAAAb,EACAkc,GAAAF,EAAAF,IAAAE,EAAAF,IAAAG,EAAAF,IAAAE,EAAAF,GACAI,GAAA,EACAC,EAAA,EACAtS,EAAA,EAEAgS,EAAAE,EAGAlS,EAAAmS,GADAG,GAAAL,EAAAE,IAAAH,EAAAE,IACAA,EAEAF,EAAAE,EAGAlS,EAAAiS,GADAK,GAAAH,EAAAF,IAAAC,EAAAF,IACAA,EAIAK,GAAA,EAvBA,IAAA1V,GAAA,EAAAC,GAAA,EAAAC,OAAA3N,EAAA,IA0BA,QAAA4N,EAAAC,EAAAnP,KAAAujB,OAAAnW,OAAAC,cAAA0B,GAAAG,EAAAC,EAAA7B,QAAAC,MAAAwB,GAAA,EACA,KADAxI,EACA2I,EAAAnP,MACA,GAAAwG,IAAA0C,GAAA1C,IAAA4C,EAAA,CAEA,IAAAwb,EAAApe,EAAA8B,EACAuc,EAAAre,EAAA+B,EAIA,MAFA8b,EAAAO,IAAAP,EAAAO,IAAAN,EAAAO,IAAAP,EAAAO,GAEAJ,IADAF,EAAAK,IAAAL,EAAAK,IAAAJ,EAAAK,IAAAL,EAAAK,GACAJ,GAAA,CASA,IANAC,EACA3e,KAAAmL,IAAAmT,EAAAO,GAEA7e,KAAAmL,IAAAmB,EAAAsS,EAAAC,EAAAC,GAAA9e,KAAA+e,KAAA,EAAAH,MAGAne,EAAA4d,cACA,CACAN,GAAA,EACA,UA/CA,MAAAjW,GAAAoB,GAAA,EAAAC,EAAArB,EAAA,YAAAmB,GAAA,MAAAI,EAAAtB,QAAAsB,EAAAtB,SAAA,WAAAmB,EAAA,MAAAC,GAmDA4U,GAEAzc,EAAAI,cAAA1B,KAAAuY,GAAA,EAAA6F,EAAA,KAKA,OAAA9c,yIA9IA0d,iDAAA,YAkJA1B,oCAAe1hB,oBAAA,ilBApJfY,8IAEA8gB,igECJA2B,0CAEA,SAAAA,eAAAxV,GACA,IAAAzK,EAAAJ,gBAAA1E,KAAA+kB,iBACAjgB,EAAA0K,2BAAAxP,KAAAyP,gBAAAsV,gBAAArV,KAAA1P,KAAAuP,KAEA+I,QAAA,KACAxT,EAAAkgB,kBAAA,EAEA,IAAA3P,EAAA9F,EAAA8F,cAAA,GANA,OAOAvQ,EAAAyJ,MAAA,CACAxO,MAAAsV,EACA4P,UAAA5P,GAGAvQ,EAAA4U,SAAA5U,EAAA4U,SAAAvZ,KAAAwZ,8CAAA7U,KACAA,EAAAogB,OAAApgB,EAAAogB,OAAA/kB,KAAAwZ,8CAAA7U,KACAA,EAAAqgB,QAAArgB,EAAAqgB,QAAAhlB,KAAAwZ,8CAAA7U,KAdAA,iIAyBAsgB,GAGAplB,KAAAqlB,cAGArlB,KAAAuO,MAAAxO,OAAAC,KAAAuO,MAAAxO,MAAAsB,QAAA,GAAArB,KAAAuO,MAAAxO,QAAAC,KAAAuP,MAAA8F,eAEArV,KAAAkgB,SAAA,CAAAngB,MAAAqlB,EAAA/P,+CAUAjU,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAGApB,KAAAsY,QAAAgN,SAIAtlB,KAAAsY,QAAAiN,uCAMAvlB,KAAAsY,QAAAkN,0CAKA,OAAAxlB,KAAAsY,UAAAhB,SAAAmO,+CAGAtkB,GAEA,GAAAnB,KAAAuP,MAAAsO,OACA,CACA,IAAA9Y,EAAA5D,EAAA0Y,OAAA9Z,MAAAqY,QAAApY,KAAAuP,MAAAsO,OAAA,IACA7d,KAAAkgB,SAAA,CAAAngB,MAAAgF,SAIA/E,KAAAkgB,SAAA,CAAAngB,MAAAoB,EAAA0Y,OAAA9Z,uCAIAoB,GACA,IAAAgT,EAAAnU,KACA,GAAAA,KAAAglB,kBAAA,QAAAhlB,KAAAuP,MAAAmW,cACA,CAEA,IAAA3gB,EAAA/E,KAAA2lB,YAAAxkB,EAAA0Y,OAAA9Z,OAKA,OAJAC,KAAAkgB,SAAA,CAAAngB,MAAAgF,SAGA/E,KAAAglB,kBAAA,GAIA,WAAAhlB,KAAAuP,MAAAmW,cACA,CACA,IAAAvF,EAAAngB,KAAAuO,MAAA0W,UACA3X,EAAAnM,EAAA0Y,OAAA9Z,OAAAC,KAAAuP,MAAA8F,cAAA,GACArV,KAAA4lB,WAAAtY,EAAA,WACA6G,EAAA5E,MAAAsW,UAEA1R,EAAA5E,MAAAsW,SAAAvY,EAAA6S,SAIA,SAAAngB,KAAAuP,MAAAmW,eAEA1lB,KAAA4lB,WAAA,sCAIAzkB,GACA,IAAA2kB,EAAA9lB,KACA,YAAAmB,EAAArB,IACA,CACA,GAAAE,KAAAuP,MAAAwW,WAAA5kB,EAAA6kB,SAEA,SAGA,IAAA7F,EAAAngB,KAAAuO,MAAA0W,UACA3X,EAAAnM,EAAA0Y,OAAA9Z,OAAAC,KAAAuP,MAAA8F,cAAA,GAaA,OAZArV,KAAA4lB,WAAAtY,EAAA,WACAwY,EAAAd,kBAAA,EAEAc,EAAAvW,MAAAsW,UAEAC,EAAAvW,MAAAsW,SAAAvY,EAAA6S,GAEA2F,EAAAxN,QAAAkN,SAGArkB,EAAA8kB,iBACA9kB,EAAA+kB,mBACA,EAEA,aAAA/kB,EAAArB,IACA,CACA,IAAAqmB,EAAAnmB,KAAAuO,MAAA0W,UAaA,OAZAjlB,KAAA4lB,WAAAO,EAAA,WACAL,EAAAd,kBAAA,EAEAc,EAAAvW,MAAAsW,UAEAC,EAAAvW,MAAAsW,SAAAM,GAAA,GAAAA,GAEAL,EAAAxN,QAAAkN,SAGArkB,EAAA8kB,iBACA9kB,EAAA+kB,mBACA,wCAKA,IAAAE,EAAApmB,KADA4Z,EACAxY,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAAAilB,EACAjlB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAEA,UAAAwY,EACA,CACA,IAAA7U,EAAA/E,KAAA2lB,YAAA/L,GACA5Z,KAAAkgB,SAAA,CAAAngB,MAAAgF,EAAAkgB,UAAAlgB,GAAAshB,QAIArmB,KAAAkgB,SAAA,SAAAC,EAAA5Q,GAGA,OAAAxP,MADAqmB,EAAAT,YAAAxF,EAAA8E,aAEAoB,oCAIAtmB,EAAAsmB,GAQAtmB,EANAA,GAAA,GAAAA,EAAAsB,OAMArB,KAAA2lB,YAAA5lB,GAJAC,KAAAuP,MAAA8F,cAAA,GAOArV,KAAAkgB,SAAA,CAAAngB,SAAAsmB,uCAGAtmB,GACA,IADAumB,EACAllB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,IAEA2D,EAAA/E,KAAAuO,MAAAxO,MAMAgF,EAJA,GAAA/E,KAAAsY,QAAAiO,gBACAvmB,KAAAsY,QAAAkO,cAAAzmB,EAAAsB,OAGAtB,EAKAgF,GAAA,GAAAA,EAAA1D,OAMA0D,EAAAuhB,EAAAvmB,EAJAA,EASAC,KAAAuP,MAAAsO,SAEA9Y,IAAAqT,QAAApY,KAAAuP,MAAAsO,OAAA,KAGA7d,KAAAkgB,SAAA,CAAAngB,MAAAC,KAAA2lB,YAAA5gB,yCAGAhF,GAIA,OADA0mB,EADAzmB,KAAAuP,MAAAkX,WACA1mB,IACA,oCAKA,IAAA2mB,EAAA1mB,KACA,OAAAA,KAAAuP,MAAAwW,UAGApW,2CAAAC,EAAAzB,cAAA,YACA/F,GAAApI,KAAAuP,MAAAnH,GAAAyH,UAAA7P,KAAAuP,MAAAM,UAAAE,MAAA/P,KAAAuP,MAAAQ,MACA+D,IAAA,SAAAY,GAAA,OAAAgS,EAAApO,QAAA5D,GACAxG,KAAA,OAAAnO,MAAAC,KAAAuO,MAAAxO,MACA4mB,KAAA,IACAjN,SAAA1Z,KAAA0Z,SACAwL,OAAAllB,KAAAklB,OACAC,QAAAnlB,KAAAmlB,UAOAxV,2CAAAC,EAAAzB,cAAA,SACA/F,GAAApI,KAAAuP,MAAAnH,GAAAyH,UAAA7P,KAAAuP,MAAAM,UAAAE,MAAA/P,KAAAuP,MAAAQ,MACA+D,IAAA,SAAA8S,GAAA,OAAAF,EAAApO,QAAAsO,GACA1Y,KAAA,OAAAnO,MAAAC,KAAAuO,MAAAxO,MACA2Z,SAAA1Z,KAAA0Z,SACAwL,OAAAllB,KAAAklB,OACAC,QAAAnlB,KAAAmlB,iKAhNA,OAAAnlB,KAAAuO,MAAAxO,0BA1CA4P,2CAAAC,EAAAO,oBAgQA4U,0CAAerjB,oBAAA,qmBAhQfqjB,gYCFA,QAEA8B,EAAA,CACAC,iBAAA,KACAC,MAFA,SAEAC,GAEA,IAAAC,EAAAD,EAAA5T,UACAnS,OAAAC,OAAA+lB,EAAAJ,UACAI,EAAAF,OAGAG,cATA,SASA1iB,GAIA,GAFAxE,KAAA8mB,mBAAA9mB,KAAA8mB,iBAAA,IAAA1gB,KAEApG,KAAA8mB,iBAAAxd,IAAA9E,GAMA,UAAAtE,MAAA,6BAAAsE,EAAA,KAJAxE,KAAA8mB,iBAAAlgB,IAAApC,EAAA,KAQA2iB,gBAvBA,SAuBA3iB,GAEA,GAAAxE,KAAA8mB,iBAAA,CAEA,IAAA9mB,KAAA8mB,iBAAAxd,IAAA9E,GAMA,UAAAtE,MAAA,yBAAAsE,EAAA,KAJAxE,KAAA8mB,iBAAAM,OAAA5iB,KAQA6iB,iBArCA,SAqCA7iB,EAAA8iB,GAKA,GAHAtnB,KAAA8mB,mBAAA9mB,KAAA8mB,iBAAA,IAAA1gB,MAGApG,KAAA8mB,iBAAAxd,IAAA9E,GAWA,UAAAtE,MAAA,yBAAAsE,EAAA,KATAxE,KAAA8mB,iBAAAhgB,IAAAtC,GAYAqI,KAAAya,IAGAziB,oBA3DA,SA2DAL,EAAA8iB,GAEA,GAAAtnB,KAAA8mB,iBAAA,CAEA,IAAA9mB,KAAA8mB,iBAAAxd,IAAA9E,GAqBA,UAAAtE,MAAA,kBAAAsE,EAAA,KAhBA,IAHA,IAAA+iB,EAAAvnB,KAAA8mB,iBAAAhgB,IAAAtC,GACAqf,GAAA,EACAxd,EAAAkhB,EAAAlmB,OACAgF,KAEAkhB,EAAAlhB,KAAAihB,IAEAC,EAAAC,OAAAnhB,EAAA,GACAwd,GAAA,GAIA,IAAAA,EAEA,UAAA3jB,MAAA,sCAAAsE,EAAA,OASAijB,oBAxFA,SAwFAjjB,GAEA,GAAAxE,KAAA8mB,iBAAA,CAEA,IAAA9mB,KAAA8mB,iBAAAxd,IAAA9E,GAYA,UAAAtE,MAAA,yBAAAsE,EAAA,KAVAxE,KAAA8mB,iBAAAhgB,IAAAtC,GACAnD,OAAA,IAaAqmB,oBA5GA,SA4GAljB,GAEA,OAAAxE,KAAA8mB,kBACA9mB,KAAA8mB,iBAAAxd,IAAA9E,GAAAxE,KAAA8mB,iBAAAhgB,IAAAtC,GAAAnD,OADA,GAIAsmB,kBAlHA,SAkHAnjB,GAEA,OAAAxE,KAAA8mB,iBACA9mB,KAAA8mB,iBAAAhgB,IAAAtC,GADA,MAIAI,GAxHA,SAwHAJ,EAAA8iB,GAEAtnB,KAAAqnB,iBAAA7iB,EAAA8iB,IAGAjiB,KA7HA,SA6HAb,EAAA8iB,GACA,IAAAxiB,EAAA9E,KAYAA,KAAAqnB,iBAAA7iB,EAXA,SAAAoO,IACA,IACA,QAAAgV,EAAAxmB,UAAAC,OAFAwmB,EAEA,IAAA5f,MAAA2f,GAAAE,EAAA,EAAAA,EAAAF,EAAAE,IAFAD,EAEAC,GAAA1mB,UAAA0mB,GACAR,EAAAliB,MAAA,KAAAyiB,GAFA,QAMA/iB,EAAAD,oBAAAL,EAAAoO,OAOAmV,KA7IA,SA6IAvjB,GACA,QAAAwjB,EAAA5mB,UAAAC,OADAwmB,EACA,IAAA5f,MAAA+f,EAAA,EAAAA,EAAA,KAAAC,EAAA,EAAAA,EAAAD,EAAAC,IADAJ,EACAI,EAAA,GAAA7mB,UAAA6mB,GACA,IAEA,IAAAjoB,KAAA8mB,iBAAA,OAEA,IAAAoB,EACA,IAAAloB,KAAA8mB,iBAAAxd,IAAA9E,GASA,UAAAtE,MAAA,yBAAAsE,EAAA,KAKA0jB,EAAAloB,KAAA8mB,iBAAAhgB,IAAAtC,GAIA,IAFA,IAAAO,EAAA,KACAsB,EAAA6hB,EAAA7mB,OACAgF,KACA,CACA,IAEAtB,EAAAmjB,EAAA7hB,GAAAjB,MAAA,KAAAyiB,GAEA,MAAA1mB,GAEAT,QAAAuY,MAAA9X,GAGA,QAAA4D,EAAA,OAlCA,QAwCA/E,KAAAmoB,iBAAA/iB,MAAApF,KAAA,CAAAwE,GAAA4Y,OAAAyK,MAIAM,iBA3LA,SA2LA3jB,QAMAqiB,EAAenlB,EAAA,waAnMf,sGAEAmlB,kzGCsBAuB,+BAEA,SAAAA,IAAA7Y,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAAooB,MACAtjB,EAAA0K,2BAAAxP,KAAAyP,gBAAA2Y,KAAA1Y,KAAA1P,KAAAuP,KAGA8Y,UAAA,KACAvjB,EAAAwjB,UAAA,KACAxjB,EAAAga,SAAA,KACAha,EAAAyjB,OAAA,KACAzjB,EAAA0jB,QAAA,KAGA1jB,EAAA2jB,aAAA,IAAAC,kEAAA,EACA5jB,EAAA2jB,aAAAE,cACAC,YAAAC,uCAAA,EAAA5mB,WACA6mB,YAAAD,uCAAA,EAAA3mB,WACA6mB,iBAAAF,uCAAA,EAAA9mB,uBAEA+C,EAAAkkB,YAAA,IAAAC,gEAAA,EAIAnkB,EAAAokB,QAAA,IAAAC,sDAAA,EAAAxP,8CAAA7U,KAkBAA,EAAAskB,QAAA,IAAAC,yCAAA,EACAvkB,EAAAwkB,SAAA,IAAAC,mDAAA,EAEAzkB,EAAAyJ,MAAA,CACAkH,QAAA,EACA+T,aAAA,EACAC,cAAA,EACAC,kBAAA,GAGA5kB,EAAA6kB,WAAA7kB,EAAA6kB,WAAAxpB,KAAAwZ,8CAAA7U,KACAA,EAAA8kB,YAAA9kB,EAAA8kB,YAAAzpB,KAAAwZ,8CAAA7U,KACAA,EAAA+kB,YAAA/kB,EAAA+kB,YAAA1pB,KAAAwZ,8CAAA7U,KACAA,EAAAglB,WAAAhlB,EAAAglB,WAAA3pB,KAAAwZ,8CAAA7U,KAEAA,EAAAilB,OAAA,EAtDAjlB,qGA6DA,IAAAklB,EAAAhqB,KAAAsoB,UAAAxU,IACA9T,KAAAyoB,aAAAjJ,WAAAwK,GAGAhqB,KAAAiqB,mBACAzK,WAAAxf,MAEAA,KAAAopB,QAAA5J,WAAAxf,MAGAgqB,EAAA3C,iBAAA,OAAArnB,KAAA8pB,YACAE,EAAA3C,iBAAA,WAAArnB,KAAA2pB,YACAK,EAAA3C,iBAAA,YAAArnB,KAAA4pB,aACAI,EAAA3C,iBAAA,YAAArnB,KAAA6pB,aAGA7pB,KAAAspB,SAAAY,MAAAlqB,MAEAmqB,2DAAA,EAAAC,gBAAApqB,MACAmqB,2DAAA,EAAA3K,aAEAxf,KAAA+pB,OAAA,iDAMAI,2DAAA,EAAAE,kBAAArqB,MACAmqB,2DAAA,EAAAG,YAEAtqB,KAAAopB,QAAAmB,UAEAvqB,KAAAkpB,QAAAqB,QAAAvqB,MAEAA,KAAAyoB,aAAA8B,UAGA,IAAAP,EAAAhqB,KAAAsoB,UAAAxU,IACAkW,EAAAnlB,oBAAA,OAAA7E,KAAA8pB,YACAE,EAAAnlB,oBAAA,WAAA7E,KAAA2pB,YACAK,EAAAnlB,oBAAA,YAAA7E,KAAA4pB,aACAI,EAAAnlB,oBAAA,YAAA7E,KAAA6pB,aAEA7pB,KAAA+pB,OAAA,uCAMA,IAAAS,EAAAxqB,KAAAkpB,QAAAjG,gBAEAzd,EAAA2kB,2DAAA,EAAAM,gBAAA,SAAAD,GACAhlB,GAEAxF,KAAAkpB,QAAAwB,0BACAC,eAAAnlB,EAAAxF,KAAAkpB,8CAOA,IAAAsB,EAAAxqB,KAAAkpB,QAAAjG,gBAGAzd,EADAxF,KAAAkpB,QAAAwB,0BACAE,aAAA5qB,KAAAkpB,SACAiB,2DAAA,EAAAU,cAAA,SAAAL,EAAAhlB,sCAIAslB,GAEAA,EAAA7E,qDAGA6E,GAEAA,EAAA7E,iBAGAjmB,KAAAkgB,SAAA,CAAAwJ,kBAAA,IACA1pB,KAAA8e,SAAAoB,SAAA,SAAAC,EAAA5Q,GACA,OACAyE,SAAAmM,EAAAjM,KACAA,KAAA6W,oDAAA,EAAAhW,iDAKA+V,GAEAA,EAAA7E,iBAGAjmB,KAAAkgB,SAAA,CAAAwJ,kBAAA,IACA1pB,KAAA8e,SAAAoB,SAAA,SAAAC,EAAA5Q,GACA,OACAyE,SAAAmM,EAAAjM,KACAA,KAAAiM,EAAAnM,+CAKA8W,GAGAA,EAAA7E,iBAGAjmB,KAAAkgB,SAAA,CAAAwJ,kBAAA,IACA1pB,KAAA8e,SAAAoB,SAAA,SAAAC,EAAA5Q,GACA,OACAyE,SAAAmM,EAAAjM,KACAA,KAAAiM,EAAAnM,YAIA,IAAA4H,EAAA,KACA,GAAAkP,EAAAE,aAAAC,OAKA,GAHAH,EAAAE,aAAAC,MAAA5pB,QAGA,EACA,CACA,IAAA6pB,EAAAJ,EAAAE,aAAAC,MAAA,GACA,SAAAC,EAAAC,OAEAvP,EAAAsP,EAAAE,mBAMAN,EAAAE,aAAAK,MAAAhqB,QAGA,IAEAua,EAAAkP,EAAAE,aAAAK,MAAA,IAIAzP,GAEA5b,KAAAuP,MAAAsT,IAAAoH,mBAAAqB,mBAAAC,WAAA3P,EAAA5b,KAAAkpB,SACAsC,MAAA,SAAArqB,GACAsqB,mEAAA,EAAAC,gBAAA,4DAIAZ,EAAAE,aAAAC,MAEAH,EAAAE,aAAAC,MAAAvlB,QAIAolB,EAAAE,aAAAW,iDAKA,IADAC,EACAxqB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAEA,kBAAAwqB,EAEA5rB,KAAAkgB,SAAA,SAAAC,EAAA5Q,GACA,OAAAkG,QAAA,EAAAgU,aAAAmC,KAKA5rB,KAAAkgB,SAAA,SAAAC,EAAA5Q,GACA,OAAAkG,QAAA,2CAOAzV,KAAAkgB,SAAA,SAAAC,EAAA5Q,GACA,OAAAkG,QAAA,4CAMA,OAAAzV,KAAAuO,MAAAkH,mDAKA,OAAAzV,KAAAuO,MAAAkb,cAAAzpB,KAAAuO,MAAAkH,kDAKA,OAAAzV,KAAAkpB,qDAKA,OAAAlpB,KAAAkpB,QAAA5U,kEAKA,OAAAtU,KAAAkpB,QAAA3U,oEAKA,OAAAvU,KAAAkpB,QAAA1U,iEAKA,OAAAxU,KAAAyoB,sDAKA,OAAAzoB,KAAAgpB,6CAIA,IAAA7U,EAAAnU,KACAoU,EAAApU,KAAAkpB,QACA2C,EAAA7rB,KAAAsoB,UAAAtoB,KAAAsoB,UAAAxU,IAAA,KAQA,OANA9T,KAAA+pB,QAEA/pB,KAAAyoB,aAAAqD,SACA1X,EAAA0X,OAAA9rB,OAGA2P,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,gBAAAiE,IAAA,SAAAiY,GAAA,OAAA5X,EAAAkU,UAAA0D,IACApc,2CAAAC,EAAAzB,cAAA6d,iDAAA,GAAAlY,IAAA,SAAAY,GAAA,OAAAP,EAAAqU,QAAA9T,GACAmO,IAAA7iB,KACAoU,gBACAmU,OAAAvoB,KAAAuoB,SAEA5Y,2CAAAC,EAAAzB,cAAA8d,iFAAA,GAAAC,oBAAAT,mEAAA,IAEA9b,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,uBACAF,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,kBACA7P,KAAAuO,MAAAkH,OAAA,YACA1F,MAAA,CACAoc,WAAAnsB,KAAAosB,oBAAA,mBACAC,QAAArsB,KAAAuO,MAAAmb,iBAAA,YAGA/Z,2CAAAC,EAAAzB,cAAAme,qDAAA,GAAAxY,IAAA,SAAA8S,GAAA,OAAAzS,EAAAmU,UAAA1B,GACAxS,mBAGAzE,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,sBACA7P,KAAAuO,MAAAkH,OAAA,YACA1F,MAAA,CACAoc,WAAAnsB,KAAAosB,oBAAA,qBAGAzc,2CAAAC,EAAAzB,cAAA4c,oDAAA,GAAAjX,IAAA,SAAAyY,GAAA,OAAApY,EAAA2K,SAAAyN,GACA1J,IAAA7iB,KACAoU,gBACAyX,YAGAlc,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,oBACA7P,KAAAuO,MAAAkH,OAAA,aACAzV,KAAAuO,MAAAkb,aAAA,mBAEA9Z,2CAAAC,EAAAzB,cAAAqe,+CAAA,GAAA1Y,IAAA,SAAA2Y,GAAA,OAAAtY,EAAAoU,OAAAkE,GACA5J,IAAA7iB,KACAoU,gBACAoU,QAAAxoB,KAAAwoB,+IAlVA7Y,2CAAAC,EAAAO,oBA0VAlP,OAAAyrB,mDAAA,IAAAzrB,CAAAmnB,gCAAe1mB,oBAAA,mjBA1Vf0mB,wpECrBAuE,sCAEA,SAAAA,WAAApd,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAA2sB,aACA7nB,EAAA0K,2BAAAxP,KAAAyP,gBAAAkd,YAAAjd,KAAA1P,KAAAuP,KAEAhB,MAAA,CACA4G,KAAArQ,EAAAyK,MAAA8F,eAAA,GAGAvQ,EAAAmL,QAAAnL,EAAAmL,QAAA9P,KAAAwZ,8CAAA7U,KAPAA,uGAUA3D,GAGAnB,KAAAkgB,SAAA,SAAAC,EAAA5Q,GACA,OAAA4F,MAAAgL,EAAAhL,QAIAnV,KAAAuP,MAAAU,SAEAjQ,KAAAuP,MAAAU,QAAA9O,oCAMA,OAAAwO,2CAAAC,EAAAzB,cAAA,UACA0B,UAAA,4BAAA7P,KAAAuO,MAAA4G,KAAA,aAAAnV,KAAAuP,MAAAM,UACAzH,GAAApI,KAAAuP,MAAAnH,GACA0H,MAAA9P,KAAAuP,MAAAO,MACAC,MAAA/P,KAAAuP,MAAAQ,MACAC,SAAAhQ,KAAAuP,MAAAS,SACAC,QAAAjQ,KAAAiQ,SACAjQ,KAAAuP,MAAAW,mJApCAP,2CAAAC,EAAAO,oBAyCAwc,sCAAejrB,oBAAA,6jBAzCfirB,i/DCDAC,wCAEA,SAAAA,aAAArd,GACA,OAAA7K,gBAAA1E,KAAA4sB,cAAApd,2BAAAxP,KAAAyP,gBAAAmd,cAAAld,KAAA1P,KACAuP,8GAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,gBAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,mBACA3C,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,gBAAA6I,KAAA,qJAXAxL,2CAAAC,EAAAO,oBAgBAyc,wCAAelrB,oBAAA,ikBAhBfkrB,y/DCAAG,sCAEA,SAAAA,WAAAxd,GACA,OAAA7K,gBAAA1E,KAAA+sB,YAAAvd,2BAAAxP,KAAAyP,gBAAAsd,YAAArd,KAAA1P,KACAuP,0GAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,cAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,sHACA3C,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,gBAAA6I,KAAA,mJAXAxL,2CAAAC,EAAAO,oBAgBA4c,sCAAerrB,oBAAA,6jBAhBfqrB,m0BCFA,IAAAlU,IAAA,EACAC,OAAA,EACAC,IAAA,EAEAiU,eAEA,SAAAA,MACAtoB,gBAAA1E,KAAAgtB,KACAhtB,KAAAqZ,QAAA,GACArZ,KAAAuZ,aAAA,GACAvZ,KAAAitB,aAAA,GAEAjtB,KAAAktB,gBAAA,0DAKAltB,KAAAqZ,QAAAhY,OAAA,EACArB,KAAAuZ,aAAAlY,OAAA,EACArB,KAAAitB,aAAA5rB,OAAA,EAEArB,KAAAktB,gBAAA7rB,OAAA,+BAGA8rB,GAEAntB,KAAAqZ,QAAAhY,OAAA,EADA,IAAAyL,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAEA,QAAA2L,EAAAC,EAAAigB,EAAA9T,QAAAjM,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADAyB,EACAtB,EAAAlN,MACAC,KAAAqZ,QAAAxM,KAAA0B,IAJA,MAAAX,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAMAhN,KAAAuZ,aAAAlY,OAAA,EANA,IAAAoN,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IAOA,QAAAsN,EAAAC,EAAAse,EAAA5T,aAAAnM,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA,KADAW,EACAR,EAAA7O,MACAC,KAAAuZ,aAAA1M,KAAAuC,EAAAqC,UATA,MAAA7D,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,GAWA3O,KAAAitB,aAAA5rB,OAAA,EAXA,IAAA0N,GAAA,EAAAC,GAAA,EAAAC,OAAA3N,EAAA,IAYA,QAAA4N,EAAAC,EAAAge,EAAAF,aAAA7f,OAAAC,cAAA0B,GAAAG,EAAAC,EAAA7B,QAAAC,MAAAwB,GAAA,EACA,KADA5D,EACA+D,EAAAnP,MACAC,KAAAitB,aAAApgB,KAAA1B,IAdA,MAAAyC,GAAAoB,GAAA,EAAAC,EAAArB,EAAA,YAAAmB,GAAA,MAAAI,EAAAtB,QAAAsB,EAAAtB,SAAA,WAAAmB,EAAA,MAAAC,GAgBAjP,KAAAktB,gBAAA7rB,OAAA,EAhBA,IAAA+a,GAAA,EAAAC,GAAA,EAAAC,OAAAhb,EAAA,IAiBA,QAAAib,EAAAC,EAAA2Q,EAAAD,gBAAA9f,OAAAC,cAAA+O,GAAAG,EAAAC,EAAAlP,QAAAC,MAAA6O,GAAA,EACA,KADA7P,EACAgQ,EAAAxc,MACAC,KAAAktB,gBAAArgB,KAAAN,IAnBA,MAAAqB,GAAAyO,GAAA,EAAAC,EAAA1O,EAAA,YAAAwO,GAAA,MAAAI,EAAA3O,QAAA2O,EAAA3O,SAAA,WAAAwO,EAAA,MAAAC,qCAuBA/N,GAEA,GAAAvO,KAAAqZ,QAAAC,SAAA/K,GAEA,UAAArO,MAAA,UAAAqO,EAAA,8BAIA,OADAvO,KAAAqZ,QAAAxM,KAAA0B,GACAA,sCAGAA,GAEA,IAAAvO,KAAAqZ,QAAAC,SAAA/K,GAEA,UAAArO,MAAA,UAAAqO,EAAA,qBAGAvO,KAAAqZ,QAAAmO,OAAAxnB,KAAAqZ,QAAA7H,QAAAjD,GAAA,uCAGA6e,EAAAC,GAEA,IAAArtB,KAAAqZ,QAAAC,SAAA8T,GAEA,UAAAltB,MAAA,UAAAktB,EAAA,qBAEA,GAAAptB,KAAAqZ,QAAAC,SAAA+T,GAEA,UAAAntB,MAAA,UAAAmtB,EAAA,qBAPA,IAAA1Q,GAAA,EAAAC,GAAA,EAAAC,OAAAvb,EAAA,IAUA,QAAAwb,EAAAC,EAAA/c,KAAAuZ,aAAAnM,OAAAC,cAAAsP,GAAAG,EAAAC,EAAAzP,QAAAC,MAAAoP,GAAA,EACA,KADAvN,EACA0N,EAAA/c,MACAqP,EAAAyJ,MAAAuU,IAEAhe,EAAAyJ,KAAAwU,GAEAje,EAAA2J,MAAAqU,IAEAhe,EAAA2J,KAAAsU,IAlBA,MAAAzf,GAAAgP,GAAA,EAAAC,EAAAjP,EAAA,YAAA+O,GAAA,MAAAI,EAAAlP,QAAAkP,EAAAlP,SAAA,WAAA+O,EAAA,MAAAC,GAsBA,IAAA8E,EAAA3hB,KAAAqZ,QAAA7H,QAAA4b,GACAptB,KAAAqZ,QAAAsI,GAAA0L,wCAGAlU,EAAAC,EAAA7M,GAEA,IAAAvM,KAAAqZ,QAAAC,SAAAH,GAEA,UAAAjZ,MAAA,UAAAiZ,EAAA,qBAGA,IAAAnZ,KAAAqZ,QAAAC,SAAAF,GAEA,UAAAlZ,MAAA,UAAAkZ,EAAA,qBARA,IAAAkU,GAAA,EAAAC,GAAA,EAAAC,OAAAlsB,EAAA,IAYA,QAAAmsB,EAAAC,EAAA1tB,KAAAuZ,aAAAnM,OAAAC,cAAAigB,GAAAG,EAAAC,EAAApgB,QAAAC,MAAA+f,GAAA,EACA,KADAle,EACAqe,EAAA1tB,MACA,GAAAqP,EAAAyJ,MAAAM,GAAA/J,EAAA0J,SAAAvM,GAAA6C,EAAA2J,MAAAK,EAEA,QAhBA,MAAAxL,GAAA2f,GAAA,EAAAC,EAAA5f,EAAA,YAAA0f,GAAA,MAAAI,EAAA7f,QAAA6f,EAAA7f,SAAA,WAAA0f,EAAA,MAAAC,GAqBAxtB,KAAAuZ,aAAA1M,KAAA,CAAAsM,EAAA5M,EAAA6M,6CAGAD,EAAAC,GAEA,IADA,IADA7M,EACAnL,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAEAiF,EAAArG,KAAAuZ,aAAAlY,OAAA,EAAAgF,GAAA,IAAAA,EACA,CACA,IAAA+I,EAAApP,KAAAuZ,aAAAlT,GACA+I,EAAAyJ,MAAAM,GAAA/J,EAAA2J,MAAAK,IAGA,MAAA7M,GAAA6C,EAAA0J,SAAAvM,GAEAvM,KAAAuZ,aAAAiO,OAAAnhB,EAAA,uCAMAkG,GAEA,GAAAvM,KAAAktB,gBAAA5T,SAAA/M,GAEA,UAAArM,MAAA,WAAAqM,EAAA,gCAGAvM,KAAAktB,gBAAArgB,KAAAN,wCAGAA,GAEA,IAAAvM,KAAAktB,gBAAA5T,SAAA/M,GAEA,UAAArM,MAAA,4BAAAqM,EAAA,MAGAvM,KAAAktB,gBAAA1F,OAAAxnB,KAAAktB,gBAAA1b,QAAAjF,GAAA,yCAGAgC,GAEA,GAAAvO,KAAAqZ,QAAAhY,QAAA,EAEA,UAAAnB,MAAA,sBAGA,IAAAF,KAAAqZ,QAAAC,SAAA/K,GAEA,UAAArO,MAAA,UAAAqO,EAAA,qBAGAvO,KAAA0hB,iBAAAnT,IAEAvO,KAAAqZ,QAAAmO,OAAAxnB,KAAAqZ,QAAA7H,QAAAjD,GAAA,GACAvO,KAAAqZ,QAAAsU,QAAApf,0CAGAA,GACA,IADAqf,IACAxsB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACA,IAAApB,KAAAqZ,QAAAC,SAAA/K,GAEA,UAAArO,MAAA,UAAAqO,EAAA,qBAGA,GAAAqf,EACA,CACA,GAAA5tB,KAAAitB,aAAA3T,SAAA/K,GAAA,OAEAvO,KAAAitB,aAAApgB,KAAA0B,OAGA,CACA,IAAAvO,KAAAitB,aAAA3T,SAAA/K,GAAA,OACAvO,KAAAitB,aAAAzF,OAAAxnB,KAAAitB,aAAAzb,QAAAjD,GAAA,yCAIAA,EAAAhC,GACA,IAAAshB,GAAA,EAAAC,GAAA,EAAAC,OAAAzsB,EAAA,IACA,QAAA0sB,EAAAC,EAAAjuB,KAAAuZ,aAAAnM,OAAAC,cAAAwgB,GAAAG,EAAAC,EAAA3gB,QAAAC,MAAAsgB,GAAA,EACA,KADAze,EACA4e,EAAAjuB,MACA,GAAAqP,EAAAyJ,MAAAtK,GAAAa,EAAA0J,SAAAvM,EAEA,OAAA6C,EAAA2J,MALA,MAAAnL,GAAAkgB,GAAA,EAAAC,EAAAngB,EAAA,YAAAigB,GAAA,MAAAI,EAAApgB,QAAAogB,EAAApgB,SAAA,WAAAigB,EAAA,MAAAC,GAQA,iDAGAxf,GAEA,OAAAvO,KAAAitB,aAAA3T,SAAA/K,oCAGAA,GAEA,OAAAvO,KAAAqZ,QAAAC,SAAA/K,uCAKA,OAAAvO,KAAAqZ,+CAIA9M,GACA,IAAA2hB,GAAA,EAAAC,GAAA,EAAAC,OAAA9sB,EAAA,IACA,QAAA+sB,EAAAC,EAAAtuB,KAAAuZ,aAAAnM,OAAAC,cAAA6gB,GAAAG,EAAAC,EAAAhhB,QAAAC,MAAA2gB,GAAA,EACA,CACA,GADAG,EAAAtuB,MACA+Y,SAAAvM,EAEA,UALA,MAAAqB,GAAAugB,GAAA,EAAAC,EAAAxgB,EAAA,YAAAsgB,GAAA,MAAAI,EAAAzgB,QAAAygB,EAAAzgB,SAAA,WAAAsgB,EAAA,MAAAC,GAQA,4CAIA7hB,GACA,IAAAgiB,GAAA,EAAAC,GAAA,EAAAC,OAAAntB,EAAA,IACA,QAAAotB,EAAAC,EAAA3uB,KAAAktB,gBAAA9f,OAAAC,cAAAkhB,GAAAG,EAAAC,EAAArhB,QAAAC,MAAAghB,GAAA,EACA,CACA,GADAG,EAAA3uB,OACAwM,EAAA,UAHA,MAAAqB,GAAA4gB,GAAA,EAAAC,EAAA7gB,EAAA,YAAA2gB,GAAA,MAAAI,EAAA9gB,QAAA8gB,EAAA9gB,SAAA,WAAA2gB,EAAA,MAAAC,GAMA,OAAAzuB,KAAA4uB,eAAAriB,6CAIA,IACAxH,EADA3D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,GACAytB,GAAA,EAAAC,GAAA,EAAAC,OAAAztB,EAAA,IAEA,QAAA0tB,EAAAC,EAAAjvB,KAAAuZ,aAAAnM,OAAAC,cAAAwhB,GAAAG,EAAAC,EAAA3hB,QAAAC,MAAAshB,GAAA,EACA,KACAtiB,EADAyiB,EAAAjvB,MACA+Y,QACAvM,EAAAlL,OAAA,IAAA0D,EAAAuU,SAAA/M,IAEAxH,EAAA8H,KAAAN,IAPA,MAAAqB,GAAAkhB,GAAA,EAAAC,EAAAnhB,EAAA,YAAAihB,GAAA,MAAAI,EAAAphB,QAAAohB,EAAAphB,SAAA,WAAAihB,EAAA,MAAAC,GAUA,OAAAhqB,wCAIA,IACAA,EADA3D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,GACA8tB,GAAA,EAAAC,GAAA,EAAAC,OAAA9tB,EAAA,IAEA,QAAA+tB,EAAAC,EAAAtvB,KAAAktB,gBAAA9f,OAAAC,cAAA6hB,GAAAG,EAAAC,EAAAhiB,QAAAC,MAAA2hB,GAAA,EACA,KADA1c,EACA6c,EAAAtvB,MACAgF,EAAA8H,KAAA2F,IAJA,MAAA5E,GAAAuhB,GAAA,EAAAC,EAAAxhB,EAAA,YAAAshB,GAAA,MAAAI,EAAAzhB,QAAAyhB,EAAAzhB,SAAA,WAAAshB,EAAA,MAAAC,GAMA,OAAApvB,KAAAuvB,gBAAAxqB,oDAIA,IADAwJ,EACAnN,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAEA2D,EADA3D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,GACAouB,GAAA,EAAAC,GAAA,EAAAC,OAAApuB,EAAA,IAEA,QAAAquB,EAAAC,EAAA5vB,KAAAuZ,aAAAnM,OAAAC,cAAAmiB,GAAAG,EAAAC,EAAAtiB,QAAAC,MAAAiiB,GAAA,EACA,KADApgB,EACAugB,EAAA5vB,MACAqP,EAAAyJ,MAAAtK,GACAxJ,EAAA8H,KAAAuC,IALA,MAAAxB,GAAA6hB,GAAA,EAAAC,EAAA9hB,EAAA,YAAA4hB,GAAA,MAAAI,EAAA/hB,QAAA+hB,EAAA/hB,SAAA,WAAA4hB,EAAA,MAAAC,GAOA,OAAA3qB,2CAKA,OAAA/E,KAAAuZ,qDAKA,OAAAvZ,KAAAqZ,QAAAhY,QAAA,OAAArB,KAAAqZ,QAAA,4CAKA,OAAArZ,KAAAitB,kDAKA,IAAA4C,EAAA7vB,KAAA8vB,cACAC,EAAA,IAAA9nB,MAAA4nB,EAAAxuB,QACA0uB,EAAA5U,MAAA,GAHA,IAAA6U,GAAA,EAAAC,GAAA,EAAAC,OAAA5uB,EAAA,IAKA,QAAA6uB,EAAAC,EAAApwB,KAAAqZ,QAAAjM,OAAAC,cAAA2iB,GAAAG,EAAAC,EAAA9iB,QAAAC,MAAAyiB,GAAA,EACA,KADAzhB,EACA4hB,EAAApwB,MAEAkc,EAAAjc,KAAAkc,uBAAA3N,GAFA8hB,GAAA,EAAAC,GAAA,EAAAC,OAAAjvB,EAAA,IAGA,QAAAkvB,EAAAC,EAAAxU,EAAA7O,OAAAC,cAAAgjB,GAAAG,EAAAC,EAAAnjB,QAAAC,MAAA8iB,GAAA,EACA,KADAjhB,EACAohB,EAAAzwB,MACA4hB,EAAAkO,EAAAre,QAAApC,EAAA,IACA,MAAA2gB,EAAApO,GAOA,SALAoO,EAAApO,IAAA,GARA,MAAA/T,GAAA0iB,GAAA,EAAAC,EAAA3iB,EAAA,YAAAyiB,GAAA,MAAAI,EAAA5iB,QAAA4iB,EAAA5iB,SAAA,WAAAyiB,EAAA,MAAAC,GAmBA,IADA,IAAAlvB,EAAA0uB,EAAA1uB,OACAgF,EAAA,EAAAA,EAAAhF,IAAAgF,EACA,CACA,MAAA0pB,EAAA1pB,GAGA,SAEA0pB,EAAA1pB,IAAA,IAhCA,MAAAuH,GAAAqiB,GAAA,EAAAC,EAAAtiB,EAAA,YAAAoiB,GAAA,MAAAI,EAAAviB,QAAAuiB,EAAAviB,SAAA,WAAAoiB,EAAA,MAAAC,GAoCA,0CAKA,IAAAnrB,EAAA,GAWA,OAVA/E,gBAAAgZ,IAAAjU,EAAAmJ,KAAA,MACAlO,gBAAA+b,IAAAhX,EAAAmJ,KAAA,MACAnJ,EAAAmJ,KAAA,MACAnJ,EAAA0X,OAAAzc,KAAAqZ,QAAA5H,QACA1M,EAAA8qB,SAAA7vB,KAAAktB,gBAAAzb,QACA1M,EAAA2rB,aAAA1wB,KAAAuvB,kBACAxqB,EAAAkX,YAAAjc,KAAAuZ,aAAA9H,QACA1M,EAAA4rB,WAAA3wB,KAAA0hB,gBACA3c,EAAA6rB,YAAA5wB,KAAAitB,aAAAxb,QAEA1M,+IAIAioB,+BAAetrB,oBAAA,mjBAjWfmX,6FACAC,mGACAC,6FAEAiU,y9DCFA6D,sCAEA,SAAAA,WAAAthB,GACA,OAAA7K,gBAAA1E,KAAA6wB,YAAArhB,2BAAAxP,KAAAyP,gBAAAohB,YAAAnhB,KAAA1P,KACAuP,0GAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,cAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,6LAVA3C,2CAAAC,EAAAO,oBAeA0gB,sCAAenvB,oBAAA,6jBAffmvB,i/DCAAC,oCAEA,SAAAA,SAAAvhB,GACA,OAAA7K,gBAAA1E,KAAA8wB,UAAAthB,2BAAAxP,KAAAyP,gBAAAqhB,UAAAphB,KAAA1P,KACAuP,sGAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,YAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,uHACA3C,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,OAAA7I,EAAA,0JAXA3C,2CAAAC,EAAAO,oBAgBA2gB,oCAAepvB,oBAAA,yjBAhBfovB,+zBCCAC,mCAEA,SAAAA,0BAAArsB,gBAAA1E,KAAA+wB,4GAOAC,GAAA,8CAQAA,GAAA,iDAQAA,GAAA,iDASAA,GAAA,6CAQAA,GAAA,4CAQAA,uCAQAA,6CAKAA,yCAMAA,EAAAC,EAAAhM,GAEA,0KAIA8L,mDAAervB,oBAAA,mnBA3EfqvB,q0ECDAG,kCAEA,SAAAA,UAAA9oB,EAAAC,EAAAC,GACA,IAAAxD,EAAA,OAAAJ,gBAAA1E,KAAAkxB,YACApsB,EAAA0K,2BAAAxP,KAAAyP,gBAAAyhB,WAAAxhB,KAAA1P,KAAAoI,KAEAC,IACAvD,EAAAwD,IAEAxD,EAAAqsB,OAAA,GANArsB,uGASAyD,GAGA,OADAvI,KAAAmxB,OAAA5oB,EACAvI,4CAKA,OAAAA,KAAAmxB,6CAKA,kDAKA,IADAzd,IACAtS,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACA,OAAAsS,EAEAP,KAAA1D,gBAAAyhB,UAAA9d,WAAA,gBAAApT,MAAA0P,KAAA1P,KAAA0T,GAAA,IAAA5N,KAAA6M,MAAA3S,KAAAqI,GAAA,IAAAvC,KAAA6M,MAAA3S,KAAAsI,GAAA,IAAAtI,KAAAmxB,OAIAhe,KAAA1D,gBAAAyhB,UAAA9d,WAAA,gBAAApT,MAAA0P,KAAA1P,KAAA0T,GAAA,IAAA1T,KAAAmxB,+IArCAC,mDAAA,YA0CAF,qCAAexvB,oBAAA,2jBA1CfwvB,m0BCFAG,wBAEA,SAAAA,aAAAjpB,GACA1D,gBAAA1E,KAAAqxB,cACArxB,KAAAsxB,IAAAlpB,4EAGAmpB,GAGA,OADAvxB,KAAAsxB,IAAAC,EACAvxB,iDAMA,OAAAA,KAAAsxB,8CAUAlwB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACA,OAAApB,KAAAsxB,0JAGAD,wCAAe3vB,oBAAA,ikBA9Bf2vB,6vECEAG,kCAEA,SAAAA,UAAAppB,EAAAoB,GACA,IAAA1E,EADA2E,EACArI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAIA,GAHAsD,gBAAA1E,KAAAwxB,WACA1sB,EAAA0K,2BAAAxP,KAAAyP,gBAAA+hB,WAAA9hB,KAAA1P,KAAAoI,KAEAoB,EAAA,UAAAtJ,MAAA,kCAHA,OAKA4E,EAAA0Y,MAAAhU,EACA1E,EAAA2Y,IAAAhU,EAEA3E,EAAAqsB,OAAA,GARArsB,wGAWAyB,GAEA,IAAAA,EAAA,UAAArG,MAAA,kCAGA,OADAF,KAAAwd,MAAAjX,EACAvG,6CAKA,OAAAA,KAAAwd,iDAGAjX,GAGA,OADAvG,KAAAyd,IAAAlX,EACAvG,mDAGAuG,GAEAvG,KAAAyd,IAAAlX,+CAKA,OAAAvG,KAAAyd,yCAGAlV,GAEAvI,KAAAmxB,OAAA5oB,yCAKA,OAAAvI,KAAAmxB,kDAKA,IAAA3nB,EAAAxJ,KAAAwd,MACA/T,EAAAzJ,KAAAyd,IACAsG,EAAAje,KAAAuY,GAAA,EACAtZ,EAAA,EAEA,GAAA/E,KAAAyxB,gBAEA1sB,EAAAe,KAAAuY,GAAA,MAGA,CACA,IAAAqT,EAAAjoB,EAAAnB,EAAAkB,EAAAlB,EACAqpB,EAAAloB,EAAApB,EAAAmB,EAAAnB,EACAtD,EAAAe,KAAA8rB,MAAAF,EAAAC,GAQA,OALA5sB,EAAAgf,GAAAhf,GAAAgf,KAEAhf,GAAAe,KAAAuY,IAGAtZ,0CAIA,IADAU,EACArE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,CAAAiH,EAAA,EAAAC,EAAA,GAEAkB,EAAAxJ,KAAAwd,MAGA,OAFA/X,EAAA4C,EAAAmB,EAAAnB,EACA5C,EAAA6C,EAAAkB,EAAAlB,EACA7C,2CAIA,IADAA,EACArE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,CAAAiH,EAAA,EAAAC,EAAA,GAEAkB,EAAAxJ,KAAAwd,MACA/T,EAAAzJ,KAAAyd,IACA,GAAAzd,KAAAyxB,gBACA,CACA,IAAAI,EAAA7xB,KAAA8xB,uBAAA,EACArsB,EAAA4C,EAAAmB,EAAAnB,EAAAwpB,EACApsB,EAAA6C,EAAAkB,EAAAlB,EAAAupB,OAIApsB,EAAA4C,EAAAmB,EAAAnB,GAAAoB,EAAApB,EAAAmB,EAAAnB,GAAA,EACA5C,EAAA6C,EAAAkB,EAAAlB,GAAAmB,EAAAnB,EAAAkB,EAAAlB,GAAA,EAEA,OAAA7C,wCAIA,IADAA,EACArE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,CAAAiH,EAAA,EAAAC,EAAA,GAEA,GAAAtI,KAAAyxB,gBACA,CACA,IAAAjoB,EAAAxJ,KAAAwd,MACAuU,EAAA/xB,KAAA8xB,uBACArsB,EAAA4C,EAAAmB,EAAAnB,EAAA0pB,EACAtsB,EAAA6C,EAAAkB,EAAAlB,EAAAypB,MAGA,CACA,IAAAtoB,EAAAzJ,KAAAyd,IACAhY,EAAA4C,EAAAoB,EAAApB,EACA5C,EAAA6C,EAAAmB,EAAAnB,EAEA,OAAA7C,iDAKA,OAAAzF,KAAAwd,MAAA2G,sDAKA,OAAAnkB,KAAAyd,yCAKA,OAAAzd,KAAAwd,QAAAxd,KAAAyd,4CAKA,IADA/J,IACAtS,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACAiX,EAAArY,KAAAwd,MAAAxd,KAAAwd,MAAAwU,cAAAte,GAAA,GAEAjO,EAAAzF,KAAAyd,IAAAzd,KAAAyd,IAAAuU,cAAAhyB,KAAAyd,IAAAuU,cAAAte,GAAA,OACA,OAAAP,KAAA1D,gBAAA+hB,UAAApe,WAAA,gBAAApT,MAAA0P,KAAA1P,KAAA0T,GAAA,IAAA2E,EAAA,IAAA5S,EAAA,IAAAzF,KAAAmxB,+IAhJAC,mDAAA,YAoJAI,qCAAe9vB,oBAAA,2jBApJf8vB,6+DCAAS,oCAEA,SAAAA,SAAA1iB,GACA,OAAA7K,gBAAA1E,KAAAiyB,UAAAziB,2BAAAxP,KAAAyP,gBAAAwiB,UAAAviB,KAAA1P,KACAuP,sGAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,YAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,gBAAA6I,KAAA,SACAxL,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,2RAXA3C,2CAAAC,EAAAO,oBAgBA8hB,oCAAevwB,oBAAA,yjBAhBfuwB,y+DCAAC,oCAEA,SAAAA,SAAA3iB,GACA,OAAA7K,gBAAA1E,KAAAkyB,UAAA1iB,2BAAAxP,KAAAyP,gBAAAyiB,UAAAxiB,KAAA1P,KACAuP,sGAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,YAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,gBAAA6I,KAAA,SACAxL,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,4RAXA3C,2CAAAC,EAAAO,oBAgBA+hB,oCAAexwB,oBAAA,yjBAhBfwwB,y+DCAAC,0DAEA,SAAAA,+BAAA5iB,GACA,IAAAzK,EAAAJ,gBAAA1E,KAAAmyB,iCACArtB,EAAA0K,2BAAAxP,KAAAyP,gBAAA0iB,gCAAAziB,KAAA1P,KAAAuP,KAEA+Q,YAAA,EACAxb,EAAAyb,YAAA,GACA,IAAAC,EAAAjR,EAAAkR,QAAA1gB,MALA+M,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAMA,QAAA2L,EAAAC,EAAAsT,EAAApT,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADA+M,EACA5M,EAAAlN,MACA+E,EAAAyb,YAAAlf,OAAA,IAEAyD,EAAAyb,aAAA,MAEAzb,EAAAyb,aAAA1G,EAAArR,gBAZA,MAAAoF,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAAA,OAeAlI,EAAAmL,QAAAnL,EAAAmL,QAAA9P,KAAAwZ,8CAAA7U,KAfAA,+IAkBA3D,GAEA,IAAAwf,EAAA3gB,KAAAuP,MAAAoR,gBACA9B,EAAA7e,KAAAuP,MAAAsP,kBACA+B,EAAAzf,EAAA0Y,OAAA9Z,MACA0gB,EAAAzgB,KAAAuP,MAAAkR,QACA,OAAAG,GAEA,aAGA,IAAA/G,EAAA4G,EAAA1gB,MAAAC,KAAAsgB,eACAtgB,KAAAsgB,aAAAG,EAAA1gB,MAAAsB,SAEArB,KAAAsgB,YAAA,GAIAK,EAAAyR,YAAAvY,GAEA,MACA,gBAEA,IAAAgH,EAAAJ,EAAA1gB,MAEA4gB,EAAA0R,kBAAAxR,GAGAhC,EAAAa,oBAAA4S,QAAAC,wBAGA9R,EAAAS,QAEA,MACA,QACA,UAAAhhB,MAAA,sEAOA,OAAAyP,2CAAAC,EAAAzB,cAAA,WACAwB,2CAAAC,EAAAzB,cAAA,SAAAiT,KAAApP,SAAA,oCAAAhS,KAAAugB,aACA5Q,2CAAAC,EAAAzB,cAAA,UAAApO,MAAA,SAAAkQ,QAAAjQ,KAAAiQ,SAAAmR,KAAApP,SAAA,0BACArC,2CAAAC,EAAAzB,cAAA,UAAApO,MAAA,YAAAkQ,QAAAjQ,KAAAiQ,SAAAmR,KAAApP,SAAA,2LAlEArC,2CAAAC,EAAAO,oBAuEAgiB,0DAAezwB,oBAAA,6oBAvEfywB,y7ECIA,IAAAK,kBAAA,EAEAC,oBAAA,GACAC,eAAA,IAEAC,kCAEA,SAAAA,OAAApjB,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAA2yB,SACA7tB,EAAA0K,2BAAAxP,KAAAyP,gBAAAkjB,QAAAjjB,KAAA1P,KAAAuP,KAEAhB,MAAA,CACAqkB,SAAAJ,kBACAK,UAAA,GAGA/tB,EAAAguB,aAAAhuB,EAAAguB,aAAA3yB,KAAAwZ,8CAAA7U,KACAA,EAAAiuB,YAAAjuB,EAAAiuB,YAAA5yB,KAAAwZ,8CAAA7U,KACAA,EAAAkuB,SAAAluB,EAAAkuB,SAAA7yB,KAAAwZ,8CAAA7U,KAEAA,EAAAmuB,aAAA,KACAnuB,EAAAouB,YAAA,KAbApuB,8FAgBA6c,GAEA,IAAAkB,EAAA7iB,KAAAuP,MAAAsT,IAGAA,EAAAtU,MAAAkH,OAOAzV,KAAAuO,MAAAqkB,WAAAjR,GAEAkB,EAAAsQ,YAAAtQ,EAAAtU,MAAAkb,cAPA5G,EAAAsQ,aAWAnzB,KAAAkgB,SAAA,SAAAC,EAAA5Q,GACA,OAAAqjB,SAAAjR,yDAIAtZ,EAAAC,GAEA,IAAAua,EAAA7iB,KAAAuP,MAAAsT,IACA7iB,KAAAkgB,SAAA,CAAA2S,UAAA,IAGAhQ,EAAAtU,MAAAkb,cAEA5G,EAAAsQ,YAAA,GAIAC,gBAAAvQ,EAAAxa,EAAAC,wDAKAtI,KAAAkgB,SAAA,CAAA2S,UAAA,yCAGA1xB,GAEAA,EAAA+kB,kBACA/kB,EAAA8kB,iBAEAjmB,KAAAizB,eAEA3b,SAAAzS,oBAAA,YAAA7E,KAAAizB,cACAjzB,KAAAizB,aAAA,MAGAjzB,KAAAkzB,cAEA5b,SAAAzS,oBAAA,WAAA7E,KAAAkzB,aACAlzB,KAAAkzB,YAAA,MAGA,IAAArQ,EAAA7iB,KAAAuP,MAAAsT,IAEA,GAAAA,EAAAtU,MAAAkH,OAAA,CAUA,IAAA4d,EAAAlyB,EAAAmyB,eAAA,GACAtzB,KAAAuzB,4BAAAF,EAAAG,QAAAH,EAAAI,SAEAzzB,KAAAizB,aAAA,SAAAnI,GAEA3pB,EAAA+kB,kBACA/kB,EAAA8kB,iBAEA,IAAAoN,EAAAvI,EAAAwI,eAAA,GACAF,gBAAAvQ,EAAAwQ,EAAAG,QAAAH,EAAAI,UAGAnc,SAAA+P,iBAAArnB,KAAAizB,cAEAjzB,KAAAkzB,YAAA,SAAApI,GAEA3pB,EAAA+kB,kBACA/kB,EAAA8kB,iBAEA,IAAAoN,EAAAvI,EAAAwI,eAAA,GACAF,gBAAAvQ,EAAAwQ,EAAAG,QAAAH,EAAAI,SACAzzB,KAAA0zB,6BAGApc,SAAAzS,oBAAA,WAAA7E,KAAAkzB,aACA5b,SAAAzS,oBAAA,YAAA7E,KAAAizB,eAIA3b,SAAA+P,iBAAA,WAAArnB,KAAAkzB,aACA5b,SAAA+P,iBAAA,YAAArnB,KAAAizB,mBAlCAjzB,KAAAkgB,SAAA,CAAA2S,UAAA,wCAqCA1xB,GACA,IAAAgT,EAAAnU,KACAmB,EAAA+kB,kBACA/kB,EAAA8kB,iBAEA,IAAApD,EAAA7iB,KAAAuP,MAAAsT,IAEA,GAAAA,EAAAtU,MAAAkH,OAAA,CASAzV,KAAAuzB,4BAAApyB,EAAAqyB,QAAAryB,EAAAsyB,SAEA,IAAAE,EAAA,SAAA7I,GACAA,EAAA5E,kBACA4E,EAAA7E,iBAEAmN,gBAAAvQ,EAAAiI,EAAA0I,QAAA1I,EAAA2I,UAgBAnc,SAAA+P,iBAAA,UAbA,SAAAuM,EAAA9I,GACAA,EAAA5E,kBACA4E,EAAA7E,iBAEAmN,gBAAAvQ,EAAAiI,EAAA0I,QAAA1I,EAAA2I,SACAtf,EAAAuf,6BAGApc,SAAAzS,oBAAA,UAAA+uB,GACAtc,SAAAzS,oBAAA,YAAA8uB,KAKArc,SAAA+P,iBAAA,YAAAsM,qCAGAxyB,qCAUA,IAAA2kB,EAAA9lB,KACA6iB,EAAA7iB,KAAAuP,MAAAsT,IACAzO,EAAApU,KAAAuP,MAAA6E,cAIAwe,GAHAxe,EAAAG,qBACAH,EAAAI,uBAEAxU,KAAAuO,MAAAqkB,UACAiB,EAAAzf,IAAA0f,kBAAA,QAEA,OAAAnkB,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,mBAAAkkB,QAAA/zB,KAAAgzB,UACArjB,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,kBAEAuE,GACAA,EAAA0f,kBAAAE,IAAA,SAAAC,EAAA5tB,GACA,IAAA6tB,EAAA7tB,EAAA,EACA,OAAAsJ,2CAAAC,EAAAzB,cAAA8lB,EAAA,CAAAn0B,IAAAsU,EAAA6O,gBAAA,IAAAiR,EACAnkB,MAAA,CAAAyF,QAAAod,GAAAsB,EAAA,gBACA9f,oBAIA,GAAAwe,GAAA,MAAAiB,GACAlkB,2CAAAC,EAAAzB,cAAA0lB,EAAA,CAAAzf,kBAGA+f,gEAAA,EAAAH,IAAA,SAAAC,EAAA5tB,GACA,IAAA6tB,IAAA7tB,EAAA,GACA,OAAAsJ,2CAAAC,EAAAzB,cAAA8lB,EAAA,CAAAn0B,IAAA,WAAAo0B,EACAnkB,MAAA,CAAAyF,QAAAod,GAAAsB,EAAA,gBACA9f,qBAIAzE,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,YACAF,2CAAAC,EAAAzB,cAAAimB,gDAAA,GAAAvR,QAEAzO,GACAA,EAAA0f,kBAAAE,IAAA,SAAAC,EAAA5tB,GAEA,GAAA4tB,EAAAI,iBAAA,CAEA,IAAAH,EAAA7tB,EAAA,EACA,OAAAsJ,2CAAAC,EAAAzB,cAAA,UAAArO,IAAAsU,EAAA6O,gBAAA,IAAAiR,EACArkB,UAAA,YAAA+iB,IAAAsB,EAAA,cACAjkB,QAAA,SAAA6a,GAAA,OAAAhF,EAAAwO,OAAAJ,KACA9S,KAAApP,SAAAiiB,EAAAI,kBAAA,gCAKAF,gEAAA,EAAAH,IAAA,SAAAC,EAAA5tB,GACA,IAAA6tB,IAAA7tB,EAAA,GACA,OAAAsJ,2CAAAC,EAAAzB,cAAA,UAAArO,IAAA,WAAAo0B,EACArkB,UAAA,YAAA+iB,IAAAsB,EAAA,cACAjkB,QAAA,SAAA6a,GAAA,OAAAhF,EAAAwO,OAAAJ,KACA9S,KAAApP,SAAAiiB,EAAAI,kBAAA,+BAIA1kB,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,eAGAF,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,iBAAA7P,KAAAuO,MAAAskB,SAAA,gBACAC,aAAA9yB,KAAA8yB,aACAC,YAAA/yB,KAAA+yB,oJAhPApjB,2CAAAC,EAAAO,WAsPA,SAAAijB,gBAAAvQ,EAAAxa,EAAAC,GAEA,IAAA+f,EAAAxF,EAAAwF,UAEAkM,EAAA,EAEA7c,OAAA8c,WAAA,sBAAAC,QAIAnsB,EADAua,EAAA/D,SAAAhL,IAAA4gB,wBAAApsB,EACAmqB,oBAGA5P,EAAA3C,SAAA,SAAAC,EAAA5Q,GACA,OACAka,cAAA,MAMA8K,EAAAlM,EAAAsM,aAAArsB,EAGAua,EAAAtU,MAAAkb,cAEA5G,EAAA3C,SAAA,SAAAC,EAAA5Q,GACA,OACAka,cAAA,MASAphB,EAAAoqB,oBAGA5P,EAAA3C,SAAA,SAAAC,EAAA5Q,GACA,OACAka,cAAA,MAMA8K,EAAAlM,EAAAuM,YAAAvsB,EAGAwa,EAAAtU,MAAAkb,cAEA5G,EAAA3C,SAAA,SAAAC,EAAA5Q,GACA,OACAka,cAAA,MAQA8K,EAAA7B,iBAAA6B,EAAA7B,gBAGArK,EAAAtY,MAAA8kB,YAAA,eAAAN,EAAA,MAEA5B,OAAAmC,2BAAA,EACAnC,OAAAoC,yBAAA,eAEApC,kCAAejxB,oBAAA,ukBAlUf8wB,mIAEAC,uIACAC,6HAEAC,6GAsPAS,oWChQA,QAAA4B,EAAA,CACA,yEACA,+CACA,gDAIAjwB,EAAA,CACAkwB,KAAAD,KAAA3zB,OAAA,EACAV,IAAA,2BAAAq0B,EAAAtnB,KAAA,SACAwnB,QALA,WAOAnwB,EAAerD,EAAA,6ZAZfszB,kFAKA,4FAEAjwB,k4ECFAowB,mDAEA,SAAAA,qBACA,IAAArwB,EADAswB,EACAh0B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,MACA,OAAAsD,gBAAA1E,KAAAm1B,qBACArwB,EAAA0K,2BAAAxP,KAAAyP,gBAAA0lB,oBAAAzlB,KAAA1P,QACAq1B,WAAAD,EAFAtwB,iIAMAwR,EAAAoF,GAEA,IAAA4M,EAAA5M,EAAA4Z,WACAC,EAAAjN,EAAAxU,IAAAgZ,QAAA0I,QACAhqB,EAAA+pB,EAAA/pB,MACAC,EAAA8pB,EAAA9pB,OACAmL,EAAA0R,EAAAmN,gBAAAjqB,EAAAC,GAEAxK,OAAAy0B,gDAAA,EAAAz0B,CAAAqV,EAAAtW,KAAAq1B,WAAAze,EAAApL,EAAAC,6CAMA,6CAMA,4CAMA,OAAAzL,KAAAq1B,YAEA,iBAAAjU,KAAApP,SAAA,wBACA,iBAAAoP,KAAApP,SAAA,wBACA,eAAAmB,KAAA1D,gBAAA0lB,mBAAA/hB,WAAA,WAAApT,MAAA0P,KAAA1P,0CAOA,OAAAA,KAAAq1B,YAEA,iBAAAjU,KAAApP,SAAA,mBACA,iBAAAoP,KAAApP,SAAA,mBACA,eAAAmB,KAAA1D,gBAAA0lB,mBAAA/hB,WAAA,WAAApT,MAAA0P,KAAA1P,6CAOA,OAAAA,KAAAq1B,kDAMA,OAAAr1B,KAAAq1B,YAEA,iBAAAM,mDAAA,EACA,iBAAAC,mDAAA,EACA,sKAnEAC,uDAAA,YAwEAV,8CAAezzB,oBAAA,qnBAxEfyzB,yzECDAW,uCAEA,SAAAA,YAAAvmB,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAA81B,cACAhxB,EAAA0K,2BAAAxP,KAAAyP,gBAAAqmB,aAAApmB,KAAA1P,KAAAuP,KAEAuE,IAAA,KAEAhP,EAAAyJ,MAAA,CACAhC,OAAA,KACA0M,OAAA,GAGAnU,EAAAixB,cAAAjxB,EAAAixB,cAAA51B,KAAAwZ,8CAAA7U,KACAA,EAAAkxB,QAAAlxB,EAAAkxB,QAAA71B,KAAAwZ,8CAAA7U,KACAA,EAAAogB,OAAApgB,EAAAogB,OAAA/kB,KAAAwZ,8CAAA7U,KACAA,EAAAmxB,UAAAnxB,EAAAmxB,UAAA91B,KAAAwZ,8CAAA7U,KACAA,EAAAqgB,QAAArgB,EAAAqgB,QAAAhlB,KAAAwZ,8CAAA7U,KAdAA,yGAiBA3D,GAEA,IAAA0Y,EAAA1Y,EAAA0Y,OACA7Z,KAAAkgB,SAAA,CACA3T,OAAAvM,KAAAuP,MAAA8I,IACAY,OAAA,GACA,kBAAAY,EAAAyL,WAGAtlB,KAAAuP,MAAAymB,SAAAh2B,KAAAuP,MAAAymB,QAAA70B,kCAGAA,GAEA,IAAA0d,EAAA7e,KAAAuP,MAAAsP,kBACAqX,EAAAl2B,KAAAuO,MAAAhC,OAEA,SAAA2pB,EACA,CACA,IAAAC,EAAAn2B,KAAAuP,MAAA8I,IACA,GAAA6d,EAAA70B,OAAA,EAEAwd,EAAAiR,cACAxW,SAAA4c,KAEAC,EAGAtX,EAAAuX,aAAAD,EAAAD,GAKArX,EAAAwX,aAAAH,SAQAC,GAGAtX,EAAAyX,aAAAH,GAIAn2B,KAAAkgB,SAAA,CAAA3T,OAAA,KAAA0M,OAAA,IAGAjZ,KAAAuP,MAAA2V,QAAAllB,KAAAuP,MAAA2V,OAAA/jB,qCAGAA,GAEAA,EAAAo1B,UAAAC,uCAAA,EAAAh0B,YAAArB,EAAAo1B,UAAAC,uCAAA,EAAA/zB,WAEAtB,EAAA8kB,iDAIA9kB,GAEA,GAAAA,EAAAo1B,UAAAC,uCAAA,EAAAh0B,WAEArB,EAAA0Y,OAAA2L,YAEA,GAAArkB,EAAAo1B,UAAAC,uCAAA,EAAA/zB,UACA,CACA,IAAAoX,EAAA1Y,EAAA0Y,OACA7Z,KAAAkgB,SAAA,CAAA3T,OAAA,KAAA0M,OAAA,cACAY,EAAA2L,gDAKArkB,GAEA,IAAA0d,EAAA7e,KAAAuP,MAAAsP,kBACAtS,EAAApL,EAAA0Y,OAAA9Z,MAAA02B,OACAxd,GAAA,EACA1M,EAAAlL,OAAA,IAEAwd,EAAAiR,cACAxW,SAAA/M,OAAAvM,KAAAuP,MAAA8I,MAEAY,GAAA,IAIAjZ,KAAAkgB,SAAA,CACA3T,SACA0M,2CAKA,IAAA9E,EAAAnU,KACAuM,EAAA,MAAAvM,KAAAuO,MAAAhC,OAAAvM,KAAAuO,MAAAhC,OAAAvM,KAAAuP,MAAA8I,IAGA,OAAA1I,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,uBAEA7P,KAAAuP,MAAA8I,KAAA9L,GAAA,GAAAA,EAAAlL,OAAA,iBACArB,KAAAuO,MAAAhC,QAAAvM,KAAAuO,MAAA0K,MAAA,iBACAtJ,2CAAAC,EAAAzB,cAAA,SAAAD,KAAA,OAAA4F,IAAA,SAAAY,GAAA,OAAAP,EAAAL,IAAAY,GAAA7E,UAAA,iBACA6mB,WAAA,QACAC,UAAA,IACA52B,MAAAwM,EACAmN,SAAA1Z,KAAA+1B,cACAC,QAAAh2B,KAAAg2B,QACA9Q,OAAAllB,KAAAklB,OACAC,QAAAnlB,KAAAmlB,QACA8Q,UAAAj2B,KAAAi2B,uJAtIAtmB,2CAAAC,EAAAO,oBA2IA2lB,uCAAep0B,oBAAA,qoBA3Ifo0B,2sECCAc,iDAEA,SAAAA,sBAAArnB,GACA,OAAA7K,gBAAA1E,KAAA42B,uBAAApnB,2BAAAxP,KAAAyP,gBAAAmnB,uBAAAlnB,KAAA1P,KACAuP,gIAKA,IAAAhJ,EAAAvG,KAAAuP,MAAAhJ,KAEA8B,EAAA9B,EAAA8B,GAAA9B,aAAAswB,0DAAA,KAAAL,uCAAA,EAAApzB,yBACAkF,EAAA/B,EAAA+B,EACA4J,EAAAskB,uCAAA,EAAAxzB,YACAsP,EAAA,EAAAJ,EACA,OAAAvC,2CAAAC,EAAAzB,cAAA,KAAA0B,UAAA,2BACAF,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,gBAAAyC,EACA,KAAAjK,EAAA6J,GAAA,IAAA5J,EACA,MAAAD,EAAAiK,GAAA,KAAAhK,EAAA4J,GACA,MAAA7J,EAAAiK,GAAA,KAAAhK,EAAA4J,GACA,KACAiJ,KAAA,OAEA2b,OAAA,iKAvBAnnB,2CAAAC,EAAAO,oBA4BAymB,iDAAel1B,oBAAA,inBA5Bfk1B,qiDCGAG,2BAEA,SAAAA,gBAAAtX,EAAA/X,GACAhD,gBAAA1E,KAAA+2B,iBACA/2B,KAAAyf,iBACAzf,KAAA0H,QAEA1H,KAAAg3B,WAAA,GACAh3B,KAAAi3B,WAAA,GACAj3B,KAAAk3B,aAAA,GACAl3B,KAAAm3B,aAAA,sEAKAn3B,KAAAg3B,WAAA31B,OAAA,EACArB,KAAAi3B,WAAA51B,OAAA,EACArB,KAAAk3B,aAAA71B,OAAA,EACArB,KAAAm3B,aAAA91B,OAAA,wCAIA,IADA+1B,EACAh2B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GADAuf,EACAvf,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAAAyd,EACAzd,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAGA,UAAApB,KAAAyf,eAAAG,iBAEA,UAAA1f,MAAA,gDAGA,IAAAm3B,EAAAr3B,KAAAyf,eAAA6X,aACA5vB,EAAA1H,KAAA0H,MACAmoB,EAAAwH,EAAAvH,cACAkH,EAAAh3B,KAAAg3B,WACAC,EAAAj3B,KAAAi3B,WACAM,EAAAv3B,KAAAk3B,aACAM,EAAAx3B,KAAAm3B,aACAn3B,KAAA0F,QAEA,IAAA+xB,EAAA,IAAArxB,IAGAsxB,GAFAhwB,EAAAM,eAEA,IACA2vB,EAAA,GACAC,EAAA,GArBA9qB,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAsBA,QAAA2L,EAAAC,EAAAxF,EAAAI,WAAAsF,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADA1F,EACA6F,EAAAlN,MAEA,GAAAqH,EAAAqqB,gBAGAiG,EAAA7qB,KAAAzF,IACA,GAAA6vB,EAAAzlB,QAAApK,IAAA6vB,EAAApqB,KAAAzF,OAGA,CACA,IAAAoC,EAAApC,EAAA8B,gBAEA2uB,GADAzwB,EAAAgC,qBACAhC,EAAA0H,2BAHAC,GAAA,EAAAC,GAAA,EAAAC,OAAA3N,EAAA,IAKA,QAAA4N,EAAAC,EAAA0oB,EAAAzqB,OAAAC,cAAA0B,GAAAG,EAAAC,EAAA7B,QAAAC,MAAAwB,GAAA,EACA,KADAxG,EACA2G,EAAAnP,MAEA,GAAAwI,GAAAmY,gDAAA,EAGAiX,EAAA9qB,KAAAzF,IACA,GAAA6vB,EAAAzlB,QAAApK,IAAA6vB,EAAApqB,KAAAzF,QAIA,GAAAqwB,EAAAnuB,IAAAE,GAKA,CAEA,IAAAsuB,EAAAL,EAAA3wB,IAAA0C,GACAsuB,EAAAxe,SAAA/Q,IAGAqvB,EAAA/qB,KAAAzF,IACA,GAAA6vB,EAAAzlB,QAAApK,IAAA6vB,EAAApqB,KAAAzF,IAIA0wB,EAAAjrB,KAAAtE,QAdAkvB,EAAA7wB,IAAA4C,EAAA,CAAAjB,KAlBA,MAAAqF,GAAAoB,GAAA,EAAAC,EAAArB,EAAA,YAAAmB,GAAA,MAAAI,EAAAtB,QAAAsB,EAAAtB,SAAA,WAAAmB,EAAA,MAAAC,MAhCA,MAAArB,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAwEA,IAAA+qB,EAAA,GAxEAtpB,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IA0EA,QAAAsN,EAAAC,EAAAnH,EAAAE,WAAAwF,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA,KADAlI,EACAqI,EAAA7O,MACAi4B,EAAAP,EAAA3wB,IAAAP,KACAyxB,GAAA,GAAAnI,EAAAxuB,QACA22B,KAAA32B,OAAAwuB,EAAAxuB,UAuBA02B,EAAAlrB,KAAAtG,IACA,GAAAywB,EAAAxlB,QAAAjL,IAAAywB,EAAAnqB,KAAAtG,KAtGA,MAAAqH,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,GA0GA,IAAA5J,IAAA,GAAAiyB,EAAA31B,QAAA,GAAA41B,EAAA51B,QACA,GAAAk2B,EAAAl2B,QAAA,GAAAm2B,EAAAn2B,QAGA,GAAA+1B,EACA,CACA,IAAAa,EAAAC,uCAAA,EAAAv2B,2BAKA,GAHAw2B,kEAAA,EAAAC,cAAAH,GAGAlzB,EAMA,CACA,IAAAwK,EAAA,CAAAoR,kBAAA9B,qBAEAwZ,EAAAr4B,KAAAs4B,sBACAD,EAAAh3B,OAAA,GAEA82B,kEAAA,EAAAI,WAAAF,EACA,UAAAJ,EAAAO,yFAAA,EAAAjpB,GAAA,GAIAmoB,EAAAr2B,OAAA,GAEA82B,kEAAA,EAAAI,WAAA,CAAApX,KAAAC,KAAApP,SAAA,4BAAAwO,QAAAkX,GACA,QAAAO,EAAAQ,iFAAA,EAAAlpB,GAAA,GAEAooB,EAAAt2B,OAAA,GAEA82B,kEAAA,EAAAI,WAAA,CAAApX,KAAAC,KAAApP,SAAA,uBAAAwO,QAAAmX,GACA,QAAAM,EAAAQ,iFAAA,EAAAlpB,GAAA,GAEAqoB,EAAAv2B,OAAA,GAEA82B,kEAAA,EAAAI,WAAA,CAAApX,KAAAC,KAAApP,SAAA,sBAAAwO,QAAAoX,GACA,QAAAK,EAAAQ,iFAAA,EAAAlpB,GAAA,GAEAwoB,EAAA12B,OAAA,GAEA82B,kEAAA,EAAAI,WAAA,CAAA/X,QAAAuX,GACA,QAAAE,EAAAS,6FAAA,EAAAnpB,GAAA,QAjCA4oB,kEAAA,EAAAI,WAAAnX,KAAApP,SAAA,gCAAAimB,EAAA,cAsCA,OAAAlzB,gDAIA,IAAA2C,EAAA1H,KAAA0H,MACA,GAAAA,EAAAixB,gBAAA,WAEA,IAAA9uB,EAAAnC,EAAAI,WACA8B,EAAAlC,EAAAE,WAAA6J,QACA8L,EAAA3T,EAAAgvB,QACAC,EAAA,GAGA,IAFAA,EAAAhsB,KAAA0Q,GAEAsb,EAAAx3B,OAAA,GACA,CACA,IAAAkF,EAAAsyB,EAAAC,MADA1c,GAAA,EAAAC,GAAA,EAAAC,OAAAhb,EAAA,IAEA,QAAAib,EAAAC,EAAA3S,EAAAuD,OAAAC,cAAA+O,GAAAG,EAAAC,EAAAlP,QAAAC,MAAA6O,GAAA,EACA,KADAhV,EACAmV,EAAAxc,MACA,GAAAqH,EAAA8B,kBAAA3C,EACA,CACA,IAAAF,EAAAuD,EAAA4H,QAAApK,EAAAgC,sBACA,GAAA/C,GAAA,EACA,CACA,IAAA0yB,EAAAnvB,EAAA4d,OAAAnhB,EAAA,MACAwyB,EAAAhsB,KAAAksB,MAVA,MAAAnrB,GAAAyO,GAAA,EAAAC,EAAA1O,EAAA,YAAAwO,GAAA,MAAAI,EAAA3O,QAAA2O,EAAA3O,SAAA,WAAAwO,EAAA,MAAAC,IAgBA,OAAA1S,2JAIAmtB,2CAAer1B,oBAAA,mmBArNfq1B,gxHCiBA,IAAAiC,QAAA,QACAC,OAAA,CAAAC,yDAAA,EAAAC,6DAAA,EAAAC,+DAAA,EAAAC,+DAAA,GACAC,UAAA,CACA,IAAAC,4DAAA,EACA,IAAAC,8DAAA,GAGAC,oCAEA,SAAAA,UAAA5W,GACA,IAAA/d,EAAA,OAAAJ,gBAAA1E,KAAAy5B,YACA30B,EAAA0K,2BAAAxP,KAAAyP,gBAAAgqB,WAAA/pB,KAAA1P,KAAA6iB,KAEAyS,WAAA,KAEAxwB,EAAA40B,aAAA,GACA50B,EAAA60B,OAAA,EAEA70B,EAAA80B,iBAAA,IAAAC,4DAAA,EAAAlgB,8CAAA7U,IAAA+d,EAAAiX,mBACAh1B,EAAAi1B,iBAAA,IAAAC,4DAAA,EAAArgB,8CAAA7U,KACAA,EAAAm1B,mBAAA,IAAAC,8DAAA,EAAAvgB,8CAAA7U,KAEAA,EAAAq1B,gBAAA,IAAAC,qDAAA,EAAAt1B,EAAAi1B,iBAAAM,YAEAv1B,EAAAw1B,cAAA,IAAAC,+CAAA,EAAA1X,EAAA2X,kBACA11B,EAAA21B,gBAAA,IAAAC,yDAAA,EAfA51B,uGAmBA+d,GACA,IAAA1O,EAAAnU,KACAmT,KAAA1D,gBAAAgqB,UAAArmB,WAAA,aAAApT,MAAA0P,KAAA1P,KAAA6iB,GAEA,IAAA/D,EAAA+D,EAAA/D,SACAwJ,EAAAzF,EAAAyF,UAEAtoB,KAAAs1B,WAAAhN,EAEAtoB,KAAA45B,iBAAApa,WAAAxf,MACAA,KAAA+5B,iBAAAva,WAAAxf,MACAA,KAAAi6B,mBAAAza,WAAAxf,MAEAA,KAAAm6B,gBAAA3a,WAAAxf,MAEAA,KAAAs6B,cAAA9a,WAAAxf,MAEAA,KAAAy6B,gBAAAjb,WAAAxf,KAAA8e,GASA9e,KAAA+5B,iBAAAn1B,GAAA,sBANA,WACAuP,EAAAylB,iBAAAe,eAEAC,kEAAA,EAAArC,WAAAnX,KAAApP,SAAA,mGAOA6Q,GAEA7iB,KAAAy6B,gBAAAlQ,UAEAvqB,KAAAs6B,cAAA/P,UAEAvqB,KAAAm6B,gBAAA5P,UAEAvqB,KAAAi6B,mBAAA1P,UACAvqB,KAAA+5B,iBAAAxP,UACAvqB,KAAA45B,iBAAArP,UAEApX,KAAA1D,gBAAAgqB,UAAArmB,WAAA,UAAApT,MAAA0P,KAAA1P,KAAA6iB,kCAIAA,GAEA7iB,KAAA45B,iBAAA9N,OAAA9rB,MACAA,KAAA+5B,iBAAAjO,OAAA9rB,QAEAA,KAAA25B,QAAA,IAEA35B,KAAAm6B,gBAAArO,OAAA9rB,MACAA,KAAA25B,OAAA35B,KAAA05B,iDAMA,OAAA15B,KAAA+5B,iBAAAM,uDAKA,OAAAr6B,KAAAy6B,gEAKA,OAAAI,oDAAA,8CAKA,OAAA76B,KAAAm6B,4DAKA,OAAAn6B,KAAAm6B,gBAAAW,qBAAA36B,KAAAH,KAAAm6B,0DAKA,OAAAY,qDAAA,sCAIA/X,GAEA,OAAAA,GAEA,YACA,OAAAgY,2DAAA,EACA,mBACA,OAAAC,mEAAA,EACA,eACA,OAAAC,4DAAA,EAEA,yDAGA,OAAAl7B,KAAA45B,8DAEA,OAAA55B,KAAA+5B,gEAEA,OAAA/5B,KAAAi6B,+DAEA,OAAAX,qDAEA,OAAAN,kDAEA,OAAAC,+CAEA,6DAEA,OAAAj5B,KAAAm6B,gBAAAva,yJA3IAub,gEAAA,YA6IA1B,qCAAe/3B,oBAAA,ukBApJfs3B,+GACAC,6GACAK,mHAKAG,2/DC/BA2B,4DAEA,SAAAA,iCAAA7rB,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAAo7B,mCACAt2B,EAAA0K,2BAAAxP,KAAAyP,gBAAA2rB,kCAAA1rB,KAAA1P,KAAAuP,KACAU,QAAAnL,EAAAmL,QAAA9P,KAAAwZ,8CAAA7U,KAFAA,mJAKA3D,GAEA,IAAAsf,EAAAzgB,KAAAuP,MAAAkR,QAGA,OAFAtf,EAAA0Y,OAAA9Z,OAIA,cAEAC,KAAAuP,MAAAsP,kBACAwc,iBAAA,OACA5a,EAAAS,QAEA,MACA,QACA,UAAAhhB,MAAA,sEAMA,IAEAo7B,EAFAt7B,KAAAuP,MAAAsP,kBACAa,oBAAA4X,aACApa,YAAA7b,OAEA,OAAAsO,2CAAAC,EAAAzB,cAAA,WACAwB,2CAAAC,EAAAzB,cAAA,SAAAiT,KAAApP,SAAA,oCACArC,2CAAAC,EAAAzB,cAAA,YAAAiP,OAAAke,EAAA,eAAAle,OAAAtX,KAAAy1B,IAAA,EAAAD,GAAA,YACA3rB,2CAAAC,EAAAzB,cAAA,UAAApO,MAAA,UAAAkQ,QAAAjQ,KAAAiQ,SAAAmR,KAAApP,SAAA,2LApCArC,2CAAAC,EAAAO,oBA0CAirB,4DAAe15B,oBAAA,ipBA1Cf05B,spCCOAI,wBAEA,SAAAA,eACA92B,gBAAA1E,KAAAw7B,cACAx7B,KAAAy7B,YAAA,KACAz7B,KAAA07B,SAAA,KACA17B,KAAA27B,QAAA,CACAC,WAAA,KACAC,SAAA,KACAC,WAAA,KACAC,UAAA,KACAC,OAAA,MAEAh8B,KAAAi8B,SAAA,KAEAj8B,KAAAk8B,UAAA,IAAAC,iDAAA,EAIAn8B,KAAAo8B,WAAA,EACAp8B,KAAAq8B,WAAA,EAEAr8B,KAAAs8B,gBAAApE,uCAAA,EAAAn0B,eACA/D,KAAAu8B,eAAArE,uCAAA,EAAAp0B,iBACA9D,KAAAw8B,mBAAAtE,uCAAA,EAAAl2B,mBACAhC,KAAAy8B,cAAA,GAAAvE,uCAAA,EAAAr0B,kBACA7D,KAAA08B,mBAAAxE,uCAAA,EAAAr0B,kBAAAq0B,uCAAA,EAAA/zB,oBAEAnE,KAAA28B,iBAAA,EACA38B,KAAA48B,eAAA,EACA58B,KAAA68B,YAAA,EACA78B,KAAA88B,YAAA,EAEA98B,KAAA+8B,cAAA/8B,KAAA+8B,cAAA58B,KAAAH,MACAA,KAAA+yB,YAAA/yB,KAAA+yB,YAAA5yB,KAAAH,MACAA,KAAA2zB,YAAA3zB,KAAA2zB,YAAAxzB,KAAAH,MACAA,KAAA8yB,aAAA9yB,KAAA8yB,aAAA3yB,KAAAH,MACAA,KAAA+zB,QAAA/zB,KAAA+zB,QAAA5zB,KAAAH,MAEAA,KAAAg9B,oBAAAh9B,KAAAg9B,oBAAA78B,KAAAH,MACAA,KAAAi9B,kBAAAj9B,KAAAi9B,kBAAA98B,KAAAH,MACAA,KAAAk9B,qBAAAl9B,KAAAk9B,qBAAA/8B,KAAAH,MACAA,KAAAm9B,oBAAAn9B,KAAAm9B,oBAAAh9B,KAAAH,MAEAA,KAAAo9B,mBAAAp9B,KAAAo9B,mBAAAj9B,KAAAH,4EAGAuE,GAGA,OADAvE,KAAAy7B,YAAAl3B,EACAvE,wCAGAsY,GAEA,KAAAA,aAAA+kB,YAAA,UAAAn9B,MAAA,oDACA,GAAAF,KAAA07B,SAAA,UAAAx7B,MAAA,4DAEAF,KAAAk8B,UAAAoB,WAAAt9B,KAAA07B,SAAApjB,GACAtY,KAAAi8B,SAAA,IAAAsB,8CAAA,EAAAv9B,UAAA07B,SAAA17B,KAAAk8B,WAEAl8B,KAAA07B,SAAArU,iBAAA,YAAArnB,KAAA+yB,aACA/yB,KAAA07B,SAAArU,iBAAA,YAAArnB,KAAA2zB,aACA3zB,KAAA07B,SAAArU,iBAAA,aAAArnB,KAAA8yB,cACA9yB,KAAA07B,SAAArU,iBAAA,YAAArnB,KAAAw9B,aACAx9B,KAAA07B,SAAArU,iBAAA,cAAArnB,KAAA+8B,eACA/8B,KAAA07B,SAAArU,iBAAA,QAAArnB,KAAA+zB,2CAKA,IAAA/zB,KAAA07B,SAAA,UAAAx7B,MAAA,iEAEAF,KAAA07B,SAAA72B,oBAAA,YAAA7E,KAAA+yB,aACA/yB,KAAA07B,SAAA72B,oBAAA,YAAA7E,KAAA2zB,aACA3zB,KAAA07B,SAAA72B,oBAAA,aAAA7E,KAAA8yB,cACA9yB,KAAA07B,SAAA72B,oBAAA,cAAA7E,KAAA+8B,eACA/8B,KAAA07B,SAAA72B,oBAAA,QAAA7E,KAAA+zB,SAEA/zB,KAAA07B,SAAA,sCAMA17B,KAAAk8B,UAAApQ,6CAGA3qB,GAEA,IAAAnB,KAAAy7B,YAAA,SAEAt6B,EAAA+kB,kBACA/kB,EAAA8kB,iBAEA,IAAAwX,EAAAz9B,KAAA27B,QAGArkB,SAAAmO,cAAAD,OACAxlB,KAAA07B,SAAAnW,QAGAkY,EAAA7B,aAEAtkB,SAAAzS,oBAAA,YAAA44B,EAAA7B,YACA6B,EAAA7B,WAAA,MAGA6B,EAAA5B,WAEAvkB,SAAAzS,oBAAA,UAAA44B,EAAA5B,UACA4B,EAAA5B,SAAA,MAIA,IAAA6B,EAAAv8B,EAAAw8B,QAAA,EAAAx8B,EAAAu8B,OAaA,OAVA19B,KAAA49B,YAAAz8B,EAAAqyB,QAAAryB,EAAAsyB,QAAAiK,KAGAD,EAAA7B,WAAA57B,KAAAg9B,oBACAS,EAAA5B,SAAA77B,KAAAi9B,kBAEA3lB,SAAA+P,iBAAA,YAAAoW,EAAA7B,YACAtkB,SAAA+P,iBAAA,UAAAoW,EAAA5B,YAGA,sCAGA16B,GAEA,IAAAnB,KAAAy7B,YAAA,SAEA,IAAAoC,EAAA79B,KAAAk8B,UAAA4B,sBAAA38B,EAAAqyB,QAAAryB,EAAAsyB,SACAzzB,KAAAi8B,SAAA8B,YAAAF,EAAAx1B,EAAAw1B,EAAAv1B,+CAKAnH,GAEA,QAAAnB,KAAAy7B,cAEAt6B,EAAA+kB,kBACA/kB,EAAA8kB,iBAEAjmB,KAAAg+B,YAAA78B,EAAAqyB,QAAAryB,EAAAsyB,UAEA,6CAGAtyB,GAEA,IAAAnB,KAAAy7B,YAAA,SAEAt6B,EAAA+kB,kBACA/kB,EAAA8kB,iBAEA,IAAAwX,EAAAz9B,KAAA27B,QAiBA,OAdA8B,EAAA7B,aAEAtkB,SAAAzS,oBAAA,YAAA44B,EAAA7B,YACA6B,EAAA7B,WAAA,MAGA6B,EAAA5B,WAEAvkB,SAAAzS,oBAAA,UAAA44B,EAAA5B,UACA4B,EAAA5B,SAAA,MAGA77B,KAAAi+B,UAAA98B,EAAAqyB,QAAAryB,EAAAsyB,UAEA,uCAGAtyB,GAEA,IAAAnB,KAAAy7B,YAAA,SAEA,MAAAt6B,EAAAmyB,eAAAjyB,OACA,CACAF,EAAA+kB,kBACA/kB,EAAA8kB,iBAEA,IAAAwX,EAAAz9B,KAAA27B,QAGArkB,SAAAmO,cAAAD,OACAxlB,KAAA07B,SAAAnW,QAGAkY,EAAA3B,aAEAxkB,SAAAzS,oBAAA,YAAA44B,EAAA3B,YACA2B,EAAA3B,WAAA,MAGA2B,EAAA1B,YAEAzkB,SAAAzS,oBAAA,WAAA44B,EAAA1B,WACA0B,EAAA1B,UAAA,MAGA,IAAA1I,EAAAlyB,EAAAmyB,eAAA,GAYA,OAVAtzB,KAAA49B,YAAAvK,EAAAG,QAAAH,EAAAI,QAAA,KAGAgK,EAAA3B,WAAA97B,KAAAk9B,qBACAO,EAAA1B,UAAA/7B,KAAAm9B,oBAEA7lB,SAAA+P,iBAAA,YAAAoW,EAAA3B,YACAxkB,SAAA+P,iBAAA,WAAAoW,EAAA1B,aAGA,+CAIA56B,GAEA,IAAAnB,KAAAy7B,YAAA,SAEAt6B,EAAA+kB,kBACA/kB,EAAA8kB,iBAEA,IAAAwX,EAAAz9B,KAAA27B,QAGA8B,EAAA3B,aAEAxkB,SAAAzS,oBAAA,YAAA44B,EAAA3B,YACA2B,EAAA3B,WAAA,MAGA2B,EAAA1B,YAEAzkB,SAAAzS,oBAAA,WAAA44B,EAAA1B,WACA0B,EAAA1B,UAAA,MAGA,IAAA1I,EAAAlyB,EAAAmyB,eAAA,GAGA,OAFAtzB,KAAAi+B,UAAA5K,EAAAG,QAAAH,EAAAI,UAEA,+CAGAtyB,GAEA,IAAAnB,KAAAy7B,YAAA,SAEAt6B,EAAA+kB,kBACA/kB,EAAA8kB,iBAEA,IAAAoN,EAAAlyB,EAAAmyB,eAAA,GAGA,OAFAtzB,KAAAg+B,YAAA3K,EAAAG,QAAAH,EAAAI,UAEA,wCAGAtyB,GAEA,QAAAnB,KAAAy7B,cAEAt6B,EAAA+kB,kBACA/kB,EAAA8kB,kBAEA,mCAGA9kB,GAEA,IAAAnB,KAAAy7B,YAAA,SAEAt6B,EAAA+kB,kBACA/kB,EAAA8kB,iBAEA,IAAA1hB,EAAAvE,KAAAy7B,YACAzK,EAAAhxB,KAAAi8B,SACAvK,EAAAvwB,EAAA+8B,OAAAl+B,KAAAw8B,mBACArc,EAAAngB,KAAAk8B,UAAAiC,WACA7wB,EAAA6S,EAAAuR,EAOA,OALAntB,EAAA65B,aAAApN,EAAA1jB,EAAA6S,IAEAngB,KAAAk8B,UAAAmC,SAAA/wB,IAGA,sCAGAjF,EAAAC,EAAAo1B,GAEA,IAAA19B,KAAAy7B,YAAA,UAAAv7B,MAAA,wCAGA,IAAAu9B,EAAAz9B,KAAA27B,QACAp3B,EAAAvE,KAAAy7B,YACAzK,EAAAhxB,KAAAi8B,SACA4B,EAAA79B,KAAAk8B,UAAA4B,sBAAAz1B,EAAAC,GAMA,OALA0oB,EAAA+M,YAAAF,EAAAx1B,EAAAw1B,EAAAv1B,GAEAtI,KAAAo8B,WAAA,EACAp8B,KAAAq8B,UAAA,GAAAqB,GAEAn5B,EAAA+5B,gBAAAtN,KAEAA,EAAAuN,aACAd,EAAAzB,OAAAwC,WAAAx+B,KAAAo9B,mBAAAp9B,KAAAs8B,kBACA,gDAQA,IAAAt8B,KAAAy7B,YAAA,UAAAv7B,MAAA,wCAGAF,KAAAo8B,YAEAp8B,KAAAq8B,WAAA,uCAIAh0B,EAAAC,GAEA,IAAAtI,KAAAy7B,YAAA,UAAAv7B,MAAA,wCAEA,IAAAqE,EAAAvE,KAAAy7B,YACAzK,EAAAhxB,KAAAi8B,SACA4B,EAAA79B,KAAAk8B,UAAA4B,sBAAAz1B,EAAAC,GACA0oB,EAAA+M,YAAAF,EAAAx1B,EAAAw1B,EAAAv1B,GAEAtI,KAAAo8B,UAwBA73B,EAAAk6B,WAAAzN,GAtBAA,EAAA0N,0BAAA1+B,KAAA08B,qBAEA18B,KAAAo8B,WAAA,EACA73B,EAAAo6B,YAAA3N,KAEAhxB,KAAAo8B,WAAA,EAMAp8B,KAAA4+B,uDAeAv2B,EAAAC,GAEA,IAAAtI,KAAAy7B,YAAA,UAAAv7B,MAAA,wCAEA,IAAAu9B,EAAAz9B,KAAA27B,QACAkD,EAAApB,EAAAzB,OACA6C,IAEAC,aAAAD,GACApB,EAAAzB,OAAA,MAIA,IAAAz3B,EAAAvE,KAAAy7B,YACAzK,EAAAhxB,KAAAi8B,SACA4B,EAAA79B,KAAAk8B,UAAA4B,sBAAAz1B,EAAAC,GAGA,GAFA0oB,EAAA+M,YAAAF,EAAAx1B,EAAAw1B,EAAAv1B,GAEAtI,KAAAo8B,UAGA73B,EAAAw6B,WAAA/N,QAIA,GAAAhxB,KAAAq8B,UAGA93B,EAAAy6B,gBAAAhO,QAQA,IAHAzsB,EAAA06B,aAAAjO,GAIA,CAEA,IAAAW,EAAAtpB,EAAArI,KAAA68B,YACAnL,EAAAppB,EAAAtI,KAAA88B,YACAoC,EAAAvN,IAAAD,IACA5b,EAAAqpB,KAAAC,MAAAp/B,KAAA48B,eACA58B,KAAA28B,iBACAuC,EAAAl/B,KAAAy8B,eACA3mB,EAAA9V,KAAAu8B,gBAGAh4B,EAAA86B,gBAAArO,GAEAhxB,KAAA28B,iBAAA,IAIA38B,KAAA28B,iBAAA,EACA38B,KAAA48B,eAAAuC,KAAAC,MACAp/B,KAAA68B,YAAAx0B,EACArI,KAAA88B,YAAAx0B,GAMA0oB,EAAAsO,WACA/6B,EAAAg7B,iBAAAvO,8CAKA,IAAAzsB,EAAAvE,KAAAy7B,YACAzK,EAAAhxB,KAAAi8B,SACAwB,EAAAz9B,KAAA27B,QAGA8B,EAAA7B,aAEAtkB,SAAAzS,oBAAA,YAAA44B,EAAA7B,YACA6B,EAAA7B,WAAA,MAGA6B,EAAA5B,WAEAvkB,SAAAzS,oBAAA,UAAA44B,EAAA5B,UACA4B,EAAA5B,SAAA,MAGA,IAAAgD,EAAApB,EAAAzB,OACA6C,IAEAC,aAAAD,GACApB,EAAAzB,OAAA,MAGAhL,EAAAsO,WACA/6B,EAAAg7B,iBAAAvO,8CAKA,OAAAhxB,KAAA07B,+CAKA,OAAA17B,KAAAk8B,gDAKA,OAAAl8B,KAAAi8B,SAAAj8B,KAAAi8B,SAAA5zB,EAAA,wCAKA,OAAArI,KAAAi8B,SAAAj8B,KAAAi8B,SAAA3zB,EAAA,4CAKA,QAAAtI,KAAAi8B,UAAAj8B,KAAAi8B,SAAAuD,kDAKA,OAAAx/B,KAAA27B,QAAAG,YAAA97B,KAAA27B,QAAAI,+CAKA,OAAA/7B,KAAAq8B,+CAKA,OAAAr8B,KAAAo8B,gKAIAZ,wCAAe95B,oBAAA,6lBA1ff85B,ihFCJAiE,4CAEA,SAAAA,iBAAAlwB,GACA,OAAA7K,gBAAA1E,KAAAy/B,kBAAAjwB,2BAAAxP,KAAAyP,gBAAAgwB,kBAAA/vB,KAAA1P,KACAuP,sHAMA,IAAA2c,EAAAlsB,KAAAuP,MAAA2c,oBACA,OAAAvc,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,0BAAA7P,KAAAuP,MAAAM,UAAAzH,GAAApI,KAAAuP,MAAAnH,GAAA2H,MAAA/P,KAAAuP,MAAAQ,OAEAmc,EAAAwT,cAAA1L,IAAA,SAAA7yB,GACA,IAAAiH,EAAAjH,EAAAw+B,QACAC,EAAAz+B,EAAA0+B,oBACAC,EAAA3+B,EAAA4+B,qBAAA,GAEA,OAAApwB,2CAAAC,EAAAzB,cAAA6xB,qDAAA,GAAAlgC,IAAAsI,EAAArI,MAAAoB,GACAy+B,GAAAjwB,2CAAAC,EAAAzB,cAAAyxB,EAAAjrB,SAAA,CAAA8L,QAAAtf,GAAA2+B,uJAnBAnwB,2CAAAC,EAAAO,oBA0BAsvB,4CAAe/9B,oBAAA,2nBA1Bf+9B,64BCLA,IAAAQ,mBAAA,IAEAC,uBAEA,SAAAA,cACAx7B,gBAAA1E,KAAAkgC,aACAlgC,KAAAmgC,QAAA,GACAngC,KAAAogC,YAAA,iEAKApgC,KAAAmgC,QAAA9+B,OAAA,EACArB,KAAAogC,YAAA,uCAGAC,GAGA,KAAArgC,KAAAogC,YAAA,GAEApgC,KAAAmgC,QAAArH,QACA94B,KAAAogC,YAMA,IAFApgC,KAAAmgC,QAAAtzB,KAAAwzB,GAEArgC,KAAAmgC,QAAA9+B,OAAA4+B,oBAEAjgC,KAAAmgC,QAAAxS,yCAMA,GAAA3tB,KAAAsgC,UAAA,CAMA,IAAAC,EAAAvgC,KAAAmgC,QAAAngC,KAAAmgC,QAAA9+B,OAAArB,KAAAogC,YAAA,KACApgC,KAAAogC,YAEAG,EAAAv7B,+CAKA,OAAAhF,KAAAogC,YAAApgC,KAAAmgC,QAAA9+B,sCAKArB,KAAAwgC,cAMAxgC,KAAAogC,YACApgC,KAAAmgC,QAAAngC,KAAAmgC,QAAA9+B,OAAArB,KAAAogC,YAAA,GAEAn7B,+CAKA,OAAAjF,KAAAogC,YAAA,uJAIAF,uCAAex+B,oBAAA,ylBAzEfu+B,8IAEAC,s2BCFAO,yBAEA,SAAAA,cAAA/kB,GACAhX,gBAAA1E,KAAAygC,eACAzgC,KAAAkpB,QAAAxN,sEAGAE,EAAAF,GAEA,IAAAE,EAAA,UAAA1b,MAAA,8BACA,KAAA0b,aAAA8kB,MAAA,UAAAxgC,MAAA,mCAEA,IAAA6E,EAAA47B,QAAAC,SACAC,EAAAjlB,EAAAklB,KACA5d,EAAAxH,EAAAyH,oBANArW,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAQA,IARA,IAQA2L,EARA8zB,EAAA,eAQAC,EARA/zB,EAAAlN,MAUAihC,EAAAC,aAAAD,EAAAE,mBAAAL,EAAAM,SAAAH,EAAArlB,iBAEA5W,IAAAymB,MAAA,SAAArqB,GAAA,OAAA6/B,EAAAI,eAAAxlB,EAAAF,OAJAxO,EAAAgW,EAAA9V,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACAi0B,IATA,MAAAnzB,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAgBA,OAAAjI,EAAAymB,MAAA,SAAArqB,GAEA,MADAT,QAAAuY,MAAA9X,GACA,IAAAjB,MAAA,wCAAA2gC,wCAIAr7B,EAAAkW,GAEA,IAAAlW,EAAA,UAAAtF,MAAA,8BAEA,IAAA6E,EAAA47B,QAAAC,SACA1d,EAAAxH,EAAAyH,oBAJA1U,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IAMA,IANA,IAMAsN,EANAyyB,EAAA,eAMAL,EANApyB,EAAA7O,MAQAihC,EAAAC,aAAAD,EAAAM,oBAEAv8B,IAAAymB,MAAA,SAAArqB,GAAA,OAAA6/B,EAAArW,eAAAnlB,EAAAkW,OAJA7M,EAAAqU,EAAA9V,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA4yB,IAPA,MAAAzzB,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,GAcA,OAAA5J,EAAAymB,MAAA,SAAArqB,GACA,UAAAjB,MAAA,wCAAAW,KAAAU,UAAAiE,mDAMA,OAAAxF,KAAAkpB,QAAA/F,oBAAA6Q,IAAA,SAAA7yB,GACA,OAAAA,EAAA8/B,aAAA9/B,EAAA+/B,kBACA,IAAA//B,EAAAwa,cADA,8JAMA8kB,yCAAe/+B,oBAAA,2mBA3Df++B,qiECGAc,mCAEA,SAAAA,QAAAhyB,GACA,OAAA7K,gBAAA1E,KAAAuhC,SAAA/xB,2BAAAxP,KAAAyP,gBAAA8xB,SAAA7xB,KAAA1P,KACAuP,oGAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,WAAAgd,MAAA,6BAAAC,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,SACAwB,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,kMACA3C,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,kGACA3C,2CAAAC,EAAAzB,cAAA,WAAAgN,KAAA,UAAAqmB,OAAA,oCACA7xB,2CAAAC,EAAAzB,cAAA,SACAwB,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,wmBACA3C,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,4FACA3C,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,i+BAUA3C,2CAAAC,EAAAzB,cAAA,UAAAgN,KAAA,UAAAN,GAAA,SAAAC,GAAA,SAAA5I,EAAA,UACAvC,2CAAAC,EAAAzB,cAAA,WAAAgN,KAAA,UAAAqmB,OAAA,4MA5BA7xB,2CAAAC,EAAAO,oBAkCAoxB,mCAAe7/B,oBAAA,ikBAlCf6/B,++DCAAE,mCAEA,SAAAA,QAAAlyB,GACA,OAAA7K,gBAAA1E,KAAAyhC,SAAAjyB,2BAAAxP,KAAAyP,gBAAAgyB,SAAA/xB,KAAA1P,KACAuP,oGAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,WAAAgd,MAAA,6BAAAC,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,SACAwB,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,kMACA3C,2CAAAC,EAAAzB,cAAA,WAAAgN,KAAA,UAAAqmB,OAAA,oCACA7xB,2CAAAC,EAAAzB,cAAA,UAAAgN,KAAA,UAAAN,GAAA,SAAAC,GAAA,SAAA5I,EAAA,UACAvC,2CAAAC,EAAAzB,cAAA,WAAAgN,KAAA,UAAAqmB,OAAA,oEACA7xB,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,kGACA3C,2CAAAC,EAAAzB,cAAA,SACAwB,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,ufAKA3C,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,gmBAMA3C,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,qmCA5BA3C,2CAAAC,EAAAO,oBA4CAsxB,mCAAe//B,oBAAA,ikBA5Cf+/B,i7ECGAC,0CAEA,SAAAA,eAAAnyB,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAA0hC,iBACA58B,EAAA0K,2BAAAxP,KAAAyP,gBAAAiyB,gBAAAhyB,KAAA1P,KAAAuP,KAEA8Y,UAAA,KAHAvjB,4HAMAk8B,GACA,IAAA7sB,EAAAnU,KACA,OAAAghC,EAAAE,kBAEAvxB,2CAAAC,EAAAzB,cAAAwzB,iDAAA,GAAA7hC,IAAAkhC,EAAArlB,cACA9L,UAAA,gBACAzH,GAAA,UAAA44B,EAAArlB,cACA7L,MAAAkxB,EAAAY,WACA3xB,QAAA,WACA,IAAAyL,EAAAvH,EAAA5E,MAAA6E,cAEAkC,EADAoF,EAAAlH,uBACAqtB,kBAAA,WACAb,EAAAc,aAAAxrB,EAAAoF,KAEA/L,2CAAAC,EAAAzB,cAAA6yB,EAAAe,gBACApyB,2CAAAC,EAAAzB,cAAA,aAAA6yB,EAAAnlB,aAbA,sCAmBA,IAAAiK,EAAA9lB,KACA0b,EAAA1b,KAAAuP,MAAA6E,cACA4tB,EAAAtmB,EAAAyH,oBACA8e,EAAAvmB,EAAAwmB,oBAEA,OAAAvyB,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,mBAAA7P,KAAAuP,MAAAM,UAAAzH,GAAA,YAAA0L,IAAA,SAAAY,GAAA,OAAAoR,EAAAuC,UAAA3T,GAAA3E,MAAA/P,KAAAuP,MAAAQ,OACAJ,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,eACAF,2CAAAC,EAAAzB,cAAA,UAAAiT,KAAApP,SAAA,+BAEArC,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,iBAEAmyB,EAAAhO,IAAA,SAAA7yB,GAAA,OAAA2kB,EAAAqc,qBAAAhhC,KAGA8gC,EAAAjO,IAAA,SAAA7yB,GAAA,OAAA2kB,EAAAqc,qBAAAhhC,KAEAwO,2CAAAC,EAAAzB,cAAA,WAEAwB,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,kBAIAF,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,+JApDAF,2CAAAC,EAAAO,WAwDAlP,OAAAmhC,eAAAV,eAAA,SACA56B,IAAA,kBAAAsa,KAAApP,SAAA,gCAEA0vB,eAAArN,iBAAA,yCAEAqN,0CAAehgC,oBAAA,6nBA7DfggC,w8FCUA,IAAAliC,iBAAA,cAEA6iC,wCAEA,SAAAA,aAAA9yB,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAAqiC,eACAv9B,EAAA0K,2BAAAxP,KAAAyP,gBAAA4yB,cAAA3yB,KAAA1P,KAAAuP,KAEA8Y,UAAA1Y,2CAAAC,EAAAsF,YACApQ,EAAAw9B,UAAA,IAAAC,oEAAA,EAEAz9B,EAAAyJ,MAAA,CACAi0B,MAAA,UACAC,aAAA,EACAC,YAAA,SAAAC,2DAAA,EAAAC,qBAAApjC,kBACAqjC,mBAAA,SAAAF,2DAAA,EAAAC,qBAAA,uBAGA99B,EAAAg+B,cAAAh+B,EAAAg+B,cAAA3iC,KAAAwZ,8CAAA7U,KACAA,EAAAi+B,eAAAj+B,EAAAi+B,eAAA5iC,KAAAwZ,8CAAA7U,KAdAA,uHAoBA,IAAAk+B,EAAA1rB,SAAA2rB,eAAA,QACAC,EAAAljC,KAAAsiC,UAEAa,EAAA,SAAAC,EAAArjC,GACA,IAAAsjC,EAAA,GACAC,iDAAA,EAAAvjC,EAAAsjC,GACAC,iDAAA,EAAAD,GAAA,EAAAA,GACA,IAAAt+B,EAAAu+B,iDAAA,EAAAD,GAEAH,EAAAK,gBAAAH,EAAAppB,KAAA,WAAAF,SAAA/U,IAGAy+B,EAAA,SAAAJ,EAAArjC,GAEA,IAAAsjC,EAAA,GACAI,EAAA,GACAH,iDAAA,EAAAvjC,EAAAsjC,GACAC,iDAAA,EAAAD,GAAA,EAAAI,GACAH,iDAAA,KAAAD,EAAAI,EAAAJ,GACA,IAAAt+B,EAAAu+B,iDAAA,EAAAD,GAEAH,EAAAK,gBAAAH,EAAAppB,KAAA,SAAAF,SAAA/U,IA2CAm+B,EAAAQ,oBAAAV,EAAA,yCAAAQ,GACAN,EAAAQ,oBAAAV,EAAA,8CACAE,EAAAQ,oBAAAV,EAAA,2CAAAQ,GACAN,EAAAQ,oBAAAV,EAAA,gDACAE,EAAAQ,oBAAAV,EAAA,yCAAAG,GACAD,EAAAQ,oBAAAV,EAAA,gDAGAE,EAAAQ,oBAAAV,EAAA,uCAAAQ,GACAN,EAAAQ,oBAAAV,EAAA,6CACAE,EAAAQ,oBAAAV,EAAA,0CACAE,EAAAQ,oBAAAV,EAAA,mDAnDA,SAAAI,EAAArjC,GAGA,IAAAsjC,EAAA,GACAI,EAAA,GACAH,iDAAA,EAAAvjC,EAAAsjC,GACAC,iDAAA,EAAAD,GAAA,EAAAI,GACAH,iDAAA,MAAAD,EAAAI,EAAAJ,GACA,IAAAt+B,EAAAu+B,iDAAA,EAAAD,GAEAH,EAAAK,gBAAAH,EAAAppB,KAAA,WAAAF,SAAA/U,KA0CAK,WAAA,EAAAhE,WAvCA,SAAAgiC,EAAArjC,GAGA,IAAAsjC,EAAA,GACAI,EAAA,GACAH,iDAAA,EAAAvjC,EAAAsjC,GACAC,iDAAA,EAAAD,GAAA,EAAAI,GACAH,iDAAA,MAAAD,EAAAI,EAAAJ,GACA,IAAAt+B,EAAAu+B,iDAAA,EAAAD,GAEAH,EAAAK,gBAAAH,EAAAppB,KAAA,UAAAF,SAAA/U,IA8BAK,WAAA,EAAAhE,WACA+hC,EAAA/9B,WAAA,EAAAhE,WA5BA,SAAAgiC,EAAArjC,GAGA,IAAAsjC,EAAA,GACAI,EAAA,GACAH,iDAAA,EAAAvjC,EAAAsjC,GACAC,iDAAA,EAAAD,GAAA,EAAAI,GACAH,iDAAA,MAAAD,EAAAI,EAAAJ,GACA,IAAAt+B,EAAAu+B,iDAAA,EAAAD,GAEAH,EAAAK,gBAAAH,EAAAppB,KAAA,SAAAF,SAAA/U,IAmBAK,WAAA,EAAAhE,aAEA8hC,EAAAQ,oBAAAV,EAAA,+CACAE,EAAAQ,oBAAAV,EAAA,8CACAE,EAAAQ,oBAAAV,EAAA,+CACAE,EAAAQ,oBAAAV,EAAA,6CACAE,EAAAQ,oBAAAV,EAAA,yCAGAE,EAAAQ,oBAAAV,EAAA,6CACAE,EAAAQ,oBAAAV,EAAA,6CACAE,EAAAQ,oBAAAV,EAAA,6CACAE,EAAAQ,oBAAAV,EAAA,0CAGAE,EAAAQ,oBAAAV,EAAA,oDACAE,EAAAQ,oBAAAV,EAAA,mDAAAQ,GACAN,EAAAQ,oBAAAV,EAAA,mDACAE,EAAAQ,oBAAAV,EAAA,oDAAAQ,GACAN,EAAAQ,oBAAAV,EAAA,oDACAE,EAAAQ,oBAAAV,EAAA,sDAAAQ,GACAN,EAAAQ,oBAAAV,EAAA,sDAGAE,EAAAQ,oBAAAV,EAAA,0CACAE,EAAAQ,oBAAAV,EAAA,8CACAE,EAAAQ,oBAAAV,EAAA,8CAGAE,EAAAQ,oBAAAV,EAAA,kDACAE,EAAAQ,oBAAAV,EAAA,kDAGAE,EAAAQ,oBAAAV,EAAA,6CACAE,EAAAQ,oBAAAV,EAAA,+CACAE,EAAAQ,oBAAAV,EAAA,+CACAE,EAAAQ,oBAAAV,EAAA,+CAEAE,EAAA1jB,aAEAmjB,2DAAA,EAAAvY,gBAAApqB,MACAA,KAAA2jC,4DAMA3jC,KAAAsiC,UAAAhY,YAEAqY,2DAAA,EAAAtY,kBAAArqB,2CAMA,IAAAkjC,EAAAljC,KAAAsiC,UACA98B,EAAAm9B,2DAAA,EAAAlY,gBAAA,eACA,QAAAzQ,KAAAxU,EACA,CACA,IAAA49B,EAAAF,EAAAK,gBAAAvpB,GACAopB,GAEAA,EAAAtpB,SAAAtU,EAAAwU,0CAQA,IAAAkpB,EAAAljC,KAAAsiC,UACA98B,EAAA,GAFAsH,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAGA,QAAA2L,EAAAC,EAAAg2B,EAAAU,aAAAx2B,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADAs2B,EACAn2B,EAAAlN,MACAqjC,EAAAS,mBAEAr+B,EAAA49B,EAAAppB,MAAAopB,EAAAjpB,aAPA,MAAAvM,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAUA21B,2DAAA,EAAA9X,cAAA,cAAArlB,yCAGArE,GAEA,IAAA2iC,EAAA9jC,KAAAuO,MAAAi0B,MACAA,EAAArhC,EAAA0Y,OAAA9Z,MACA,GAAA+jC,IAAAtB,EAAA,CAEA,eAAAA,EACA,KAAA/zB,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IACA,QAAAsN,EAAAC,EAAA7O,KAAAsiC,UAAAsB,aAAAx2B,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA,CAAAG,EAAA7O,MACAgkC,cAHA,MAAAn2B,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,IAOA3O,KAAAkgB,SAAA,CAAAsiB,kDAGArhC,qCAOA,IAAAgT,EAAAnU,KAEAkjC,GADA5rB,SAAA2rB,eAAA,QACAjjC,KAAAsiC,WAEA,OAAA3yB,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,mBAAA7P,KAAAuP,MAAAM,UAAAzH,GAAA,SAAA0L,IAAA,SAAAY,GAAA,OAAAP,EAAAkU,UAAA3T,GAAA3E,MAAA/P,KAAAuP,MAAAQ,OACAJ,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,eACAF,2CAAAC,EAAAzB,cAAA,UAAAiT,KAAApP,SAAA,6BAEArC,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,iBAEAF,2CAAAC,EAAAzB,cAAA61B,6CAAA,GAAAl0B,MAAAsR,KAAApP,SAAA,6BAAAzJ,MAAA6Y,KAAApP,SAAA,+BACArC,2CAAAC,EAAAzB,cAAA81B,8CAAA,GAAA17B,MAAA6Y,KAAApP,SAAA,8BAAAoE,QAAA,aACAzG,2CAAAC,EAAAzB,cAAA81B,8CAAA,GAAA17B,MAAA6Y,KAAApP,SAAA,6BAAAoE,QAAA,aACAzG,2CAAAC,EAAAzB,cAAA81B,8CAAA,GAAA17B,MAAA6Y,KAAApP,SAAA,6BAAAoE,QAAA,qBACAzG,2CAAAC,EAAAzB,cAAA81B,8CAAA,GAAA17B,MAAA6Y,KAAApP,SAAA,4BAAAoE,QAAA,cAGAzG,2CAAAC,EAAAzB,cAAA61B,6CAAA,GAAAl0B,MAAAsR,KAAApP,SAAA,2BAAAzJ,MAAA6Y,KAAApP,SAAA,+BACArC,2CAAAC,EAAAzB,cAAA81B,8CAAA,GAAA17B,MAAA,iBAAA6N,QAAA,UACAzG,2CAAAC,EAAAzB,cAAA81B,8CAAA,GAAA17B,MAAA,iBAAA6N,QAAA,mBAGAzG,2CAAAC,EAAAzB,cAAA61B,6CAAA,GAAAl0B,MAAAsR,KAAApP,SAAA,+BAAAzJ,MAAA6Y,KAAApP,SAAA,+BACArC,2CAAAC,EAAAzB,cAAA81B,8CAAA,GAAA17B,MAAA6Y,KAAApP,SAAA,iCAAAoE,QAAA,UACAzG,2CAAAC,EAAAzB,cAAA81B,8CAAA,GAAA17B,MAAA6Y,KAAApP,SAAA,iCAAAoE,QAAA,YAGAzG,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,iBAAAE,MAAA,CAAAm0B,UAAA,SACAv0B,2CAAAC,EAAAzB,cAAA,SAAA/F,GAAA,qBAAA8F,KAAA,WAAAi2B,QAAAnkC,KAAAuO,MAAAm0B,YACAhpB,SAAA,SAAAvY,GACA,IAAA4D,EAAA5D,EAAA0Y,OAAAsqB,QACAhwB,EAAA+L,SAAA,CAAAwiB,YAAAvhC,EAAA0Y,OAAAsqB,UACAxB,2DAAA,EAAAyB,mBAAA5kC,iBAAA,GAAAuF,MAEA4K,2CAAAC,EAAAzB,cAAA,SAAAiM,QAAA,sBAAAgH,KAAApP,SAAA,yBAGArC,2CAAAC,EAAAzB,cAAA,WAEAwB,2CAAAC,EAAAzB,cAAA,WACAwB,2CAAAC,EAAAzB,cAAA,OAAA/F,GAAA,kCACAuH,2CAAAC,EAAAzB,cAAA,SAAAiM,QAAA,iCACAzK,2CAAAC,EAAAzB,cAAA,UAAA/F,GAAA,uBAAAyH,UAAA,eAAA9P,MAAAC,KAAAuO,MAAAi0B,MAAA9oB,SAAA1Z,KAAA8iC,cAAA9yB,SAAAhQ,KAAAuO,MAAAk0B,aACA9yB,2CAAAC,EAAAzB,cAAA,UAAApO,MAAA,sBACA4P,2CAAAC,EAAAzB,cAAA,UAAApO,MAAA,OAAAiQ,UAAA,iCACAL,2CAAAC,EAAAzB,cAAA,UAAApO,MAAA,OAAAiQ,UAAA,sCAGAhQ,KAAAuO,MAAAk0B,aACA9yB,2CAAAC,EAAAzB,cAAA,UAAA0B,UAAA,eAAAI,QAAA,kBAAAkE,EAAA+L,SAAA,CAAAuiB,aAAA,MACArhB,KAAApP,SAAA,gCAKAhS,KAAAuO,MAAAk0B,aAAA9yB,2CAAAC,EAAAzB,cAAA,WACAwB,2CAAAC,EAAAzB,cAAA61B,6CAAA,GAAAl0B,MAAAsR,KAAApP,SAAA,2BAAAzJ,MAAA6Y,KAAApP,SAAA,4BACAkxB,EAAAmB,gBAAA,WAAArQ,IAAA,SAAA7yB,GAAA,OAAAwO,2CAAAC,EAAAzB,cAAA,OAAArO,IAAAqB,GACAwO,2CAAAC,EAAAzB,cAAAm2B,sEAAA,GAAAz0B,UAAA,mBAAA9P,MAAAmjC,EAAAK,gBAAApiC,GAAA2O,MAAAsR,KAAApP,SAAA,WAAA7Q,SAIAwO,2CAAAC,EAAAzB,cAAA61B,6CAAA,GAAAl0B,MAAAsR,KAAApP,SAAA,0BAAAzJ,MAAA6Y,KAAApP,SAAA,4BACAkxB,EAAAmB,gBAAA,UAAArQ,IAAA,SAAA7yB,GAAA,OAAAwO,2CAAAC,EAAAzB,cAAA,OAAArO,IAAAqB,GACAwO,2CAAAC,EAAAzB,cAAAm2B,sEAAA,GAAAz0B,UAAA,mBAAA9P,MAAAmjC,EAAAK,gBAAApiC,GAAA2O,MAAAsR,KAAApP,SAAA,WAAA7Q,SAIAwO,2CAAAC,EAAAzB,cAAA61B,6CAAA,GAAAl0B,MAAAsR,KAAApP,SAAA,2BAAAzJ,MAAA6Y,KAAApP,SAAA,4BACAkxB,EAAAmB,gBAAA,WAAArQ,IAAA,SAAA7yB,GAAA,OAAAwO,2CAAAC,EAAAzB,cAAA,OAAArO,IAAAqB,GACAwO,2CAAAC,EAAAzB,cAAAm2B,sEAAA,GAAAz0B,UAAA,mBAAA9P,MAAAmjC,EAAAK,gBAAApiC,GAAA2O,MAAAsR,KAAApP,SAAA,WAAA7Q,SAIAwO,2CAAAC,EAAAzB,cAAA61B,6CAAA,GAAAl0B,MAAAsR,KAAApP,SAAA,gCAAAzJ,MAAA6Y,KAAApP,SAAA,4BACAkxB,EAAAmB,gBAAA,gBAAArQ,IAAA,SAAA7yB,GAAA,OAAAwO,2CAAAC,EAAAzB,cAAA,OAAArO,IAAAqB,GACAwO,2CAAAC,EAAAzB,cAAAm2B,sEAAA,GAAAz0B,UAAA,mBAAA9P,MAAAmjC,EAAAK,gBAAApiC,GAAA2O,MAAAsR,KAAApP,SAAA,WAAA7Q,SAIAwO,2CAAAC,EAAAzB,cAAA61B,6CAAA,GAAAl0B,MAAAsR,KAAApP,SAAA,yBAAAzJ,MAAA6Y,KAAApP,SAAA,4BACAkxB,EAAAmB,gBAAA,aAAArQ,IAAA,SAAA7yB,GAAA,OAAAwO,2CAAAC,EAAAzB,cAAA,OAAArO,IAAAqB,GACAwO,2CAAAC,EAAAzB,cAAAm2B,sEAAA,GAAAz0B,UAAA,mBAAA9P,MAAAmjC,EAAAK,gBAAApiC,GAAA2O,MAAAsR,KAAApP,SAAA,WAAA7Q,SAIAwO,2CAAAC,EAAAzB,cAAA61B,6CAAA,GAAAl0B,MAAAsR,KAAApP,SAAA,+BAAAzJ,MAAA6Y,KAAApP,SAAA,4BACAkxB,EAAAmB,gBAAA,eAAArQ,IAAA,SAAA7yB,GAAA,OAAAwO,2CAAAC,EAAAzB,cAAA,OAAArO,IAAAqB,GACAwO,2CAAAC,EAAAzB,cAAAm2B,sEAAA,GAAAz0B,UAAA,mBAAA9P,MAAAmjC,EAAAK,gBAAApiC,GAAA2O,MAAAsR,KAAApP,SAAA,WAAA7Q,SAIAwO,2CAAAC,EAAAzB,cAAA61B,6CAAA,GAAAl0B,MAAAsR,KAAApP,SAAA,4BAAAzJ,MAAA6Y,KAAApP,SAAA,4BACAkxB,EAAAmB,gBAAA,YAAArQ,IAAA,SAAA7yB,GAAA,OAAAwO,2CAAAC,EAAAzB,cAAA,OAAArO,IAAAqB,GACAwO,2CAAAC,EAAAzB,cAAAm2B,sEAAA,GAAAz0B,UAAA,mBAAA9P,MAAAmjC,EAAAK,gBAAApiC,GAAA2O,MAAAsR,KAAApP,SAAA,WAAA7Q,SAIAwO,2CAAAC,EAAAzB,cAAA,UAAA0B,UAAA,eAAAI,QAAA,SAAA9O,GAAA,IAAA4N,GAAA,EAAAC,GAAA,EAAAC,OAAA3N,EAAA,IACA,QAAA4N,EAAAC,EAAAgF,EAAAmuB,UAAAsB,aAAAx2B,OAAAC,cAAA0B,GAAAG,EAAAC,EAAA7B,QAAAC,MAAAwB,GAAA,EACA,CAAAG,EAAAnP,MACAgkC,cAHA,MAAAn2B,GAAAoB,GAAA,EAAAC,EAAArB,EAAA,YAAAmB,GAAA,MAAAI,EAAAtB,QAAAsB,EAAAtB,SAAA,WAAAmB,EAAA,MAAAC,GAKAkF,EAAA+L,SAAA,CAAAuiB,aAAA,MACArhB,KAAApP,SAAA,2BAKArC,2CAAAC,EAAAzB,cAAA,WAEAwB,2CAAAC,EAAAzB,cAAA,WACAwB,2CAAAC,EAAAzB,cAAA,0BAEAwB,2CAAAC,EAAAzB,cAAA,UAAA/F,GAAA,+BAAAyH,UAAA,eAAA9P,MAAAC,KAAAuP,MAAA6E,cAAA6O,gBAAAvJ,SAAA1Z,KAAA+iC,gBACApzB,2CAAAC,EAAAzB,cAAA,UAAApO,MAAA,gCACA4P,2CAAAC,EAAAzB,cAAA,UAAApO,MAAA,MAAAiQ,UAAA,sCACAL,2CAAAC,EAAAzB,cAAA,UAAApO,MAAA,MAAAiQ,UAAA,oCACAL,2CAAAC,EAAAzB,cAAA,UAAApO,MAAA,KAAAiQ,UAAA,8BACAL,2CAAAC,EAAAzB,cAAA,UAAApO,MAAA,MAAAiQ,UAAA,8BACAL,2CAAAC,EAAAzB,cAAA,UAAApO,MAAA,OAAAiQ,UAAA,yCAGAL,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,iBAAAE,MAAA,CAAAm0B,UAAA,SACAv0B,2CAAAC,EAAAzB,cAAA,SAAA/F,GAAA,4BAAA8F,KAAA,WAAAi2B,QAAAnkC,KAAAuO,MAAAs0B,mBACAnpB,SAAA,SAAAvY,GACA,IAAA4D,EAAA5D,EAAA0Y,OAAAsqB,QACAhwB,EAAA+L,SAAA,CAAA2iB,mBAAA99B,IACA49B,2DAAA,EAAAyB,mBAAA,wBAAAr/B,MAEA4K,2CAAAC,EAAAzB,cAAA,SAAAiM,QAAA,sDAGAzK,2CAAAC,EAAAzB,cAAA,UAAA0B,UAAA,eAAAE,MAAA,CAAAm0B,UAAA,QAAAj0B,QAAA,SAAA9O,GACA,SAAAwhC,2DAAA,EAAAC,qBAAA,sBAEAlrB,OAAA6sB,MAAA,4CAEA7sB,OAAA8sB,QAAA,wLAKA9sB,OAAA8sB,QAAA,wJAOA,yCAHA9sB,OAAA+sB,OAAA,wMAKA/sB,OAAA8sB,QAAA,mGAGA7B,2DAAA,EAAAyB,mBAAA,6BAKA1sB,OAAA6sB,MAAA,kEAKA,8BAOA50B,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,6JA5XAF,2CAAAC,EAAAO,WAgYAlP,OAAAmhC,eAAAC,aAAA,SACAv7B,IAAA,kBAAAsa,KAAApP,SAAA,8BAEAqwB,aAAAhO,iBAAA,uCAEAgO,wCAAe3gC,oBAAA,qnBAvYflC,wJAEA6iC,onCClBAqC,4BAEA,SAAAA,mBACAhgC,gBAAA1E,KAAA0kC,kBACA1kC,KAAA2kC,UAAA,IAAAC,IACA5kC,KAAA6kC,YAAA,KACA7kC,KAAA8kC,gBAAA,IAEA9kC,KAAA+pB,OAAA,EAEA/pB,KAAA+kC,iBAAA/kC,KAAA+kC,iBAAA5kC,KAAAH,sFAGAglC,GAEA,IAAAA,MAAA,YAAA9kC,MAAA,4CACAF,KAAA8kC,gBAAAE,0CAGAC,GAEA,GAAAjlC,KAAA2kC,UAAAr7B,IAAA27B,GAEA,UAAA/kC,MAAA,2DAGAF,KAAA+pB,OAGA,mBAAAkb,EAAA,YAEAA,EAAAtB,aAIA3jC,KAAA2kC,UAAAO,IAAAD,6CAGAA,GAEA,IAAAjlC,KAAA2kC,UAAAr7B,IAAA27B,GAEA,UAAA/kC,MAAA,yDAGAF,KAAA+pB,OAGA,mBAAAkb,EAAA,cAEAA,EAAAE,eAIAnlC,KAAA2kC,UAAAvd,OAAA6d,wCAKA,GAAAjlC,KAAA+pB,MAAA,UAAA7pB,MAAA,gEAEA,GAAAF,KAAAI,0BACA,CACAJ,KAAA+pB,OAAA,EADA,IAAAjd,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAGA,QAAA2L,EAAAC,EAAAlN,KAAA2kC,UAAAv3B,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADAm4B,EACAh4B,EAAAlN,MAEA,mBAAAklC,EAAA,YAEAA,EAAAtB,cARA,MAAA/1B,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAaAhN,KAAA6kC,YAAAO,YAAAplC,KAAA+kC,iBAAA/kC,KAAA8kC,sDAUA,IAAA9kC,KAAA+pB,MAAA,UAAA7pB,MAAA,+DAEAmlC,cAAArlC,KAAA6kC,aAHA,IAAAp2B,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IAKA,QAAAsN,EAAAC,EAAA7O,KAAA2kC,UAAAv3B,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA,KADAw2B,EACAr2B,EAAA7O,MAEA,mBAAAklC,EAAA,cAEAA,EAAAE,gBAVA,MAAAv3B,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,GAcA3O,KAAA2kC,UAAAj/B,QACA1F,KAAA+pB,OAAA,6CAIA,IAAAhb,GAAA,EAAAC,GAAA,EAAAC,OAAA3N,EAAA,IAEA,QAAA4N,EAAAC,EAAAnP,KAAA2kC,UAAAv3B,OAAAC,cAAA0B,GAAAG,EAAAC,EAAA7B,QAAAC,MAAAwB,GAAA,EACA,KADAk2B,EACA/1B,EAAAnP,MACA,IAGA,mBAAAklC,EAAA,YAEAA,EAAAK,aAGA,MAAAnkC,GAEAT,QAAAuY,MAAA9X,KAdA,MAAAyM,GAAAoB,GAAA,EAAAC,EAAArB,EAAA,YAAAmB,GAAA,MAAAI,EAAAtB,QAAAsB,EAAAtB,SAAA,WAAAmB,EAAA,MAAAC,+CAmBAs2B,EAAAC,GAEAxlC,KAAAI,4BACAolC,EAAAnkC,OAAA,EAEAb,aAAAgB,QAAA+jC,EAAAC,GAIAhlC,aAAAiB,WAAA8jC,iDAIAA,GAEA,OAAAvlC,KAAAI,2BACAI,aAAAC,QAAA8kC,IADA,2CAIAA,GAEA,IAAAvlC,KAAAI,0BAAA,YACA,IAEA,IAAAL,EAAAS,aAAAC,QAAA8kC,GACA,OAAAxlC,KAAAsB,OAAA,EAEAR,KAAAC,MAAAf,GAIA,KAGA,MAAAoB,GAGA,OADAT,QAAAuY,MAAA9X,GACA,0CAIAokC,EAAA3kC,GAIA,IAAA6kC,EAFA,GAAAzlC,KAAAI,iCAKA,IAAAkX,SAAAmuB,QAEAA,EAAA,SACA,yBAEA,IAAAnuB,SAAAouB,UAEAD,EAAA,WACA,2BAEA,IAAAnuB,SAAAquB,eAEAF,EAAA,eACA,2BAGAnuB,SAAAmuB,IAMA,IAEA,aAAAG,QAAAhlC,GACA,CACA,IAAAijB,EAAAjjB,EACA,GAAAijB,EAKA,QAAA/jB,KAHA+jB,GAAA,EAGAjjB,EAEA,GAAAA,EAAAX,eAAAH,GACA,CACA+jB,GAAA,EACA,MAMAA,EAEArjB,aAAAgB,QAAA+jC,EAAA1kC,KAAAU,UAAAX,IAIAJ,aAAAiB,WAAA8jC,QAGA,oBAAA3kC,EACA,CACAA,EAAAS,QAAA,EAKAb,aAAAgB,QAAA+jC,EAAA3kC,GAIAJ,aAAAiB,WAAA8jC,IAIA,MAAApkC,GAEAT,QAAAuY,MAAA9X,4CAIAokC,GAEA,QAAAvlC,KAAAI,2BACA,MAAAI,aAAAC,QAAA8kC,0CAKAvlC,KAAAI,2BAEAI,aAAAkF,0DAMA,0BAAArF,kKAGAqkC,4CAAehjC,oBAAA,+lBAtQfgjC,q3BCAAmB,uBAEA,SAAAA,YAAAC,EAAA/rB,EAAAE,EAAA8rB,EAAA1f,GACA3hB,gBAAA1E,KAAA6lC,aAEA7lC,KAAAsY,QAAAwtB,EAEA9lC,KAAAga,KAAAD,EAEA/Z,KAAAkO,KAAA+L,EAEAja,KAAAgmC,MAAAD,EAEA/lC,KAAAimC,UAAA5f,EACArmB,KAAAkmC,OAAA,KACAlmC,KAAAmmC,cAAA,0EAOA,IADAC,EACAhlC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAAAilC,IACAjlC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACAglC,IAEAA,EAAA1uB,OAAA4uB,iBAAAtmC,KAAAsY,UAEA,IAAAsB,EAAAwsB,EAAAG,iBAAAvmC,KAAAga,MACA,IAAAJ,EAEA,UAAA1Z,MAAA,4CAAAF,KAAAga,KAAA,iBAGAha,KAAAkmC,OAAAtsB,EAAA6c,OACAz2B,KAAAmmC,cAAAnmC,KAAAkmC,OACAG,GAAArmC,KAAAimC,WAAAjmC,KAAAimC,UAAAjmC,KAAA4Z,wCAQA5Z,KAAA8Z,SAAA9Z,KAAAmmC,gDAOAK,GACA,IADAH,IACAjlC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACApB,KAAAkmC,OAAAM,EACAxmC,KAAAsY,QAAAvI,MAAA8kB,YAAA70B,KAAAga,KAAAwsB,GAEAH,GAAArmC,KAAAimC,WAAAjmC,KAAAimC,UAAAv2B,KAAA,KAAA1P,KAAAwmC,sCAMA,OAAAxmC,KAAAkmC,gDAKA,OAAAlmC,KAAAkmC,QAAAlmC,KAAAmmC,0JAIAM,+BAEA,SAAAA,sBACA/hC,gBAAA1E,KAAAymC,qBACAzmC,KAAA0mC,SAAA,IAAAtgC,IACApG,KAAA2mC,QAAA,IAAAvgC,IAEApG,KAAA+pB,OAAA,qFAGA+b,EAAA/rB,GACA,IADAE,EACA7Y,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,OAAA2kC,EACA3kC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,UAAAwlC,EACAxlC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAEA,GAAApB,KAAA0mC,SAAAp9B,IAAAyQ,GAEA,UAAA7Z,MAAA,gCAAA6Z,EAAA,wBAGA,IAGAisB,EAHAjhC,EAAA,IAAA8gC,YAAAC,EAAA/rB,EAAAE,EAAA8rB,EAAAa,GAIA,GAHA5mC,KAAA0mC,SAAA9/B,IAAAmT,EAAAhV,GAGA/E,KAAA2mC,QAAAr9B,IAAAy8B,IASA,QAFAC,EAAAhmC,KAAA2mC,QAAA7/B,IAAAi/B,IAEAv0B,QAAAuI,GAGA,YAVAisB,EAAA,GACAhmC,KAAA2mC,QAAA//B,IAAAm/B,EAAAC,GAYAA,EAAAn5B,KAAAkN,iDAGAA,GAEA,GAAA/Z,KAAA0mC,SAAAp9B,IAAAyQ,GACA,CACA,IAAA8sB,EAAA7mC,KAAA0mC,SAAA5/B,IAAAiT,GACA/Z,KAAA0mC,SAAAtf,OAAArN,GACA,IAAAgsB,EAAAc,EAAAb,MACA,GAAAhmC,KAAA2mC,QAAAr9B,IAAAy8B,GACA,CACA,IAAAC,EAAAhmC,KAAA2mC,QAAA7/B,IAAAi/B,GACApkB,EAAAqkB,EAAAx0B,QAAAuI,GACA4H,GAAA,GAEAqkB,EAAAxe,OAAA7F,EAAA,0CAQA,GAAA3hB,KAAA+pB,MAEA,UAAA7pB,MAAA,uBAIA,IACAkmC,EADAU,EAAA,GAPAh6B,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IASA,QAAA2L,EAAAC,EAAAlN,KAAA0mC,SAAAK,SAAA35B,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADA+5B,EACA55B,EAAAlN,MACAuY,EAAAuuB,EAAAvuB,SACA8tB,EAAAU,EAAAxuB,MAGA8tB,EAAA1uB,OAAA4uB,iBAAAhuB,GACAwuB,EAAAxuB,GAAA8tB,GAEAS,EAAAG,YAAAZ,GAAA,IAlBA,MAAAx4B,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAqBAhN,KAAA+pB,OAAA,sCAKA,IAAA/pB,KAAA+pB,MAEA,UAAA7pB,MAAA,uBAGAF,KAAA0mC,SAAAhhC,QACA1F,KAAA2mC,QAAAjhC,QAEA1F,KAAA+pB,OAAA,0CAGAhQ,GAEA,OAAA/Z,KAAA0mC,SAAA5/B,IAAAiT,2CAGAgsB,GAEA,OAAA/lC,KAAA2mC,QAAA7/B,IAAAi/B,IAAA,wCAKA,OAAA/lC,KAAA0mC,SAAAK,2CAKA,OAAA/mC,KAAA0mC,SAAAnS,MAAA,+JAIAkS,+CAAe/kC,oBAAA,mmBA3LfmkC,qIAsEAY,u8BCpEAQ,mBAEA,SAAAA,QAAAhC,EAAAllC,EAAAmO,EAAAg5B,EAAAC,EAAArH,GACAp7B,gBAAA1E,KAAAinC,SACAjnC,KAAAonC,SAAAnC,EACAjlC,KAAAsxB,IAAArwB,OAAAomC,gDAAA,EAAApmC,GACAjB,KAAAsnC,MAAAp5B,EAEAlO,KAAAD,QACAC,KAAAknC,OACAlnC,KAAAmnC,iBACAnnC,KAAA8/B,4EAKA,IAAAyH,EAAAvnC,KAAAonC,SAAA1H,cACA/d,EAAA4lB,EAAA/1B,QAAAxR,MACA,GAAA2hB,EAAA,YAAAzhB,MAAA,oDACAqnC,EAAA/f,OAAA7F,EAAA,qCAKA,OAAA3hB,KAAAsnC,sCAKA,OAAAtnC,KAAAsxB,gDAKA,OAAAtxB,KAAAmnC,2DAKA,OAAAnnC,KAAA8/B,8CAGA0H,GAEA,OAAAxnC,KAAAknC,KAAA11B,QAAAg2B,IAAA,0IAIAC,+BAEA,SAAAA,sBACA/iC,gBAAA1E,KAAAynC,qBACAznC,KAAA0nC,cAAA,6EAGA3nC,GACA,IADAmO,EACA9M,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAAA8lC,EACA9lC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAAA+lC,EACA/lC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAAA0+B,EACA1+B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAAAumC,IACAvmC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACA8lC,GAAAS,GAEA3nC,KAAAo4B,cAAA8O,GAGA,IAAAniC,EAAA,IAAAkiC,QAAAjnC,KAAAD,EAAAmO,GAAA,UAAAg5B,GAAA,GAAAC,EAAArH,GACA9/B,KAAA0nC,cAAA/Z,QAAA5oB,6CAGAhF,GACA,IADAmnC,EACA9lC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAAA+lC,EACA/lC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAAA0+B,EACA1+B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAAAumC,IACAvmC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACApB,KAAAu4B,WAAAx4B,EAAA,UAAAmnC,EAAAC,EAAArH,EAAA6H,2CAGA5nC,GACA,IADAmnC,EACA9lC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAAA+lC,EACA/lC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAAA0+B,EACA1+B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAAAumC,IACAvmC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACApB,KAAAu4B,WAAAx4B,EAAA,QAAAmnC,EAAAC,EAAArH,EAAA6H,6CAGA5nC,GACA,IADAmnC,EACA9lC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAAA+lC,EACA/lC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAAA0+B,EACA1+B,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAAAumC,IACAvmC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACApB,KAAAu4B,WAAAx4B,EAAA,UAAAmnC,EAAAC,EAAArH,EAAA6H,2CAIA,IADAT,EACA9lC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAEA,GAAA8lC,EAKA,CAGA,IAAAU,EAFA3/B,MAAA4/B,QAAAX,OAAA,CAAAA,IAGA,QAAA7gC,EAAArG,KAAA0nC,cAAArmC,OAAA,EAAAgF,GAAA,IAAAA,EACA,CACAuhC,EAAA5nC,KAAA0nC,cAAArhC,GADA,IAAAyG,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAEA,QAAA2L,EAAAC,EAAAg6B,EAAA95B,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADA06B,EACAv6B,EAAAlN,MACA,GAAA6nC,EAAAE,OAAAN,GACA,CACAxnC,KAAA0nC,cAAAlgB,OAAAnhB,EAAA,GACA,QAPA,MAAAuH,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,UARAhN,KAAA0nC,cAAArmC,OAAA,wCAuBA,IADA6lC,EACA9lC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAEA,GAAA8lC,EAKA,CACAj/B,MAAA4/B,QAAAX,OAAA,CAAAA,IAEA,QAAA7gC,EAAArG,KAAA0nC,cAAArmC,OAAA,EAAAgF,GAAA,IAAAA,EACA,CACAoa,QAAAzgB,KAAA0nC,cAAArhC,GADA,IAAAoI,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IAEA,QAAAsN,EAAAC,EAAAq4B,EAAA95B,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA,KADA+4B,EACA54B,EAAA7O,MACA,GAAA0gB,QAAAqnB,OAAAN,GAEA,UANA,MAAA55B,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,IAWA,SAlBA,OAAA3O,KAAA0nC,cAAArmC,QAAA,wCAwBA,OAAArB,KAAA0nC,2KAGAD,+CAAe/lC,oBAAA,2mBA1IfulC,iIAgDAQ,q/FCpCAM,yCAEA,SAAAA,cAAAx4B,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAA+nC,gBACAjjC,EAAA0K,2BAAAxP,KAAAyP,gBAAAs4B,eAAAr4B,KAAA1P,KAAAuP,KAEA8Y,UAAA,KAEAvjB,EAAAyJ,MAAA,CACAy5B,YAAA,GAGAljC,EAAAmjC,oBAAAnjC,EAAAmjC,oBAAA9nC,KAAAwZ,8CAAA7U,KACAA,EAAAojC,aAAApjC,EAAAojC,aAAA/nC,KAAAwZ,8CAAA7U,KAEAA,EAAAqjC,mBAAArjC,EAAAqjC,mBAAAhoC,KAAAwZ,8CAAA7U,KACAA,EAAAsjC,wBAAAtjC,EAAAsjC,wBAAAjoC,KAAAwZ,8CAAA7U,KACAA,EAAAujC,kBAAAvjC,EAAAujC,kBAAAloC,KAAAwZ,8CAAA7U,KAEAA,EAAAwjC,iBAAAxjC,EAAAwjC,iBAAAnoC,KAAAwZ,8CAAA7U,KAhBAA,kHAmBA3D,GAEAnB,KAAAuP,MAAA6E,cAAAG,qBACAg0B,8DAGApnC,GAEA,IAAApB,EAAAoB,EAAA0Y,OAAA9Z,MACAC,KAAAuP,MAAA6E,cAAAI,uBACAg0B,gBAAAzoC,8CAGAoB,GAEAnB,KAAAuP,MAAA6E,cAAAI,uBAAAkL,oBACA+oB,mBAAAtnC,EAAA0Y,OAAAsqB,yDAGA72B,EAAA6S,GAEA,IAAAmS,EAAAtyB,KAAAuP,MAAA6E,cAAAI,uBAAAkL,oBAAAgpB,aACApW,EAAAqW,QAAAr7B,IAEAglB,EAAAqW,OAAAr7B,EACAglB,EAAAC,mEAIAxyB,GAEA,OAAAA,KAAAsB,OAAA,EAAAtB,EAAA8oB,uCAAA,EAAAxmB,2DAKArC,KAAAkgB,SAAA,SAAAC,EAAA5Q,GACA,OAAAy4B,YAAA7nB,EAAA6nB,+CAKA,IAAA7zB,EAAAnU,KACAoU,EAAApU,KAAAuP,MAAA6E,cACAuM,EAAAvM,EAAAG,qBACAsK,EAAAzK,EAAAI,uBAEA9M,EAAAiZ,EAAA0Z,WACA5a,EAAAZ,EAAAa,oBAEA,OAAA/P,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,mBAAA7P,KAAAuP,MAAAM,UAAAzH,GAAA,WAAA0L,IAAA,SAAAY,GAAA,OAAAP,EAAAkU,UAAA3T,GAAA3E,MAAA/P,KAAAuP,MAAAQ,OACAJ,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,eACAF,2CAAAC,EAAAzB,cAAA,UAAAiT,KAAApP,SAAA,8BAEArC,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,iBACAF,2CAAAC,EAAAzB,cAAA,UAAA0B,UAAA,4BACA9P,MAAA0f,EAAAG,iBACAlG,SAAA1Z,KAAAioC,qBACAt4B,2CAAAC,EAAAzB,cAAA,UAAApO,MAAA,cACA4P,2CAAAC,EAAAzB,cAAA,UAAApO,MAAA,eAGAC,KAAAuO,MAAAy5B,YACAr4B,2CAAAC,EAAAzB,cAAAy6B,gEAAA,GAAAnpB,oBAGAzf,KAAAuO,MAAAy5B,YACAr4B,2CAAAC,EAAAzB,cAAA,WACAwB,2CAAAC,EAAAzB,cAAA,WACAwB,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,uBACAF,2CAAAC,EAAAzB,cAAA06B,uDAAA,GAAAloB,oBACAhR,2CAAAC,EAAAzB,cAAA26B,2DAAA,GAAAjqB,uBAEAlP,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,aACAF,2CAAAC,EAAAzB,cAAA46B,uEAAA,GAAAtpB,mBACA9P,2CAAAC,EAAAzB,cAAA66B,iEAAA,GAAAvpB,qBAGA9P,2CAAAC,EAAAzB,cAAA,WAGAwB,2CAAAC,EAAAzB,cAAA,OAAA4B,MAAA,CAAAk5B,cAAA,UACAt5B,2CAAAC,EAAAzB,cAAA,MAAA4B,MAAA,CAAAm5B,aAAA,sBACAv5B,2CAAAC,EAAAzB,cAAA,OAAA4B,MAAA,CAAAyF,QAAA,OAAA2zB,cAAA,QACAx5B,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,sBACAF,2CAAAC,EAAAzB,cAAAi7B,qEAAA,GAAA/zB,aAAAoK,EAAAipB,aAAAC,OAAA54B,MAAA,CAAAvE,MAAA,OAAAib,UAAAzmB,KAAAqoC,kBAAA3iB,cAAA,OAAAG,SAAA7lB,KAAAooC,2BAEAz4B,2CAAAC,EAAAzB,cAAA,UAAA4B,MAAA,CACAs5B,WAAA,OACAC,QAAA,OACAC,OAAA,OACAC,QAAA,IACAC,OAAA,IACAC,WAAA,OACArG,MAAA,SACArzB,UAAA,GACAL,2CAAAC,EAAAzB,cAAA,qBACAwB,2CAAAC,EAAAzB,cAAA,qBACAwB,2CAAAC,EAAAzB,cAAA,uBAGAwB,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,kBAEAF,2CAAAC,EAAAzB,cAAA,SAAAD,KAAA,WAAA9F,GAAA,iBACAsR,SAAA1Z,KAAAmoC,mBACAhE,QAAA1kB,EAAAkqB,0BACAh6B,2CAAAC,EAAAzB,cAAA,SAAAiM,QAAA,kBAAAgH,KAAApP,SAAA,wBAIArC,2CAAAC,EAAAzB,cAAA,WAEAwB,2CAAAC,EAAAzB,cAAA,UAAA0B,UAAA,eAAAI,QAAAjQ,KAAAkoC,aAAAl4B,SAAAtI,EAAAkiC,WACAxoB,KAAApP,SAAA,gCAKArC,2CAAAC,EAAAzB,cAAA,UAAA0B,UAAA,eAAAI,QAAAjQ,KAAAsoC,kBACAtoC,KAAAuO,MAAAy5B,WAAA,2BAGAr4B,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,8JAhJAF,2CAAAC,EAAAO,WAoJAlP,OAAAmhC,eAAA2F,cAAA,SACAjhC,IAAA,kBAAAsa,KAAApP,SAAA,+BAEA+1B,cAAA1T,iBAAA,wCAEA0T,yCAAermC,oBAAA,+mBAzJfqmC,mlFCJA8B,sCAEA,SAAAA,WAAAt6B,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAA6pC,aACA/kC,EAAA0K,2BAAAxP,KAAAyP,gBAAAo6B,YAAAn6B,KAAA1P,KAAAuP,KAEAu6B,cAAAhlC,EAAAglC,cAAA3pC,KAAAwZ,8CAAA7U,KAHAA,6GAMA3D,GAEA,IAAAkH,EAAA,IAAAvC,KAAA8P,SAAA,MACAtN,EAAA,IAAAxC,KAAA8P,SAAA,MACA5V,KAAAuP,MAAAoR,gBAAAna,WAAA6B,EAAAC,oCAKA,IAAAqY,EAAA3gB,KAAAuP,MAAAoR,gBACAjZ,EAAAiZ,EAAA0Z,WACA,OAAA1qB,2CAAAC,EAAAzB,cAAA47B,qDAAA,GAAAj6B,MAAAsR,KAAApP,SAAA,8BAAAqD,aAAA,QACA1F,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,uBACAF,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,aACAF,2CAAAC,EAAAzB,cAAA67B,mDAAA,QAEAtiC,EAAAE,WAAAosB,IAAA,SAAA7yB,EAAAkF,GACA,OAAAsJ,2CAAAC,EAAAzB,cAAA87B,0CAAA,GAAAnqC,IAAAqB,EAAAgH,oBAAAkQ,IAAAlX,EAAAoH,MAAApH,EAAAqH,eAAAC,OAAAtH,EAAAuH,gBACAiY,kBACAqV,QAAA,SAAAlL,GAAA,OAAAnK,EAAAyR,YAAAjxB,SAIAwO,2CAAAC,EAAAzB,cAAAwzB,iDAAA,GAAA1xB,QAAAjQ,KAAA8pC,eACAn6B,2CAAAC,EAAAzB,cAAA+7B,iDAAA,oJAjCAv6B,2CAAAC,EAAAO,oBAwCA05B,sCAAenoC,oBAAA,+nBAxCfmoC,mjECRAM,wCAEA,SAAAA,aAAA56B,GACA,OAAA7K,gBAAA1E,KAAAmqC,cAAA36B,2BAAAxP,KAAAyP,gBAAA06B,cAAAz6B,KAAA1P,KACAuP,8GAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,gBAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,sDACA3C,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,OAAA7I,EAAA,gKAXA3C,2CAAAC,EAAAO,oBAgBAg6B,wCAAezoC,oBAAA,ikBAhBfyoC,gvECGAC,oCAEA,SAAAA,SAAA76B,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAAoqC,WACAtlC,EAAA0K,2BAAAxP,KAAAyP,gBAAA26B,UAAA16B,KAAA1P,KAAAuP,KAEAhB,MAAA,CACAxO,MAAA,KACAkZ,OAAA,GAGAnU,EAAAixB,cAAAjxB,EAAAixB,cAAA51B,KAAAwZ,8CAAA7U,KACAA,EAAAkxB,QAAAlxB,EAAAkxB,QAAA71B,KAAAwZ,8CAAA7U,KACAA,EAAAogB,OAAApgB,EAAAogB,OAAA/kB,KAAAwZ,8CAAA7U,KACAA,EAAAmxB,UAAAnxB,EAAAmxB,UAAA91B,KAAAwZ,8CAAA7U,KACAA,EAAAqgB,QAAArgB,EAAAqgB,QAAAhlB,KAAAwZ,8CAAA7U,KAZAA,mGAeA3D,GAEA,IAAA0Y,EAAA1Y,EAAA0Y,OAEA7Z,KAAAkgB,SAAA,CAAAngB,MAAAC,KAAAuP,MAAAhH,MAAA0Q,OAAA,cACAY,EAAAyL,WAIAtlB,KAAAuP,MAAAymB,SAAAh2B,KAAAuP,MAAAymB,QAAA70B,kCAGAA,GAEA,IAAAwf,EAAA3gB,KAAAuP,MAAAoR,gBACA0pB,EAAArqC,KAAAuO,MAAAxO,MAGA,SAAAsqC,EACA,CACA,IAAA9jC,EAAAvG,KAAAuP,MAAA8I,IACA3Q,EAAAiZ,EAAA0Z,WACA,GAAAgQ,EAAAhpC,OAAA,EAEAqG,EAAA4iC,gBAAAD,GACAhpC,QAAA,GAGAsf,EAAA4pB,WAAAhkC,EAAA8jC,QAUA1pB,EAAA6pB,iBAAAxqC,KAAAuP,MAAA8I,KAGArY,KAAAkgB,SAAA,CAAAngB,MAAA,KAAAkZ,OAAA,IAGAjZ,KAAAuP,MAAA2V,QAAAllB,KAAAuP,MAAA2V,OAAA/jB,sCAIAA,GAEAA,EAAAo1B,UAAAC,uCAAA,EAAAh0B,YAAArB,EAAAo1B,UAAAC,uCAAA,EAAA/zB,WAEAtB,EAAA8kB,iDAIA9kB,GAEA,GAAAA,EAAAo1B,UAAAC,uCAAA,EAAAh0B,WAEArB,EAAA0Y,OAAA2L,YAEA,GAAArkB,EAAAo1B,UAAAC,uCAAA,EAAA/zB,UACA,CACA,IAAAoX,EAAA1Y,EAAA0Y,OACA7Z,KAAAkgB,SAAA,CAAAngB,MAAA,KAAAkZ,OAAA,cACAY,EAAA2L,gDAKArkB,GAEA,IAAAuG,EAAA1H,KAAAuP,MAAAoR,gBAAA0Z,WACAt6B,EAAAoB,EAAA0Y,OAAA9Z,MAAA02B,OACAxd,GAAA,EACA,GAAAlZ,EAAAsB,OAAA,EACA,CACA,IAAAuI,EAAAlC,EAAA4iC,gBAAAvqC,GACA6J,EAAAvI,OAAA,IAIAuI,EAAAvI,OAAA,GAAAuI,EAAA,KAAA5J,KAAAuP,MAAA8I,OAEAY,GAAA,GAKAjZ,KAAAkgB,SAAA,CACAngB,QACAkZ,2CAMA,IAAAwxB,EAAAzqC,KAAAuP,MAAA8I,IAAAzP,gBACA7I,EAAA,MAAAC,KAAAuO,MAAAxO,MAAAC,KAAAuO,MAAAxO,MAAAC,KAAAuP,MAAAhH,MACA,OAAAoH,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,sBACA46B,EAAA,kBACA,GAAA1qC,EAAAsB,OAAA,iBACArB,KAAAuO,MAAAxO,OAAAC,KAAAuO,MAAA0K,MAAA,iBACAtJ,2CAAAC,EAAAzB,cAAA,SAAAD,KAAA,OAAA2B,UAAA7P,KAAAuP,MAAA9G,OAAA,aACAiuB,WAAA,QACA3mB,MAAA,CAAAvE,MAAAzL,EAAAsB,OAAA,MACAtB,QACA2Z,SAAA1Z,KAAA+1B,cACAC,QAAAh2B,KAAAg2B,QACA9Q,OAAAllB,KAAAklB,OACAC,QAAAnlB,KAAAmlB,QACA8Q,UAAAj2B,KAAAi2B,oJAlIAtmB,2CAAAC,EAAAO,oBAuIAi6B,oCAAe1oC,oBAAA,2nBAvIf0oC,mhFCIAM,wCAEA,SAAAA,aAAAn7B,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAA0qC,eACA5lC,EAAA0K,2BAAAxP,KAAAyP,gBAAAi7B,cAAAh7B,KAAA1P,KAAAuP,KACAo7B,WAAA,KAEA7lC,EAAAyJ,MAAA,CACAq8B,SAAA,GAGA9lC,EAAA+lC,eAAA/lC,EAAA+lC,eAAA1qC,KAAAwZ,8CAAA7U,KACAA,EAAAgmC,cAAAhmC,EAAAgmC,cAAA3qC,KAAAwZ,8CAAA7U,KATAA,kHAYA3D,GACA,IAAAgT,EAAAnU,KACAA,KAAAkgB,SAAA,CAAA0qB,SAAA,cACAz2B,EAAAw2B,WAAA72B,IAAAyR,gDAIApkB,GAEAnB,KAAAkgB,SAAA,CAAA0qB,SAAA,qCAIA,IAAA9kB,EAAA9lB,KACA6e,EAAA7e,KAAAuP,MAAAsP,kBACAgR,EAAAhR,EAAAiR,cAEA,OAAAngB,2CAAAC,EAAAzB,cAAA47B,qDAAA,GAAAj6B,MAAAsR,KAAApP,SAAA,iCACArC,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,uBACAF,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,aAEAggB,EAAAmE,IAAA,SAAA7yB,EAAAkF,GACA,OAAAsJ,2CAAAC,EAAAzB,cAAA48B,6CAAA,GAAAjrC,IAAAqB,EAAA,IAAAkF,EAAAgS,IAAAlX,EAAA0d,wBAIA7e,KAAAuO,MAAAq8B,SACAj7B,2CAAAC,EAAAzB,cAAA48B,6CAAA,GAAAj3B,IAAA,SAAAY,GAAA,OAAAoR,EAAA6kB,WAAAj2B,GAAA2D,IAAA,GAAAwG,oBACAqG,OAAAllB,KAAA8qC,iBAIAn7B,2CAAAC,EAAAzB,cAAAwzB,iDAAA,GAAA1xB,QAAAjQ,KAAA6qC,gBACAl7B,2CAAAC,EAAAzB,cAAA+7B,iDAAA,sJAhDAv6B,2CAAAC,EAAAO,oBAuDAu6B,wCAAehpC,oBAAA,uoBAvDfgpC,i+ECFA,IAAA7xB,IAAA,EACAC,OAAA,EACAC,IAAA,EAEAiyB,YAAA,UACAC,WAAA,SAEAC,2CAEA,SAAAA,gBAAA37B,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAAkrC,kBACApmC,EAAA0K,2BAAAxP,KAAAyP,gBAAAy7B,iBAAAx7B,KAAA1P,KAAAuP,KAEAhB,MAAA,CACA48B,QAAAH,aAJAlmC,kHASA,IAAAqP,EAAAnU,KACAyf,EAAAzf,KAAAuP,MAAAkQ,eACA4X,EAAA5X,EAAA6X,aACA7a,EAAA4a,EAAAna,YACA2S,EAAAwH,EAAAvH,cAEAsb,GADA/T,EAAAgU,iBACArrC,KAAAuO,MAAA48B,SACAG,EAAA,OAAA7rB,EAAAG,iBACA2rB,EAAAH,IAAAJ,aAAAM,EAEA,OAAA37B,2CAAAC,EAAAzB,cAAA47B,qDAAA,GAAAj6B,MAAAsR,KAAApP,SAAA,oCACArC,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,6BACAF,2CAAAC,EAAAzB,cAAA,SAAA0B,UAAA,mBACAF,2CAAAC,EAAAzB,cAAA,aACAwB,2CAAAC,EAAAzB,cAAA,UACAwB,2CAAAC,EAAAzB,cAAA,MAAA0B,UAAA,aACAF,2CAAAC,EAAAzB,cAAA,UAAA0B,UAAA,eAAAI,QAAA,kBACAkE,EAAA+L,SAAA,SAAAC,EAAA5Q,GACA,OACA47B,QAAAhrB,EAAAgrB,SAAAH,YAAAC,WAAAD,iBAGAhrC,KAAAuO,MAAA48B,SAAAH,YAAA,cAIAI,IAAAJ,YACAnb,EAAAmE,IAAA,SAAA7yB,EAAAkF,GAAA,OAAAsJ,2CAAAC,EAAAzB,cAAA,MAAArO,IAAAqB,EAAAqqC,MAAA,MAAA37B,UAAA,OAAA1O,KACAiqC,IAAAH,WACAxuB,EAAAuX,IAAA,SAAA7yB,EAAAkF,GAAA,OAAAsJ,2CAAAC,EAAAzB,cAAA,MAAArO,IAAAqB,EAAAqqC,MAAA,MAAA37B,UAAA,OAAA1O,KACA,KAGAoqC,GACA57B,2CAAAC,EAAAzB,cAAA,MAAAq9B,MAAA,OAAAC,gDAAA,IAIAhvB,EAAAuX,IAAA,SAAA7yB,EAAAkF,GAAA,OAAAsJ,2CAAAC,EAAAzB,cAAA,MAAArO,IAAAqB,GACAwO,2CAAAC,EAAAzB,cAAA,MAAAq9B,MAAA,MAAA37B,UAAA,OAAA1O,GAEAiqC,IAAAJ,YACAnb,EAAAmE,IAAA,SAAAznB,EAAAlG,GACA,IAAAwJ,EAAA,GACA9K,EAAA2mC,kCAAArU,EAAAl2B,EAAAoL,EAAA++B,GAKA,OAJAA,IAAAvmC,EAAA4mC,WAAA,WAAA5mC,IAEA8K,GAAA,UAEAF,2CAAAC,EAAAzB,cAAA,MAAArO,IAAAqB,EAAA,IAAAoL,EAAAsD,aACA9K,KAGAqmC,IAAAH,WACAxuB,EAAAuX,IAAA,SAAAvuB,EAAAY,GACA,IAAAtB,EAAA6mC,kCAAAvU,EAAAl2B,EAAAsE,GACA,OAAAkK,2CAAAC,EAAAzB,cAAA,MAAArO,IAAAqB,EAAA,IAAAsE,GACAV,KAGA,KAGAwmC,GACA57B,2CAAAC,EAAAzB,cAAA,UAAAu9B,kCAAArU,EAAAl2B,EAAAsqC,gDAAA,yJA5EA97B,2CAAAC,EAAAO,WAuFA,SAAAu7B,kCAAArU,EAAAhf,EAAA9L,GACA,IADAs/B,IACAzqC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACA2D,EAAAsyB,EAAAyU,aAAAzzB,EAAA9L,GAGA,OAAAtE,MAAA4/B,QAAA9iC,GAEA8mC,GAAA,GAAA9mC,EAAA1D,OAEA0D,EAAA1D,OAAA,EACA,IAAA0D,EAAA2I,KAAA,cAFA3I,EAAA,GAMAA,GAAA,IAIA,SAAA6mC,kCAAAvU,EAAAhf,EAAA5S,GAEA,IAAAV,EAAA,GACAkX,EAAAob,EAAAgU,iBAFAv+B,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAGA,QAAA2L,EAAAC,EAAA+O,EAAA7O,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADAsC,EACAnC,EAAAlN,MACAqP,EAAAyJ,MAAAR,GAAAjJ,EAAA2J,MAAAtT,GAEAV,EAAA8H,KAAAuC,EAAA0J,UAPA,MAAAlL,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAWA,WAAAjI,EAAA1D,OAEA0D,EAAA,GAEAA,EAAA1D,OAAA,EAEA,IAAA0D,EAAA2I,KAAA,UAIA,iBAIAw9B,2CAAexpC,oBAAA,mpBA1IfmX,6IACAC,mJACAC,6IAEAiyB,6JACAC,2JAEAC,qKAuFAQ,yMAkBAE,69ECjHAG,8CACA,SAAAA,mBAAAx8B,GAAA,OAAA7K,gBAAA1E,KAAA+rC,oBAAAv8B,2BAAAxP,KAAAyP,gBAAAs8B,oBAAAr8B,KAAA1P,KACAuP,0HAIA,IAAAkQ,EAAAzf,KAAAuP,MAAAkQ,eACA4X,EAAA5X,EAAA6X,aACA7a,EAAA4a,EAAAna,YACA2S,EAAAwH,EAAAvH,cAAAkc,OACAC,EAAA,OAAAxsB,EAAAG,iBACA,OACAjQ,2CAAAC,EAAAzB,cAAA+9B,kDAAA,GAAAp8B,MAAA,oBACAH,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,gCACAF,2CAAAC,EAAAzB,cAAA,SAAA0B,UAAA,4BACAF,2CAAAC,EAAAzB,cAAA,aACAwB,2CAAAC,EAAAzB,cAAA,UACAwB,2CAAAC,EAAAzB,cAAA,uBACAwB,2CAAAC,EAAAzB,cAAA,UAAA89B,EAAA,aAGAxvB,EAAAuX,IAAA,SAAAzlB,EAAAlI,GACA,IAAA8lC,EAAA9U,EAAAyU,aAAAv9B,EAAA69B,gDAAA,GACAC,EAAA,GAEApwB,EAAA4T,EAAAmE,IAAA,SAAAznB,EAAA4Q,GACA,IAAAtN,EAAA,GACAy8B,EAAAjV,EAAAyU,aAAAv9B,EAAAhC,GACA,IAAA0/B,GAAAK,EAAAjrC,OAUA,OATA4qC,GAAAK,EAAAjrC,SACAwO,EAAA,QACAy8B,EAAA,MAEAL,GAAAK,EAAAjrC,OAAA,IACAwO,EAAA,QACAy8B,EAAA,IAAAA,EAAA,KAEAA,EAAAL,EAAA,IAAAK,EAAA,OAAAA,EACA38B,2CAAAC,EAAAzB,cAAA,MAAArO,IAAA,GAAAyO,EAAAhC,GACAoD,2CAAAC,EAAAzB,cAAA,MAAA0B,UAAA,8BAAAtB,EAAA,IAAAhC,EAAA,KACAoD,2CAAAC,EAAAzB,cAAA,MAAA0B,UAAA,4BAAAA,GAAAy8B,MAIAH,EAAA9qC,OAAA,IACA4qC,IACAI,EAAA,SAGAF,EADAF,GAAAE,EAAA9qC,OAAA,EACA,IAAA8qC,EAAA,OAAAA,EACAlwB,EAAA0R,QACAhe,2CAAAC,EAAAzB,cAAA,MAAArO,IAAA,GAAAyO,EAAA69B,gDAAA,GACAz8B,2CAAAC,EAAAzB,cAAA,MAAA0B,UAAA,0BAAAw8B,GAAA,IAAA99B,EAAA,IAAA69B,gDAAA,OACAz8B,2CAAAC,EAAAzB,cAAA,MAAA0B,UAAA,4BAAAs8B,MAIA,OAAAlwB,yJAzDAtM,2CAAAC,EAAAO,oBAoEA47B,8CAAerqC,oBAAA,+pBApEfqqC,u3ECAA,IAAAQ,MAAA,IACAC,MAAA,IAEAC,4CACA,SAAAA,iBAAAl9B,GAAA,OAAA7K,gBAAA1E,KAAAysC,kBAAAj9B,2BAAAxP,KAAAyP,gBAAAg9B,kBAAA/8B,KAAA1P,KACAuP,sHAIA,IAAAkQ,EAAAzf,KAAAuP,MAAAkQ,eACA4X,EAAA5X,EAAA6X,aACA7a,EAAA4a,EAAAna,YACA0T,EAAAyG,EAAAqV,iBACA7c,EAAAwH,EAAAvH,cAAAkc,OACAC,EAAA,OAAAxsB,EAAAG,iBACA,OAAAjQ,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,uBACAF,2CAAAC,EAAAzB,cAAA,kCACAwB,2CAAAC,EAAAzB,cAAA,WACAwB,2CAAAC,EAAAzB,cAAA,iBACAwB,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,oBACA4M,EAAApb,OAAA,OAAAob,EAAA/O,KAAA,WAAAi/B,gDAAA,IAGAh9B,2CAAAC,EAAAzB,cAAA,WACAwB,2CAAAC,EAAAzB,cAAA,iBACAwB,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,oBACAggB,EAAAxuB,OAAA,OAAAwuB,EAAAniB,KAAA,WAAAi/B,gDAAA,IAGAh9B,2CAAAC,EAAAzB,cAAA,WACAwB,2CAAAC,EAAAzB,cAAA,UAAAq+B,OACA78B,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,oBAEA4M,EAAAuX,IAAA,SAAAzlB,EAAAlI,GACA,IAAA8lC,EAAA9U,EAAAyU,aAAAv9B,EAAAo+B,gDAAA,GACAN,EAAA,GAEApwB,EAAA4T,EAAAmE,IAAA,SAAAznB,EAAA4Q,GACA,IAAAtN,EAAA,GACAy8B,EAAAjV,EAAAyU,aAAAv9B,EAAAhC,GACA,IAAA0/B,GAAAK,EAAAjrC,OAUA,OATA4qC,GAAAK,EAAAjrC,SACAwO,EAAA,QACAy8B,EAAA,MAEAL,GAAAK,EAAAjrC,OAAA,IACAwO,EAAA,QACAy8B,EAAA,KAAAA,EAAA,MAEAA,EAAAL,EAAA,KAAAK,EAAA,QAAAA,EACA38B,2CAAAC,EAAAzB,cAAA,OAAArO,IAAA,GAAAyO,EAAAhC,EAAAsD,aACA28B,MAAA,OAAAj+B,EAAA,KAAAhC,EAAA,QAAAggC,MAAA,IAAAD,KAIAH,EAAA9qC,OAAA,IACA4qC,IACAI,EAAA,SAGAF,EADAF,GAAAE,EAAA9qC,OAAA,EACA,KAAA8qC,EAAA,QAAAA,EACAlwB,EAAA0R,QACAhe,2CAAAC,EAAAzB,cAAA,OAAArO,IAAA,GAAAyO,EAAAo+B,gDAAA,EAAA98B,UAAAw8B,GACAG,MAAA,OAAAj+B,EAAA,KAAAo+B,gDAAA,UAAAJ,MAAA,IAAAJ,KAIA,OAAAlwB,IAIAgwB,GAAAt8B,2CAAAC,EAAAzB,cAAA,OAAA/F,GAAA,yBACAuH,2CAAAC,EAAAzB,cAAA,2CACAwB,2CAAAC,EAAAzB,cAAA,WAAAq+B,MAAA,cAAAD,MAAA,IAAAI,gDAAA,MAKAh9B,2CAAAC,EAAAzB,cAAA,WACAwB,2CAAAC,EAAAzB,cAAA,kBACAwB,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,oBACA4M,EAAA,KAGA9M,2CAAAC,EAAAzB,cAAA,WACAwB,2CAAAC,EAAAzB,cAAA,iBACAwB,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,oBACA+gB,EAAAvvB,OAAA,OAAAuvB,EAAAljB,KAAA,UAAAi/B,gDAAA,oJApFAh9B,2CAAAC,EAAAO,oBA2FAs8B,4CAAe/qC,oBAAA,upBA9Ff6qC,mJACAC,mJAEAC,wnGCQA,IAAAG,cAAA,WAGAC,mBAAA,GAEAC,wCAEA,SAAAA,aAAAv9B,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAA8sC,eACAhoC,EAAA0K,2BAAAxP,KAAAyP,gBAAAq9B,cAAAp9B,KAAA1P,KAAAuP,KAEA8Y,UAAA1Y,2CAAAC,EAAAsF,YACApQ,EAAAioC,YAAAp9B,2CAAAC,EAAAsF,YAEApQ,EAAAyJ,MAAA,CACA4Q,eAAAra,EAAAyK,MAAA6E,cAAA44B,oBAAAC,oBACAC,YAAA,GAGApoC,EAAAqoC,gBAAA,EACAroC,EAAAsoC,gBAAA,EACAtoC,EAAAuoC,uBAAA,EAEAvoC,EAAAwoC,uBAAAxoC,EAAAwoC,uBAAAntC,KAAAwZ,8CAAA7U,KACAA,EAAAyoC,mBAAAzoC,EAAAyoC,mBAAAptC,KAAAwZ,8CAAA7U,KACAA,EAAA0oC,cAAA1oC,EAAA0oC,cAAArtC,KAAAwZ,8CAAA7U,KACAA,EAAA2oC,cAAA3oC,EAAA2oC,cAAAttC,KAAAwZ,8CAAA7U,KACAA,EAAA4oC,aAAA5oC,EAAA4oC,aAAAvtC,KAAAwZ,8CAAA7U,KACAA,EAAA6oC,YAAA7oC,EAAA6oC,YAAAxtC,KAAAwZ,8CAAA7U,KACAA,EAAA8oC,WAAA9oC,EAAA8oC,WAAAztC,KAAAwZ,8CAAA7U,KACAA,EAAA+oC,cAAA/oC,EAAA+oC,cAAA1tC,KAAAwZ,8CAAA7U,KAtBAA,wHA2BA,IACA4C,EADA1H,KAAAuP,MAAA6E,cAAAG,qBACA8lB,WAGAr6B,KAAAmtC,gBAAAzlC,EAAAomC,cACA9tC,KAAAotC,gBAAA,iDAKAptC,KAAAuP,MAAA6E,cAAAG,qBACA8lB,WACAr6B,KAAAmtC,gBAAA,wCAGAh7B,GAEAnS,KAAAuP,MAAA6E,cAAA44B,oBACAjuB,UAAAgvB,wDAGA5sC,GAEA,IAAAkqB,EAAAlqB,EAAA0Y,OAAAwR,MACAA,EAAAhqB,OAAA,IAEArB,KAAAuP,MAAA6E,cAAA44B,oBACAjuB,UAAAivB,YAAA3iB,EAAA,IACA/T,SAAA2rB,eAAA,aAAA70B,UAAAid,EAAA,GAAAyV,KAGA3/B,EAAA0Y,OAAA9Z,MAAA,mDAIAoB,GAEA,IAAApB,EAAAoB,EAAA0Y,OAAA9Z,MAEAqU,EAAApU,KAAAuP,MAAA6E,cACAuM,EAAAvM,EAAAG,qBACAsK,EAAAzK,EAAAI,uBACAy5B,EAAA75B,EAAA44B,oBAEAtlC,EAAAiZ,EAAA0Z,WACA5a,EAAAZ,EAAAa,oBACAuuB,EAAAC,kBAAAnuC,GAGAkuC,EAAAhvB,iBAMAQ,EAAA+tB,cAAA9lC,GAJA+X,EAAA0uB,oBAAAzoC,QAOA1F,KAAAkgB,SAAA,CAAAf,eAAApf,0CAGAoB,GAEA,IAAAiT,EAAApU,KAAAuP,MAAA6E,cACAijB,EAAAjjB,EAAAI,uBAAAkL,oBAAA4X,aACA2W,EAAA75B,EAAA44B,oBACA,GAAAiB,EAAA3uB,SAAAS,YAEAkuB,EAAAG,mBAAA,OAGA,CACA,IAAAC,EAAAJ,EAAAlvB,UACA1d,EAAAgtC,EAAAC,WAAAjtC,OACA4sC,EAAAG,kBAAApuC,KAAAqtC,uBACA,QAAAhnC,EAAA,EAAAA,EAAAhF,IAAAgF,EAEAgoC,EAAAE,YAAAloC,EAAAgxB,yCAKAl2B,GAEAnB,KAAAuP,MAAA6E,cAAA44B,oBACAjuB,UAAAyvB,aACAxuC,KAAAyuC,gBACAzuC,KAAA0uC,oBACA1uC,KAAAkgB,SAAA,CAAAgtB,YAAA,wCAGA/rC,GAEA,IAAA8sC,EAAAjuC,KAAAuP,MAAA6E,cAAA44B,oBACA/rC,OAAAy0B,gDAAA,EAAAz0B,CAAA2rC,cAAAqB,EAAAlvB,UAAA4vB,oBAAAjhC,KAAA,0CAGAvM,GAEAnB,KAAA0tC,eACA1tC,KAAA4uC,oBACA5uC,KAAAyuC,gBACAzuC,KAAAkgB,SAAA,CAAAgtB,YAAA,0CAGA/rC,GAEAnB,KAAA4tC,aACA5tC,KAAA4uC,gEAIAt3B,SAAA2rB,eAAA,4BAAAlzB,MAAAyF,QAAA,oDAIA8B,SAAA2rB,eAAA,4BAAAlzB,MAAAyF,QAAA,+CAIA8B,SAAA2rB,eAAA,aAAA70B,UAAA,oCAIA,IAAA+F,EAAAnU,KACAoU,EAAApU,KAAAuP,MAAA6E,cACA65B,EAAA75B,EAAA44B,oBACAqB,EAAAJ,EAAAlvB,UACAU,EAAArL,EAAAI,uBAAAkL,oBAEAmvB,GAAApvB,EAAAqvB,iBAEA,KAAA9uC,KAAAotC,iBAAA,EACA,CACAptC,KAAAotC,gBAAAP,mBACA,IAAAnlC,EAAA0M,EAAAG,qBAAA8lB,WACA0U,EAAArnC,EAAAomC,cACA9tC,KAAAmtC,kBAAA4B,IAEA/uC,KAAAwtC,cAAA9lC,GACA1H,KAAAmtC,gBAAA4B,GAIA,OAAAp/B,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,mBAAA7P,KAAAuP,MAAAM,UAAAzH,GAAA,UAAA0L,IAAA,SAAAY,GAAA,OAAAP,EAAAkU,UAAA3T,GAAA3E,MAAA/P,KAAAuP,MAAAQ,OACAJ,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,eACAF,2CAAAC,EAAAzB,cAAA,UAAAiT,KAAApP,SAAA,6BAGArC,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,iBAEAF,2CAAAC,EAAAzB,cAAA6gC,iDAAA,GAAAn/B,UAAA,WAAAzH,GAAA,cAAA0H,MAAAsR,KAAApP,SAAA,sBACA/B,QAAAjQ,KAAA4tC,YACAj+B,2CAAAC,EAAAzB,cAAA8gC,yDAAA,SAIAt/B,2CAAAC,EAAAzB,cAAA+gC,6DAAA,GAAAr/B,UAAA,WAAAzH,GAAA,iBAAA0H,MAAAsR,KAAApP,SAAA,yBACA/B,QAAAjQ,KAAA6tC,cAAAn0B,SAAA1Z,KAAAutC,oBACA59B,2CAAAC,EAAAzB,cAAAghC,iDAAA,SAIAx/B,2CAAAC,EAAAzB,cAAA6gC,iDAAA,GAAAn/B,UAAA,WAAAzH,GAAA,eAAA0H,MAAAsR,KAAApP,SAAA,uBACA/B,QAAAjQ,KAAA2tC,YAAA39B,SAAAi+B,EAAAlvB,UAAA6qB,WACAj6B,2CAAAC,EAAAzB,cAAAihC,gDAAA,SAGAz/B,2CAAAC,EAAAzB,cAAA6gC,iDAAA,GAAAn/B,UAAA,WAAAzH,GAAA,gBAAA0H,MAAAsR,KAAApP,SAAA,wBACA/B,QAAAjQ,KAAA0tC,aACA19B,SAAAhQ,KAAAuO,MAAA2+B,YACAv9B,2CAAAC,EAAAzB,cAAAkhC,iDAAA,UAKA1/B,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,iBAEAF,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,2BAAAzH,GAAA,2BAAA2H,MAAA,CAAAyF,QAAA,SAGA7F,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,uBACAF,2CAAAC,EAAAzB,cAAA,MAAA/F,GAAA,0BACAuH,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,0BAEAg/B,GACAl/B,2CAAAC,EAAAzB,cAAA,SAAA0B,UAAA,0DAGAw+B,EAAAC,WAAAta,IAAA,SAAA7yB,EAAAkF,GAAA,OACAsJ,2CAAAC,EAAAzB,cAAAmhC,8CAAA,GAAAxvC,IAAAqB,EAAAiH,GAAAuZ,MAAAtb,EACAgoC,WACA5uB,uBAYA9P,2CAAAC,EAAAzB,cAAA,UAAA0B,UAAA,eAAAI,QAAAjQ,KAAAytC,eACAQ,EAAA3uB,SAAAS,YAAAqB,KAAApP,SAAA,0BAAAoP,KAAApP,SAAA,0BAGArC,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,kBACAF,2CAAAC,EAAAzB,cAAA,SAAA/F,GAAA,YAAA8F,KAAA,WACAi2B,QAAAnkC,KAAAqtC,sBACA3zB,SAAA,SAAAvY,GACAgT,EAAAk5B,sBAAAlsC,EAAA0Y,OAAAsqB,QACAhwB,EAAAk5B,uBAAAY,EAAAG,mBAAA,IAEAp+B,SAAAi+B,EAAA3uB,SAAAS,cACApQ,2CAAAC,EAAAzB,cAAA,SAAAiM,QAAA,aAAAgH,KAAApP,SAAA,+BAKArC,2CAAAC,EAAAzB,cAAA,WAEAwB,2CAAAC,EAAAzB,cAAA,OAAA/F,GAAA,mBACAuH,2CAAAC,EAAAzB,cAAA,aAAAiT,KAAApP,SAAA,wBACArC,2CAAAC,EAAAzB,cAAA,UAAA0B,UAAA,eACA9P,MAAAC,KAAAuO,MAAA4Q,eACAzF,SAAA1Z,KAAAstC,wBACA39B,2CAAAC,EAAAzB,cAAA,UAAApO,MAAAwvC,mEAAA,EAAAnwB,gBAAAgC,KAAApP,SAAA,kCACArC,2CAAAC,EAAAzB,cAAA,UAAApO,MAAAwvC,mEAAA,EAAA1vB,qBAAAuB,KAAApP,SAAA,qCACArC,2CAAAC,EAAAzB,cAAA,UAAApO,MAAAwvC,mEAAA,EAAAzvB,uBAAAsB,KAAApP,SAAA,0CAMArC,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,6JA1QAF,2CAAAC,EAAAO,WA8QAlP,OAAAmhC,eAAA0K,aAAA,SACAhmC,IAAA,kBAAAsa,KAAApP,SAAA,8BAEA86B,aAAAzY,iBAAA,uCAEAyY,wCAAeprC,oBAAA,2mBAxRfkrC,6IAGAC,uJAEAC,slCCjBA,IAAA0C,SAAA,IACAC,SAAA,GAEAC,oBAEA,SAAAA,SAAAC,GACAjrC,gBAAA1E,KAAA0vC,UACA1vC,KAAA2gB,gBAAA,KACA3gB,KAAA6e,kBAAA,KAEA7e,KAAA2vC,iBAEA3vC,KAAAwgB,QAAA,GAEAxgB,KAAAmgC,QAAA,GACAngC,KAAA4vC,eAAA,EACA5vC,KAAA+E,QAAA,EAGA/E,KAAAwhB,aAAA,GACAxhB,KAAAyhB,cAAA,GACAzhB,KAAA6hB,cAAA,GACA7hB,KAAA6vC,SAAA,EACA7vC,KAAA8vC,SAAA,EACA9vC,KAAA+vC,WAAA,EAEA/vC,KAAA6+B,MAAA,KAEA7+B,KAAAgwC,cAAAhwC,KAAAgwC,cAAA7vC,KAAAH,qEAGA0b,GAEA1b,KAAA2gB,gBAAAjF,EAAAnH,qBACAvU,KAAA6e,kBAAAnD,EAAAlH,gGAWAjO,sCAaAvG,KAAAiwC,oBACAjwC,KAAA8vC,SAAA,EACA9vC,KAAA+vC,WAAA,qCAIA,IAAAjrC,EAAA9E,KAEAA,KAAAkwC,eAEAlwC,KAAA2vC,eAAA5wB,UAAAgvB,YAAA,GAGA/tC,KAAA6vC,SAAA,EAgBA7vC,KAAA6+B,MAAAL,WAdA,SAAA2R,IACArrC,EAAA+qC,UAEA/qC,EAAAorC,eAEAprC,EAAAsrC,aACAtrC,EAAA+5B,MAAAL,WAAA2R,EAAAX,WAIA1qC,EAAAurC,YAIAb,4CAKAxvC,KAAA6vC,SAAA,mCAKA7vC,KAAAwgB,QAAAnf,OAAA,EAEArB,KAAA6vC,SAAA,EACA7vC,KAAA8vC,SAAA,EACA9vC,KAAA+vC,WAAA,sCAKA,OAAA/vC,KAAA6vC,4CAKA,OAAA7vC,KAAA8vC,6CAKA,OAAA9vC,KAAA+vC,gDAKA,OAAA/vC,KAAAmgC,QAAA9+B,OAAA,GACArB,KAAA2vC,eAAA5wB,UAAAuxB,wDAKA,GAAAtwC,KAAAmgC,QAAA9+B,OAAA,EACA,CACA,IAAAkvC,EAAAvwC,KAAAmgC,QAAArH,MACA94B,KAAAwgB,QAAAnf,OAAA,EACArB,KAAAwhB,aAAAngB,OAAA,EACArB,KAAAyhB,cAAApgB,OAAA,EACArB,KAAA6hB,cAAAxgB,OAAA,EALA,IAAAyL,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAQA,QAAA2L,EAAAC,EAAAqjC,EAAA/vB,QAAApT,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADA+M,EACA5M,EAAAlN,MACA,IAAA8Z,EAAA,UAAA3Z,MAAA,qBAEAF,KAAAwgB,QAAA3T,KAAAgN,IAZA,MAAAjM,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAAA,IAAAyB,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IAcA,QAAAsN,EAAAC,EAAA0hC,EAAA/uB,aAAApU,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA,KADAF,EACAK,EAAA7O,MACAC,KAAAwhB,aAAA3U,KAAA0B,IAhBA,MAAAX,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,GAAA,IAAAI,GAAA,EAAAC,GAAA,EAAAC,OAAA3N,EAAA,IAkBA,QAAA4N,EAAAC,EAAAohC,EAAA9uB,cAAArU,OAAAC,cAAA0B,GAAAG,EAAAC,EAAA7B,QAAAC,MAAAwB,GAAA,EACA,KADAxC,EACA2C,EAAAnP,MACAC,KAAAyhB,cAAA5U,KAAAN,IApBA,MAAAqB,GAAAoB,GAAA,EAAAC,EAAArB,EAAA,YAAAmB,GAAA,MAAAI,EAAAtB,QAAAsB,EAAAtB,SAAA,WAAAmB,EAAA,MAAAC,GAAA,IAAAmN,GAAA,EAAAC,GAAA,EAAAC,OAAAhb,EAAA,IAsBA,QAAAib,EAAAC,EAAA+zB,EAAA1uB,cAAAzU,OAAAC,cAAA+O,GAAAG,EAAAC,EAAAlP,QAAAC,MAAA6O,GAAA,EACA,KADAo0B,EACAj0B,EAAAxc,MACAC,KAAA6hB,cAAAhV,KAAA2jC,IAxBA,MAAA5iC,GAAAyO,GAAA,EAAAC,EAAA1O,EAAA,YAAAwO,GAAA,MAAAI,EAAA3O,QAAA2O,EAAA3O,SAAA,WAAAwO,EAAA,MAAAC,GA2BAtc,KAAA4vC,qBAIA5vC,KAAA4vC,eAAA,EACA5vC,KAAA2vC,eAAA5wB,UAAA0xB,kDAMA,OAAAzwC,KAAA4vC,cAAA5vC,KAAA2vC,eAAA5wB,UAAA2xB,kBAAA3wC,MAAAsB,QACArB,KAAA2vC,eAAA5wB,UAAA4xB,oDAIA,IAAAx8B,EAAAnU,KACA4wC,EAAA5wC,KAAA2vC,eAAA5wB,UAAA2xB,kBACAvjB,EAAAntB,KAAA6e,kBAAAa,oBAAA4X,aAMA,GAHAt3B,KAAA4vC,eAAA,EAGA5vC,KAAA4vC,eAAAgB,EAAA7wC,MAAAsB,OACA,CAOA,GAJArB,KAAA+E,OAAA9D,OAAA4vC,sDAAA,EAAA5vC,CAAAksB,EAAA,KAAAntB,KAAAwhB,aAAAxhB,KAAAyhB,cAAAzhB,KAAA6hB,eACA+uB,EAAAE,UAAA9wC,KAAA+E,QAGA/E,KAAA2vC,eAAA5wB,UAAA4xB,eAOA,CACA3wC,KAAA2vC,eAAA5wB,UAAAgyB,YAMA,OADA/wC,KAAAiwC,qBACA,EAVA,OADAjwC,KAAAqwC,WACA,EAgBA,IAAAlyB,EAAAne,KAAAgxC,kBACAhxC,KAAAmgC,QAAAtzB,KAAAsR,GAGA,IAAA8yB,EAAAL,EAAA7wC,MAAAC,KAAA4vC,eAEA5vC,KAAA+E,OAAA9D,OAAA4vC,sDAAA,EAAA5vC,CAAAksB,EAAA8jB,EAAAjxC,KAAAwhB,aAAAxhB,KAAAyhB,cAAAzhB,KAAA6hB,eAEA7hB,KAAAwgB,QAAAnf,OAAA,EAVA,IAAAsb,GAAA,EAAAC,GAAA,EAAAC,OAAAvb,EAAA,IAYA,QAAAwb,EAAAC,EAAA/c,KAAAwhB,aAAApU,OAAAC,cAAAsP,GAAAG,EAAAC,EAAAzP,QAAAC,MAAAoP,GAAA,EACA,KADApO,EACAuO,EAAA/c,MACAwG,EAAAvG,KAAA6e,kBAAAqyB,yBAAAlxC,KAAA2gB,gBAAA0Z,WAAA9rB,SACA,IAAAhI,EAAA,UAAArG,MAAA,qBAEAF,KAAAwgB,QAAAlH,SAAA/S,IAAAvG,KAAAwgB,QAAA3T,KAAAtG,IAjBA,MAAAqH,GAAAgP,GAAA,EAAAC,EAAAjP,EAAA,YAAA+O,GAAA,MAAAI,EAAAlP,QAAAkP,EAAAlP,SAAA,WAAA+O,EAAA,MAAAC,GAoBA,GAAA7c,KAAAwgB,QAAAnf,QAAA,IAAArB,KAAA6vC,QACA,CACA7vC,KAAA+vC,WAAA,EAeAvR,WAdA,SAAA2S,IACAh9B,EAAA47B,YAEA57B,EAAAy7B,eAAA,EACAz7B,EAAAy7B,eAAAgB,EAAA7wC,MAAAsB,OAEA8S,EAAA47B,WAAA,EAIAvR,WAAA2S,EAAA1B,YAIAA,UAGA,mDAMA,OACAjvB,QAAAxgB,KAAAwgB,QAAA/O,QACA+P,aAAAxhB,KAAAwhB,aAAA/P,QACAgQ,cAAAzhB,KAAAyhB,cAAAhQ,QACAoQ,cAAA7hB,KAAA6hB,cAAApQ,6DAMA,OAAAzR,KAAA4vC,cAAA,8CAKA5vC,KAAAwhB,aAAAngB,OAAA,EAEA,IAAAqG,EAAA1H,KAAA2gB,gBAAA0Z,WACA,IAAA3yB,EAAAkiC,UAAA,CAEA,IAAAvS,EAAAr3B,KAAA6e,kBAAAa,oBAAA4X,aAEAt3B,KAAAwgB,QAAAnf,OAAA,EAEA,IAAAsvB,EAAA0G,EAAA3V,gBAVA4L,GAAA,EAAAC,GAAA,EAAAC,OAAAlsB,EAAA,IAWA,QAAAmsB,EAAAC,EAAA2J,EAAA3a,oBAAAiU,GAAAvjB,OAAAC,cAAAigB,GAAAG,EAAAC,EAAApgB,QAAAC,MAAA+f,GAAA,EACA,KADA8jB,EACA3jB,EAAA1tB,MACAC,KAAAwhB,aAAA3U,KAAA,CAAA0B,MAAA6iC,EAAAzvB,MAAA,IACA,IAAApb,EAAAvG,KAAA6e,kBAAAqyB,yBAAAxpC,EAAA0pC,GACA,IAAA7qC,EAAA,UAAArG,MAAA,qBACAF,KAAAwgB,QAAA3T,KAAAtG,IAhBA,MAAAqH,GAAA2f,GAAA,EAAAC,EAAA5f,EAAA,YAAA0f,GAAA,MAAAI,EAAA7f,QAAA6f,EAAA7f,SAAA,WAAA0f,EAAA,MAAAC,GAmBAxtB,KAAAyhB,cAAApgB,OAAA,EACArB,KAAA6hB,cAAAxgB,OAAA,EACArB,KAAA4vC,eAAA,EACA5vC,KAAAmgC,QAAA9+B,OAAA,EAEArB,KAAA+vC,WAAA,qJAIAL,oCAAehuC,oBAAA,qlBArSf8tC,wHACAC,wHAEAC,6+BCJA,IAAA2B,SAAA,EACAC,SAAA,EACAC,QAAA,KAGAC,4BAEA,SAAAA,mBACA9sC,gBAAA1E,KAAAwxC,kBACAxxC,KAAA+e,UAAA,GACA/e,KAAAyxC,SAAA,IAEAzxC,KAAA0xC,WAAA,wEAIA,IAAA5kC,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IACA,QAAA2L,EAAAC,EAAAlN,KAAA+e,UAAA3R,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,CACA,GADAG,EAAAlN,MACAA,MAAAsB,OAAA,EAEA,UALA,MAAAuM,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GASA,6CAGA2U,EAAA0V,GAEA,GAAA1V,EAAA,GAAAA,GAAA3hB,KAAA+e,UAAA1d,OAEA,UAAAnB,MAAA,oCAGA,IAAAqhB,EAAAvhB,KAAA+e,UAAA4C,GACAJ,EAAAuvB,UAAA,MAEA,IAAA/rC,EAAA9D,OAAA4vC,sDAAA,EAAA5vC,CAAAo2B,EAAA9V,EAAAxhB,OAEA,OADAwhB,EAAAuvB,UAAA/rC,GACAA,sCAGAmmB,GACA,IAAApmB,EAAA9E,KACA2xC,EAAA,IAAAC,WACAD,EAAA55B,OAAA,SAAAwoB,GACA,IAGAz7B,EAAAia,UAAA1d,OAAA,EACAyD,EAAA4sC,WAAA,EAEA,IAAAG,EAAAtR,EAAA1mB,OAAA9U,OAAA0I,MAAA,MALAgB,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IAMA,QAAAsN,EAAAC,EAAAgjC,EAAAzkC,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA,KADAmiC,EACAhiC,EAAA7O,OACA6wC,IAAAna,QACAp1B,OAAA,GAEAyD,EAAA2sC,SAAAb,IAXA,MAAAhjC,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,GAgBA7J,EAAAia,UAAA1d,OAAA,GAEAyD,EAAA2sC,SAAA,IAGA,MAAAtwC,GAEAwwC,EAAAG,UAGAH,EAAAI,WAAA7mB,+CAKA,OAAAlrB,KAAA+e,UAAAiV,IAAA,SAAA7yB,EAAAkF,GAAA,OAAAlF,EAAApB,6CAMA,IAAAiyC,EAAAhyC,KAAA+e,UAAA,GACAizB,EAAAjyC,MAAA,GACAiyC,EAAAjtC,OAAA,KACAitC,EAAAC,OAAA,EAGAjyC,KAAA+e,UAAA1d,OAAA,EACArB,KAAA0xC,WAAA,uCAIA,IADAQ,IACA9wC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GAGA,GAFApB,KAAA0xC,WAAA,EAEAQ,EACA,KAAAnjC,GAAA,EAAAC,GAAA,EAAAC,OAAA3N,EAAA,IACA,QAAA4N,EAAAC,EAAAnP,KAAA+e,UAAA3R,OAAAC,cAAA0B,GAAAG,EAAAC,EAAA7B,QAAAC,MAAAwB,GAAA,EACA,CAAAG,EAAAnP,MACAkyC,OAAA,GAHA,MAAArkC,GAAAoB,GAAA,EAAAC,EAAArB,EAAA,YAAAmB,GAAA,MAAAI,EAAAtB,QAAAsB,EAAAtB,SAAA,WAAAmB,EAAA,MAAAC,wCAUA,OAAAjP,KAAA+e,2CAGAhf,GAEA,IAAAwhB,EAAA,CACAxhB,QACAgF,OAAA,KACAktC,OAAA,EACA7pC,GAAAnH,OAAAomC,gDAAA,EAAApmC,GACA6vC,UALA,SAKA/rC,GAEA/E,KAAAiyC,OAAA,EACAjyC,KAAA+E,WAKA,OADA/E,KAAA+e,UAAAlS,KAAA0U,GACAA,0CAGAI,GAEA,GAAAA,EAAA,GAAAA,GAAA3hB,KAAA+e,UAAA1d,OAEA,UAAAnB,MAAA,oCAGA,OAAAF,KAAA+e,UAAA4C,8CAGAA,GAEA,GAAAA,EAAA,GAAAA,GAAA3hB,KAAA+e,UAAA1d,OAEA,UAAAnB,MAAA,oCAGA,OAAAyhB,EAGA,UAAAzhB,MAAA,sCAGAyhB,GAAA3hB,KAAA0xC,cAEA1xC,KAAA0xC,WAGA1xC,KAAA+e,UAAAyI,OAAA7F,EAAA,uCAWA,QANA3hB,KAAA0xC,WACA1xC,KAAA0xC,YAAA1xC,KAAA+e,UAAA1d,SAEArB,KAAA0xC,WAAA,GAGA1xC,KAAA+e,UAAA/e,KAAA0xC,gDAWA,QANA1xC,KAAA0xC,WACA1xC,KAAA0xC,WAAA,IAEA1xC,KAAA0xC,WAAA1xC,KAAA+e,UAAA1d,OAAA,GAGArB,KAAA+e,UAAA/e,KAAA0xC,iDAKA1xC,KAAA0xC,WAAA,yCAKA,OAAA1xC,KAAA0xC,WAAA1xC,KAAA+e,UAAA1d,8CAKA,OAAArB,KAAA0xC,WAAA,4CAKA,OAAA1xC,KAAA+e,UAAA/e,KAAA0xC,2DAKA,OAAA1xC,KAAA0xC,qKAIAF,4CAAe9vC,oBAAA,qmBAlNf2vC,8HACAC,8HACAC,8HAGAC,4oFCGAW,wCAEA,SAAAA,aAAA5iC,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAAmyC,eACArtC,EAAA0K,2BAAAxP,KAAAyP,gBAAA0iC,cAAAziC,KAAA1P,KAAAuP,KAEAuE,IAAAnE,2CAAAC,EAAAsF,YAEApQ,EAAAstC,cAAAttC,EAAAstC,cAAAjyC,KAAAwZ,8CAAA7U,KACAA,EAAAutC,cAAAvtC,EAAAutC,cAAAlyC,KAAAwZ,8CAAA7U,KACAA,EAAAixB,cAAAjxB,EAAAixB,cAAA51B,KAAAwZ,8CAAA7U,KACAA,EAAAmxB,UAAAnxB,EAAAmxB,UAAA91B,KAAAwZ,8CAAA7U,KACAA,EAAAqgB,QAAArgB,EAAAqgB,QAAAhlB,KAAAwZ,8CAAA7U,KATAA,8GAcA,OAAA9E,KAAAuP,MAAA8+B,SAAAiE,gBAAAtyC,KAAAuP,MAAAoS,8CAKA,WAAA3hB,KAAAuP,MAAAoS,4CAGAxgB,GAEAnB,KAAAuP,MAAA8+B,SAAAE,YAAAvuC,KAAAuP,MAAAoS,MAAA3hB,KAAAuP,MAAAkQ,eAAA6X,oDAGAn2B,GAEA,GAAAnB,KAAAuyC,eACA,CACA,IAAAl6B,EAAArY,KAAAwyC,WAGAC,EAAAzyC,KAAAuP,MAAA8+B,SAAAoD,SAAAp5B,EAAAtY,OAEA0yC,EAAA1tC,OAAAsT,EAAAtT,OACA0tC,EAAAR,MAAA55B,EAAA45B,MAGA55B,EAAAtY,MAAA,GACAsY,EAAAtT,OAAA,KACAsT,EAAA45B,OAAA,EAGAjyC,KAAA8T,IAAAyR,aAKAvlB,KAAAuP,MAAA8+B,SAAAqE,mBAAA1yC,KAAAuP,MAAAoS,6CAIAxgB,GAEA,IAAApB,EAAAoB,EAAA0Y,OAAA9Z,MAAA02B,OACApe,EAAArY,KAAAwyC,WACAn6B,EAAAtY,QACAsY,EAAA45B,OAAA,oCAGA9wC,GAGA,GAAAA,EAAAo1B,UAAAC,uCAAA,EAAAh0B,WAEArB,EAAA8kB,sBAGA,GAAA9kB,EAAAo1B,UAAAC,uCAAA,EAAA3zB,WACA,CACA,IAAAwV,EAAArY,KAAAwyC,WACA,GAAAn6B,EAAAtY,MAAAsB,QAAA,EACA,CACA,IAAA4gB,EAAAjiB,KAAAuP,MAAAoS,MAAA,EAGA,GAAA3hB,KAAAuP,MAAA8+B,SAAAC,WAAAjtC,OAAA4gB,EACA,CACA,IAAA8uB,EAAA/wC,KAAAuP,MAAA8+B,SAAAiE,gBAAArwB,GACA5J,EAAAtY,MAAAgxC,EAAAhxC,MACAsY,EAAAtT,OAAAgsC,EAAAhsC,OACAsT,EAAA45B,MAAAlB,EAAAkB,MAEAjyC,KAAAuP,MAAA8+B,SAAAqE,mBAAAzwB,sCAMA9gB,GAEA,GAAAA,EAAAo1B,UAAAC,uCAAA,EAAAh0B,WACA,CACA,IAAAmwC,EAAAxxC,EAAA6kB,SAGA,GAAAhmB,KAAAuyC,iBAAAI,EACA,CACA,IAAAt6B,EAAArY,KAAAwyC,WAGAC,EAAAzyC,KAAAuP,MAAA8+B,SAAAoD,SAAAp5B,EAAAtY,OAEA0yC,EAAA1tC,OAAAsT,EAAAtT,OACA0tC,EAAAR,MAAA55B,EAAA45B,MAGA55B,EAAAtY,MAAA,GACAsY,EAAAtT,OAAA,KACAsT,EAAA45B,OAAA,EAGAjyC,KAAA8T,IAAAyR,aAKAvlB,KAAAuP,MAAA8+B,SAAAE,YAAAvuC,KAAAuP,MAAAoS,MAAA3hB,KAAAuP,MAAAkQ,eAAA6X,cAGAt3B,KAAA8T,IAAAwR,cAGAnkB,EAAAo1B,UAAAC,uCAAA,EAAA/zB,WAEAtB,EAAA0Y,OAAA2L,wCAKA,IAAArR,EAAAnU,KACAqY,EAAArY,KAAAwyC,WACAR,EAAAhyC,KAAAuyC,eACA,OAAA5iC,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,2BACA7P,KAAAuP,MAAA8+B,SAAAuE,yBAAA5yC,KAAAuP,MAAAoS,MAAA,eAEAhS,2CAAAC,EAAAzB,cAAA0kC,8CAAA,GAAAC,QAAAz6B,EAAA45B,MAAA/9B,KAAAmE,EAAAtT,OAAAkL,QAAAjQ,KAAAoyC,gBAEAziC,2CAAAC,EAAAzB,cAAA,SAAA2F,IAAA,SAAAY,GAAA,OAAAP,EAAAL,IAAAY,GAAA7E,UAAA,qBACA9P,MAAAsY,EAAAtY,MACAgzC,YAAA3G,gDAAA,EACA1yB,SAAA1Z,KAAA+1B,cACAE,UAAAj2B,KAAAi2B,UACA9Q,QAAAnlB,KAAAmlB,QACA6Q,QAAA,SAAA70B,GAAA,OAAAA,EAAA0Y,OAAAyL,YAEA3V,2CAAAC,EAAAzB,cAAA6kC,iDAAA,GAAAnjC,UAAA,sBAAAI,QAAAjQ,KAAAqyC,eACAL,EAAAriC,2CAAAC,EAAAzB,cAAA8kC,8CAAA,QAAAtjC,2CAAAC,EAAAzB,cAAA+kC,iDAAA,qJAxJAvjC,2CAAAC,EAAAO,oBA8JAgiC,wCAAezwC,oBAAA,2mBA9JfywC,miECVAgB,mCAEA,SAAAA,QAAA5jC,GACA,OAAA7K,gBAAA1E,KAAAmzC,SAAA3jC,2BAAAxP,KAAAyP,gBAAA0jC,SAAAzjC,KAAA1P,KACAuP,oGAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,WAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,gBAAA6I,KAAA,SACAxL,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,gPAXA3C,2CAAAC,EAAAO,oBAgBAgjC,mCAAezxC,oBAAA,ujBAhBfyxC,q+DCAAC,sCAEA,SAAAA,WAAA7jC,GACA,OAAA7K,gBAAA1E,KAAAozC,YAAA5jC,2BAAAxP,KAAAyP,gBAAA2jC,YAAA1jC,KAAA1P,KACAuP,0GAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,cAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,gBAAA6I,KAAA,SACAxL,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,iOAXA3C,2CAAAC,EAAAO,oBAgBAijC,sCAAe1xC,oBAAA,6jBAhBf0xC,0iFCOAC,wCAEA,SAAAA,aAAA9jC,GACA,OAAA7K,gBAAA1E,KAAAqzC,cAAA7jC,2BAAAxP,KAAAyP,gBAAA4jC,cAAA3jC,KAAA1P,KACAuP,8GAKA,IAAAujC,EAAA9yC,KAAAuP,MAAAujC,OACA,WAAA9yC,KAAAuP,MAAA2E,KAGAvE,2CAAAC,EAAAzB,cAAAmlC,iDAAA,GAAAzjC,UAAA,uBAAAijC,EAAA,cACA7iC,QAAAjQ,KAAAuP,MAAAU,SACAN,2CAAAC,EAAAzB,cAAAolC,kDAAA,UAGA,IAAAvzC,KAAAuP,MAAA2E,KAGAvE,2CAAAC,EAAAzB,cAAAmlC,iDAAA,GAAAzjC,UAAA,uBAAAijC,EAAA,cACA7iC,QAAAjQ,KAAAuP,MAAAU,SACAN,2CAAAC,EAAAzB,cAAAqlC,kDAAA,SAMA7jC,2CAAAC,EAAAzB,cAAAmlC,iDAAA,GAAAzjC,UAAA,eAAAijC,EAAA,cACA7iC,QAAAjQ,KAAAuP,MAAAU,SACAN,2CAAAC,EAAAzB,cAAAslC,qDAAA,oJA/BA9jC,2CAAAC,EAAAO,oBAqCAkjC,wCAAe3xC,oBAAA,2mBArCf2xC,miECPAK,uCAEA,SAAAA,YAAAnkC,GACA,OAAA7K,gBAAA1E,KAAA0zC,aAAAlkC,2BAAAxP,KAAAyP,gBAAAikC,aAAAhkC,KAAA1P,KACAuP,4GAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,eAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,OAAA7I,EAAA,mCACA3C,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,yTAXA3C,2CAAAC,EAAAO,oBAgBAujC,uCAAehyC,oBAAA,+jBAhBfgyC,q/DCAAC,uCAEA,SAAAA,YAAApkC,GACA,OAAA7K,gBAAA1E,KAAA2zC,aAAAnkC,2BAAAxP,KAAAyP,gBAAAkkC,aAAAjkC,KAAA1P,KACAuP,4GAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,eAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,gBAAA6I,KAAA,SACAxL,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,yXAXA3C,2CAAAC,EAAAO,oBAgBAwjC,uCAAejyC,oBAAA,+jBAhBfiyC,q/DCAAC,0CAEA,SAAAA,eAAArkC,GACA,OAAA7K,gBAAA1E,KAAA4zC,gBAAApkC,2BAAAxP,KAAAyP,gBAAAmkC,gBAAAlkC,KAAA1P,KACAuP,kHAGA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0e,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,OAAA7I,EAAA,kBACA3C,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,iYATA3C,2CAAAC,EAAAO,oBAcAyjC,0CAAelyC,oBAAA,qkBAdfkyC,igECAAC,4CAEA,SAAAA,iBAAAtkC,GACA,OAAA7K,gBAAA1E,KAAA6zC,kBAAArkC,2BAAAxP,KAAAyP,gBAAAokC,kBAAAnkC,KAAA1P,KACAuP,sHAIA,IAAAzK,EAAA9E,KACA,OAAA2P,2CAAAC,EAAAzB,cAAA,UACA0B,UAAA,eAAA7P,KAAAuP,MAAAM,UACAzH,GAAApI,KAAAuP,MAAAnH,GACA0H,MAAA9P,KAAAuP,MAAAO,MACAC,MAAA/P,KAAAuP,MAAAQ,MACAC,SAAAhQ,KAAAuP,MAAAS,SACAC,QAAAjQ,KAAAuP,MAAAU,SACAN,2CAAAC,EAAAzB,cAAA,SAAA2F,IAAA,SAAAY,GAAA,OAAA5P,EAAAioC,YAAAr4B,GACAtM,GAAA,oBAAA8F,KAAA,OAAA4yB,KAAA,SACA/wB,MAAA,CAAAyF,QAAA,QACAkE,SAAA1Z,KAAAuP,MAAAmK,SAAAjR,OAAA,SACAkH,2CAAAC,EAAAzB,cAAA,SAAAiM,QAAA,qBACApa,KAAAuP,MAAAW,0JArBAP,2CAAAC,EAAAO,oBA2BA0jC,4CAAenyC,oBAAA,yoBA3BfmyC,ykECAAC,8CAEA,SAAAA,mBAAAvkC,GACA,OAAA7K,gBAAA1E,KAAA8zC,oBAAAtkC,2BAAAxP,KAAAyP,gBAAAqkC,oBAAApkC,KAAA1P,KACAuP,0HAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,sBAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,qRAVA3C,2CAAAC,EAAAO,oBAeA2jC,8CAAepyC,oBAAA,6kBAffoyC,ihECAAC,qCAEA,SAAAA,UAAAxkC,GACA,OAAA7K,gBAAA1E,KAAA+zC,WAAAvkC,2BAAAxP,KAAAyP,gBAAAskC,WAAArkC,KAAA1P,KACAuP,wGAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,aAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,0GACA3C,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,gBAAA6I,KAAA,kJAXAxL,2CAAAC,EAAAO,oBAgBA4jC,qCAAeryC,oBAAA,2jBAhBfqyC,wvECIAC,yCAEA,SAAAA,cAAAzkC,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAAg0C,gBACAlvC,EAAA0K,2BAAAxP,KAAAyP,gBAAAukC,eAAAtkC,KAAA1P,KAAAuP,KAEA8Y,UAAA,KACAvjB,EAAAmvC,sBAAA,KACAnvC,EAAAovC,qBAAA,KAEApvC,EAAAqvC,eAAArvC,EAAAqvC,eAAAh0C,KAAAwZ,8CAAA7U,KACAA,EAAAsvC,eAAAtvC,EAAAsvC,eAAAj0C,KAAAwZ,8CAAA7U,KAEAA,EAAAuvC,kBAAAvvC,EAAAuvC,kBAAAl0C,KAAAwZ,8CAAA7U,KAVAA,4HAaA3D,GAEA,IAAAiT,EAAApU,KAAAuP,MAAA6E,cACAuM,EAAAvM,EAAAG,qBAEA+/B,EADAlgC,EAAAI,uBACAkL,oBAAAyuB,oBAAA7V,sBACA3X,EAAA0R,kBAAAiiB,0CAGAnzC,GAEA,IAAAiT,EAAApU,KAAAuP,MAAA6E,cAGA7E,EAAA,CAAAoR,gBAFAvM,EAAAG,qBAEAsK,kBADAzK,EAAAI,wBAEAyjB,EAAAxkB,uCAAA,EAAA7R,+BAGAu2B,kEAAA,EAAAI,WAAAnX,KAAApP,SAAA,mCACA,UAAAimB,EAAAsc,2FAAA,EAAAhlC,0CAGApO,GAEAnB,KAAAuP,MAAA6E,cAAAI,uBACA6mB,iBAAA,iDAGAl6B,GAEAnB,KAAAi0C,sBAAA9P,SAEAnkC,KAAAw0C,uBAAArzC,yCAMA,OAAAnB,KAAAk0C,sBAAAl0C,KAAAk0C,qBAAA/P,SACAnkC,KAAAi0C,uBAAAj0C,KAAAi0C,sBAAA9P,yCAIA,IAAAhwB,EAAAnU,KACAoU,EAAApU,KAAAuP,MAAA6E,cACAuM,EAAAvM,EAAAG,qBACAsK,EAAAzK,EAAAI,uBAGAiL,GADAkB,EAAA0Z,WACAxb,EAAAa,qBAEA,OAAA/P,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,mBAAA7P,KAAAuP,MAAAM,UAAAzH,GAAA,WAAA0L,IAAA,SAAAyY,GAAA,OAAApY,EAAAkU,UAAAkE,GAAAxc,MAAA/P,KAAAuP,MAAAQ,OACAJ,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,eAAAF,2CAAAC,EAAAzB,cAAA,UAAAiT,KAAApP,SAAA,8BACArC,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,iBAGAF,2CAAAC,EAAAzB,cAAA,OAAA4B,MAAA,CAAAk5B,cAAA,UACAt5B,2CAAAC,EAAAzB,cAAA,MAAA4B,MAAA,CAAAm5B,aAAA,uBACAv5B,2CAAAC,EAAAzB,cAAA,OAAA4B,MAAA,CAAAk5B,cAAA,UACAt5B,2CAAAC,EAAAzB,cAAA,WACAwB,2CAAAC,EAAAzB,cAAA,SAAA2F,IAAA,SAAAY,GAAA,OAAAP,EAAA8/B,sBAAAv/B,GAAAtM,GAAA,cAAA8F,KAAA,aACAyB,2CAAAC,EAAAzB,cAAA,SAAAiM,QAAA,gCAEAzK,2CAAAC,EAAAzB,cAAA,WACAwB,2CAAAC,EAAAzB,cAAA,SAAA2F,IAAA,SAAA8S,GAAA,OAAAzS,EAAA+/B,qBAAAttB,GAAAxe,GAAA,aAAA8F,KAAA,WAAA8B,UAAA,IACAL,2CAAAC,EAAAzB,cAAA,SAAAiM,QAAA,oCAGAzK,2CAAAC,EAAAzB,cAAA,UAAA0B,UAAA,eAAAI,QAAAjQ,KAAAq0C,kBAAArkC,UAAAhQ,KAAAy0C,eAAA,aAGA9kC,2CAAAC,EAAAzB,cAAA,WAEA,OAAAsR,EAAAG,iBACAjQ,2CAAAC,EAAAzB,cAAA,UAAA0B,UAAA,eAAAI,QAAAjQ,KAAAo0C,eACApkC,SAAAhQ,KAAAuP,MAAA6E,cAAAG,qBAAA8lB,WAAAuP,WACAxoB,KAAApP,SAAA,+BAEA,OAAAyN,EAAAG,iBACAjQ,2CAAAC,EAAAzB,cAAA,UAAA0B,UAAA,eAAAI,QAAAjQ,KAAAm0C,eACAnkC,SAAAhQ,KAAAuP,MAAA6E,cAAAG,qBAAA8lB,WAAAuP,WACAxoB,KAAApP,SAAA,+BAEA,MAIArC,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,8JAvGAF,2CAAAC,EAAAO,WA2GAlP,OAAAmhC,eAAA4R,cAAA,SACAltC,IAAA,kBAAAsa,KAAApP,SAAA,+BAEAgiC,cAAA3f,iBAAA,wCAEA2f,yCAAetyC,oBAAA,+mBAhHfsyC,yiECJAU,sCAEA,SAAAA,WAAAnlC,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAA00C,aACA5vC,EAAA0K,2BAAAxP,KAAAyP,gBAAAilC,YAAAhlC,KAAA1P,KAAAuP,KAEA8Y,UAAA,KAHAvjB,wGAQA,IAAAqP,EAAAnU,KACA,OAAA2P,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,mBAAA7P,KAAAuP,MAAAM,UAAAzH,GAAA,QAAA0L,IAAA,SAAAY,GAAA,OAAAP,EAAAkU,UAAA3T,GAAA3E,MAAA/P,KAAAuP,MAAAQ,OACAJ,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,eACAF,2CAAAC,EAAAzB,cAAA,oCAEAwB,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,iBACAF,2CAAAC,EAAAzB,cAAA,uDACAwB,2CAAAC,EAAAzB,cAAA,uCAEAwB,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,2JApBAF,2CAAAC,EAAAO,oBAyBAukC,sCAAehzC,oBAAA,mmBAzBfgzC,+lFCKAC,gDAEA,SAAAA,gBAAAj5B,EAAA+M,GACA,IAAA3jB,EAAA,OAAAJ,gBAAA1E,KAAA20C,kBACA7vC,EAAA0K,2BAAAxP,KAAAyP,gBAAAklC,iBAAAjlC,KAAA1P,KAAA0b,EAAA+M,KAEAmsB,QAAA,IAAAC,6CAAA,EAEA/vC,EAAAi1B,iBAAA,KAGAj1B,EAAAgwC,aAAA,EACAhwC,EAAAiwC,aAAA,EAGAjwC,EAAAkwC,WAAA,EAGAlwC,EAAAmwC,mBAAA,KAGAnwC,EAAAowC,4BAAAzhC,uCAAA,EAAAxP,sCAGAa,EAAAqwC,kBAAA;AAGArwC,EAAAswC,YAAA,EAEAtwC,EAAAuwC,WAAA,EA1BAvwC,yHA8BA4W,GAEAvI,KAAA1D,gBAAAklC,gBAAAvhC,WAAA,aAAApT,MAAA0P,KAAA1P,KAAA0b,GAEA1b,KAAA+5B,iBAAAre,EAAAnH,qDAIAmH,GAEAvI,KAAA1D,gBAAAklC,gBAAAvhC,WAAA,UAAApT,MAAA0P,KAAA1P,KAAA0b,kCAIAA,GAEA,IAAAhU,EAAA1H,KAAA+5B,iBAAAM,WACAib,EAAAt1C,KAAA40C,QACAvsC,EAAArI,KAAAu1C,cAAAC,cACAltC,EAAAtI,KAAAu1C,cAAAE,cAEAptC,GAAArI,KAAA80C,cAAAxsC,GAAAtI,KAAA+0C,eAEA/0C,KAAA80C,aAAAzsC,EACArI,KAAA+0C,aAAAzsC,EAGAgtC,EAAAI,aAAAhuC,EAAAW,EAAAC,GAGAgtC,EAAAK,YAEAr+B,SAAAkB,KAAAzI,MAAA0tB,OAAA,UAIAnmB,SAAAkB,KAAAzI,MAAA0tB,OAAA,4CAKAztB,GAEAhQ,KAAAq1C,UAAArlC,uCAKA,OAAAhQ,KAAAq1C,kDAIArkB,GAEA,GAAAhxB,KAAAq1C,UAAA,OAAAliC,KAAA1D,gBAAAklC,gBAAAvhC,WAAA,kBAAApT,MAAA0P,KAAA1P,KAAAgxB,GAEA,IACArQ,EAAA3gB,KAAA+5B,iBAEAryB,EAAAiZ,EAAA0Z,WACAib,EAJAt1C,KAIA41C,YACAN,EAAAI,aAAAhuC,EAAAspB,EAAA3oB,EAAA2oB,EAAA1oB,GACAgtC,EAAAO,iBAAAP,EAAAz7B,OAAAy7B,EAAAQ,YAEA,IAAAj8B,EAAAy7B,EAAAS,cACAD,EAAAR,EAAAU,kBAYA,OAVAV,EAAAW,iBAGA,QAAAH,GAAAR,EAAAY,oBAAAr8B,IAEAy7B,EAAAa,oBAKAx1B,EAAAstB,OAAAmI,qBAOAjjC,KAAA1D,gBAAAklC,gBAAAvhC,WAAA,kBAAApT,MAAA0P,KAAA1P,KAAAgxB,wCAIAA,GAEA,GAAAhxB,KAAAq1C,UAAA,OAAAliC,KAAA1D,gBAAAklC,gBAAAvhC,WAAA,eAAApT,MAAA0P,KAAA1P,KAAAgxB,GAEA,IACArQ,EAAA3gB,KAAA+5B,iBAEA1xB,EAAA2oB,EAAA3oB,EACAC,EAAA0oB,EAAA1oB,EAEAZ,EAAAiZ,EAAA0Z,WACAib,EAPAt1C,KAOA41C,YACAN,EAAAI,aAAAhuC,EAAAW,EAAAC,GACA,IAAAuR,EAAAy7B,EAAAS,cACAD,EAAAR,EAAAU,kBAGA,OAbAh2C,KAaA26B,cAGA,SAAAmb,GAGAn1B,EAAA01B,MAAAx8B,EAAAxR,EACAsY,EAAA21B,MAAAz8B,EAAAvR,EAGAgtC,EAAAW,eAGAt1B,EAAA41B,oBAAA18B,GAKA8G,EAAA6pB,iBAAA3wB,IAGA,IAEA,SAAAi8B,GAAA,aAAAA,KAGAn1B,EAAA61B,iBAAA38B,IACA,GAxCA7Z,KAmDAy2C,cAAA,SAAAX,EAMA,SAAAA,GAEAn1B,EAAA+1B,gBAAA78B,EAAAxR,EAAAC,IACA,GAEA,SAAAwtC,GAOA3iC,KAAA1D,gBAAAklC,gBAAAvhC,WAAA,eAAApT,MAAA0P,KAAA1P,KAAAgxB,IAhBArQ,EAAAg2B,WAAA98B,IACA,2CAmBAmX,GAEA,GAAAhxB,KAAAq1C,UAAA,OAAAliC,KAAA1D,gBAAAklC,gBAAAvhC,WAAA,kBAAApT,MAAA0P,KAAA1P,KAAAgxB,GAEA,IAAArQ,EAAA3gB,KAAA+5B,iBACA1xB,EAAA2oB,EAAA3oB,EACAC,EAAA0oB,EAAA1oB,EAEA,OAAAtI,KAAA26B,eAQAha,EAAAoH,KAAA,wBACA,IANApH,EAAAna,WAAA6B,EAAAC,IACA,uCAaA0oB,GAEA,GAAAhxB,KAAAq1C,UAAA,OAAAliC,KAAA1D,gBAAAklC,gBAAAvhC,WAAA,cAAApT,MAAA0P,KAAA1P,KAAAgxB,GAEA,IACArQ,EAAA3gB,KAAA+5B,iBAEAryB,EAAAiZ,EAAA0Z,WACAib,EAJAt1C,KAIA41C,YACAvtC,EAAA2oB,EAAA3oB,EACAC,EAAA0oB,EAAA1oB,EACAuR,EAAAy7B,EAAAS,cACAD,EAAAR,EAAAU,kBARAh2C,KAUA85B,kBAAAnR,cAGA,GAbA3oB,KAaAy2C,aACA,CAEA,GAhBAz2C,KAgBA26B,cAKA,OADAha,EAAAoH,KAAA,wBACA,EAOA,GA5BA/nB,KAyBAg1C,WAAA,EAGA,SAAAc,GAAAj8B,EAAA4X,gBAKA,SAGA,YAAAqkB,EACA,CAEA,KAAAj8B,aAAA+8B,0DAAA,GACA,UAAA12C,MAAA,kBAAA2Z,EAAA,cAAAi8B,EAAA,mCAKA,OAFAn1B,EAAA01B,MAAAx8B,EAAAxR,EACAsY,EAAA21B,MAAAz8B,EAAAvR,GACA,EAGA,YAAAwtC,EACA,CAEA,KAAAj8B,aAAAg9B,0DAAA,GACA,UAAA32C,MAAA,kBAAA2Z,EAAA,cAAAi8B,EAAA,mCAGA,GAAAj8B,EAAA4X,gBAGA,SAIA,IAAAqlB,EAAAj9B,EAAA7Q,eAKA,OAJA2X,EAAAo2B,SAAArtC,QAAAotC,EAAAptC,QACAiX,EAAAo2B,SAAA11C,OAAAy1C,EAAAz1C,QAGA,EAGA,eAAAy0C,EAKA,OA3EA91C,KAwEAi1C,mBAAAjkB,GAGA,MAKA,CAEA,YAAA8kB,EACA,CACA,GApFA91C,KAoFA26B,cAqBA,OADAha,EAAAoH,KAAA,wBACA,EAnBA,IAAA3gB,EAAAM,EAAAL,WAAAwS,EAAAmX,GACA5pB,EAAAG,aAAAkM,uCAAA,EAAArR,8BAGAkzC,EAAAO,iBAAAzuC,EAAA,YA1FApH,KA2FAg1C,WAAA,EAGA,IAAAgC,EAAA5vC,EAAA4B,eAMA,OALA2X,EAAAo2B,SAAArtC,QAAAstC,EAAAttC,QACAiX,EAAAo2B,SAAA11C,OAAA21C,EAAA31C,QAIA,EAQA,WAAAy0C,EAGA,SAGA,YAAAA,EAIA,OADAR,EAAA2B,eAAAvvC,EAAAW,EAAAC,IACA,EAKA,gBAAAwtC,EACA,CAEA,KAAAj8B,aAAAg9B,0DAAA,GACA,UAAA32C,MAAA,kBAAA2Z,EAAA,cAAAi8B,EAAA,mCAEA,IAAAoB,EAAAr9B,EAAA7Q,eAQA,OAPA2X,EAAAo2B,SAAArtC,QAAAwtC,EAAAxtC,QACAiX,EAAAo2B,SAAA11C,OAAA61C,EAAA71C,OAEAsf,EAAAw2B,WAAAt9B,EAAAzQ,qBArIApJ,KAsIAg1C,WAtIAh1C,KAsIAy2C,cAGA,EAOA,OAAAtjC,KAAA1D,gBAAAklC,gBAAAvhC,WAAA,cAAApT,MAAA0P,KAAA1P,KAAAgxB,sCAIAA,GAEA,GAAAhxB,KAAAq1C,UAAA,OAAAliC,KAAA1D,gBAAAklC,gBAAAvhC,WAAA,aAAApT,MAAA0P,KAAA1P,KAAAgxB,GAEA,IACArQ,EAAA3gB,KAAA+5B,iBACAryB,EAAAiZ,EAAA0Z,WAEAib,EAJAt1C,KAIA41C,YACAvtC,EAAA2oB,EAAA3oB,EACAC,EAAA0oB,EAAA1oB,EACAuR,EAAAy7B,EAAAS,cACAD,EAAAR,EAAAU,kBAGA,GAXAh2C,KAWAy2C,aACA,CAEA,YAAAX,EAUA,OARAR,EAAAW,eAEAt1B,EAAAy2B,oBAAApmB,EAAAskB,EAAA+B,aAAA3vC,GAAAW,EAAAC,GAIAqY,EAAA22B,WAAAtmB,EAAAnX,EAAAxR,EAAAC,IAEA,EAGA,YAAAwtC,EAGA,OADAn1B,EAAA42B,WAAAvmB,EAAAnX,EAAAxR,EAAAC,IACA,EAGA,gBAAAwtC,EAGA,OADAn1B,EAAA62B,eAAAxmB,EAAAnX,EAAAxR,EAAAC,IACA,EAGA,eAAAwtC,EACA,CAEA,IAAArwC,EAAA6vC,EAAAmC,UAAA/vC,EAAAW,EAAAC,IAAA0oB,EAEA,OA5CAhxB,KA2CAi1C,mBAAAxvC,GACA,EAGA,YAAAqwC,EAOA,UAAA51C,MAAA,wBAAA41C,EAAA,UAKA,CACA,GA5DA91C,KA4DAg1C,UAGA,OADAr0B,EAAA62B,eAAAxmB,EAAAnX,EAAAxR,EAAAC,IACA,EAIA,GAAAgtC,EAAAoC,cAIA,OADApC,EAAAqC,gBAAAjwC,EAAAW,EAAAC,IACA,EAOA,OAAA6K,KAAA1D,gBAAAklC,gBAAAvhC,WAAA,aAAApT,MAAA0P,KAAA1P,KAAAgxB,sCAIAA,GAEA,GAAAhxB,KAAAq1C,UAAA,OAAAliC,KAAA1D,gBAAAklC,gBAAAvhC,WAAA,aAAApT,MAAA0P,KAAA1P,KAAAgxB,GAEA,IACArQ,EAAA3gB,KAAA+5B,iBAEAryB,EAAAiZ,EAAA0Z,WACAib,EAJAt1C,KAIA41C,YACAvtC,EAAA2oB,EAAA3oB,EACAC,EAAA0oB,EAAA1oB,EACAgtC,EAAAI,aAAAhuC,EAAAW,EAAAC,GACA,IAAAuR,EAAAy7B,EAAAS,cACAD,EAAAR,EAAAU,kBAGA,GAZAh2C,KAYAy2C,cAZAz2C,KAYAg1C,UACA,CAEA,YAAAc,EACA,CAEA,GAlBA91C,KAkBA26B,cAaA,OAVA2a,EAAAW,eAEAt1B,EAAA41B,oBAAA18B,GAKA8G,EAAA6pB,iBAAA3wB,IAGA,EAMA,GAAAy7B,EAAAW,eACA,CACA,IAAAtkB,EAAAtpB,EAAAsY,EAAA01B,MACA3kB,EAAAppB,EAAAqY,EAAA21B,MACA31B,EAAAoH,KAAA,cAAArgB,EAAA4tC,EAAA+B,aAAA3vC,GAAAiqB,EAAAD,QAIA/Q,EAAAoH,KAAA,WAAArgB,EAAAmS,EAAAxR,EAAAC,EAAAqY,EAAA01B,MAAA11B,EAAA21B,OAEA,SAIA,YAAAR,EAYA,OA/DA91C,KAsDA26B,cAEAha,EAAA61B,iBAAA38B,GAKA8G,EAAAoH,KAAA,WAAArgB,EAAAmS,IAAA7Q,eAAA2X,EAAAo2B,WAEA,EAGA,GAlEA/2C,KAkEAg1C,WAAA,aAAAc,EACA,CAEA,GArEA91C,KAqEA26B,cAGA,OADAha,EAAA61B,iBAAA38B,IACA,EAGA,GAAAA,EAAAzQ,+BAAAwtC,0DAAA,EACA,CACA,IAAA7xC,EAAA2C,EAAAkwC,WAAA/9B,GAGA,OAAA9U,IAAA8U,GAGA8G,EAAA+1B,gBAAA3xC,EAAAsD,EAAAC,EAAAvD,EAAA4E,gBAAA,GAGAjC,EAAAmwC,WAAAh+B,IACA,IAvFA7Z,KA4FAg1C,UAEAr0B,EAAA+1B,gBAAA78B,EAAAxR,EAAAC,EAAA,mBACAqY,EAAAoH,KAAA,qBAAArgB,EAAAmS,KAKA8G,EAAA+1B,gBAAA78B,EAAAxR,EAAAC,GApGAtI,KAwGAg1C,WAxGAh1C,KA2GAg1C,WAAA,EAGAr0B,EAAAoH,KAAA,iBAAArgB,EAAAmS,IAEA,OAAA8G,EAAAw2B,YAGAx2B,EAAAoH,KAAA,kBAAArgB,EAAAmS,IAAAzQ,qBAAAuX,EAAAw2B,WAAAx2B,EAAAo2B,WAGA,GAMA,OA5HA/2C,KA4HAk1C,6BA5HAl1C,KA8HAg1C,UAMAttC,EAAAmwC,WAAAh+B,GAJA8G,EAAA61B,iBAAA38B,IAMA,IAKAA,EAAAi+B,sBAAA,MAGAj+B,EAAAlQ,eAAAtI,QAAA,GAEAsf,EAAA+1B,gBAAA78B,EAAAxR,EAAAC,IAEA,GAIA,eAAAwtC,EACA,CAEA,GAzJA91C,KAyJAi1C,8BAAA2B,0DAAA,EACA,CACA,IAAAmB,EAAArwC,EAAAM,eAGAN,EAAAX,aA9JA/G,KA8JAi1C,oBAGAt0B,EAAAoH,KAAA,cAAArgB,EAjKA1H,KAiKAi1C,mBAAA8C,GAKA,OAtKA/3C,KAqKAi1C,mBAAA,MACA,EAEA,YAAAa,EAIA,IAAA3iC,KAAA1D,gBAAAklC,gBAAAvhC,WAAA,aAAApT,MAAA0P,KAAA1P,KAAAgxB,GAEA,SAKA,UAAA9wB,MAAA,wBAAA41C,EAAA,YAOA,GAAAR,EAAAoC,cAIA,OADApC,EAAA0C,aAAAtwC,EAAAW,EAAAC,IACA,EAKA,OAAA6K,KAAA1D,gBAAAklC,gBAAAvhC,WAAA,aAAApT,MAAA0P,KAAA1P,KAAAgxB,4CAIAA,GAEA,GAAAhxB,KAAAq1C,UAAA,OAAAliC,KAAA1D,gBAAAklC,gBAAAvhC,WAAA,mBAAApT,MAAA0P,KAAA1P,KAAAgxB,GAEA,IAEAtpB,EADA1H,KAAA+5B,iBACAM,WACAib,EAHAt1C,KAGA41C,YAEAN,EAAA2C,cACA3C,EAAAI,aAAAhuC,EAAAspB,EAAA3oB,EAAA2oB,EAAA1oB,GAGA6K,KAAA1D,gBAAAklC,gBAAAvhC,WAAA,mBAAApT,MAAA0P,KAAA1P,KAAAgxB,wCAGAknB,GAEAl4C,KAAAo1C,WAAA8C,wCAKA,OAAAl4C,KAAAo1C,kDAGA+C,GAEAn4C,KAAAm1C,kBAAAgD,2CAKA,OAAAn4C,KAAAm1C,sDAKA,IAAApwC,EAAA/E,KAAAu1C,cAAA6C,aACA,OAAAp4C,KAAAm1C,kBAAApwC,yCAKA,OAAA/E,KAAAu1C,cAAA8C,kDAGA13B,GAEA,OAAA3gB,KAAAu1C,cAAA+C,kBAEA33B,EAAAq0B,YAAAh1C,KAAAy2C,cAEAz2C,KAAAm1C,qDAKA,OAAAn1C,KAAA40C,sJAltBA2D,+EAAA,YAstBA5D,2CAAejzC,oBAAA,ymBAttBfizC,0jECHA6D,8DAEA,SAAAA,8BAAA98B,EAAA+M,GACA,IAAA3jB,EAAA,OAAAJ,gBAAA1E,KAAAw4C,gCACA1zC,EAAA0K,2BAAAxP,KAAAyP,gBAAA+oC,+BAAA9oC,KAAA1P,QAEAkpB,QAAAxN,EACA5W,EAAAywC,cAAA9sB,EAAAgwB,cAAA9+B,8CAAA7U,KAEAA,EAAA4zC,sBAAA,IAAAC,sDAAA,EANA7zC,qJASA4W,oCACAA,mCACAA,4CAGAsV,GAAA,8CAEAA,GAAA,iDAEAA,GAAA,OAAAhxB,KAAAi/B,aAAAjO,2CAEAA,GAAA,6CAEAA,GAAA,OAAAhxB,KAAA04C,sBAAA/Z,YAAA3N,sCAEAA,GAAA,OAAAhxB,KAAA04C,sBAAAja,WAAAzN,sCAEAA,GAAA,OAAAhxB,KAAA04C,sBAAA3Z,WAAA/N,4CAEAA,yCAEAA,EAAAC,EAAAhM,GAAA,OAAAjlB,KAAA04C,sBAAAta,aAAApN,EAAAC,EAAAhM,6CAIA,OAAAjlB,KAAAu1C,kDAKA,OAAAv1C,KAAAkpB,oKA1CA0vB,4EAAA,YA8CAJ,yDAAe92C,oBAAA,ynBA9Cf82C,whECFAK,qDAEA,SAAAA,uBACA,IAAA/zC,EAAA,OAAAJ,gBAAA1E,KAAA64C,uBACA/zC,EAAA0K,2BAAAxP,KAAAyP,gBAAAopC,sBAAAnpC,KAAA1P,QAEA84C,OAAA,EACAh0C,EAAAi0C,OAAA,EAJAj0C,oIAQAksB,GAIA,OAFAhxB,KAAA84C,OAAA9nB,EAAA3oB,EACArI,KAAA+4C,OAAA/nB,EAAA1oB,GACA,qCAIA0oB,GAEA,IAAAW,EAAAX,EAAA3oB,EAAArI,KAAA84C,OACApnB,EAAAV,EAAA1oB,EAAAtI,KAAA+4C,OAIA,OAHA/nB,EAAAgoB,aACArwB,cACAswB,UAAAtnB,EAAAD,GAAA,IACA,qCAIAV,GAGA,4JAjCA4nB,4EAAA,YAqCAC,gDAAen3C,oBAAA,umBArCfm3C,m8BCAAK,uBAEA,SAAAA,cACAx0C,gBAAA1E,KAAAk5C,aACAl5C,KAAAm5C,aAAA,CACAC,MAAA,EAAAC,MAAA,EACAC,IAAA,EAAAC,IAAA,EACAC,SAAA,GAEAx5C,KAAAwgB,QAAA,GAEAxgB,KAAA6Z,OAAA,KACA7Z,KAAA81C,WAAA,GAEA91C,KAAA+1C,cAAA,KACA/1C,KAAAg2C,kBAAA,2EAGAn8B,EAAA3L,GAEAlO,KAAA+1C,cAAAl8B,EACA7Z,KAAAg2C,kBAAA9nC,uCAGAxG,EAAAW,EAAAC,GA6BA,OA3BAtI,KAAA6Z,OAAA7Z,KAAAy5C,yBAAA/xC,EAAAW,EAAAC,IAGAtI,KAAA81C,WAAA,WAEA91C,KAAA6Z,OAAA7Z,KAAA05C,oBAAAhyC,EAAAW,EAAAC,IAGAtI,KAAA81C,WAAA,YAEA91C,KAAA6Z,OAAA7Z,KAAAy3C,UAAA/vC,EAAAW,EAAAC,IAGAtI,KAAA81C,WAAA,QAEA91C,KAAA6Z,OAAA7Z,KAAA25C,UAAAjyC,EAAAW,EAAAC,IAGAtI,KAAA81C,WAAA,QAKA91C,KAAA6Z,OAAA,KACA7Z,KAAA81C,WAAA,QAGA91C,KAAA6Z,6CAKA7Z,KAAA6Z,OAAA,KACA7Z,KAAA81C,WAAA,2CAKA,aAAA91C,KAAA6Z,yCAGAnS,EAAAW,EAAAC,GACA,IAAAwE,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAEA,QAAA2L,EAAAC,EAAAxF,EAAAE,WAAAwF,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADAvG,EACA0G,EAAAlN,MACA4xB,EAAAtpB,EAAA9B,EAAA8B,EACAqpB,EAAAppB,EAAA/B,EAAA+B,EACA,GAAAqpB,IAAAD,IAAAwG,uCAAA,EAAAj1B,gBAEA,OAAAsD,GARA,MAAAqH,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAWA,6DAGAtF,EAAAW,EAAAC,GAEA,IAAAiV,EAAA7V,EAAAM,eACA,IAAAuV,EAAA,YAEA,IAAAoU,EAAAtpB,GAAAkV,EAAAlV,EAAA6vB,uCAAA,EAAA90B,yBACAsuB,EAAAppB,EAAAiV,EAAAjV,EACA,OAAAqpB,IAAAD,IAAAwG,uCAAA,EAAA50B,gBAEAia,EAGA,uCAGA7V,EAAAW,EAAAC,GAEA,IAAAmS,EAAA,CAAApS,EAAA,EAAAC,EAAA,GADAmG,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IAIA,QAAAsN,EAAAC,EAAAnH,EAAAI,WAAAsF,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA,KADArH,EACAwH,EAAA7O,MACAqH,EAAAsT,eAAAD,GACA,IAAAkX,EAAAtpB,EAAAoS,EAAApS,EACAqpB,EAAAppB,EAAAmS,EAAAnS,EACA,GAAAqpB,IAAAD,IAAAwG,uCAAA,EAAA50B,gBAEA,OAAA8D,GAXA,MAAAwG,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,GAcA,wDAGAjH,EAAAW,EAAAC,GAEA,IAAAsxC,EAAA,CAAAvxC,EAAA,EAAAC,EAAA,GADAyG,GAAA,EAAAC,GAAA,EAAAC,OAAA3N,EAAA,IAGA,QAAA4N,EAAAC,EAAAzH,EAAAI,WAAAsF,OAAAC,cAAA0B,GAAAG,EAAAC,EAAA7B,QAAAC,MAAAwB,GAAA,EACA,KADA3H,EACA8H,EAAAnP,MACAqH,EAAAwT,YAAAg/B,GACA,IAAAjoB,EAAAtpB,EAAAuxC,EAAAvxC,EACAqpB,EAAAppB,EAAAsxC,EAAAtxC,EACA,GAAAqpB,IAAAD,IAAAwG,uCAAA,EAAAx0B,oBAEA,OAAA0D,GAVA,MAAAwG,GAAAoB,GAAA,EAAAC,EAAArB,EAAA,YAAAmB,GAAA,MAAAI,EAAAtB,QAAAsB,EAAAtB,SAAA,WAAAmB,EAAA,MAAAC,GAaA,sDAKA,OAAAjP,KAAAm5C,kDAGAzxC,GAEA,GADAtG,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAEA,CACA,IAAAy4C,EAAA75C,KAAAm5C,aACAW,EAAAh0C,KAAAuM,IAAAwnC,EAAAP,IAAAO,EAAAT,OACAW,EAAAj0C,KAAAuM,IAAAwnC,EAAAN,IAAAM,EAAAR,OACAW,EAAAl0C,KAAAC,IAAA8zC,EAAAP,IAAAO,EAAAT,OACAa,EAAAn0C,KAAAC,IAAA8zC,EAAAN,IAAAM,EAAAR,OACAr5C,KAAAm2C,iBACA+D,eAAAxyC,EAAAsyC,EAAAC,EAAAH,EAAAC,EAAA/5C,KAAAwgB,SAGA,OAAAxgB,KAAAwgB,+CAKA,OAAAxgB,KAAAwgB,QAAAnf,OAAA,2CAKArB,KAAAwgB,QAAAnf,OAAA,8CAGAwY,GAEA,OAAA7Z,KAAAwgB,QAAAlH,SAAAO,GAAA7Z,KAAA6Z,yCAGAA,GAEA,OAAA7Z,KAAA6Z,iDAGAnS,EAAAW,EAAAC,GAEA,IAAAuxC,EAAA75C,KAAAm5C,aACAU,EAAAT,MAAAS,EAAAP,IAAAjxC,EACAwxC,EAAAR,MAAAQ,EAAAN,IAAAjxC,EACAtI,KAAAm2C,iBAEA0D,EAAAL,SAAA,0CAGA9xC,EAAAW,EAAAC,GAEA,IAAAuxC,EAAA75C,KAAAm5C,aACAU,EAAAP,IAAAjxC,EACAwxC,EAAAN,IAAAjxC,EACAtI,KAAAq3C,aAAA3vC,GAAA,wCAGAA,EAAAW,EAAAC,GAEA,IAAAuxC,EAAA75C,KAAAm5C,aACAU,EAAAP,IAAAjxC,EACAwxC,EAAAN,IAAAjxC,EACAtI,KAAAq3C,aAAA3vC,GAAA,GAEAmyC,EAAAL,SAAA,wCAKA,OAAAx5C,KAAAm5C,aAAAK,oJAIA,SAAAU,eAAAxyC,EAAA0c,EAAAC,EAAAC,EAAAC,EAAA9e,GAEA,IAAA2zC,EAAAtzC,KAAAC,IAAAqe,EAAAE,GACA+0B,EAAAvzC,KAAAC,IAAAse,EAAAE,GACA+0B,EAAAxzC,KAAAuM,IAAA+R,EAAAE,GACAi1B,EAAAzzC,KAAAuM,IAAAgS,EAAAE,GAJAnI,GAAA,EAAAC,GAAA,EAAAC,OAAAhb,EAAA,IAMA,QAAAib,EAAAC,EAAA9U,EAAAE,WAAAwF,OAAAC,cAAA+O,GAAAG,EAAAC,EAAAlP,QAAAC,MAAA6O,GAAA,EACA,KADA7V,EACAgW,EAAAxc,MACAwG,EAAA8B,GAAA+wC,GAAA7yC,EAAA8B,EAAAixC,GACA/yC,EAAA+B,GAAA+wC,GAAA9yC,EAAA+B,EAAAixC,GAEA9zC,EAAAoH,KAAAtG,IAXA,MAAAqH,GAAAyO,GAAA,EAAAC,EAAA1O,EAAA,YAAAwO,GAAA,MAAAI,EAAA3O,QAAA2O,EAAA3O,SAAA,WAAAwO,EAAA,MAAAC,GAcA,OAAA7W,eAGAyzC,uCAAex3C,oBAAA,imBAjOfw3C,oIA+MAgB,8xEC/MAC,qCAEA,SAAAA,gBAAA/xC,EAAAoB,GACA,IAAA1E,EADA2E,EACArI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KACA,OAAAsD,gBAAA1E,KAAAm6C,kBACAr1C,EAAA0K,2BAAAxP,KAAAyP,gBAAA0qC,iBAAAzqC,KAAA1P,KAAAoI,EAAAoB,EAAA,QAIA4wC,MAAA,CACA1wC,QAAA,EACArI,OAAA,EACAg5C,QAAA,CAAAhyC,EAAA,EAAAC,EAAA,IAIAxD,EAAAgzC,sBAAAruC,GAZA3E,gHAeA4E,GACA,IADArI,EACAD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,QADAE,EAOA,OALAtB,KAAAo6C,MAAA1wC,UACA,iBAAArI,IAEArB,KAAAo6C,MAAA/4C,UAEArB,4CAKA,OAAAA,KAAAo6C,4CAKA,OAAAp6C,KAAAyxB,iBAAA,GAAAzxB,KAAAo6C,MAAA/4C,oDAGAgH,EAAAC,GAEA,IAAAkB,EAAAxJ,KAAAwd,MACA/T,EAAAzJ,KAAAyd,IACA68B,EAAA9wC,EAAAnB,EACAkyC,EAAA/wC,EAAAlB,EAIAqpB,EAHAloB,EAAApB,EAGAiyC,EACA5oB,EAHAjoB,EAAAnB,EAGAiyC,EACAC,EAAAF,EAAA3oB,EAAA,EACA8oB,EAAAF,EAAA7oB,EAAA,EAIAgpB,EAAA50C,KAAA8rB,OAAAF,EAAAC,GACAA,EAAAtpB,EAAAmyC,EACA9oB,EAAAppB,EAAAmyC,EAEA,IAAAp8B,EAAAvY,KAAAuY,GAEA0F,EAAA1F,EAAA,EAKA3U,EAAA5D,KAAA8rB,MAAAF,EAAAC,GAAA+oB,EACAr5C,EAAAyE,KAAA+e,KAAA8M,IAAAD,KACArwB,EAAA,IAAAA,EAAA,GAEA,IAAAs5C,EAAAjxC,IAAAqa,EACA62B,EAAAlxC,EAAAqa,EAEA82B,EAAAx8B,EAAA,GAEAvY,KAAAmL,IAAA5P,GAAA,GAEAqI,EAAA,EACArI,EAAA,GAEAs5C,EAAAE,GAAAF,GAAAE,EAEAnxC,GAAAqa,GAEA62B,EAAAC,IAAAD,GAAAC,IAEAnxC,EAAAqa,GAGA/jB,KAAAo6C,MAAA1wC,UACA1J,KAAAo6C,MAAA/4C,wDAKA,IAAAmI,EAAAxJ,KAAAwd,MACA/T,EAAAzJ,KAAAyd,IACAhY,EAAAzF,KAAAo6C,MAAAC,QAkBA,OAjBA,MAAA7wC,GAAA,MAAAC,GAEAhE,EAAA4C,EAAA,EACA5C,EAAA6C,EAAA,GAYAwyC,qBAAAtxC,EAAAnB,EAAAmB,EAAAlB,EAAAmB,EAAApB,EAAAoB,EAAAnB,EAAAtI,KAAAo6C,MAAA/4C,OAAArB,KAAAo6C,MAAA1wC,QAAAjE,GAEAA,8CAKA,OAAAzF,KAAAwd,MAAA2G,yDAKAnkB,KAAAwH,cAAA1B,KAAAuY,GAAA,EAAAre,KAAAwd,MAAA2G,cAAAnkB,KAAA+6C,iEAGAC,GAOA,GAAAA,EACA,CACA,IAAArpB,EAAA3xB,KAAAwd,MAAAnV,EAAA2yC,EAAA3yC,EACAqpB,EAAA1xB,KAAAwd,MAAAlV,EAAA0yC,EAAA1yC,EACA2yC,GAAAn1C,KAAA8rB,MAAAD,EAAAD,GAAA5rB,KAAAuY,GAAA,EACAre,KAAAo6C,MAAA1wC,QAAAuxC,OAIAj7C,KAAAo6C,MAAA1wC,QAAA,gDAKAnD,GAEA,IAAAy0C,EAAAh7C,KAAAyd,IAGAu9B,IAAAz0C,IAEA4M,KAAA1D,gBAAA0qC,gBAAA/mC,WAAA,wBAAApT,MAAA0P,KAAA1P,KAAAuG,GAEAvG,KAAAyxB,gBAEAzxB,KAAAk7C,oBAAAF,GAEAh7C,KAAA4jB,cAEA5jB,KAAAm7C,+DAOA,IAAAp2C,EAAA,EACA,GAAA/E,KAAAikB,cACA,CACA,IAAAm3B,EAAAp7C,KAAAq7C,uBACAt2C,EAAAe,KAAA8rB,MAAAwpB,EAAA9yC,EAAA8yC,EAAA/yC,GAAAvC,KAAAuY,GAAA,OAIAtZ,EAAAoO,KAAA1D,gBAAA0qC,gBAAA/mC,WAAA,mBAAApT,MAAA0P,KAAA1P,MAGA,OAAA+E,0CAKA,IADAU,EACArE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,CAAAiH,EAAA,EAAAC,EAAA,GAEAkB,EAAAxJ,KAAAwd,MACA/T,EAAAzJ,KAAAyd,IAEA,IAAAjU,EAAA,UAAAtJ,MAAA,kCACA,IAAAuJ,EACA,CAEA,IAAA6xC,EAAAx1C,KAAAyY,IAAAve,KAAAo6C,MAAA1wC,SACA6xC,EAAAz1C,KAAAwY,IAAAte,KAAAo6C,MAAA1wC,SACA8xC,EAAAhyC,EAAA2a,cAGA,OAFA1e,EAAA4C,EAAAmB,EAAAnB,EAAAizC,EAAAE,EACA/1C,EAAA6C,EAAAkB,EAAAlB,EAAAizC,EAAAC,EACA/1C,EAIA,GAAAgE,EAAA0a,aAAAnkB,KAAAikB,cAQA,CACAw3B,YAAAjyC,EAAAnB,EAAAmB,EAAAlB,EAAAmB,EAAApB,EAAAoB,EAAAnB,EAAA7C,GACA,IAAAi2C,EAAA17C,KAAAq7C,uBACAM,EAAAl2C,EAAA4C,EAAAqzC,EAAArzC,EACAuzC,EAAAn2C,EAAA6C,EAAAozC,EAAApzC,EAIA,OAHAwyC,qBAAAtxC,EAAAnB,EAAAmB,EAAAlB,EAAAqzC,EAAAC,EAAApyC,EAAA2a,cAAAnkB,KAAA4jB,aAAA9d,KAAAuY,GAAA,IAAA5Y,GACAA,EAAA4C,GAAAmB,EAAAnB,EACA5C,EAAA6C,GAAAkB,EAAAlB,EACA7C,EAXA,OAHAq1C,qBAAAtxC,EAAAnB,EAAAmB,EAAAlB,EAAAmB,EAAApB,EAAAoB,EAAAnB,EAAAkB,EAAA2a,cAAA,EAAA1e,GACAA,EAAA4C,GAAAmB,EAAAnB,EACA5C,EAAA6C,GAAAkB,EAAAlB,EACA7C,wCAiBA,IADAA,EACArE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,CAAAiH,EAAA,EAAAC,EAAA,GAEAkB,EAAAxJ,KAAAwd,MACA/T,EAAAzJ,KAAAyd,IAEA,IAAAjU,EAAA,UAAAtJ,MAAA,kCACA,IAAAuJ,EACA,CAEA,IAAA6xC,EAAAx1C,KAAAyY,IAAAve,KAAAo6C,MAAA1wC,SACA6xC,EAAAz1C,KAAAwY,IAAAte,KAAAo6C,MAAA1wC,SACAqoB,EAAAvoB,EAAA2a,cAAAnkB,KAAA8xB,uBAGA,OAFArsB,EAAA4C,EAAAmB,EAAAnB,EAAAizC,EAAAvpB,EACAtsB,EAAA6C,EAAAkB,EAAAlB,EAAAizC,EAAAxpB,EACAtsB,EAIA,GAAAgE,EAAA0a,YAKA,IAAAnkB,KAAAikB,cASA,CACAw3B,YAAAjyC,EAAAnB,EAAAmB,EAAAlB,EAAAmB,EAAApB,EAAAoB,EAAAnB,EAAA7C,GACA,IAAAi2C,EAAA17C,KAAAq7C,uBACAM,EAAAl2C,EAAA4C,EAAAqzC,EAAArzC,EACAuzC,EAAAn2C,EAAA6C,EAAAozC,EAAApzC,EAIA,OAHAwyC,qBAAArxC,EAAApB,EAAAoB,EAAAnB,EAAAqzC,EAAAC,EAAAnyC,EAAA0a,cAAAnkB,KAAA4jB,cAAA9d,KAAAuY,GAAA,IAAA5Y,GACAA,EAAA4C,GAAAoB,EAAApB,EACA5C,EAAA6C,GAAAmB,EAAAnB,EACA7C,EAZA,OAHAq1C,qBAAArxC,EAAApB,EAAAoB,EAAAnB,EAAAkB,EAAAnB,EAAAmB,EAAAlB,EAAAmB,EAAA0a,cAAA,EAAA1e,GACAA,EAAA4C,GAAAoB,EAAApB,EACA5C,EAAA6C,GAAAmB,EAAAnB,EACA7C,EARA,OAAAgE,2CA0BA,IADAhE,EACArE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,CAAAiH,EAAA,EAAAC,EAAA,GAEAkB,EAAAxJ,KAAAwd,MACA/T,EAAAzJ,KAAAyd,IAEA,IAAAjU,EAAA,UAAAtJ,MAAA,kCACA,IAAAuJ,EACA,CAEA,IAAA6xC,EAAAx1C,KAAAyY,IAAAve,KAAAo6C,MAAA1wC,SACA6xC,EAAAz1C,KAAAwY,IAAAte,KAAAo6C,MAAA1wC,SACAqoB,EAAAvoB,EAAA2a,cAAAnkB,KAAA8xB,uBAAA,EAGA,OAFArsB,EAAA4C,EAAAmB,EAAAnB,EAAAizC,EAAAvpB,EACAtsB,EAAA6C,EAAAkB,EAAAlB,EAAAizC,EAAAxpB,EACAtsB,EAKA,GAFAg2C,YAAAjyC,EAAAnB,EAAAmB,EAAAlB,EAAAmB,EAAApB,EAAAoB,EAAAnB,EAAA7C,GAEAzF,KAAAikB,cACA,CACA,IAAAy3B,EAAA17C,KAAAq7C,uBACA51C,EAAA4C,GAAAqzC,EAAArzC,EACA5C,EAAA6C,GAAAozC,EAAApzC,EAGA,OAAA7C,0CAKA,IADAiO,IACAtS,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACA,OAAAsS,EAEAP,KAAA1D,gBAAA0qC,gBAAA/mC,WAAA,gBAAApT,MAAA0P,KAAA1P,KAAA0T,GAAA,IAAA1T,KAAAo6C,MAAA1wC,QAAA,IAAA1J,KAAAo6C,MAAA/4C,OAIA8R,KAAA1D,gBAAA0qC,gBAAA/mC,WAAA,gBAAApT,MAAA0P,KAAA1P,KAAA0T,iJAnTAmoC,gDAAA,GAwTA,SAAAf,qBAAA12B,EAAAC,EAAAC,EAAAC,EAAA2a,GACA,IADAwb,EACAt5C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,EAAAqE,EACArE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,CAAAiH,EAAA,EAAAC,EAAA,GAEAqpB,EAAArN,EAAAF,EACAsN,EAAAnN,EAAAF,EACA42B,EAAAn1C,KAAA8rB,MAAAF,EAAAC,GAAA+oB,EAGA,OAFAj1C,EAAA4C,EAAAvC,KAAAyY,IAAA08B,GAAA/b,EACAz5B,EAAA6C,EAAAxC,KAAAwY,IAAA28B,GAAA/b,EACAz5B,EAGA,SAAAg2C,YAAAr3B,EAAAC,EAAAC,EAAAC,GACA,IADA9e,EACArE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,CAAAiH,EAAA,EAAAC,EAAA,GAIA,OAFA7C,EAAA4C,EAAA+b,GAAAE,EAAAF,GAAA,EACA3e,EAAA6C,EAAA+b,GAAAE,EAAAF,GAAA,EACA5e,eAGA00C,2CAAez4C,oBAAA,mkBAzUfy4C,6HAwTAW,uIAUAW,wkFC7TAK,gDAEA,SAAAA,gBAAApgC,GACA,IAAA5W,EAAA,OAAAJ,gBAAA1E,KAAA87C,kBACAh3C,EAAA0K,2BAAAxP,KAAAyP,gBAAAqsC,iBAAApsC,KAAA1P,KAAA0b,EAAA,IAAAqgC,2DAAA,KAEAC,gBAAA,KACAl3C,EAAA+Z,kBAAA,KAEA/Z,EAAAm3C,mBAAA,KACAn3C,EAAAmpC,OAAA,KAEAnpC,EAAAiyC,SAAA,CACArtC,QAAA,EAAArI,OAAA,EACAgH,EAAA,EAAAC,EAAA,GAEAxD,EAAAqyC,WAAA,KACAryC,EAAAuxC,MAAA,EACAvxC,EAAAwxC,MAAA,EAKAxxC,EAAAoiB,cAAA,kBACApiB,EAAAoiB,cAAA,qBACApiB,EAAAoiB,cAAA,sBAGApiB,EAAAoiB,cAAA,kBAGApiB,EAAAoiB,cAAA,mBACApiB,EAAAoiB,cAAA,sBACApiB,EAAAoiB,cAAA,uBAGApiB,EAAAoiB,cAAA,kBACApiB,EAAAoiB,cAAA,qBACApiB,EAAAoiB,cAAA,sBAGApiB,EAAAoiB,cAAA,kBAEApiB,EAAAoiB,cAAA,sBAwBApiB,EAAAoiB,cAAA,kBAGApiB,EAAAoiB,cAAA,oBACApiB,EAAAoiB,cAAA,uBACApiB,EAAAoiB,cAAA,wBAGApiB,EAAAoiB,cAAA,mBACApiB,EAAAoiB,cAAA,sBACApiB,EAAAoiB,cAAA,uBAGApiB,EAAAoiB,cAAA,YAEApiB,EAAAoiB,cAAA,eAEApiB,EAAAoiB,cAAA,eAEApiB,EAAAoiB,cAAA,mBAEApiB,EAAAoiB,cAAA,YAEApiB,EAAAoiB,cAAA,aAEApiB,EAAAoiB,cAAA,uBAzFApiB,yHA6FA4W,GAEAvI,KAAA1D,gBAAAqsC,gBAAA1oC,WAAA,aAAApT,MAAA0P,KAAA1P,KAAA0b,GACA1b,KAAAiuC,OAAAvyB,EAAAsxB,oBAEAhtC,KAAAg8C,gBAAAtgC,EAAApH,qBACAtU,KAAA6e,kBAAAnD,EAAAlH,uDAIAkH,GAEAvI,KAAA1D,gBAAAqsC,gBAAA1oC,WAAA,UAAApT,MAAA0P,KAAA1P,KAAA0b,6CAKA1b,KAAA+nB,KAAA,sBAAA/nB,KAAAq6B,YACA6hB,8DAAA,EAAAC,YAAAn8C,KAAAq6B,YAEAr6B,KAAA+nB,KAAA,mBAAA/nB,KAAAq6B,YACAr6B,KAAA+nB,KAAA,uBAAA/nB,KAAAq6B,+CAGA9zB,EAAAu6B,GAEA,IAAA3gB,EAAA5Z,EAAAiC,eACA4zC,EAAA71C,EAAAqC,gBAEArC,EAAAE,aAAAq6B,GACAv6B,EAAAI,eAAA,GAEA3G,KAAA+nB,KAAA,iBAAA/nB,KAAAq6B,WAAA9zB,EAAAu6B,EAAA3gB,EAAAi8B,sCAGA/zC,EAAAC,GAEA,IAAA+zC,EAAAr8C,KAAA6e,kBAAAa,oBAAAgpB,aAAA4T,+BAEA,IAAAj0C,MAAAvC,KAAA8P,SAAAnC,uCAAA,EAAAzP,aAAA,EAAAyP,uCAAA,EAAAzP,mBACA,IAAAsE,MAAAxC,KAAA8P,SAAAnC,uCAAA,EAAAzP,aAAA,EAAAyP,uCAAA,EAAAzP,cAEAhE,KAAA+nB,KAAA,oBAAA/nB,KAAAq6B,WAAAgiB,EAAAh0C,EAAAC,GAEA,IAAA/B,EAAAvG,KAAAq6B,WAAA7zB,WAAA6B,EAAAC,GAMA,OALA/B,EAAAE,aAAA41C,GAEAr8C,KAAA+nB,KAAA,iBAAA/nB,KAAAq6B,WAAA9zB,GAEAvG,KAAA+nB,KAAA,qBAAA/nB,KAAAq6B,WAAA9zB,GACAA,qCAGAA,GAEA,IAAA4Z,EAAA5Z,EAAAmC,gBACA3D,GAAAob,EAEA5Z,EAAAG,cAAA3B,GAGA/E,KAAA+nB,KAAA,iBAAA/nB,KAAAq6B,WAAA9zB,EAAA4Z,+CAGAo8B,GAEA,IAAAjH,EAAAt1C,KAAAg8C,gBAAApG,YACA4G,EAAAlH,EAAA+B,aAAAr3C,KAAAq6B,YAAA5oB,QAEAzR,KAAA+nB,KAAA,qBAAA/nB,KAAAq6B,WAAAkiB,EAAAC,EAAAx8C,KAAAq2C,MAAAr2C,KAAAs2C,OAJA,IAAAxpC,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAOA,QAAA2L,EAAAC,EAAAsvC,EAAApvC,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADAvG,EACA0G,EAAAlN,MACAC,KAAAq6B,WAAAoiB,WAAAl2C,IATA,MAAAqH,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAaAsoC,EAAAa,iBAGAn2C,KAAA+nB,KAAA,kBAAA/nB,KAAAq6B,WAAAkiB,EAAAC,EAAAx8C,KAAAq2C,MAAAr2C,KAAAs2C,OACAt2C,KAAA+nB,KAAA,sBAAA/nB,KAAAq6B,WAAAkiB,EAAAC,EAAAx8C,KAAAq2C,MAAAr2C,KAAAs2C,gDAGAz8B,GAEA7Z,KAAA+nB,KAAA,qBAAA/nB,KAAAq6B,WAAAxgB,EAAA,CAAAA,GAAA7Z,KAAAq2C,MAAAr2C,KAAAs2C,OAEAt2C,KAAAq6B,WAAAoiB,WAAA5iC,GAGA7Z,KAAA+nB,KAAA,kBAAA/nB,KAAAq6B,WAAAxgB,EAAA,CAAAA,GAAA7Z,KAAAq2C,MAAAr2C,KAAAs2C,OACAt2C,KAAA+nB,KAAA,sBAAA/nB,KAAAq6B,WAAAxgB,EAAA,CAAAA,GAAA7Z,KAAAq2C,MAAAr2C,KAAAs2C,iDAGA91B,GAEA,GAAAA,OAAAnf,QAAA,IAEArB,KAAA+nB,KAAA,qBAAA/nB,KAAAq6B,WAAA7Z,EAAA,GAAAA,EAAAxgB,KAAAq2C,MAAAr2C,KAAAs2C,OAEA,IAAA5uC,EAAA1H,KAAAq6B,WALA5rB,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IAMA,QAAAsN,EAAAC,EAAA2R,EAAApT,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA,KADAlI,EACAqI,EAAA7O,MACA2H,EAAA+0C,WAAAl2C,IARA,MAAAqH,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,GAYA3O,KAAA+nB,KAAA,kBAAA/nB,KAAAq6B,WAAA7Z,EAAA,GAAAA,EAAAxgB,KAAAq2C,MAAAr2C,KAAAs2C,OACAt2C,KAAA+nB,KAAA,sBAAA/nB,KAAAq6B,WAAA7Z,EAAA,GAAAA,EAAAxgB,KAAAq2C,MAAAr2C,KAAAs2C,iDAGAz8B,GAEA7Z,KAAA+nB,KAAA,oBAAA/nB,KAAAq6B,WAAAxgB,EAAA7Z,KAAAm3C,WAAAn3C,KAAA+2C,UACA/2C,KAAAq6B,WAAAwd,WAAAh+B,GAGA7Z,KAAA+nB,KAAA,iBAAA/nB,KAAAq6B,WAAAxgB,EAAA7Z,KAAAm3C,WAAAn3C,KAAA+2C,UACA/2C,KAAA+nB,KAAA,qBAAA/nB,KAAAq6B,WAAAxgB,EAAA7Z,KAAAm3C,WAAAn3C,KAAA+2C,oDAGAv2B,GAEA,GAAAA,OAAAnf,QAAA,IADA,IAAA0N,GAAA,EAAAC,GAAA,EAAAC,OAAA3N,EAAA,IAGA,QAAA4N,EAAAC,EAAAqR,EAAApT,OAAAC,cAAA0B,GAAAG,EAAAC,EAAA7B,QAAAC,MAAAwB,GAAA,EACA,KADA8K,EACA3K,EAAAnP,MACAC,KAAAw2C,iBAAA38B,IALA,MAAAjM,GAAAoB,GAAA,EAAAC,EAAArB,EAAA,YAAAmB,GAAA,MAAAI,EAAAtB,QAAAsB,EAAAtB,SAAA,WAAAmB,EAAA,MAAAC,wCASA+hB,EAAAzqB,EAAA8B,EAAAC,GACA,IAAA8T,GAAA,EAAAC,GAAA,EAAAC,OAAAhb,EAAA,IACA,QAAAib,EAAAC,EAAAxc,KAAAq6B,WAAAzyB,WAAAwF,OAAAC,cAAA+O,GAAAG,EAAAC,EAAAlP,QAAAC,MAAA6O,GAAA,EACA,KADAsgC,EACAngC,EAAAxc,MAEA,GAAAwG,IAAAm2C,EAAA,CAEA,IAAA/qB,EAAAtpB,EAAAq0C,EAAAr0C,EACAqpB,EAAAppB,EAAAo0C,EAAAp0C,EACA2yC,EAAAn1C,KAAA8rB,MAAAF,EAAAC,GAEAgrB,EAAA,EAAAlpC,uCAAA,EAAAzQ,YACA45C,EAAAF,EAAAr0C,EAAAvC,KAAAyY,IAAA08B,GAAA0B,EAAAt0C,EACAw0C,EAAAH,EAAAp0C,EAAAxC,KAAAwY,IAAA28B,GAAA0B,EAAAr0C,EAEAqpB,IAAAD,IAAA,EAAAje,uCAAA,EAAAxQ,kBAEAoF,GAAAu0C,EACAt0C,GAAAu0C,KAjBA,MAAAjvC,GAAAyO,GAAA,EAAAC,EAAA1O,EAAA,YAAAwO,GAAA,MAAAI,EAAA3O,QAAA2O,EAAA3O,SAAA,WAAAwO,EAAA,MAAAC,GAqBA/V,EAAA8B,IACA9B,EAAA+B,gDAGA0oB,EAAApnB,EAAAvB,EAAAC,GAGA,IAAAw0C,EAAA9rB,EAAA+rB,wBACAprB,EAAAtpB,EAAAy0C,EAAAz0C,EACAqpB,EAAAppB,EAAAw0C,EAAAx0C,EAJAqU,GAAA,EAAAC,GAAA,EAAAC,OAAAvb,EAAA,IAKA,QAAAwb,EAAAC,EAAAnT,EAAAwD,OAAAC,cAAAsP,GAAAG,EAAAC,EAAAzP,QAAAC,MAAAoP,GAAA,EACA,KADApW,EACAuW,EAAA/c,MACAwG,EAAA8B,GAAAspB,EACAprB,EAAA+B,GAAAopB,GARA,MAAA9jB,GAAAgP,GAAA,EAAAC,EAAAjP,EAAA,YAAA+O,GAAA,MAAAI,EAAAlP,QAAAkP,EAAAlP,SAAA,WAAA+O,EAAA,MAAAC,GAYAmU,EAAAgsB,yBAAA30C,EAAAC,sCAGA0oB,EAAA5pB,EAAAiB,EAAAC,GAEAlB,EAAA61C,qBAAA50C,EAAAC,0CAGA0oB,EAAA5pB,EAAAiB,EAAAC,GAGA,IACA7C,EADAzF,KAAAg8C,gBAAApG,YACA6B,UAAAz3C,KAAAq6B,WAAAhyB,EAAAC,IAAA0oB,EAKA,GAHA5pB,EAAA0wC,sBAAAryC,GAGA2B,EAAAwc,aACA,CAEA,IAAA1c,EAAAE,EAAA8B,gBACAyoB,EAAAzqB,EAAAmB,IACAqpB,EAAAxqB,EAAAoB,IACAoB,EAAA5D,KAAA8rB,MAAAF,EAAAC,GAAA7rB,KAAAuY,GACAjX,EAAAI,aAAAkC,QAMAtC,EAAAI,aAAAxH,KAAA+2C,SAAArtC,QAAA1J,KAAA+2C,SAAA11C,gDAIAwY,EAAAxR,EAAAC,GACA,IAAA6L,EAAAnU,KADA+yC,EACA3xC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAAAgX,IACAhX,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GADAilB,EACAjlB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAEA,GAAApB,KAAAi8C,mBAAA,CAMA,IAAAiB,EAAAnK,GAAAl5B,EAAAlQ,eACA3J,KAAAi8C,mBAAAkB,WAAAtjC,EAAAk5B,EAAA36B,EAAA,WACA,IAAA7P,EAAAsR,EAAAlQ,eACAuzC,EAAA77C,OAAA,GAAAkH,GAAA20C,GAEA/oC,EAAA4T,KAAA,YAAA5T,EAAAkmB,WAAAxgB,EAAAtR,EAAA20C,GAGA72B,GAEAA,WAdAA,2CAmBA9f,GAGAvG,KAAAg8C,gBAAAliB,kBAAAnR,cAAAy0B,WAAA72C,EAAA8B,GAAA9B,EAAA+B,uCAGAlB,GAGA,IAAAqT,EAAArT,EAAAsT,iBACA1a,KAAAg8C,gBAAAliB,kBAAAnR,cAAAy0B,WAAA3iC,EAAApS,GAAAoS,EAAAnS,wCAGAsB,GAGA,IAAAvI,EAAAuI,EAAAvI,OACAg8C,EAAA,EACAC,EAAA,EAJAhwB,GAAA,EAAAC,GAAA,EAAAC,OAAAlsB,EAAA,IAKA,QAAAmsB,EAAAC,EAAA9jB,EAAAwD,OAAAC,cAAAigB,GAAAG,EAAAC,EAAApgB,QAAAC,MAAA+f,GAAA,EACA,KADA/mB,EACAknB,EAAA1tB,MACAs9C,GAAA92C,EAAA8B,EACAi1C,GAAA/2C,EAAA+B,GARA,MAAAsF,GAAA2f,GAAA,EAAAC,EAAA5f,EAAA,YAAA0f,GAAA,MAAAI,EAAA7f,QAAA6f,EAAA7f,SAAA,WAAA0f,EAAA,MAAAC,GAUAxtB,KAAAg8C,gBAAAliB,kBAAAnR,cAAAy0B,WAAAC,EAAAh8C,GAAAi8C,EAAAj8C,iJA7VAk8C,+EAAA,GAmWA,SAAAC,oBAAA3jC,EAAAnS,GAGA,IAAA0c,EAAAvK,EAAA3Q,gBAAAb,EACAgc,EAAAxK,EAAA3Q,gBAAAZ,EACAgc,EAAAzK,EAAAzQ,qBAAAf,EACAkc,EAAA1K,EAAAzQ,qBAAAd,EACAkc,GAAAF,EAAAF,IAAAE,EAAAF,IAAAG,EAAAF,IAAAE,EAAAF,GACAI,GAAA,EACAC,EAAA,EACAtS,EAAA,EACAgS,EAAAE,EAEAlS,EAAAmS,GADAG,GAAAL,EAAAE,IAAAH,EAAAE,IACAA,EACAF,EAAAE,EAEAlS,EAAAiS,GADAK,GAAAH,EAAAF,IAAAC,EAAAF,IACAA,EAEAK,GAAA,EAjBA,IAAAoJ,GAAA,EAAAC,GAAA,EAAAC,OAAAzsB,EAAA,IAoBA,QAAA0sB,EAAAC,EAAAvmB,EAAAE,WAAAwF,OAAAC,cAAAwgB,GAAAG,EAAAC,EAAA3gB,QAAAC,MAAAsgB,GAAA,EACA,KADAtnB,EACAynB,EAAAjuB,MACA,GAAAwG,IAAAsT,EAAA3Q,iBAAA3C,IAAAsT,EAAAzQ,qBAAA,CAEA,IAAAub,EAAApe,EAAA8B,EACAuc,EAAAre,EAAA+B,EAIA,MAFA8b,EAAAO,IAAAP,EAAAO,IAAAN,EAAAO,IAAAP,EAAAO,GAEAJ,IADAF,EAAAK,IAAAL,EAAAK,IAAAJ,EAAAK,IAAAL,EAAAK,GACAJ,GAAA,CAGA,IAAA0a,EAAA,EACAue,EAAA,EACAC,EAAA,EACAC,EAAA,EACAC,GAAA,EAiBA,GAhBAn5B,GACAya,EAAAp5B,KAAAmL,IAAAmT,EAAAO,GACA84B,EAAAr5B,EACAs5B,EAAA94B,EACA+4B,EAAA,IAEAze,EAAAp5B,KAAAmL,IAAAmB,EAAAsS,EAAAC,EAAAC,GAAA9e,KAAA+e,KAAA,EAAAH,KAEAg5B,EAAAh5B,GADA+4B,GAAA94B,EAAAD,EAAAE,EAAAF,EAAAtS,IAAAsS,IAAA,IACAtS,EACA,IAAAsS,EACAi5B,EAAA,EAAAj5B,EAEAk5B,GAAA,GAIA1e,EAAAzrB,uCAAA,EAAAzQ,YAAA,CACA,IAAA66C,EAAApqC,uCAAA,EAAAzQ,YAAAk8B,EAAA,GAGA4e,GAAA,EACAC,GAAA,EAIA,GAPAp5B,EAAA84B,EAIA,IAAAK,EAAA,GAHAl5B,EAAA84B,EAIA,IAAAK,EAAA,GAEAH,EACAr3C,EAAA+B,EAAAsc,EAAAm5B,EAAAF,MACA,CACA,IAAAG,EAAAH,EAAA/3C,KAAA+e,KAAA84B,IAAA,GACAM,EAAAn4C,KAAAmL,IAAA0sC,GAAAK,EACAz3C,EAAA8B,EAAAsc,EAAAm5B,EAAAE,EACAz3C,EAAA+B,EAAAsc,EAAAm5B,EAAAE,OApEA,MAAArwC,GAAAkgB,GAAA,EAAAC,EAAAngB,EAAA,YAAAigB,GAAA,MAAAI,EAAApgB,QAAAogB,EAAApgB,SAAA,WAAAigB,EAAA,MAAAC,IAHAmwB,+CAAA,EAAAn3B,MAAA+0B,8BA6EAA,2CAAep6C,oBAAA,ymBA9afo6C,gJAmWA0B,q4BC1WAW,yCAEA,SAAAA,8BAAAziC,EAAAhU,GACAhD,gBAAA1E,KAAAm+C,+BACAn+C,KAAAkpB,QAAAxN,EACA1b,KAAAo+C,OAAA12C,sFAKAgU,oCACAA,mCACAA,uCAIA,OAAA1b,KAAAo+C,2CAKA,OAAAp+C,KAAAkpB,+KAIAi1B,yDAAez8C,oBAAA,ynBAzBfy8C,unCCIAE,sBAEA,SAAAA,aACA,IADAC,EACAl9C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADAm9C,2CAAA,EAAAC,EACAp9C,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADAq9C,2CAAA,EACA/5C,gBAAA1E,KAAAq+C,YACAr+C,KAAA0+C,WAAAJ,EACAt+C,KAAA2+C,WAAAH,EAEAx+C,KAAAujB,OAAA,GACAvjB,KAAAyjB,OAAA,GACAzjB,KAAA4+C,aAAA,IAAAx4C,IACApG,KAAA6+C,aAAA,IAAAz4C,uEAMA,IADAiC,EACAjH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,EAAAkH,EACAlH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,EAAAgH,EACAhH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAEA2D,EAAA,IAAA/E,KAAA0+C,WAAAt2C,GAAAnH,OAAA69C,gDAAA,EAAA79C,GAAAoH,EAAAC,GACAjC,EAAArG,KAAAujB,OAAAliB,OAGA,OAFArB,KAAAujB,OAAA1W,KAAA9H,GACA/E,KAAA4+C,aAAAh4C,IAAA7B,EAAAoD,oBAAA9B,GACAtB,qCAEAwB,GAEA,IAAA2B,EAAA3B,EAAA4B,oBACA9B,EAAArG,KAAA4+C,aAAA93C,IAAAoB,GACA,GAAA7B,GAAA,EACA,CACArG,KAAAujB,OAAAiE,OAAAnhB,EAAA,GACArG,KAAA4+C,aAAAx3B,OAAAlf,GAKA,QAAAiV,EAAA9W,EAAAsF,EAAA3L,KAAAujB,OAAAliB,OAAA8b,EAAAxR,IAAAwR,EAEAnd,KAAA4+C,aAAAh4C,IAAA5G,KAAAujB,OAAApG,GAAAhV,oBAAAgV,GAGA,IAAA4hC,EAAA,GAZAjyC,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAeA,QAAA2L,EAAAC,EAAAlN,KAAAyjB,OAAArW,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADA1F,EACA6F,EAAAlN,MACAqH,EAAA8B,kBAAA3C,EAEAw4C,EAAAlyC,KAAAzF,GAEAA,EAAAgC,uBAAA7C,GAEAa,EAAA0wC,sBAAA,OAvBA,MAAAlqC,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GA0BA,QAAAhG,EAAA,EAAAA,EAAA+3C,EAAA19C,OAAA2F,IACA,CADA,IAAAg4C,EAAAD,EAAA/3C,GAEAhH,KAAA63C,WAAAmH,qCAIAz4C,GAEAA,EAAA4B,qBAAA5B,EAAA04C,kBAAAh+C,OAAA69C,gDAAA,EAAA79C,IAEA,IAAAoF,EAAArG,KAAAujB,OAAAliB,OAGA,OAFArB,KAAAujB,OAAA1W,KAAAtG,GACAvG,KAAA4+C,aAAAh4C,IAAAL,EAAA4B,oBAAA9B,GACAE,uCAEAvG,KAAAujB,OAAAliB,OAAA,EAAArB,KAAA4+C,aAAAl5C,mDACAwC,GAEA,IAAAyZ,EAAA3hB,KAAA4+C,aAAA93C,IAAAoB,GACA,OAAAyZ,GAAA,EAAA3hB,KAAAujB,OAAA5B,GAAA,6CAEApZ,GACA,IADA9C,EACArE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,GACAqN,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IACA,QAAAsN,EAAAC,EAAA7O,KAAAujB,OAAAnW,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA,KADAlI,EACAqI,EAAA7O,MACAwG,EAAAiC,gBAAAD,GAAA9C,EAAAoH,KAAAtG,IAHA,MAAAqH,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,GAKA,OAAAlJ,qCAEA,OAAAzF,KAAAujB,8CACA,OAAAvjB,KAAAujB,OAAAliB,8CACA,OAAArB,KAAA0+C,8CAIAl1C,GACA,IADAC,EACArI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAAAgH,EACAhH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAEA2D,EAAA,IAAA/E,KAAA2+C,WAAAv2C,GAAAnH,OAAA69C,gDAAA,EAAA79C,GAAAuI,EAAAC,GACApD,EAAArG,KAAAyjB,OAAApiB,OAGA,OAFArB,KAAAyjB,OAAA5W,KAAA9H,GACA/E,KAAA6+C,aAAAj4C,IAAA7B,EAAAoD,oBAAA9B,GACAtB,qCAEAqC,GAEA,IAAAc,EAAAd,EAAAe,oBACA9B,EAAArG,KAAA6+C,aAAA/3C,IAAAoB,GACA,GAAA7B,GAAA,EACA,CACArG,KAAAyjB,OAAA+D,OAAAnhB,EAAA,GACArG,KAAA6+C,aAAAz3B,OAAAlf,GAGA,QAAAiV,EAAA9W,EAAAsF,EAAA3L,KAAAyjB,OAAApiB,OAAA8b,EAAAxR,IAAAwR,EAEAnd,KAAA6+C,aAAAj4C,IAAA5G,KAAAyjB,OAAAtG,GAAAhV,oBAAAgV,oCAIA/V,GAEAA,EAAAe,qBAAAf,EAAA63C,kBAAAh+C,OAAA69C,gDAAA,EAAA79C,IAEA,IAAAoF,EAAArG,KAAAyjB,OAAApiB,OAGA,OAFArB,KAAAyjB,OAAA5W,KAAAzF,GACApH,KAAA6+C,aAAAj4C,IAAAQ,EAAAe,oBAAA9B,GACAe,uCAEApH,KAAAyjB,OAAApiB,OAAA,EAAArB,KAAA6+C,aAAAn5C,mDACAwC,GAEA,IAAAyZ,EAAA3hB,KAAA6+C,aAAA/3C,IAAAoB,GACA,OAAAyZ,GAAA,EAAA3hB,KAAAyjB,OAAA9B,GAAA,wCAEA,OAAA3hB,KAAAyjB,8CACA,OAAAzjB,KAAAyjB,OAAApiB,8CACA,OAAArB,KAAA2+C,2CAMA3+C,KAAAk/C,aACAl/C,KAAAm/C,+CAKA,OAAAn/C,KAAA24B,gBAAA,GAAA34B,KAAAo/C,gBAAA,4CAKA,GAAAp/C,KAAAujB,OAAAliB,QAAA,SACAiK,KAAA,EACAC,KAAA,EACA8zC,KAAA,EACAC,KAAA,EACA9zC,MAAA,EACAC,OAAA,GAGA,IAAA8zC,EAAAC,OAAAC,UACAC,EAAAF,OAAAC,UACAE,EAAAH,OAAAI,UACAC,EAAAL,OAAAI,UAEA17B,EAAA,EAfAnV,GAAA,EAAAC,GAAA,EAAAC,OAAA3N,EAAA,IAgBA,QAAA4N,EAAAC,EAAAnP,KAAAujB,OAAAnW,OAAAC,cAAA0B,GAAAG,EAAAC,EAAA7B,QAAAC,MAAAwB,GAAA,EACA,KADAxI,EACA2I,EAAAnP,MACAsI,EAAA9B,EAAA8B,EACAC,EAAA/B,EAAA+B,EACAisB,EAAAhuB,EAAA4d,cACAoQ,EAAArQ,MAAAqQ,GAEAgrB,EAAAz5C,KAAAC,IAAAw5C,EAAAl3C,GACAs3C,EAAA75C,KAAAuM,IAAAstC,EAAAt3C,GAEAq3C,EAAA55C,KAAAC,IAAA25C,EAAAp3C,GACAu3C,EAAA/5C,KAAAuM,IAAAwtC,EAAAv3C,IA3BA,MAAAsF,GAAAoB,GAAA,EAAAC,EAAArB,EAAA,YAAAmB,GAAA,MAAAI,EAAAtB,QAAAsB,EAAAtB,SAAA,WAAAmB,EAAA,MAAAC,GA8BAswC,GAAAr7B,EACAw7B,GAAAx7B,EACAy7B,GAAAz7B,EACA27B,GAAA37B,EAEA,IAAA47B,EAAAN,OAAAC,UACAM,EAAAP,OAAAC,UACAO,EAAAR,OAAAI,UACAK,EAAAT,OAAAI,UAEAM,EAAA,CAAA73C,EAAA,EAAAC,EAAA,GACA63C,EAAA,CAAA93C,EAAA,EAAAC,EAAA,GACA83C,EAAA,CAAA/3C,EAAA,EAAAC,EAAA,GA1CA8T,GAAA,EAAAC,GAAA,EAAAC,OAAAhb,EAAA,IA2CA,QAAAib,EAAAC,EAAAxc,KAAAyjB,OAAArW,OAAAC,cAAA+O,GAAAG,EAAAC,EAAAlP,QAAAC,MAAA6O,GAAA,EACA,KADAhV,EACAmV,EAAAxc,MAEAqH,EAAAi5C,cAAAH,GACA94C,EAAAwT,YAAAulC,GACA/4C,EAAAsT,eAAA0lC,GAEA,IAAAE,EAAAJ,EAAA73C,EACAk4C,EAAAL,EAAA53C,EACAk4C,EAAAL,EAAA93C,EACAo4C,EAAAN,EAAA73C,EACAuS,EAAAulC,EAAA/3C,EACAyS,EAAAslC,EAAA93C,EAEAw3C,EAAAh6C,KAAAC,IAAA+5C,EAAAQ,EAAAE,EAAA3lC,GACAmlC,EAAAl6C,KAAAuM,IAAA2tC,EAAAM,EAAAE,EAAA3lC,GAEAklC,EAAAj6C,KAAAC,IAAAg6C,EAAAQ,EAAAE,EAAA3lC,GACAmlC,EAAAn6C,KAAAuM,IAAA4tC,EAAAM,EAAAE,EAAA3lC,IA7DA,MAAAlN,GAAAyO,GAAA,EAAAC,EAAA1O,EAAA,YAAAwO,GAAA,MAAAI,EAAA3O,QAAA2O,EAAA3O,SAAA,WAAAwO,EAAA,MAAAC,GAgEA,IAAAvX,EAAA,CACAuG,KAAAxF,KAAAC,IAAAw5C,EAAAO,GACAv0C,KAAAzF,KAAAC,IAAA25C,EAAAK,GACAV,KAAAv5C,KAAAuM,IAAAstC,EAAAK,GACAV,KAAAx5C,KAAAuM,IAAAwtC,EAAAI,GACAz0C,MAAA,EACAC,OAAA,GAIA,OAFA1G,EAAAyG,MAAAzG,EAAAs6C,KAAAt6C,EAAAuG,KACAvG,EAAA0G,OAAA1G,EAAAu6C,KAAAv6C,EAAAwG,KACAxG,wCAMA,IADA2O,IACAtS,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GACAs/C,EAAA,GADA/jC,GAAA,EAAAC,GAAA,EAAAC,OAAAvb,EAAA,IAEA,QAAAwb,EAAAC,EAAA/c,KAAAujB,OAAAnW,OAAAC,cAAAsP,GAAAG,EAAAC,EAAAzP,QAAAC,MAAAoP,GAAA,EACA,CACA+jC,GADA5jC,EAAA/c,MACAiyB,cAAAte,GAAA,KAJA,MAAA9F,GAAAgP,GAAA,EAAAC,EAAAjP,EAAA,YAAA+O,GAAA,MAAAI,EAAAlP,QAAAkP,EAAAlP,SAAA,WAAA+O,EAAA,MAAAC,GAMA6jC,GAAA,IANA,IAAApzB,GAAA,EAAAC,GAAA,EAAAC,OAAAlsB,EAAA,IAOA,QAAAmsB,EAAAC,EAAA1tB,KAAAyjB,OAAArW,OAAAC,cAAAigB,GAAAG,EAAAC,EAAApgB,QAAAC,MAAA+f,GAAA,EACA,CACAozB,GADAjzB,EAAA1tB,MACAiyB,cAAAte,GAAA,KATA,MAAA9F,GAAA2f,GAAA,EAAAC,EAAA5f,EAAA,YAAA0f,GAAA,MAAAI,EAAA7f,QAAA6f,EAAA7f,SAAA,WAAA0f,EAAA,MAAAC,GAWA,OAAAvsB,OAAA69C,gDAAA,EAAA79C,CAAAy/C,uJAIArC,sCAAe38C,oBAAA,6jBAjPf28C,8uECGAsC,kDAEA,SAAAA,kBAAAjlC,GACA,IAAA5W,EAAA,OAAAJ,gBAAA1E,KAAA2gD,oBACA77C,EAAA0K,2BAAAxP,KAAAyP,gBAAAkxC,mBAAAjxC,KAAA1P,KAAA0b,KAEAklC,YAAA,KAEA97C,EAAA6b,gBAAA,KAGA7b,EAAAoiB,cAAA,qBAEApiB,EAAAoiB,cAAA,sBACApiB,EAAAoiB,cAAA,yBACApiB,EAAAoiB,cAAA,0BAEApiB,EAAAoiB,cAAA,qBAEApiB,EAAAoiB,cAAA,oBAEApiB,EAAAoiB,cAAA,oBACApiB,EAAAoiB,cAAA,uBACApiB,EAAAoiB,cAAA,wBAEApiB,EAAAoiB,cAAA,oBACApiB,EAAAoiB,cAAA,uBACApiB,EAAAoiB,cAAA,wBAxBApiB,4HA2BA4W,GAEA1b,KAAAkpB,QAAAxN,qCAGAA,GAEA1b,KAAA2gB,gBAAAjF,EAAAnH,oGAUA,OAAAvU,KAAAkpB,QAAA23B,gEAKA,OAAA7gD,KAAAkpB,QAAAxJ,6DAKA,OAAA1f,KAAA0f,oBAAAE,wDAGAkhC,GAEA9gD,KAAA0f,oBAAAC,eAAAmhC,4CAKA,OAAA9gD,KAAA4gD,aAAAx/B,KAAApP,SAAA,wDAGA4uC,IAEAA,KAAAv/C,QAAA,EAEArB,KAAA4gD,YAAA,KAIA5gD,KAAA4gD,cAGA,IAAA7gD,EAAAC,KAAA6hC,iBACAvpB,EAAAhB,SAAA2rB,eAAA,gBACAyd,EAAApoC,EAAAlK,UACAkY,EAAAo6B,EAAAlvC,QAAA,KAGA8G,EAAAlK,WAFA,IAAAkY,EAEAvmB,EAAA,MAAA2gD,EAAA/uC,UAAA2U,EAAA,GAAAmQ,OAIA12B,EAAA,MAAA2gD,wCAIAE,GAEA,IAAAzgC,EAAAngB,KAAA4gD,YACA5gD,KAAA+gD,eAAAH,GAGA5gD,KAAA+nB,KAAA,oBAAA/nB,KAAA0f,oBAAAkhC,EAAAzgC,2CAGA2gC,GAEA,IAAA3gC,EAAAngB,KAAA0f,oBAAAE,iBACAO,GAAA2gC,IAEA9gD,KAAA2f,eAAAmhC,GAGA9gD,KAAA+nB,KAAA,oBAAA/nB,KAAA0f,oBAAAohC,EAAA3gC,qDAIAzY,EAAAa,GACA,IAAAuE,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IACA,QAAA2L,EAAAC,EAAAxF,EAAAE,WAAAwF,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADAvG,EACA0G,EAAAlN,MACA,GAAAwG,EAAAiC,gBAAAD,EAEA,OAAAhC,GALA,MAAAqH,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GASA,sDAGAtF,EAAA2vB,GAKA,IAAA9wB,EAHAmB,EAAAhC,QADA,IAgBA0B,EAAAoC,EAAAC,EAAA4F,EAhBAZ,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IAKA,QAAAsN,EAAAC,EAAAwoB,EAAAna,YAAA9P,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA,KADAF,EACAK,EAAA7O,OACAwG,EAAAmB,EAAAlB,WAAA,MACAC,aAAA8H,GACA8oB,EAAAhV,aAAA9T,IAEAhI,EAAAG,eAAA,IAXA,MAAAkH,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,GAAA,IAAAI,GAAA,EAAAC,GAAA,EAAAC,OAAA3N,EAAA,IAiBA,QAAA4N,EAAAC,EAAAkoB,EAAAgU,iBAAAj+B,OAAAC,cAAA0B,GAAAG,EAAAC,EAAA7B,QAAAC,MAAAwB,GAAA,EACA,KADAK,EACAF,EAAAnP,MACAyJ,EAAAxJ,KAAAkxC,yBAAAxpC,EAAA0H,EAAA,IACAC,EAAAD,EAAA,GACA3F,EAAAzJ,KAAAkxC,yBAAAxpC,EAAA0H,EAAA,KACAhI,EAAAM,EAAAL,WAAAmC,EAAAC,IACAlC,aAAA8H,GAEAjI,GADAM,EAAAkwC,WAAAxwC,IACAM,EAAAmwC,WAAAzwC,IAzBA,MAAAwG,GAAAoB,GAAA,EAAAC,EAAArB,EAAA,YAAAmB,GAAA,MAAAI,EAAAtB,QAAAsB,EAAAtB,SAAA,WAAAmB,EAAA,MAAAC,GA6BA,IAAA0hB,EAAA0G,EAAA3V,gBACAha,EAAAX,aAAA/G,KAAAkxC,yBAAAxpC,EAAAipB,IAGAqwB,8DAAA,EAAA7E,YAAAz0C,4CAGAo5C,GAEA,IAAAG,EAAAjhD,KAAA4f,iBAGA,GAAAqhC,IAAAH,EAEA,UAAAA,GAAA,OAAAG,EACA,CACAjhD,KAAA+nB,KAAA,wBAAA/nB,KAAA0f,oBAAAohC,EAAAG,GAEA,IAAAl8C,EAAA9D,OAAAigD,wDAAA,EAAAjgD,CAAAjB,KAAA0f,oBAAA4X,aAAA,IAAA6pB,4CAAA,GACAnhD,KAAAohD,kBAAAphD,KAAA2gB,gBAAA0Z,WAAAt1B,GACA/E,KAAA2f,eAAAmhC,GAEA9gD,KAAA+nB,KAAA,qBAAA/nB,KAAA0f,oBAAAohC,EAAAG,GACAjhD,KAAA+nB,KAAA,yBAAA/nB,KAAA0f,oBAAAohC,EAAAG,OAEA,WAAAH,GAAA,OAAAG,EAMA,UAAA/gD,MAAA,8BAAA+gD,EAAA,SAAAH,EAAA,sBAJA9gD,KAAAwoC,gBAAAsY,0CAUA,OAAA9gD,KAAA0f,oBAAAoQ,mDAGAvjB,GAEAvM,KAAA0f,oBAAA2hC,gBAAA90C,GAEAvM,KAAA+nB,KAAA,mBAAA/nB,KAAA0f,oBAAAnT,wCAGAA,GAEA,IAAAnF,EAAA,KACAua,EAAA,KACA5c,EAAA,KACAyb,EAAA,GAEAxgB,KAAA+nB,KAAA,sBAAA/nB,KAAA0f,oBAAAnT,GAGA,IADA,IAAA7E,EAAA1H,KAAA2gB,gBAAA0Z,WACAh0B,EAAAqB,EAAAI,WAAAzG,OAAA,EAAAgF,GAAA,IAAAA,GAGAsb,GADAva,EAAAM,EAAAI,WAAAzB,IACAsD,eAAA6H,QAAAjF,KACA,KAEAxH,EAAAqC,EAAAuC,eAAAgI,UAAA,EAAAgQ,GAAAva,EAAAuC,eAAAgI,UAAAgQ,EAAA,IACAtgB,OAAA,EAEA+F,EAAAG,aAAAxC,IAIAqC,EAAAG,aAAA,IACAG,EAAAmwC,WAAAzwC,IAEAoZ,EAAA3T,KAAAzF,IAIAoZ,EAAAnf,QAAA,GAEArB,KAAA0f,oBAAA4hC,mBAAA/0C,GAGAvM,KAAA+nB,KAAA,mBAAA/nB,KAAA0f,oBAAAnT,EAAAiU,GACAxgB,KAAA+nB,KAAA,uBAAA/nB,KAAA0f,oBAAAnT,EAAAiU,wCAGA+gC,EAAAC,GAEA,IAAAp6C,EAAA,KAEAoZ,EAAA,GAEAxgB,KAAA+nB,KAAA,sBAAA/nB,KAAA0f,oBAAA8hC,EAAAD,GAIA,IAFA,IAAA75C,EAAA1H,KAAA2gB,gBAAA0Z,WACAh5B,EAAAqG,EAAAI,WAAAzG,OACAgF,EAAA,EAAAA,EAAAhF,IAAAgF,EACA,CAEA,IAAAo7C,GADAr6C,EAAAM,EAAAI,WAAAzB,IACAsD,eAAAyO,QAAAmpC,EAAAC,GACAC,GAAAr6C,EAAAuC,gBAEA6W,EAAA3T,KAAAzF,GAEAA,EAAAG,aAAAk6C,GAGAjhC,EAAAnf,QAAA,GAEArB,KAAA0f,oBAAAgiC,mBAAAH,EAAAC,GAGAxhD,KAAA+nB,KAAA,mBAAA/nB,KAAA0f,oBAAA8hC,EAAAD,EAAA/gC,GACAxgB,KAAA+nB,KAAA,uBAAA/nB,KAAA0f,oBAAA8hC,EAAAD,EAAA/gC,8CAKA,OAAAxgB,KAAA0f,oBAAAiiC,gDAGAp1C,GAEA,OAAAvM,KAAA0f,oBAAAkiC,eAAAr1C,mJA1RAs1C,iFAAA,GA6RAC,+CAAA,EAAA/6B,MAAA45B,gCAEAA,6CAAej/C,oBAAA,6mBA/Rfi/C,q4BCPAoB,2CAEA,SAAAA,gCAAArmC,GACAhX,gBAAA1E,KAAA+hD,iCACA/hD,KAAAkpB,QAAAxN,wFAKAA,oCACAA,mCACAA,wCAIA,OAAA1b,KAAAkpB,iLAIA64B,2DAAergD,oBAAA,6nBAnBfqgD,gdCGA,SAAAC,EAAA1gC,GACA,IADA7b,EACArE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAIA,MAAAkgB,EAAApE,YAAA7b,OAAA,CAEA,IAAA0D,EAAAU,GAAA,IAAAw8C,EAAA,EAGAtxB,GADArP,EAAAwO,cACAxO,EAAAI,iBAGAM,EAAAV,EAAA5E,oBAAAiU,GAIAuxB,GAHAC,EAAAp9C,EAAAuc,EAAAU,GAGAV,EAAA8gC,eAfAt1C,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAgBA,QAAA2L,EAAAC,EAAAg1C,EAAA90C,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,OAAAu1C,EAAAp1C,EAAAlN,MACAW,QAAAC,IAAA,kBAAA2hD,EAAAD,IACA,GAAAA,EAAAhhD,QACAkhD,EAAAF,EAAA/gC,EAAAvc,IAnBA,MAAA6I,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAuBA,IAAAw1C,EAAAz9C,EAAAsoB,SAAA,MAIAo1B,EAAA19C,EAAA+qB,cA3BArhB,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IA4BA,QAAAsN,EAAAC,EAAA9J,EAAAmY,YAAA9P,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA,KADAF,EACAK,EAAA7O,MAAAgP,GAAA,EAAAC,GAAA,EAAAC,OAAA3N,EAAA,IACA,QAAA4N,EAAAC,EAAAszC,EAAAr1C,OAAAC,cAAA0B,GAAAG,EAAAC,EAAA7B,QAAAC,MAAAwB,GAAA,EACA,KADAxC,EACA2C,EAAAnP,MAEAgF,EAAA+mC,aAAAv9B,EAAAhC,KAGAxH,EAAA29C,cAAAn0C,EAAAi0C,EAAAj2C,GAEAgC,IAAAi0C,IAAA,IATA,MAAA50C,GAAAoB,GAAA,EAAAC,EAAArB,EAAA,YAAAmB,GAAA,MAAAI,EAAAtB,QAAAsB,EAAAtB,SAAA,WAAAmB,EAAA,MAAAC,KA7BA,MAAArB,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,GA2CA,OAAA5J,GAOA,SAAAw9C,EAAAF,EAAA/gC,EAAAqhC,GACA,IAAA59C,EAAA,GACA8qB,EAAAvO,EAAAwO,cACAvhB,EAAA+zC,EAAAD,GAEAM,EAAAC,SAAAr0C,IACAxJ,EAAA8H,KAAAs1C,EAAAQ,EAAArhC,EAAA+gC,IAGA,IAAAQ,EAAA,GACAC,EAAA,KAVA1mC,GAAA,EAAAC,GAAA,EAAAC,OAAAhb,EAAA,IAYA,QAAAib,EAAAC,EAAAqT,EAAAziB,OAAAC,cAAA+O,GAAAG,EAAAC,EAAAlP,QAAAC,MAAA6O,GAAA,EACA,KADA7P,EACAgQ,EAAAxc,MAAA4c,GAAA,EAAAC,GAAA,EAAAC,OAAAvb,EAAA,IAEA,QAAAwb,EAAAC,EAAAslC,EAAAj1C,OAAAC,cAAAsP,GAAAG,EAAAC,EAAAzP,QAAAC,MAAAoP,GAAA,EACA,KADAnK,EACAsK,EAAA/c,MACAuhB,EAAAa,qBAAA3P,EAAAjG,EAAAs2C,IAJA,MAAAj1C,GAAAgP,GAAA,EAAAC,EAAAjP,EAAA,YAAA+O,GAAA,MAAAI,EAAAlP,QAAAkP,EAAAlP,SAAA,WAAA+O,EAAA,MAAAC,GAQAgmC,EAAAxhD,OAAA,IAEAyhD,EAAAR,EAAAO,GAGAF,EAAAC,SAAAE,KAEAA,EAAAX,EAAAQ,EAAArhC,EAAAuhC,GACA99C,EAAA8H,KAAAi2C,IAIAH,EAAAD,cAAAn0C,EAAAu0C,EAAAv2C,IAIAs2C,EAAAxhD,OAAA,GArCA,MAAAuM,GAAAyO,GAAA,EAAAC,EAAA1O,EAAA,YAAAwO,GAAA,MAAAI,EAAA3O,QAAA2O,EAAA3O,SAAA,WAAAwO,EAAA,MAAAC,GAwCA,OAAAvX,EAGA,SAAAg+C,EAAAx0C,EAAA+S,EAAAqhC,GAEA,IAAA59C,EAAA,GACA8qB,EAAAvO,EAAAwO,cAEA+yB,EAAA,GACA5lC,EAAA,KACA6lC,EAAA,KANAx1B,GAAA,EAAAC,GAAA,EAAAC,OAAAlsB,EAAA,IAQA,QAAAmsB,EAAAC,EAAAmC,EAAAziB,OAAAC,cAAAigB,GAAAG,EAAAC,EAAApgB,QAAAC,MAAA+f,GAAA,EACA,KADA/gB,EACAkhB,EAAA1tB,MAEAkd,EAAA+lC,EAAAz0C,GAFA,IAAAsf,GAAA,EAAAC,GAAA,EAAAC,OAAAzsB,EAAA,IAGA,QAAA0sB,EAAAC,EAAAhR,EAAA7P,OAAAC,cAAAwgB,GAAAG,EAAAC,EAAA3gB,QAAAC,MAAAsgB,GAAA,EACA,KADArb,EACAwb,EAAAjuB,MACAuhB,EAAAa,qBAAA3P,EAAAjG,EAAAs2C,IALA,MAAAj1C,GAAAkgB,GAAA,EAAAC,EAAAngB,EAAA,YAAAigB,GAAA,MAAAI,EAAApgB,QAAAogB,EAAApgB,SAAA,WAAAigB,EAAA,MAAAC,GASA80B,EAAAxhD,OAAA,IAEAyhD,EAAAR,EAAAO,GAGAF,EAAAC,SAAAE,KAEAA,EAAAX,EAAAQ,EAAArhC,EAAAuhC,GACA99C,EAAA8H,KAAAi2C,IAIAH,EAAAD,cAAAn0C,EAAAu0C,EAAAv2C,IAIAs2C,EAAAxhD,OAAA,GAlCA,MAAAuM,GAAA2f,GAAA,EAAAC,EAAA5f,EAAA,YAAA0f,GAAA,MAAAI,EAAA7f,QAAA6f,EAAA7f,SAAA,WAAA0f,EAAA,MAAAC,GAqCA,OAAAzoB,EAGA,SAAAo9C,EAAAQ,EAAArhC,EAAArE,GAEA,IAAAlY,EAAA49C,EAAAt1B,SAAAi1B,EAAArlC,IADAiR,GAAA,EAAAC,GAAA,EAAAC,OAAA9sB,EAAA,IAIA,QAAA+sB,EAAAC,EAAArR,EAAA7P,OAAAC,cAAA6gB,GAAAG,EAAAC,EAAAhhB,QAAAC,MAAA2gB,GAAA,EACA,KADA1b,EACA6b,EAAAtuB,MACA,GAAAuhB,EAAAe,aAAA7P,GACA,CACAmwC,EAAAM,cAAAl+C,GACA,QATA,MAAA6I,GAAAugB,GAAA,EAAAC,EAAAxgB,EAAA,YAAAsgB,GAAA,MAAAI,EAAAzgB,QAAAygB,EAAAzgB,SAAA,WAAAsgB,EAAA,MAAAC,GAaA,OAAArpB,EAGA,SAAAu9C,EAAArlC,GAGA,OADAA,EAAA+uB,OACA,IAAA/uB,EAAAvP,KAAA,SAGA,SAAAs1C,EAAAF,GAEA,OAAAA,EAAAnxC,UAAA,EAAAmxC,EAAAzhD,OAAA,GAAAoM,MAAA,qdAhKAu0C,mGAmDAO,+GA2CAQ,0GAyCAZ,yGAiBAG,sGAMAU,ixEC1JAE,4CAEA,SAAAA,iBAAA3zC,GACA,OAAA7K,gBAAA1E,KAAAkjD,kBAAA1zC,2BAAAxP,KAAAyP,gBAAAyzC,kBAAAxzC,KAAA1P,KACAuP,sHAOA,IAAA6E,EAAApU,KAAAuP,MAAA6E,cACA4nC,EAAA5nC,EAAAE,qBAEA5M,EADA0M,EAAAG,qBACA8lB,WAEA,OAAA1qB,2CAAAC,EAAAzB,cAAA,SAEAzG,EAAAE,WAAAosB,IAAA,SAAA7yB,EAAAkF,GAAA,OAAAsJ,2CAAAC,EAAAzB,cAAAg1C,8CAAA,GAAArjD,IAAAqB,EAAAgH,qBAAA9B,EAAAE,KAAApF,MAGAuG,EAAAI,WAAAksB,IAAA,SAAA7yB,EAAAkF,GAAA,OAAAsJ,2CAAAC,EAAAzB,cAAAi1C,8CAAA,GAAAtjD,IAAAqB,EAAAgH,qBAAA9B,EAAAe,KAAAjG,MAGAuG,EAAAM,iBAAA,MAAAg0C,EAAA/G,mBACAtlC,2CAAAC,EAAAzB,cAAAk1C,uDAAA,GAAA98C,KAAAmB,EAAAM,iBACA2H,2CAAAC,EAAAzB,cAAAk1C,uDAAA,GAAA98C,KAAAy1C,EAAA/G,sKA1BAtlC,2CAAAC,EAAAO,oBA+BA+yC,4CAAexhD,oBAAA,umBA/BfwhD,qmECHAI,wCAEA,SAAAA,aAAA/zC,GACA,OAAA7K,gBAAA1E,KAAAsjD,cAAA9zC,2BAAAxP,KAAAyP,gBAAA6zC,cAAA5zC,KAAA1P,KACAuP,8GAMA,IAAAhJ,EAAAvG,KAAAuP,MAAAhJ,KACA,OAAAoJ,2CAAAC,EAAAzB,cAAA,KAAA0B,UAAA,wBAEAF,2CAAAC,EAAAzB,cAAA,UAAA0B,UAAA,aACAgL,GAAAtU,EAAA8B,EACAyS,GAAAvU,EAAA+B,EACA4J,EAAAuB,uCAAA,EAAAzQ,YAEAmY,KAAA,UACA2b,OAAA,YAGAvwB,EAAAmC,iBACAiH,2CAAAC,EAAAzB,cAAA,UAAA0B,UAAA,mBACAgL,GAAAtU,EAAA8B,EACAyS,GAAAvU,EAAA+B,EACA4J,EAAAuB,uCAAA,EAAAtQ,kBACAgY,KAAA,OAEA2b,OAAA,YAlBA,UAqBAnnB,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,mBACAxH,EAAA9B,EAAA8B,EAAAC,EAAA/B,EAAA+B,EAAA,EACAgN,cAAA,OACAvF,MAAA,CACAwzC,WAAA,OACAC,SAAA,EAAA19C,KAAAC,IAAAD,KAAAuM,IAAA9L,EAAAiC,eAAAnH,OAAA,iBAEAoiD,WAAA,UACAl9C,EAAAiC,4JAxCAmH,2CAAAC,EAAAO,oBA8CAmzC,wCAAe5hD,oBAAA,+lBA9Cf4hD,qlECAAI,wCAEA,SAAAA,aAAAn0C,GACA,OAAA7K,gBAAA1E,KAAA0jD,cAAAl0C,2BAAAxP,KAAAyP,gBAAAi0C,cAAAh0C,KAAA1P,KACAuP,8GAKA,IAAAo0C,EAAA79C,KAAAuY,GAAA,EAEAulC,EAAA,EACAx8C,EAAApH,KAAAuP,MAAAnI,KACA8iB,EAAA9iB,EAAAi5C,gBACAzG,EAAAxyC,EAAAwT,cACAH,EAAArT,EAAAsT,iBAGAmpC,GAFAz8C,EAAAuC,eACAvC,EAAA4B,eACA5B,EAAAi0C,wBACAyI,EAAA18C,EAAA28C,mBACAC,EAAAH,EAAAv7C,EAAA,EAGA27C,EAAA,KACA,GAAA78C,EAAA6c,cAOA,CAGA,IAAAigC,EAAAzpC,EAAApS,EAAAw7C,EAAAx7C,EACA87C,EAAA1pC,EAAAnS,EAAAu7C,EAAAv7C,EACAs7C,EAAA99C,KAAA8rB,MAAAsyB,EAAAtK,EAAAvxC,EAAA87C,EAAAvK,EAAAtxC,GAAAxC,KAAAuY,GACA4lC,EAAA,KAAAC,EAAA,IAAAC,EAAA,IAAAvK,EAAAvxC,EAAA,IAAAuxC,EAAAtxC,OAVAs7C,EAAA99C,KAAA8rB,MAAA1H,EAAA7hB,EAAAuxC,EAAAvxC,EAAA6hB,EAAA5hB,EAAAsxC,EAAAtxC,GAAAxC,KAAAuY,GACA4lC,EAAA,KAAArK,EAAAvxC,EAAA,IAAAuxC,EAAAtxC,EAaA,IAAAuvB,EAAAzwB,EAAA0H,0BAGA+L,EAAAJ,KAAApS,GAAA,EACAyS,EAAAL,KAAAnS,GAAA,EAEA,OAAAqH,2CAAAC,EAAAzB,cAAA,KAAA0B,UAAA,uCAEAF,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,aAAAzH,GAAA,QAAAhB,EAAAe,oBACAmK,EACA,KAAA4X,EAAA7hB,EAAA,IAAA6hB,EAAA5hB,EAAA,IACA27C,EAAA,OAEArK,EAAAvxC,EAAAoL,uCAAA,EAAAlQ,YAAAuC,KAAAwY,IAAAslC,EAAAD,IAAA,KACA/J,EAAAtxC,EAAAmL,uCAAA,EAAAlQ,YAAAuC,KAAAyY,IAAAqlC,EAAAD,IAAA,MACA/J,EAAAvxC,EAAA,IAAAuxC,EAAAtxC,EAAA,OAEAsxC,EAAAvxC,EAAAoL,uCAAA,EAAAlQ,YAAAuC,KAAAwY,IAAAslC,EAAAD,IAAA,KACA/J,EAAAtxC,EAAAmL,uCAAA,EAAAlQ,YAAAuC,KAAAyY,IAAAqlC,EAAAD,IACAxoC,KAAA,OAEA2b,OAAA,YAGAnnB,2CAAAC,EAAAzB,cAAA,KAAAi2C,UAAA,aAAAvpC,EAAA,IAAAC,EAAA,gBAAAgpC,EAAAh+C,KAAAuY,GAAA,KACAwZ,EAAAx2B,OAAA,GAAAw2B,EAAA7D,IAAA,SAAAqwB,EAAAh+C,GACA,IAAAi+C,GAAA,IAAAj+C,EAAA,GAGA,OAAAsJ,2CAAAC,EAAAzB,cAAA,QACArO,IAAAukD,EAAA,IAAAh+C,EACAwJ,UAAA,mBACAu0C,UAAA,gBAAAE,EAAA,KAAAN,EAAA,qBACAO,kBAAA,UACAjvC,cAAA,OACAvF,MAAA,CAAAwzC,WAAA,QACAE,WAAA,UACAY,kJA9EA10C,2CAAAC,EAAAO,oBAsFAuzC,wCAAehiD,oBAAA,+lBAtFfgiD,quECCAc,mDAEA,SAAAA,wBAAAj1C,GACA,OAAA7K,gBAAA1E,KAAAwkD,yBAAAh1C,2BAAAxP,KAAAyP,gBAAA+0C,yBAAA90C,KAAA1P,KACAuP,oIAOAvP,KAAAuP,MAAAqF,OAAA,IACAR,EAAApU,KAAAuP,MAAA6E,cAEAuM,EAAAvM,EAAAG,qBACAynC,EAAA5nC,EAAAE,qBACAuK,EAAAzK,EAAAI,uBACAy5B,EAAA75B,EAAA44B,oBAEAtlC,EAAAiZ,EAAA0Z,WAGAib,GAFA0G,EAAAliB,kBAAAnR,cACA9J,EAAAa,oBACAs8B,EAAApG,aACAuD,EAAA7D,EAAAmP,kBAEA,OAAA90C,2CAAAC,EAAAzB,cAAA,SAEAmnC,EAAAW,gBACAX,EAAA+B,aAAA3vC,GAAAssB,IAAA,SAAA7yB,EAAAkF,GAAA,OACAsJ,2CAAAC,EAAAzB,cAAAu2C,6EAAA,GAAA5kD,IAAAqB,EAAAgH,oBAAA0H,UAAAmsC,EAAArhB,cAAA,qCAAA9gB,OAAA1Y,EAAA+M,KAAA,WAGAyB,2CAAAC,EAAAzB,cAAAw2C,gFAAA,GAAAnL,QAAAL,EAAAK,QACAJ,MAAAD,EAAAC,MAAAC,MAAAF,EAAAE,MACAC,IAAAH,EAAAG,IAAAC,IAAAJ,EAAAI,MAGA16B,EAAAa,oBAAAyuB,oBAAAjX,aAAAlD,IAAA,SAAA7yB,EAAAkF,GAAA,OACAsJ,2CAAAC,EAAAzB,cAAAu2C,6EAAA,GAAA5kD,IAAAqB,EAAAgH,oBAAA0H,UAAA,8BAAAgK,OAAA1Y,EAAA+M,KAAA,OAAA8M,OAAA,QAGA6D,EAAAa,oBAAAyuB,oBAAAhX,aAAAnD,IAAA,SAAA7yB,EAAAkF,GAAA,OACAsJ,2CAAAC,EAAAzB,cAAAu2C,6EAAA,GAAA5kD,IAAAqB,EAAAgH,oBAAA0H,UAAA,8BAAAgK,OAAA1Y,EAAA+M,KAAA,OAAA8M,OAAA,QAGA6D,EAAAa,oBAAAyuB,oBAAAnX,WAAAhD,IAAA,SAAA7yB,EAAAkF,GAAA,OACAsJ,2CAAAC,EAAAzB,cAAAu2C,6EAAA,GAAA5kD,IAAAqB,EAAAgH,oBAAA0H,UAAA,4BAAAgK,OAAA1Y,EAAA+M,KAAA,OAAA8M,OAAA,QAGA6D,EAAAa,oBAAAyuB,oBAAAlX,WAAAjD,IAAA,SAAA7yB,EAAAkF,GAAA,OACAsJ,2CAAAC,EAAAzB,cAAAu2C,6EAAA,GAAA5kD,IAAAqB,EAAAgH,oBAAA0H,UAAA,4BAAAgK,OAAA1Y,EAAA+M,KAAA,OAAA8M,OAAA,QAGAizB,EAAA3uB,SAAAkB,QAAAwT,IAAA,SAAA7yB,EAAAkF,GACA,OAAAsJ,2CAAAC,EAAAzB,cAAAu2C,6EAAA,GAAA5kD,IAAAqB,EAAAgH,oBAAA0H,UAAA,2BAAAgK,OAAA1Y,EAAA+M,KAAA,OAAA8M,OAAA,QAIAs6B,EAAAK,cACAL,EAAAY,uBACAvmC,2CAAAC,EAAAzB,cAAAu2C,6EAAA,GAAA70C,UAAAmsC,EAAArhB,cAAA,qCAAA9gB,OAAAy7B,EAAAz7B,OAAA3L,KAAAonC,EAAAQ,oKA5DAnmC,2CAAAC,EAAAO,oBAiEAq0C,mDAAe9iD,oBAAA,qnBAjEf8iD,ioECDAI,gDAEA,SAAAA,qBAAAr1C,GACA,OAAA7K,gBAAA1E,KAAA4kD,sBAAAp1C,2BAAAxP,KAAAyP,gBAAAm1C,sBAAAl1C,KAAA1P,KACAuP,8HAMA,IAAAiqC,EAAAx5C,KAAAuP,MAAAiqC,QACAJ,EAAAp5C,KAAAuP,MAAA6pC,OAAA,EACAC,EAAAr5C,KAAAuP,MAAA8pC,OAAA,EACAC,EAAAt5C,KAAAuP,MAAA+pC,KAAAF,EAAA,EACAG,EAAAv5C,KAAAuP,MAAAgqC,KAAAF,EAAA,EAEA1nB,EAAA2nB,EAAAF,EACA1nB,EAAA6nB,EAAAF,EAEA,OAAA1pC,2CAAAC,EAAAzB,cAAA,KAAA0B,UAAA,6BACA2pC,GACA7pC,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,kBACAxH,EAAAspB,EAAA,EAAA2nB,EAAAF,EACA9wC,EAAAopB,EAAA,EAAA6nB,EAAAF,EACA7tC,MAAAmmB,EAAA,GAAAA,IACAlmB,OAAAimB,EAAA,GAAAA,0JAzBA/hB,2CAAAC,EAAAO,oBA8BAy0C,gDAAeljD,oBAAA,2nBA9BfkjD,8yECEAvwC,4CAEA,SAAAA,iBAAA9E,GACA,OAAA7K,gBAAA1E,KAAAqU,kBAAA7E,2BAAAxP,KAAAyP,gBAAA4E,kBAAA3E,KAAA1P,KACAuP,sHAOA,IAAAqF,EAAA5U,KAAAuP,MAAAqF,OACAR,EAAApU,KAAAuP,MAAA6E,cACAyX,EAAA7rB,KAAAuP,MAAAsc,OAEAmwB,EAAA5nC,EAAAE,qBACAqM,EAAAvM,EAAAG,qBACAsK,EAAAzK,EAAAI,uBACAy5B,EAAA75B,EAAA44B,oBAEA6X,EAAAzwC,EAAA0wC,iBAEA,OAAAn1C,2CAAAC,EAAAzB,cAAA,YACA02C,GACAl1C,2CAAAC,EAAAzB,cAAA02C,EAAA,CAAA/wC,IAAA,SAAAY,GAAA,OAAAiM,EAAAs7B,mBAAAvnC,GACAsnC,kBACAr7B,kBACA9B,oBACAgN,WAEAoiB,EAAAmI,oBACAzmC,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,qBAAAE,MAAA,CAAAvE,MAAA,SACAmE,2CAAAC,EAAAzB,cAAA42C,0CAAA,GAAA9W,SAAAttB,qBAGAhR,2CAAAC,EAAAzB,cAAA,YACAwB,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,qBAAAE,MAAA,CAAAvE,MAAA,SACAmE,2CAAAC,EAAAzB,cAAA62C,4DAAA,GAAAhJ,kBAAAr7B,qBAEAhR,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,uBACAF,2CAAAC,EAAAzB,cAAA82C,0DAAA,GAAAjJ,kBAAAl9B,SAAAlK,sJAxCAjF,2CAAAC,EAAAO,oBA+CAkE,4CAAe3S,oBAAA,umBA/Cf2S,kyECDA6wC,oCAEA,SAAAA,SAAA31C,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAAklD,WACApgD,EAAA0K,2BAAAxP,KAAAyP,gBAAAy1C,UAAAx1C,KAAA1P,KAAAuP,KAEAhB,MAAA,CACA42C,aAAA,GAJArgD,wGAQA3D,GAEAnB,KAAAuO,MAAA42C,cACAnlD,KAAAuP,MAAAysC,gBAAAoJ,cAAA,GAGAplD,KAAAuP,MAAAuP,SAAAoB,SAAA,SAAAC,EAAA5Q,GACA,OAAA2E,KAAAmxC,0CAAA,EAAAtwC,mDAIA5T,GAEAnB,KAAAuO,MAAA42C,cACAnlD,KAAAuP,MAAAysC,gBAAAoJ,cAAA,GAGAplD,KAAAuP,MAAAuP,SAAAoB,SAAA,SAAAC,EAAA5Q,GACA,OAAA2E,KAAAmxC,0CAAA,EAAApxC,gDAIA9S,GACA,IAAAgT,EAAAnU,KACAmB,EAAA+kB,kBACA/kB,EAAA8kB,iBAEAjmB,KAAAkgB,SAAA,SAAAC,EAAA5Q,GACA,IAAAxK,GAAAob,EAAAglC,YAQA,OAPAhxC,EAAA5E,MAAAysC,gBAAAoJ,aAAArgD,GAGAoP,EAAA5E,MAAAuP,SAAAoB,SAAA,SAAAC,EAAA5Q,GACA,OAAA2E,KAAAnP,EAAAsgD,0CAAA,EAAAtwC,UAAAswC,0CAAA,EAAApxC,UAGA,CACAkxC,YAAApgD,sCAOA,IAAAi3C,EAAAh8C,KAAAuP,MAAAysC,gBACAvzB,EAAAuzB,EAAAliB,kBAEA,OAAAnqB,2CAAAC,EAAAzB,cAAA,OAAA/F,GAAA,YACAyH,WAAAmsC,EAAArhB,cAAA,eACAlS,EAAA68B,gBAAA78B,EAAA4vB,aAAA,aACA7sC,MAAA,KAAAC,OAAA,KACAqhB,QAAA,YACAD,MAAA,6BACA04B,aAAAvlD,KAAAwlD,aAAArlD,KAAAH,MACAylD,aAAAzlD,KAAA0lD,aAAAvlD,KAAAH,MACAiQ,QAAAjQ,KAAA2lD,aAAAxlD,KAAAH,OACA2P,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,icAnEA3C,2CAAAC,EAAAO,oBA2EA+0C,oCAAexjD,oBAAA,+kBA3EfwjD,mmFCKA,IAAAU,uBAAA,EACAC,mBAAA,EAEAC,oCAEA,SAAAA,SAAAv2C,GACA,OAAA7K,gBAAA1E,KAAA8lD,UAAAt2C,2BAAAxP,KAAAyP,gBAAAq2C,UAAAp2C,KAAA1P,KACAuP,sGAKAvP,KAAAuP,MAAAoR,gBAAA,IACAstB,EAAAjuC,KAAAuP,MAAA0+B,OACAI,EAAAruC,KAAAuP,MAAA0+B,OAAAlvB,UACAO,EAAAtf,KAAAuP,MAAA0+B,OAAA3uB,SACAsxB,EAAAvC,EAAAqC,kBACAqV,EAAAzmC,EAAA0mC,4BAEA,OAAAr2C,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,uBACAF,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,oCAEA+gC,GAAAmV,GAAA,GACAnV,EAAA7wC,MAAA0N,MAAA,IAAAumB,IAAA,SAAA7yB,EAAAkF,GACA,IAAA4/C,EAAAF,EAAA1/C,EACA,KAAA4/C,EAAAJ,mBAAAD,wBACA,OAAAK,EAAAL,uBAEAj2C,2CAAAC,EAAAzB,cAAA,QAAArO,IAAAqB,EAAA,IAAAkF,EAAAwJ,UAAA,oCAEAF,2CAAAC,EAAAzB,cAAA,QAAArO,IAAAqB,EAAA,IAAAkF,EACAwJ,UAAA,wBACAk2C,GAAA1/C,EAAA,eACAlF,MAKAwO,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,qBAEAF,2CAAAC,EAAAzB,cAAAmlC,iDAAA,GAAArjC,QAAA,SAAA9O,GACAme,EAAA4mC,YACAl2C,SAAAsP,EAAA6mC,aACAx2C,2CAAAC,EAAAzB,cAAAi4C,+CAAA,SAGAz2C,2CAAAC,EAAAzB,cAAAmlC,iDAAA,GAAArjC,QAAA,SAAA9O,GACAme,EAAA+wB,WACArgC,UAAAsP,EAAA6mC,aACAx2C,2CAAAC,EAAAzB,cAAAk4C,gDAAA,SAGA12C,2CAAAC,EAAAzB,cAAAmlC,iDAAA,GAAArjC,QAAA,SAAA9O,GACAme,EAAAgnC,kBAKAt2C,UAAAsP,EAAAinC,eAAAjnC,EAAAknC,cACA72C,2CAAAC,EAAAzB,cAAAs4C,+CAAA,SAGA92C,2CAAAC,EAAAzB,cAAAmlC,iDAAA,GAAArjC,QAAA,SAAA9O,GACAme,EAAA8wB,cAKApgC,UAAAi+B,EAAA3uB,SAAA4wB,eAAA5wB,EAAAknC,cACA72C,2CAAAC,EAAAzB,cAAAu4C,+CAAA,SAGA/2C,2CAAAC,EAAAzB,cAAAmlC,iDAAA,GAAArjC,QAAA,SAAA9O,GACA8sC,EAAAG,mBAAA,KAEAz+B,2CAAAC,EAAAzB,cAAAw4C,+CAAA,SAGAh3C,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,+JA3EAF,2CAAAC,EAAAO,oBAiFA21C,oCAAepkD,oBAAA,ulBApFfkkD,qJACAC,6IAEAC,ugECXAc,oCAEA,SAAAA,SAAAr3C,GACA,OAAA7K,gBAAA1E,KAAA4mD,UAAAp3C,2BAAAxP,KAAAyP,gBAAAm3C,UAAAl3C,KAAA1P,KACAuP,sGAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,YAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,kBACA3C,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,gBAAA6I,KAAA,iJAXAxL,2CAAAC,EAAAO,oBAgBAy2C,oCAAellD,oBAAA,yjBAhBfklD,y+DCAAC,qCAEA,SAAAA,UAAAt3C,GACA,OAAA7K,gBAAA1E,KAAA6mD,WAAAr3C,2BAAAxP,KAAAyP,gBAAAo3C,WAAAn3C,KAAA1P,KACAuP,wGAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,aAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,oCACA3C,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,gBAAA6I,KAAA,kJAXAxL,2CAAAC,EAAAO,oBAgBA02C,qCAAenlD,oBAAA,2jBAhBfmlD,6+DCAAC,oCAEA,SAAAA,SAAAv3C,GACA,OAAA7K,gBAAA1E,KAAA8mD,UAAAt3C,2BAAAxP,KAAAyP,gBAAAq3C,UAAAp3C,KAAA1P,KACAuP,sGAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,YAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,gBAAA6I,KAAA,SACAxL,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,0JAXA3C,2CAAAC,EAAAO,oBAgBA22C,oCAAeplD,oBAAA,yjBAhBfolD,k4ECKAC,sCAEA,SAAAA,WAAAx3C,GACA,OAAA7K,gBAAA1E,KAAA+mD,YAAAv3C,2BAAAxP,KAAAyP,gBAAAs3C,YAAAr3C,KAAA1P,KACAuP,0GAKA,IAAAysC,EAAAh8C,KAAAuP,MAAAysC,gBACAr7B,EAAA3gB,KAAAuP,MAAAoR,gBACAqmC,EAAAhL,EAAAiL,aAAAtmC,GAEA,OAAAhR,2CAAAC,EAAAzB,cAAA,OAAA/F,GAAA,cACAuH,2CAAAC,EAAAzB,cAAAmlC,iDAAA,GAAAlrC,GAAA,cAAAyH,UAAAm3C,EAAA,YACA/2C,QAAA,kBAAA+rC,EAAAkL,gBAAA,IACAp3C,MAAAsR,KAAApP,SAAA,sBACArC,2CAAAC,EAAAzB,cAAAg5C,iDAAA,SAEAx3C,2CAAAC,EAAAzB,cAAAmlC,iDAAA,GAAAlrC,GAAA,YAAAyH,UAAAm3C,EAAA,YACA/2C,QAAA,kBAAA+rC,EAAAkL,gBAAA,IACAp3C,MAAAsR,KAAApP,SAAA,oBACArC,2CAAAC,EAAAzB,cAAAi5C,+CAAA,mJAtBAz3C,2CAAAC,EAAAO,oBA4BA42C,sCAAerlD,oBAAA,mlBA5BfqlD,ugECLAM,sCAEA,SAAAA,WAAA93C,GACA,OAAA7K,gBAAA1E,KAAAqnD,YAAA73C,2BAAAxP,KAAAyP,gBAAA43C,YAAA33C,KAAA1P,KACAuP,0GAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,cAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,0JACA3C,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,gBAAA6I,KAAA,mJAXAxL,2CAAAC,EAAAO,oBAgBAk3C,sCAAe3lD,oBAAA,6jBAhBf2lD,i/DCAAC,oCAEA,SAAAA,SAAA/3C,GACA,OAAA7K,gBAAA1E,KAAAsnD,UAAA93C,2BAAAxP,KAAAyP,gBAAA63C,UAAA53C,KAAA1P,KACAuP,sGAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,YAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,gBAAA6I,KAAA,SACAxL,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,6QAXA3C,2CAAAC,EAAAO,oBAgBAm3C,oCAAe5lD,oBAAA,yjBAhBf4lD,+yFCSAC,qCAEA,SAAAA,WAAA7/C,GACA,IAAA5C,EAAA,OAAAJ,gBAAA1E,KAAAunD,aACAziD,EAAA0K,2BAAAxP,KAAAyP,gBAAA83C,YAAA73C,KAAA1P,KAAA0H,KAEA8/C,SAAA,IAAAC,4CAAA,EACA3iD,EAAA4iD,aAAA,MACA5iD,EAAA6iD,kBAAA,EACA7iD,EAAA8iD,UAAA,GACA9iD,EAAA68C,SAAA,GAEA78C,EAAAqoC,gBAAA,EAEAroC,EAAAk3B,OAAA,KACAl3B,EAAA+iD,YAAA,KAEA/iD,EAAAqpC,oBAAA,IAAA2Z,iDAAA,EAAAnuC,8CAAA7U,IAAA4C,GACA5C,EAAAmpC,OAAA,KAEAnpC,EAAA6b,gBAAA,KACA7b,EAAA+Z,kBAAA,KAEA/Z,EAAA0oC,cAAA1oC,EAAA0oC,cAAArtC,KAAAwZ,8CAAA7U,KACAA,EAAAijD,qBAAAjjD,EAAAijD,qBAAA5nD,KAAAwZ,8CAAA7U,KACAA,EAAAkjD,oBAAAljD,EAAAkjD,oBAAA7nD,KAAAwZ,8CAAA7U,KAtBAA,yGAyBA4W,GAEAvI,KAAA1D,gBAAA83C,WAAAn0C,WAAA,aAAApT,MAAA0P,KAAA1P,KAAA0b,GAEA1b,KAAAiuC,OAAAvyB,EAAAsxB,oBACAhtC,KAAA2gB,gBAAAjF,EAAAnH,qBACAvU,KAAA6e,kBAAAnD,EAAAlH,uBAEAxU,KAAAmtC,gBAAAntC,KAAA0H,MAAAomC,aAAA,GACA9tC,KAAAwtC,kDAKAxtC,KAAAmtC,gBAAAntC,KAAA0H,MAAAomC,aAAA,GACA9tC,KAAAwtC,gBAEAr6B,KAAA1D,gBAAA83C,WAAAn0C,WAAA,UAAApT,MAAA0P,KAAA1P,uCAKA,IAAA+uC,EAAA/uC,KAAA0H,MAAAomC,aAAA,GACAiB,IAAA/uC,KAAAmtC,kBAEAntC,KAAAmtC,gBAAA4B,EACA/uC,KAAAwtC,cAAAxtC,KAAA0H,8CAIAA,GAEA1H,KAAAiuC,SAEAjuC,KAAAg8B,SAEA8C,aAAA9+B,KAAAg8B,QACAh8B,KAAAg8B,OAAA,MAGAh8B,KAAA6nD,cAEA/oB,aAAA9+B,KAAA6nD,aACA7nD,KAAA6nD,YAAA,MAGA7nD,KAAAg8B,OAAAwC,WAAAx+B,KAAA+nD,qBAAA7vB,uCAAA,EAAAp2B,0BACA9B,KAAA6nD,YAAArpB,WAAAx+B,KAAAgoD,oBACAhoD,KAAAiuC,OAAA/uB,sBAAA,EAAAgZ,uCAAA,EAAAp2B,yBAAAo2B,uCAAA,EAAAr2B,sEAKA7B,KAAAwnD,SAAA9hD,QACA1F,KAAAioD,MAAAjoD,KAAAwnD,UAAA,IAFA16C,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAGA,QAAA2L,EAAAC,EAAAlN,KAAA2hD,SAAAv0C,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADA0F,EACAvF,EAAAlN,MACAC,KAAAwnD,SAAAtxB,UAAA1jB,IALA,MAAA5E,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAOAhN,KAAA2nD,iBAAA3nD,KAAAwnD,SAAAtuC,2DAKAlZ,KAAAiuC,OAAAhvB,kBAEAjf,KAAAmuC,oBAAA+Z,aAAA,EAAAloD,KAAA2gB,gBAAA3gB,KAAA6e,gEAGA6hC,GAQA,IAPA,IADAyH,EACA/mD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GACAwL,EAAA8zC,EAAAjzC,MAAA26C,0DAAA,GACArjD,EAAA,IAAA6/B,IAEAr4B,EAAA,GACA87C,EAAA,EACAhnD,EAAAuL,EAAAvL,OACAgF,EAAA,EAAAA,EAAAhF,IAAAgF,EAKA,QAFAgiD,GADA97C,EAAAK,EAAAvG,GAAAowB,QACAp1B,SAOA,GAAAgnD,EAAA,EACA,KAAA55C,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IACA,QAAAsN,EAAAC,EAAAtC,EAAAkB,MAAA,IAAAL,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA,KADA65C,EACA15C,EAAA7O,MACAuoD,IAAA7xB,OACA1xB,EAAAuE,IAAAg/C,IAEAvjD,EAAAmgC,IAAAojB,IANA,MAAA16C,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,UAaA5J,EAAAmgC,IAAA34B,GAKA,OAAAxH,EAAAwvB,MAAA,EAAA4zB,EAAA,KAAAI,gDAAA,EACAtgD,MAAAuB,KAAAzE,GAAA2I,KAAA06C,0DAAA,0CAGAtH,GAEA,GAAA9gD,KAAA0nD,cAAA5G,EAAA,CAGA,GADA9gD,KAAA0nD,aAAA5G,EACA,OAAAA,EAEA9gD,KAAAmuC,oBAAA,IAAA2Z,iDAAA,EAAA9nD,UAAA0H,WAEA,WAAAo5C,EAMA,UAAA5gD,MAAA,+CAAA4gD,EAAA,KAJA9gD,KAAAmuC,oBAAA,IAAAqa,iDAAA,EAAAxoD,UAAA0H,OAOA1H,KAAAwtC,0DAKA,OAAAxtC,KAAA0nD,qDAGAn7C,GAEAvM,KAAA2hD,SAAA90C,KAAAN,GAEAvM,KAAAwtC,2DAGAjhC,GAEAvM,KAAA2hD,SAAAn6B,OAAAxnB,KAAA2hD,SAAAnwC,QAAAjF,GAAA,GAEAvM,KAAAwtC,2DAGA+T,EAAAC,GAEA,IAAAn7C,EAAArG,KAAA2hD,SAAAnwC,QAAA+vC,GACA,GAAAl7C,GAAA,YAAAnG,MAAA,oCAAAqhD,EAAA,KACAvhD,KAAA2hD,SAAAt7C,GAAAm7C,EAEAxhD,KAAAwtC,uDAGAjhC,GAEA,OAAAvM,KAAA2hD,SAAAroC,SAAA/M,yCAKA,IAAA8qB,EAAAr3B,KAAAs3B,aAGA,OAFAt3B,KAAA4nD,UAAAvmD,OAAA,EACAg2B,EAAAvH,YAAA9vB,KAAA4nD,WACA5nD,KAAA4nD,mDAKA,aAAA5nD,KAAA0nD,cAEA1nD,KAAA2nD,iDASA,IACA5iD,GADA3D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,OAEA,IAAA+/C,4CAAA,EACA,KAAAp8C,aAAAo8C,4CAAA,GACA,UAAAjhD,MAAA,kDAEA,OADAuoD,QAAAzoD,KAAA0H,MAAA3C,GACAA,kCAIA,IACAA,GADA3D,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,OAEA,IAAAqmD,4CAAA,EACA,KAAA1iD,aAAA0iD,4CAAA,GACA,UAAAvnD,MAAA,kDAEA,OADAuoD,QAAAzoD,KAAA0H,MAAA3C,GACAA,uCAKA,OAAA/E,KAAAwnD,kJAxOAkB,gDAAA,GA4OA,SAAAD,QAAA/gD,EAAAylB,GAEA,GAAAzlB,EAAAE,WAAAvG,QAAA,SAAA8rB,EADA,IAAApe,GAAA,EAAAC,GAAA,EAAAC,OAAA3N,EAAA,IAGA,QAAA4N,EAAAC,EAAAzH,EAAAE,WAAAwF,OAAAC,cAAA0B,GAAAG,EAAAC,EAAA7B,QAAAC,MAAAwB,GAAA,EACA,KADAxI,EACA2I,EAAAnP,MACA,IAEA,IAAAwO,EAAAhI,EAAAiC,eACA2kB,EAAAE,SAAA9e,GAGAhI,EAAAmC,iBAEAykB,EAAA81B,cAAA10C,GAAA,GAGA,MAAApN,GAEA,MAAAA,IAlBA,MAAAyM,GAAAoB,GAAA,EAAAC,EAAArB,EAAA,YAAAmB,GAAA,MAAAI,EAAAtB,QAAAsB,EAAAtB,SAAA,WAAAmB,EAAA,MAAAC,GAAA,IAAAmN,GAAA,EAAAC,GAAA,EAAAC,OAAAhb,EAAA,IAuBA,QAAAib,EAAAC,EAAA9U,EAAAI,WAAAsF,OAAAC,cAAA+O,GAAAG,EAAAC,EAAAlP,QAAAC,MAAA6O,GAAA,EACA,KADAhV,EACAmV,EAAAxc,MAEA,IAAAqH,EAAAqqB,gBAAA,CACA,IAAAjoB,EAAApC,EAAA8B,gBACAO,EAAArC,EAAAgC,qBACA,GAAAI,aAAAm/C,0DAAA,GAAAl/C,aAAAk/C,0DAAA,EACA,CACA,IAAA9wB,EAAAzwB,EAAA0H,0BADA6N,GAAA,EAAAC,GAAA,EAAAC,OAAAvb,EAAA,IAEA,QAAAwb,EAAAC,EAAA8a,EAAAzqB,OAAAC,cAAAsP,GAAAG,EAAAC,EAAAzP,QAAAC,MAAAoP,GAAA,EACA,KADApU,EACAuU,EAAA/c,MACA,IAEAotB,EAAAu1B,cAAAl5C,EAAAhB,eAAAiB,EAAAjB,eAAAD,GAEA,MAAApH,GAEA,MAAAA,IAVA,MAAAyM,GAAAgP,GAAA,EAAAC,EAAAjP,EAAA,YAAA+O,GAAA,MAAAI,EAAAlP,QAAAkP,EAAAlP,SAAA,WAAA+O,EAAA,MAAAC,OA9BA,MAAAjP,GAAAyO,GAAA,EAAAC,EAAA1O,EAAA,YAAAwO,GAAA,MAAAI,EAAA3O,QAAA2O,EAAA3O,SAAA,WAAAwO,EAAA,MAAAC,GA+CA,IAAAqU,EAAAjpB,EAAAM,eAAAQ,eAGA,OAFA2kB,EAAAy7B,cAAAj4B,GAEAxD,eAGAo6B,sCAAe7lD,oBAAA,ylBAlSf6lD,8HA4OAkB,g+BCpPA,IAAAI,qBAAA,EAEAC,0BAEA,SAAAA,eAAAphD,GACAhD,gBAAA1E,KAAA8oD,gBACA9oD,KAAA0H,QACA1H,KAAA2gB,gBAAA,KAEA3gB,KAAAsyB,QAAA,IAAAy2B,gDAAA,EAAArhD,GAEA1H,KAAAgpD,uBAAAhpD,KAAAgpD,uBAAA7oD,KAAAH,2EAGA0b,GAEA1b,KAAA2gB,gBAAAjF,EAAAnH,qBAEAvU,KAAAyoC,mBAAAogB,uGAQAnhD,EAAAnB,EAAA0iD,EAAA5S,EAAAC,GAEAt2C,KAAAsyB,QAAAC,mEAGA22B,GAEA,IAAA/oC,EAAAngB,KAAAsyB,QAAA62B,gBACAnpD,KAAAsyB,QAAA62B,gBAAAD,EACA/oC,GAAA+oC,KAEAlpD,KAAA2gB,gBAAA/b,GAAA,kBAAA5E,KAAAgpD,wBAIAhpD,KAAA2gB,gBAAA9b,oBAAA,kBAAA7E,KAAAgpD,wEAMA,OAAAhpD,KAAAsyB,QAAA62B,qDAKA,OAAAnpD,KAAAsyB,gKAIAw2B,0CAAepnD,oBAAA,imBAxDfmnD,oJAEAC,i7BCHAM,0BAEA,SAAAA,eAAA1hD,GACAhD,gBAAA1E,KAAAopD,gBACAppD,KAAA0H,QACA1H,KAAA2oC,OAAAzQ,uCAAA,EAAA71B,gBAGArC,KAAAmpD,iBAAA,oFAKA,IAAA5rC,EAAAvd,KAAA0H,MAAAM,eACA,GAAAuV,EAAA,CACA,IAAA8rC,GAAA9rC,EAAA3U,gBAEA0gD,EAAA,GACAC,EAAA,GANAz8C,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAOA,QAAA2L,EAAAC,EAAAlN,KAAA0H,MAAAE,WAAAwF,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADAvG,EACA0G,EAAAlN,MACAwG,EAAAqC,gBAEA2gD,EAAA18C,KAAAtG,EAAAiC,gBAIA8gD,EAAAz8C,KAAAtG,IAfA,MAAAqH,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAoBA,IADA,IAAA2U,EAAA0nC,EAAA,IACAriD,EAAA,EAAAA,EAAAsiD,EAAAjoD,OAAA2F,IACA,CAEA,IAHA,IAAA0X,EAAA4qC,EAAAtiD,GAEAwiD,EAAA,KACAD,EAAAjwC,SACAkwC,EAAAxpD,KAAAypD,2BAAA9nC,QAEAjD,EAAAjY,aAAA+iD,uDAUA,IAFA,IAAAE,EAAA,EACA3kD,EAAA/E,KAAAypD,2BAAAC,IACA1pD,KAAA2pD,kBAAA5kD,MAEA2kD,EACA3kD,EAAA/E,KAAAypD,2BAAAC,GAEA,OAAA3kD,qDAGA4c,GAEA,OAAA3hB,KAAA2oC,OAAAhnB,4CAGA0oB,GACA,IAAA57B,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IACA,QAAAsN,EAAAC,EAAA7O,KAAA0H,MAAAE,WAAAwF,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA,CACA,GADAG,EAAA7O,MACAyI,gBAAA6hC,EAEA,UALA,MAAAz8B,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,GASA,iKAIAy6C,0CAAe1nD,oBAAA,imBA3Ef0nD,6hECAAQ,8DAEA,SAAAA,mCAAAr6C,GACA,IAAAzK,EAAAJ,gBAAA1E,KAAA4pD,qCACA9kD,EAAA0K,2BAAAxP,KAAAyP,gBAAAm6C,oCAAAl6C,KAAA1P,KAAAuP,KAEA+Q,YAAA,EACAxb,EAAAyb,YAAA,GACA,IAAAC,EAAAjR,EAAAkR,QAAA1gB,MAAAygB,QALA1T,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAMA,QAAA2L,EAAAC,EAAAsT,EAAApT,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADA+M,EACA5M,EAAAlN,MACA+E,EAAAyb,YAAAlf,OAAA,IAEAyD,EAAAyb,aAAA,MAEAzb,EAAAyb,aAAA1G,EAAArR,gBAZA,MAAAoF,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAAA,OAeAlI,EAAAmL,QAAAnL,EAAAmL,QAAA9P,KAAAwZ,8CAAA7U,KAfAA,uJAkBA3D,GAEA,IAAAwf,EAAA3gB,KAAAuP,MAAAoR,gBAEAC,GADA5gB,KAAAuP,MAAAsP,kBACA1d,EAAA0Y,OAAA9Z,OACA0gB,EAAAzgB,KAAAuP,MAAAkR,QACA,OAAAG,GAEA,aAEA,IAAAC,EAAAJ,EAAA1gB,MAAAygB,QACAM,EAAAD,EAAAxf,OACA,GAAAyf,EAAA,GAAA9gB,KAAAsgB,YAAAQ,EACA,CAEA,IAAAjH,EAAAgH,EAAA7gB,KAAAsgB,eACAtgB,KAAAsgB,aAAAQ,IAAA9gB,KAAAsgB,YAAA,GAGAK,EAAAyR,YAAAvY,GAGA,MACA,QACA,UAAA3Z,MAAA,sEAOA,OAAAyP,2CAAAC,EAAAzB,cAAA,WACAwB,2CAAAC,EAAAzB,cAAA,SAAAiT,KAAApP,SAAA,8BAAAhS,KAAAugB,aACA5Q,2CAAAC,EAAAzB,cAAA,UAAApO,MAAA,SAAAkQ,QAAAjQ,KAAAiQ,SAAAmR,KAAApP,SAAA,4LAtDArC,2CAAAC,EAAAO,oBA2DAy5C,8DAAeloD,oBAAA,qpBA3DfkoD,w4CCKAC,2BAEA,SAAAA,gBAAApqC,EAAA/X,GACAhD,gBAAA1E,KAAA6pD,iBACA7pD,KAAAyf,iBACAzf,KAAA0H,QAEA1H,KAAAg3B,WAAA,GACAh3B,KAAAi3B,WAAA,GACAj3B,KAAAk3B,aAAA,GACAl3B,KAAAm3B,aAAA,sEAKAn3B,KAAAg3B,WAAA31B,OAAA,EACArB,KAAAi3B,WAAA51B,OAAA,EACArB,KAAAk3B,aAAA71B,OAAA,EACArB,KAAAm3B,aAAA91B,OAAA,wCAIAD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,OADAuf,EACAvf,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAAAyd,EACAzd,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAEAi2B,EAAAr3B,KAAAyf,eAAA6X,aACA5vB,EAAA1H,KAAA0H,MAEAsvB,GADAK,EAAAvH,cACA9vB,KAAAg3B,YACAC,EAAAj3B,KAAAi3B,WACAM,EAAAv3B,KAAAk3B,aACAM,EAAAx3B,KAAAm3B,aACAn3B,KAAA0F,QAEA,IAAAU,IAAA,IACA0jD,EAAApiD,EAAAE,WAAA6J,QACA8L,EAAA7V,EAAAM,eACA8hD,EAAAtiC,OAAAsiC,EAAAt4C,QAAA+L,GAAA,GAEA,IAAAma,EAAA,GAfA5qB,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAkBA,QAAA2L,EAAAC,EAAAxF,EAAAI,WAAAsF,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADA1F,EACA6F,EAAAlN,MAEA,GAAAqH,EAAAqqB,gBAGAiG,EAAA7qB,KAAAzF,IACA,GAAA6vB,EAAAzlB,QAAApK,IAAA6vB,EAAApqB,KAAAzF,OAGA,CACAA,EAAA8B,gBAAA,IACAO,EAAArC,EAAAgC,qBACAyuB,EAAAzwB,EAAA0H,0BAHAC,GAAA,EAAAC,GAAA,EAAAC,OAAA3N,EAAA,IAKA,QAAA4N,EAAAC,EAAA0oB,EAAAzqB,OAAAC,cAAA0B,GAAAG,EAAAC,EAAA7B,QAAAC,MAAAwB,GAAA,EACA,CAAAG,EAAAnP,MAEA+pD,EAAAxwC,SAAA7P,IAAAqgD,EAAAtiC,OAAAsiC,EAAAt4C,QAAA/H,GAAA,IARA,MAAAmE,GAAAoB,GAAA,EAAAC,EAAArB,EAAA,YAAAmB,GAAA,MAAAI,EAAAtB,QAAAsB,EAAAtB,SAAA,WAAAmB,EAAA,MAAAC,MA5BA,MAAArB,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAAA,IAAAyB,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IA0CA,QAAAsN,EAAAC,EAAAi7C,EAAA18C,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA,KADAlI,EACAqI,EAAA7O,OACA,GAAAw3B,EAAA/lB,QAAAjL,IAAAgxB,EAAA1qB,KAAAtG,IA5CA,MAAAqH,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,GA+CA,IAAA5J,IAAA,GAAAiyB,EAAA31B,QAAA,GAAA41B,EAAA51B,QACA,GAAAk2B,EAAAl2B,QAAA,GAAAm2B,EAAAn2B,QAGA42B,EAAAC,uCAAA,EAAAv2B,2BAKA,GAHAw2B,kEAAA,EAAAC,cAAAH,GAGAlzB,EAMA,CACA,IAAAwK,EAAA,CAAAoR,kBAAA9B,qBAGAirC,EAAAzoD,OAAA,GAEA82B,kEAAA,EAAAI,WAAAuxB,EACA,UAAA7xB,EAAAO,yFAAA,EAAAjpB,GAAA,GAIAmoB,EAAAr2B,OAAA,GAEA82B,kEAAA,EAAAI,WAAA,CAAApX,KAAAC,KAAApP,SAAA,4BAAAwO,QAAAkX,GACA,QAAAO,EAAA8xB,iFAAA,EAAAx6C,GAAA,QAlBA4oB,kEAAA,EAAAI,WAAAnX,KAAApP,SAAA,gCAAAimB,EAAA,cAsBA,OAAAlzB,gDAKA,IAAA2C,EAAA1H,KAAA0H,MAEA2wB,EAAA3wB,EAAAE,WAAA6J,QAJA2K,GAAA,EAAAC,GAAA,EAAAC,OAAAhb,EAAA,IAQA,QAAAib,EAAAC,EAAA9U,EAAAI,WAAAsF,OAAAC,cAAA+O,GAAAG,EAAAC,EAAAlP,QAAAC,MAAA6O,GAAA,OAAAhV,EAAAmV,EAAAxc,MACA83B,EAAAzwB,EAAAmB,MAAAkF,MAAA,KADAkP,GAAA,EAAAC,GAAA,EAAAC,OAAAvb,EAAA,IAEA,QAAAwb,EAAAC,EAAA8a,EAAAzqB,OAAAC,cAAAsP,GAAAG,EAAAC,EAAAzP,QAAAC,MAAAoP,GAAA,GAAAG,EAAA/c,MAEAqH,EAAAoC,KAFA,IAGAC,EAAArC,EAAAqC,GAEA4uB,EAAA/e,SAAA7P,IAAA4uB,EAAA7Q,OAAA6Q,EAAA7mB,QAAA/H,GAAA,IAPA,MAAAmE,GAAAgP,GAAA,EAAAC,EAAAjP,EAAA,YAAA+O,GAAA,MAAAI,EAAAlP,QAAAkP,EAAAlP,SAAA,WAAA+O,EAAA,MAAAC,KARA,MAAAjP,GAAAyO,GAAA,EAAAC,EAAA1O,EAAA,YAAAwO,GAAA,MAAAI,EAAA3O,QAAA2O,EAAA3O,SAAA,WAAAwO,EAAA,MAAAC,GAkBA,OAAA+b,2JAIAwxB,2CAAenoD,oBAAA,mmBA/HfmoD,wzFCgBAG,wBAEA,SAAAA,aAAAhhC,GACAtkB,gBAAA1E,KAAAgqD,cACAhqD,KAAA2gB,gBAAA,KACA3gB,KAAA6e,kBAAA,KAEA7e,KAAAiqD,cAAA,GAEAjqD,KAAAgpB,iFAGAtN,GAEA1b,KAAA2gB,gBAAAjF,EAAAnH,qBACAvU,KAAA6e,kBAAAnD,EAAAlH,uBAEAxU,KAAA2gB,gBAAA0Z,WAAA,IACA6vB,EAAAlqD,KAAAgpB,YAEAhpB,KAAAiqD,cAAAp9C,KAAA,IAAAs9C,6EAAA,EAAAD,EAAAlqD,KAAA2gB,kBACA3gB,KAAAiqD,cAAAp9C,KAAA,IAAAu9C,gFAAA,EAAAF,EAAAlqD,KAAA2gB,kBACA3gB,KAAAiqD,cAAAp9C,KAAA,IAAAw9C,6EAAA,EAAAH,EAAAlqD,KAAA2gB,kBACA3gB,KAAAiqD,cAAAp9C,KAAA,IAAAy9C,oFAAA,EAAAJ,EAAAlqD,KAAA2gB,kBACA3gB,KAAAiqD,cAAAp9C,KAAA,IAAA09C,gFAAA,EAAAL,EAAAlqD,KAAA2gB,kBACA3gB,KAAAiqD,cAAAp9C,KAAA,IAAA29C,8EAAA,EAAAN,EAAAlqD,KAAA2gB,kBAEA3gB,KAAAiqD,cAAAp9C,KAAA,IAAA49C,8EAAA,EAAAP,EAAAlqD,KAAA2gB,kBACA3gB,KAAAiqD,cAAAp9C,KAAA,IAAA69C,8EAAA,EAAAR,EAAAlqD,KAAA2gB,kBACA3gB,KAAAiqD,cAAAp9C,KAAA,IAAA89C,8EAAA,EAAAT,EAAAlqD,KAAA2gB,kBACA3gB,KAAAiqD,cAAAp9C,KAAA,IAAA+9C,+EAAA,EAAAV,EAAAlqD,KAAA2gB,kBAEA3gB,KAAAiqD,cAAAp9C,KAAA,IAAAg+C,+EAAA,EAAAX,EAAAlqD,KAAA2gB,kBACA3gB,KAAAiqD,cAAAp9C,KAAA,IAAAi+C,+EAAA,EAAAZ,EAAAlqD,KAAA2gB,kBAEA3gB,KAAAiqD,cAAAp9C,KAAA,IAAAk+C,gFAAA,EAAAb,EAAAlqD,KAAA2gB,gBAAA3gB,KAAA6e,oBACA7e,KAAAiqD,cAAAp9C,KAAA,IAAAm+C,0EAAA,EAAAd,EAAAlqD,KAAA2gB,gBAAA,+CAEA3gB,KAAAiqD,cAAAp9C,KAAA,IAAAo+C,kFAAA,EAAAf,EAAAlqD,KAAA6e,oBACA7e,KAAAiqD,cAAAp9C,KAAA,IAAAq+C,mFAAA,EAAAhB,EAAAlqD,KAAA6e,kBAAA7e,KAAA2gB,kBACA3gB,KAAAiqD,cAAAp9C,KAAA,IAAAs+C,kFAAA,EAAAjB,EAAAlqD,KAAA6e,oBACA7e,KAAAiqD,cAAAp9C,KAAA,IAAAu+C,iFAAA,EAAAlB,EAAAlqD,KAAA6e,kBAAA7e,KAAA2gB,kBACA3gB,KAAAiqD,cAAAp9C,KAAA,IAAAw+C,iFAAA,EAAAnB,EAAAlqD,KAAA6e,kBAAA7e,KAAA2gB,oDAIA,IAAA7T,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IACA,QAAA2L,EAAAC,EAAAlN,KAAAiqD,cAAA78C,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,CAAAG,EAAAlN,MACAwqB,WAHA,MAAA3c,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAOAhN,KAAA2gB,gBAAA8G,4KAIAuiC,wCAAetoD,oBAAA,6kBAzDfsoD,26DCrBAsB,yDAEA,SAAAA,iCAAAhnD,EAAAqc,GACA,OAAAjc,gBAAA1E,KAAAsrD,kCAAA97C,2BAAAxP,KAAAyP,gBAAA67C,kCAAA57C,KAAA1P,KACAsE,EAAAqc,EAAA,mKAIAjZ,EAAA6jD,EAAAxT,GAEA,OACArwC,QACA8jD,OAAAD,EAAApjD,oBACAsjD,OAAA1T,EAAA5vC,uDAKAhH,GAEA,IAAAuG,EAAA1H,KAAAuE,WAAA81B,WACA9zB,EAAAmB,EAAAgkD,mBAAAvqD,EAAA+D,UAAAumD,QACA,IAAAllD,EAAA,UAAArG,MAAA,kCAEAwH,EAAAX,aAAAR,qCAIApF,GAEA,IAAAuG,EAAA1H,KAAAuE,WAAA81B,WACA9zB,EAAAmB,EAAAgkD,mBAAAvqD,EAAA+D,UAAAsmD,QACA,IAAAjlD,EAAA,UAAArG,MAAA,kCAEAwH,EAAAX,aAAAR,kKAlCAolD,8CAAA,YAqCAL,4DAAe5pD,oBAAA,ipBArCf4pD,uhECAAM,kDAEA,SAAAA,0BAAAtnD,EAAAqc,GACA,OAAAjc,gBAAA1E,KAAA4rD,2BAAAp8C,2BAAAxP,KAAAyP,gBAAAm8C,2BAAAl8C,KAAA1P,KACAsE,EAAAqc,EAAA,kJAIAjZ,EAAAmkD,EAAAC,EAAAC,EAAA1V,EAAAC,GAEA,OACA5uC,QACA8jD,OAAAK,EAAA1jD,oBACA2jD,QACAC,QACA1V,QACAC,2CAKAn1C,GAEA,IACAoF,EADAvG,KAAAuE,WAAA81B,WACAqxB,mBAAAvqD,EAAA+D,UAAAsmD,QACA,IAAAjlD,EAAA,UAAArG,MAAA,kCAEAqG,EAAA8B,EAAAlH,EAAA+D,UAAAmxC,MACA9vC,EAAA+B,EAAAnH,EAAA+D,UAAAoxC,wCAIAn1C,GAEA,IACAoF,EADAvG,KAAAuE,WAAA81B,WACAqxB,mBAAAvqD,EAAA+D,UAAAsmD,QACA,IAAAjlD,EAAA,UAAArG,MAAA,kCAEAqG,EAAA8B,EAAAlH,EAAA+D,UAAA4mD,MACAvlD,EAAA+B,EAAAnH,EAAA+D,UAAA6mD,8JAvCAJ,8CAAA,YA0CAC,qDAAelqD,oBAAA,2oBA1CfkqD,mgECAAI,qDAEA,SAAAA,6BAAA1nD,EAAAqc,GACA,OAAAjc,gBAAA1E,KAAAgsD,8BAAAx8C,2BAAAxP,KAAAyP,gBAAAu8C,8BAAAt8C,KAAA1P,KACAsE,EAAAqc,EAAA,2JAIAjZ,EAAAkC,EAAA+nB,EAAAD,GAEA,OACAhqB,QACAukD,QAAAriD,EAAAoqB,IAAA,SAAA7yB,GAAA,OAAAA,EAAAgH,sBACAwpB,KACAD,wCAKAvwB,GAEA,IAAAuG,EAAA1H,KAAAuE,WAAA81B,WACA9zB,EAAA,KAFAuG,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAGA,QAAA2L,EAAAC,EAAA/L,EAAA+D,UAAA+mD,QAAA7+C,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADA0+C,EACAv+C,EAAAlN,MAEA,KADAwG,EAAAmB,EAAAgkD,mBAAAF,IACA,UAAAtrD,MAAA,kCAEAqG,EAAA8B,GAAAlH,EAAA+D,UAAAysB,GACAprB,EAAA+B,GAAAnH,EAAA+D,UAAAwsB,IATA,MAAA9jB,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,sCAcA7L,GAEA,IAAAuG,EAAA1H,KAAAuE,WAAA81B,WACA9zB,EAAA,KAFAkI,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IAGA,QAAAsN,EAAAC,EAAA1N,EAAA+D,UAAA+mD,QAAA7+C,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA,KADA+8C,EACA58C,EAAA7O,MAEA,KADAwG,EAAAmB,EAAAgkD,mBAAAF,IACA,UAAAtrD,MAAA,kCAEAqG,EAAA8B,GAAAlH,EAAA+D,UAAAysB,GACAprB,EAAA+B,GAAAnH,EAAA+D,UAAAwsB,IATA,MAAA9jB,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,+JAnCAg9C,8CAAA,YAgDAK,wDAAetqD,oBAAA,ipBAhDfsqD,+gECAAE,kDAEA,SAAAA,0BAAA5nD,EAAAqc,GACA,OAAAjc,gBAAA1E,KAAAksD,2BAAA18C,2BAAAxP,KAAAyP,gBAAAy8C,2BAAAx8C,KAAA1P,KACAsE,EAAAqc,EAAA,kJAIAjZ,EAAAykD,EAAAC,EAAArV,GAEA,OACArvC,QACA2kD,OAAAF,EAAAhkD,oBACAikD,SAAAnrD,OAAAC,OAAA,GAAAkrD,GACArV,SAAA91C,OAAAC,OAAA,GAAA61C,sCAKA51C,GAEA,IACAiG,EADApH,KAAAuE,WAAA81B,WACAiyB,mBAAAnrD,EAAA+D,UAAAmnD,QACA,IAAAjlD,EAAA,UAAAlH,MAAA,kCAEAkH,EAAAI,aAAArG,EAAA+D,UAAA6xC,SAAArtC,QAAAvI,EAAA+D,UAAA6xC,SAAA11C,0CAIAF,GAEA,IACAiG,EADApH,KAAAuE,WAAA81B,WACAiyB,mBAAAnrD,EAAA+D,UAAAmnD,QACA,IAAAjlD,EAAA,UAAAlH,MAAA,kCAEAkH,EAAAI,aAAArG,EAAA+D,UAAAknD,SAAA1iD,QAAAvI,EAAA+D,UAAAknD,SAAA/qD,gKAnCAsqD,8CAAA,YAsCAO,qDAAexqD,oBAAA,2oBAtCfwqD,mgECAAZ,yDAEA,SAAAA,iCAAAhnD,EAAAqc,GACA,OAAAjc,gBAAA1E,KAAAsrD,kCAAA97C,2BAAAxP,KAAAyP,gBAAA67C,kCAAA57C,KAAA1P,KACAsE,EAAAqc,EAAA,uKAIAjZ,EAAAykD,EAAAI,EAAAC,EAAAzV,GAEA,OACArvC,QACA2kD,OAAAF,EAAAhkD,oBACAokD,kBACAC,kBACAJ,SAAAnrD,OAAAC,OAAA,GAAAirD,EAAAnjD,gBACA+tC,SAAA91C,OAAAC,OAAA,GAAA61C,sCAKA51C,GAEA,IACAiG,EADApH,KAAAuE,WAAA81B,WACAiyB,mBAAAnrD,EAAA+D,UAAAmnD,QACA,IAAAjlD,EAAA,UAAAlH,MAAA,kCAEA,IAAAwJ,EAAAvI,EAAA+D,UAAA6xC,SAAArtC,QACArI,EAAAF,EAAA+D,UAAA6xC,SAAA11C,OAEA+F,EAAA0wC,sBAAA32C,EAAA+D,UAAAsnD,iBAEAplD,EAAAwc,eAAAla,MACAtC,EAAAI,aAAAkC,EAAArI,qCAIAF,GAEA,IACAiG,EADApH,KAAAuE,WAAA81B,WACAiyB,mBAAAnrD,EAAA+D,UAAAmnD,QACA,IAAAjlD,EAAA,UAAAlH,MAAA,kCAEA,IAAAwJ,EAAAvI,EAAA+D,UAAAknD,SAAA1iD,QACArI,EAAAF,EAAA+D,UAAAknD,SAAA/qD,OAEA+F,EAAA0wC,sBAAA32C,EAAA+D,UAAAqnD,iBACAnlD,EAAAI,aAAAkC,EAAArI,kKA/CAsqD,8CAAA,YAkDAL,4DAAe5pD,oBAAA,ypBAlDf4pD,+hECAAmB,mDAEA,SAAAA,2BAAAnoD,EAAAqc,GACA,OAAAjc,gBAAA1E,KAAAysD,4BAAAj9C,2BAAAxP,KAAAyP,gBAAAg9C,4BAAA/8C,KAAA1P,KACAsE,EAAAqc,EAAA,qJAIAjZ,EAAAykD,EAAAO,EAAAxP,GAEA,OACAx1C,QACA2kD,OAAAF,EAAAhkD,oBACAukD,YACAxP,+CAKA/7C,GAEA,IACAiG,EADApH,KAAAuE,WAAA81B,WACAiyB,mBAAAnrD,EAAA+D,UAAAmnD,QACA,IAAAjlD,EAAA,UAAAlH,MAAA,kCAEAkH,EAAAG,aAAApG,EAAA+D,UAAAg4C,6CAIA/7C,GAEA,IACAiG,EADApH,KAAAuE,WAAA81B,WACAiyB,mBAAAnrD,EAAA+D,UAAAmnD,QACA,IAAAjlD,EAAA,UAAAlH,MAAA,kCAEAkH,EAAAG,aAAApG,EAAA+D,UAAAwnD,oKAnCAf,8CAAA,YAsCAc,sDAAe/qD,oBAAA,6oBAtCf+qD,ugECAAE,mDAEA,SAAAA,2BAAAroD,EAAAqc,GACA,OAAAjc,gBAAA1E,KAAA2sD,4BAAAn9C,2BAAAxP,KAAAyP,gBAAAk9C,4BAAAj9C,KAAA1P,KACAsE,EAAAqc,EAAA,8JAIAjZ,EAAAnB,GAEA,OACAilD,OAAAjlD,EAAA4B,oBACAE,EAAA9B,EAAA8B,EACAC,EAAA/B,EAAA+B,EACAG,OAAAlC,EAAAmC,gBACAH,MAAAhC,EAAAiC,eACAG,OAAApC,EAAAqC,mDAKAzH,GAEA,IAAAuG,EAAA1H,KAAAuE,WAAA81B,WACA9zB,EAAAmB,EAAAgkD,mBAAAvqD,EAAA+D,UAAAsmD,QACA,IAAAjlD,EAAA,UAAArG,MAAA,kCAEAwH,EAAA+0C,WAAAl2C,qCAIApF,GAEA,IAAAuG,EAAA1H,KAAAuE,WAAA81B,WACA9zB,EAAAmB,EAAAgkD,mBAAAvqD,EAAA+D,UAAAsmD,QACAjlD,GAMAA,EAAA8B,EAAAlH,EAAAmE,SAAA+C,EACA9B,EAAA+B,EAAAnH,EAAAmE,SAAAgD,GALA/B,EAAAmB,EAAAlB,WAAArF,EAAAmE,SAAA+C,EAAAlH,EAAAmE,SAAAgD,EAAAnH,EAAAmE,SAAAkmD,QAOAjlD,EAAAE,aAAAtF,EAAAmE,SAAAiD,OACAhC,EAAAG,cAAAvF,EAAAmE,SAAAmD,QACAlC,EAAAI,cAAAxF,EAAAmE,SAAAqD,iKA9CAgjD,8CAAA,YAiDAgB,sDAAejrD,oBAAA,6oBAjDfirD,ugECAAC,mDAEA,SAAAA,2BAAAtoD,EAAAqc,GACA,OAAAjc,gBAAA1E,KAAA4sD,4BAAAp9C,2BAAAxP,KAAAyP,gBAAAm9C,4BAAAl9C,KAAA1P,KACAsE,EAAAqc,EAAA,0JAIAjZ,EAAAnB,EAAAsmD,GAEA,OACArB,OAAAjlD,EAAA4B,oBACA0kD,gDAKA1rD,GAEA,IACAoF,EADAvG,KAAAuE,WAAA81B,WACAqxB,mBAAAvqD,EAAA+D,UAAAsmD,QACA,IAAAjlD,EAAA,UAAArG,MAAA,kCAEAqG,EAAAG,cAAAvF,EAAA+D,UAAA2nD,8CAIA1rD,GAEA,IACAoF,EADAvG,KAAAuE,WAAA81B,WACAqxB,mBAAAvqD,EAAA+D,UAAAsmD,QACA,IAAAjlD,EAAA,UAAArG,MAAA,kCAEAqG,EAAAG,eAAAvF,EAAA+D,UAAA2nD,qKAjCAlB,8CAAA,YAoCAiB,sDAAelrD,oBAAA,6oBApCfkrD,+lECEAE,oDAEA,SAAAA,4BAAAxoD,EAAAqc,GACA,OAAAjc,gBAAA1E,KAAA8sD,6BAAAt9C,2BAAAxP,KAAAyP,gBAAAq9C,6BAAAp9C,KAAA1P,KACAsE,EAAAqc,EAAA,sLAIAjZ,EAAAnB,EAAA0iD,EAAA5S,EAAAC,GAEA,IAAA91B,EAAA,GADA1T,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAEA,QAAA2L,EAAAC,EAAA+7C,EAAA77C,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADA+M,EACA5M,EAAAlN,MACAygB,EAAA3T,KAAAgN,EAAA1R,sBAJA,MAAAyF,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAMA,IAAA2kB,EAAAprB,EAAA8B,EAAAguC,EACA3kB,EAAAnrB,EAAA+B,EAAAguC,EAEA,OACAyW,UAAAC,iEAAA,EAAAvlD,UAAAC,GACA8Y,UACAmR,KACAD,+CAKAhqB,EAAAnB,EAAA0iD,EAAA5S,EAAAC,GAEA,OACAyW,UAAAC,iEAAA,EAAAvlD,UAAAC,sCAKAvG,GAEA,IAAAuG,EAAA1H,KAAAuE,WAAA81B,WACA2yB,iEAAA,EAAAlsD,MAAAK,EAAA+D,UAAA6nD,UAAA/sD,KAAAuE,WAAA81B,YAFA,IAAA5rB,GAAA,EAAAC,GAAA,EAAAC,OAAArN,EAAA,IAGA,QAAAsN,EAAAC,EAAA1N,EAAA+D,UAAAsb,QAAApT,OAAAC,cAAAoB,GAAAG,EAAAC,EAAAvB,QAAAC,MAAAkB,GAAA,EACA,KADAw+C,EACAr+C,EAAA7O,MACAwG,EAAAmB,EAAAgkD,mBAAAuB,GACA,IAAA1mD,EAAA,UAAArG,MAAA,kCAEAqG,EAAA8B,GAAAlH,EAAA+D,UAAAysB,GACAprB,EAAA+B,GAAAnH,EAAA+D,UAAAwsB,IATA,MAAA9jB,GAAAc,GAAA,EAAAC,EAAAf,EAAA,YAAAa,GAAA,MAAAI,EAAAhB,QAAAgB,EAAAhB,SAAA,WAAAa,EAAA,MAAAC,sCAcAxN,GAEA6rD,iEAAA,EAAAlsD,MAAAK,EAAAmE,SAAAynD,UAAA/sD,KAAAuE,WAAA81B,sKApDAsxB,8CAAA,YAuDAmB,uDAAeprD,oBAAA,+oBAvDforD,2gECFAI,mDAEA,SAAAA,2BAAA5oD,EAAAqc,GACA,OAAAjc,gBAAA1E,KAAAktD,4BAAA19C,2BAAAxP,KAAAyP,gBAAAy9C,4BAAAx9C,KAAA1P,KACAsE,EAAAqc,EAAA,0JAIAjZ,EAAAnB,EAAAmmD,EAAAxP,EAAAd,GAEA,OACA71C,OACAilD,OAAAjlD,EAAA4B,oBACAukD,YACAxP,YACAiQ,WAAA/Q,qCAKAj7C,GAEA,IACAoF,EADAvG,KAAAuE,WAAA81B,WACAqxB,mBAAAvqD,EAAA+D,UAAAsmD,QACA,IAAAjlD,EAAA,UAAArG,MAAA,kCAEAqG,EAAAE,aAAAtF,EAAA+D,UAAAg4C,WACA32C,EAAAI,cAAAxF,EAAA+D,UAAAioD,8CAIAhsD,GAEA,IACAoF,EADAvG,KAAAuE,WAAA81B,WACAqxB,mBAAAvqD,EAAA+D,UAAAsmD,QACA,IAAAjlD,EAAA,UAAArG,MAAA,kCAEAqG,EAAAE,aAAAtF,EAAA+D,UAAAwnD,WACAnmD,EAAAI,eAAA,4JAtCAglD,8CAAA,YAyCAuB,sDAAexrD,oBAAA,6oBAzCfwrD,ugECAAE,mDAEA,SAAAA,2BAAA9oD,EAAAqc,GACA,OAAAjc,gBAAA1E,KAAAotD,4BAAA59C,2BAAAxP,KAAAyP,gBAAA29C,4BAAA19C,KAAA1P,KACAsE,EAAAqc,EAAA,8JAIAjZ,EAAAN,GAEA,IAAA4vC,EAAA5vC,EAAA4B,eACA,OACA5B,OACAilD,OAAAjlD,EAAAe,oBACAklD,OAAAjmD,EAAA8B,gBAAAf,oBACAmlD,KAAAlmD,EAAAgC,qBAAAhC,EAAAgC,qBAAAjB,oBAAA,KACAI,MAAAnB,EAAAuC,eACAZ,KAAA,CAAAW,QAAAstC,EAAAttC,QAAArI,OAAA21C,EAAA31C,2CAKAF,GAGA,IAAAuG,EAAA1H,KAAAuE,WAAA81B,WACAjzB,EAAAM,EAAA4kD,mBAAAnrD,EAAA+D,UAAAmnD,QACA,IAAAjlD,EAAA,UAAAlH,MAAA,kCAEAwH,EAAAmwC,WAAAzwC,qCAIAjG,GAEA,IAAAuG,EAAA1H,KAAAuE,WAAA81B,WACAjzB,EAAAM,EAAA4kD,mBAAAnrD,EAAAmE,SAAA+mD,QAEA7iD,EAAA9B,EAAAgkD,mBAAAvqD,EAAAmE,SAAA+nD,QACA,IAAA7jD,EAAA,UAAAtJ,MAAA,sCACA,IAAAuJ,EAAA/B,EAAAgkD,mBAAAvqD,EAAAmE,SAAAgoD,OAAA,KAEAlmD,GAMAA,EAAAmmD,cAAA/jD,GACApC,EAAA0wC,sBAAAruC,IALArC,EAAAM,EAAAL,WAAAmC,EAAAC,EAAAtI,EAAAmE,SAAA+mD,QAQAjlD,EAAAG,aAAApG,EAAAmE,SAAAiD,OACAnB,EAAAI,aAAArG,EAAAmE,SAAAyD,KAAAW,QAAAvI,EAAAmE,SAAAyD,KAAA1H,iKArDAsqD,8CAAA,YAwDAyB,sDAAe1rD,oBAAA,6oBAxDf0rD,ugECAAI,mDAEA,SAAAA,2BAAAlpD,EAAAqc,GACA,OAAAjc,gBAAA1E,KAAAwtD,4BAAAh+C,2BAAAxP,KAAAyP,gBAAA+9C,4BAAA99C,KAAA1P,KACAsE,EAAAqc,EAAA,6JAIAjZ,EAAAN,EAAAqmD,EAAA1W,GAEA,OACA3vC,OACAilD,OAAAjlD,EAAAe,oBACAklD,OAAAjmD,EAAA8B,gBAAAf,oBACAmlD,KAAAG,IAAAtlD,oBAAA,KACAI,MAAAnB,EAAAuC,eACAZ,KAAA9H,OAAAC,OAAA,GAAA61C,sCAKA51C,GAEA,IAAAuG,EAAA1H,KAAAuE,WAAA81B,WACAjzB,EAAAM,EAAA4kD,mBAAAnrD,EAAA+D,UAAAmnD,QAEA7iD,EAAA9B,EAAAgkD,mBAAAvqD,EAAA+D,UAAAmoD,QACA,IAAA7jD,EAAA,UAAAtJ,MAAA,sCACA,IAAAuJ,EAAA/B,EAAAgkD,mBAAAvqD,EAAA+D,UAAAooD,OAAA,KAEAlmD,GAMAA,EAAAmmD,cAAA/jD,GACApC,EAAA0wC,sBAAAruC,IALArC,EAAAM,EAAAL,WAAAmC,EAAAC,EAAAtI,EAAA+D,UAAAmnD,QAQAjlD,EAAAG,aAAApG,EAAA+D,UAAAqD,OACAnB,EAAAI,aAAArG,EAAA+D,UAAA6D,KAAAW,QAAAvI,EAAA+D,UAAA6D,KAAA1H,0CAIAF,GAEA,IAAAuG,EAAA1H,KAAAuE,WAAA81B,WACAjzB,EAAAM,EAAA4kD,mBAAAnrD,EAAA+D,UAAAmnD,QACA,IAAAjlD,EAAA,UAAAlH,MAAA,kCAEAwH,EAAAmwC,WAAAzwC,4JAnDAukD,8CAAA,YAsDA6B,sDAAe9rD,oBAAA,6oBAtDf8rD,+lECEAE,oDAEA,SAAAA,4BAAAppD,EAAAqc,EAAA9B,GACA,IAAA/Z,EAAA,OAAAJ,gBAAA1E,KAAA0tD,8BACA5oD,EAAA0K,2BAAAxP,KAAAyP,gBAAAi+C,6BAAAh+C,KAAA1P,KAAAsE,EAAAqc,EAAA,8CAEA9B,oBAHA/Z,2IAOA4C,GAEA,OACAimD,UAAA3tD,KAAA6e,kBAAAgjB,iBACAkrB,UAAAC,iEAAA,EAAAvlD,UAAAC,6CAKAA,GAEA,OACAimD,UAAA3tD,KAAA6e,kBAAAgjB,iBACAkrB,UAAAC,iEAAA,EAAAvlD,UAAAC,sCAKAvG,GAEA6rD,iEAAA,EAAAlsD,MAAAK,EAAA+D,UAAA6nD,UAAA/sD,KAAAuE,WAAA81B,YAEAr6B,KAAA6e,kBAAAkiC,eAAA5/C,EAAA+D,UAAAyoD,6CAIAxsD,GAEA6rD,iEAAA,EAAAlsD,MAAAK,EAAAmE,SAAAynD,UAAA/sD,KAAAuE,WAAA81B,YAEAr6B,KAAA6e,kBAAAkiC,eAAA5/C,EAAAmE,SAAAqoD,qKAxCAhC,8CAAA,YA2CA+B,uDAAehsD,oBAAA,+oBA3CfgsD,mmECAAE,8CAEA,SAAAA,sBAAAtpD,EAAAqc,EAAAnc,EAAAC,GACA,OAAAC,gBAAA1E,KAAA4tD,uBAAAp+C,2BAAAxP,KAAAyP,gBAAAm+C,uBAAAl+C,KAAA1P,KACAsE,EAAAqc,EAAAnc,EAAAC,iIAIAiD,GAEA,OACAqlD,UAAAC,iEAAA,EAAAvlD,UAAAC,6CAKAA,GAEA,OACAqlD,UAAAC,iEAAA,EAAAvlD,UAAAC,sCAKAvG,GAEA6rD,iEAAA,EAAAlsD,MAAAK,EAAA+D,UAAA6nD,UAAA/sD,KAAAuE,WAAA81B,8CAIAl5B,GAEA6rD,iEAAA,EAAAlsD,MAAAK,EAAAmE,SAAAynD,UAAA/sD,KAAAuE,WAAA81B,gKAhCAsxB,8CAAA,YAmCAiC,iDAAelsD,oBAAA,moBAnCfksD,m/DCFAC,sDAEA,SAAAA,8BAAAvpD,EAAAua,GACA,OAAAna,gBAAA1E,KAAA6tD,+BAAAr+C,2BAAAxP,KAAAyP,gBAAAo+C,+BAAAn+C,KAAA1P,KACAsE,EAAAua,EAAA,mKAIAY,EAAAquC,EAAAC,GAEA,OACAC,SAAAD,EACAE,SAAAH,qCAKA3sD,GAEAnB,KAAAuE,WAAAob,eAAAxe,EAAA+D,UAAA8oD,4CAIA7sD,GAEAnB,KAAAuE,WAAAob,eAAAxe,EAAAmE,SAAA2oD,sKAzBAtC,8CAAA,YA4BAkC,yDAAensD,oBAAA,mpBA5BfmsD,2mECEAK,uDAEA,SAAAA,+BAAA5pD,EAAAua,EAAA8B,GACA,IAAA7b,EAAA,OAAAJ,gBAAA1E,KAAAkuD,iCACAppD,EAAA0K,2BAAAxP,KAAAyP,gBAAAy+C,gCAAAx+C,KAAA1P,KAAAsE,EAAAua,EAAA,oDAEA8B,kBAHA7b,iJAOA2a,EAAAquC,EAAAC,GAEA,IAAArmD,EAAA1H,KAAA2gB,gBAAA0Z,WAEA,OACA0yB,UAAAC,iEAAA,EAAAvlD,UAAAC,GACAsmD,SAAAD,4CAKAtuC,EAAAquC,EAAAC,GAEA,IAAArmD,EAAA1H,KAAA2gB,gBAAA0Z,WAEA,OACA0yB,UAAAC,iEAAA,EAAAvlD,UAAAC,GACAumD,SAAAH,qCAKA3sD,GAEA6rD,iEAAA,EAAAlsD,MAAAK,EAAA+D,UAAA6nD,UAAA/sD,KAAA2gB,gBAAA0Z,YACAr6B,KAAAuE,WAAAob,eAAAxe,EAAA+D,UAAA8oD,4CAIA7sD,GAEA6rD,iEAAA,EAAAlsD,MAAAK,EAAAmE,SAAAynD,UAAA/sD,KAAA2gB,gBAAA0Z,YACAr6B,KAAAuE,WAAAob,eAAAxe,EAAAmE,SAAA2oD,uKA1CAtC,8CAAA,YA6CAuC,0DAAexsD,oBAAA,qpBA7CfwsD,uhECFAC,sDAEA,SAAAA,8BAAA7pD,EAAAua,GACA,OAAAna,gBAAA1E,KAAAmuD,+BAAA3+C,2BAAAxP,KAAAyP,gBAAA0+C,+BAAAz+C,KAAA1P,KACAsE,EAAAua,EAAA,mKAIAY,EAAA2uC,EAAAC,GAEA,OACAC,SAAAD,EACAE,SAAAH,qCAKAjtD,GAEAnB,KAAAuE,WAAAw8C,eAAA5/C,EAAA+D,UAAAopD,4CAIAntD,GAEAnB,KAAAuE,WAAAw8C,eAAA5/C,EAAAmE,SAAAipD,sKAzBA5C,8CAAA,YA4BAwC,yDAAezsD,oBAAA,mpBA5BfysD,2mECEAK,qDAEA,SAAAA,6BAAAlqD,EAAAua,EAAA8B,GACA,IAAA7b,EAAA,OAAAJ,gBAAA1E,KAAAwuD,+BACA1pD,EAAA0K,2BAAAxP,KAAAyP,gBAAA++C,8BAAA9+C,KAAA1P,KAAAsE,EAAAua,EAAA,gDAEA8B,kBAHA7b,6IAOA2a,EAAAlT,EAAAg1C,GAEA,IAAA75C,EAAA1H,KAAA2gB,gBAAA0Z,WACA,OACA0yB,UAAAC,iEAAA,EAAAvlD,UAAAC,GACA6E,SACAg1C,uDAKA9hC,EAAAlT,EAAAg1C,EAAA/gC,GAEA,IAAA9Y,EAAA1H,KAAA2gB,gBAAA0Z,WACAo0B,EAAA,GAFA3hD,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAIA,QAAA2L,EAAAC,EAAAsT,EAAApT,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADA+M,EACA5M,EAAAlN,MACA0uD,EAAA5hD,KAAAgN,EAAA1R,sBANA,MAAAyF,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GASA,OACA+/C,UAAAC,iEAAA,EAAAvlD,UAAAC,GACA6E,SACAg1C,aACA/gC,QAAAiuC,qCAKAttD,GAGA6rD,iEAAA,EAAAlsD,MAAAK,EAAA+D,UAAA6nD,UAAA/sD,KAAA2gB,gBAAA0Z,8CAIAl5B,GAGA6rD,iEAAA,EAAAlsD,MAAAK,EAAAmE,SAAAynD,UAAA/sD,KAAA2gB,gBAAA0Z,uKAlDAsxB,8CAAA,YAqDA6C,wDAAe9sD,oBAAA,ipBArDf8sD,umECAAE,qDAEA,SAAAA,6BAAApqD,EAAAua,EAAA8B,GACA,IAAA7b,EAAA,OAAAJ,gBAAA1E,KAAA0uD,+BACA5pD,EAAA0K,2BAAAxP,KAAAyP,gBAAAi/C,8BAAAh/C,KAAA1P,KAAAsE,EAAAua,EAAA,gDAEA8B,kBAHA7b,6IAOA2a,EAAAlT,GAEA,IAAA7E,EAAA1H,KAAA2gB,gBAAA0Z,WACA,OACA0yB,UAAAC,iEAAA,EAAAvlD,UAAAC,GACA6E,mDAKAkT,EAAAlT,EAAAiU,GAEA,IAAA9Y,EAAA1H,KAAA2gB,gBAAA0Z,WACAo0B,EAAA,GAFA3hD,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAIA,QAAA2L,EAAAC,EAAAsT,EAAApT,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADA+M,EACA5M,EAAAlN,MACA0uD,EAAA5hD,KAAAgN,EAAA1R,sBANA,MAAAyF,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GASA,OACA+/C,UAAAC,iEAAA,EAAAvlD,UAAAC,GACA6E,SACAiU,QAAAiuC,qCAKAttD,GAGA6rD,iEAAA,EAAAlsD,MAAAK,EAAA+D,UAAA6nD,UAAA/sD,KAAA2gB,gBAAA0Z,8CAIAl5B,GAGA6rD,iEAAA,EAAAlsD,MAAAK,EAAAmE,SAAAynD,UAAA/sD,KAAA2gB,gBAAA0Z,uKAhDAsxB,8CAAA,YAmDA+C,wDAAehtD,oBAAA,ipBAnDfgtD,ohFCKA,IAAAC,gBAAA,GACAC,iBAAA,GACA/rD,WAAA,EACAC,mBAAA,GAEA+rD,oBAAA,UACAC,gBAAA,CAAAC,0DAAA,GACAC,iBAAA,EAEAnK,uCAEA,SAAAA,YAAAt1C,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAA6kD,cACA//C,EAAA0K,2BAAAxP,KAAAyP,gBAAAo1C,aAAAn1C,KAAA1P,KAAAuP,KAEA0/C,cAAA,KACAnqD,EAAAoqD,aAAA,KAGApqD,EAAAk3B,OAAA,KACAl3B,EAAAqqD,WAAA,GAEArqD,EAAAyJ,MAAA,CACAsL,OAAA,KACAwM,SAAA,MAGAvhB,EAAAi4B,cAAAj4B,EAAAi4B,cAAA58B,KAAAwZ,8CAAA7U,KACAA,EAAAsqD,SAAAtqD,EAAAsqD,SAAAjvD,KAAAwZ,8CAAA7U,KACAA,EAAA+gB,SAAA/gB,EAAA+gB,SAAA1lB,KAAAwZ,8CAAA7U,KAjBAA,4GAoBAqnD,GACA,IAAAh4C,EAAAnU,KADAqvD,EACAjuD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAAAgX,IACAhX,UAAAC,OAAA,QAAAC,IAAAF,UAAA,KAAAA,UAAA,GADAilB,EACAjlB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GADA,KAGA,IAAApB,KAAAkvD,eAAAlvD,KAAAivD,cAEA,UAAA/uD,MAAA,kDAGAF,KAAAkgB,SAAA,SAAAC,EAAA5Q,GACA,OACAsK,OAAAsyC,EACA9lC,cAIArmB,KAAAkvD,aAAAtpC,WAAAumC,EAAAxiD,eAAA,WACA0lD,GAAAl7C,EAAA+6C,aAAArvD,SAAAwvD,GAEAl7C,EAAAg7C,WAAAhD,EAAAxiD,eACAwK,EAAA86C,cAAA1pC,QACApR,EAAA+6C,aAAA3pC,MAAAnN,2CAKA,IADAk3C,EACAluD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAEA,IAAApB,KAAAkvD,eAAAlvD,KAAAivD,cAEA,UAAA/uD,MAAA,kDAIA,UAAAF,KAAAuO,MAAAsL,OACA,CACA,GAAAy1C,EACA,CACA,IAAAvvD,EAAAC,KAAAkvD,aAAAnvD,MACAC,KAAAuO,MAAAsL,OAAAtS,aAAAxH,QAIAC,KAAAuO,MAAAsL,OAAAlQ,iBAGA3J,KAAAuO,MAAAsL,OAAAtS,aAAA,MAGAynD,iBAEAhvD,KAAAuP,MAAAoR,gBAAA0Z,WAAAwd,WAAA73C,KAAAuO,MAAAsL,SAKA7Z,KAAAkgB,SAAA,CAAArG,OAAA,OAEA7Z,KAAAuO,MAAA8X,UAAArmB,KAAAuO,MAAA8X,WAIArmB,KAAAkvD,aAAA1pC,0CAKA,OAAAxlB,KAAAkvD,aAAA7pC,kDAKA,cAAArlB,KAAAuO,MAAAsL,6CAGA1Y,GAEAA,EAAA8kB,iBACA9kB,EAAA+kB,uDAGA3Z,GAEAvM,KAAAkvD,aAAAK,YAAAhjD,EAAAwiD,0DAAA,GACA/uD,KAAAkvD,aAAA3pC,OAAA,oCAGA3L,EAAAqL,GAIArL,GAAAqL,GAQAjlB,KAAAwvD,aAAA,oCAIAzvD,GAGA,OAAAC,KAAAuP,MAAAsP,kBAAAgiC,oBAAAnxC,KAAA,KAAA3P,GAAA,oCAIA,IAAA+lB,EAAA9lB,KAEA8e,EADA9e,KAAAuP,MAAAysC,gBACAliB,kBAAAnR,cAEA9J,GADA7e,KAAAuP,MAAAoR,gBACA3gB,KAAAuP,MAAAsP,mBACAgN,EAAA7rB,KAAAuP,MAAAsc,OAEA4jC,EAAA,CACAtjC,WAAA,UAGAtS,EAAA7Z,KAAAuO,MAAAsL,OAEA,GAAAA,EACA,CACA41C,EAAAtjC,WAAA,UAGA,IAAA1R,EAAAZ,EAAAa,iBACAg1C,EAAAC,sBAAA9jC,EACApR,EAAApS,EAAAyW,EAAA8wC,aACAn1C,EAAAnS,EAAAwW,EAAA+wC,cACAxnD,EAAAqnD,EAAArnD,EACAC,EAAAonD,EAAApnD,EAAAqmD,eAAAC,gBACAkB,GAAA9vD,KAAAivD,cAAAr6B,YAAA,EACAm7B,GAAA/vD,KAAAivD,cAAAt6B,aAAA,EAEA86B,EAAAO,IAAA1nD,EAAAynD,EAAA,KACAN,EAAAQ,KAAA5nD,EAAAynD,EAAA,KAGA,IAAAp/B,EAAA7R,EAAAa,oBAAA4X,aAAAxH,cAEA,OAAAngB,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,SAAAzH,GAAA,eAAA0L,IAAA,SAAA8S,GAAA,OAAAd,EAAAmpC,cAAAroC,GACAgM,SAAA,IACA7iB,MAAA0/C,EACA1yB,cAAA/8B,KAAA+8B,cACA/G,QAAA,SAAA70B,GAEA29B,aAAAhZ,EAAAkW,SAEA9W,OAAA,SAAA/jB,GAEA2kB,EAAAkW,OAAAwC,WAAA,kBAAA1Y,EAAA0pC,aAAA,UAEA7/C,2CAAAC,EAAAzB,cAAAi7B,qEAAA,GAAAv5B,UAAA,qBAAAiE,IAAA,SAAAY,GAAA,OAAAoR,EAAAopC,aAAAx6C,GACA+R,UAAAzmB,KAAAovD,SACAvpC,SAAA7lB,KAAA6lB,SACAH,cAAA,SACA/V,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,qBAEA6gB,GACA/gB,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,0BAEA6gB,EAAAsD,IAAA,SAAA7yB,EAAAkF,GACA,OAAAlF,EAAAE,OAAA,OACAsO,2CAAAC,EAAAzB,cAAA,UAAArO,IAAAuG,EAAA4J,QAAA,SAAA6a,GAAA,OAAAhF,EAAAoqC,aAAA/uD,WAKAwO,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,6BAEA6gB,GACAA,EAAArvB,QAAA,GACAwtD,oBAAA76B,IAAA,SAAA7yB,EAAAkF,GACA,OAAAsJ,2CAAAC,EAAAzB,cAAA,UAAArO,IAAAuG,EAAA4J,QAAA,SAAA6a,GAAA,OAAAhF,EAAAoqC,aAAA/uD,KACAA,KAKA2tD,gBAAA96B,IAAA,SAAA7yB,EAAAkF,GACA,OAAAsJ,2CAAAC,EAAAzB,cAAA,UAAArO,IAAAuG,EAAA4J,QAAA,SAAA6a,GAAA,OAAAhF,EAAAoqC,aAAA/uD,KACAA,kJA9MAwO,2CAAAC,EAAAO,WAwNA,SAAAw/C,sBAAA/4C,EAAAvO,EAAAC,GAEA,IAAA6nD,EAAAv5C,EAAAw5C,eACA,OACA/nD,IAAA8nD,EAAAvgD,EAAAugD,EAAAhvD,EACAmH,IAAA6nD,EAAA79C,EAAA69C,EAAAv9C,gBAIAiyC,uCAAenjD,oBAAA,ylBA1OfitD,sIACAC,wIACA/rD,8HACAC,8IAEA+rD,gJACAC,wIACAE,wIAEAnK,gIAwNA8K,ytECpOAU,iDAEA,SAAAA,mBAAA,OAAA3rD,gBAAA1E,KAAAqwD,kBAAA7gD,2BAAAxP,KAAAyP,gBAAA4gD,kBAAA3gD,KAAA1P,8HAEAwF,EAAAkW,GAEA,IAAAiF,EAAAjF,EAAAnH,qBACAsK,EAAAnD,EAAAlH,uBACAiL,EAAAZ,EAAAa,oBACAhY,EAAAiZ,EAAA0Z,WAGAi2B,GADA,cAAA9qD,KAAA,UACA+qD,iEAAA,EAAAzvD,MAAA0E,EAAAunD,UAAArlD,IAGA8oD,EAAAhrD,EAAAgrD,YACA5P,EAAA4P,EAAA1vB,KACA8f,GAAA/hC,EAAAkiC,eAAAH,GACA,IAAAE,EAAA0P,EAAAtiD,KACA4yC,GAAAjiC,EAAAc,eAAAmhC,GACA,IAAA2P,EAAAD,EAAA5jD,QACA,GAAA6jD,EACA,CACAhxC,EAAAkiC,SAAAtgD,OAAA,EADA,IAAAyL,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAEA,QAAA2L,EAAAC,EAAAujD,EAAArjD,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADAP,EACAU,EAAAlN,MACA0f,EAAAkiC,SAAA90C,KAAAN,IAJA,MAAAqB,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,IAOA,IAAA0jD,EAAAF,EAAAE,YAGA,OAFAA,IAAAjxC,EAAAipB,aAAAC,OAAA+nB,GAEAJ,iCAGAvD,EAAArxC,GAEAA,EAAAnH,qBAAA,IACAsK,EAAAnD,EAAAlH,uBACAiL,EAAAZ,EAAAa,oBAEAja,EAAA,GAaA,OAZAA,EAAA,WACAiW,SAAAuH,gBACAiS,QAAA,SAAAxZ,EAAAi1C,mBACAC,WAAA,IAAAzxB,MAAAntB,YAEAvM,EAAA,UAAAsnD,EACAtnD,EAAA,aACAq7B,KAAAjiB,EAAAgjB,iBACA3zB,KAAA2Q,EAAAe,iBACAhT,QAAAiS,EAAAgyC,mBACAH,YAAAjxC,EAAAipB,aAAAC,QAEAljC,yCAIAD,EAAAkW,GAEA1b,KAAA8wD,SAAAtrD,EAAAkW,wCAIAA,GAEA,IAAAhU,EAAAgU,EAAAnH,qBAAA8lB,WACA0yB,EAAAwD,iEAAA,EAAA9oD,UAAAC,GAEA,OADA1H,KAAA+wD,OAAAhE,EAAArxC,6CAOA,gDAIAE,EAAAF,GACA,IAAA5W,EAAA9E,KACA,WAAA2gC,QAAA,SAAAqwB,EAAApwB,GACA,IAAAtqB,EAAAsF,EAAAklB,KACA,IAAAxqB,EAAA6qB,SAAAr8B,EAAA6W,eAEA,UAAAzb,MAAA,2CAAA4E,EAAA6W,cAAA,MAAArF,GAGA,IAAAq7B,EAAA,IAAAC,WACAD,EAAA55B,OAAA,SAAA5W,GACA,IAAAwf,EAAAjF,EAAAnH,qBACAsK,EAAAnD,EAAAlH,uBACAhP,EAAArE,EAAA0Y,OAAA9U,OACA+7B,EAAAxqB,EAAA3E,UAAA,EAAA2E,EAAAjV,OAAAyD,EAAA6W,cAAAta,OAAA,GACAqG,EAAAiZ,EAAA0Z,WAGA1Z,EAAAoH,KAAA,qBAAArgB,GAEA,IAEA,IAAA9G,EAAAC,KAAAC,MAAA0E,GAEAV,EAAAgsD,SAAAlwD,EAAA8a,GAEAiF,EAAAoH,KAAA,kBAAArgB,GAEAmX,GAEAA,EAAAkiC,eAAAjgB,GAGAkwB,IAEA,MAAA7vD,GAEAwwC,EAAAG,QACAlR,EAAAz/B,GAlBA,QAsBAwf,EAAAoH,KAAA,sBAAArgB,KAIAiqC,EAAAsf,QAAA,SAAA9vD,GACAy/B,EAAA,IAAA1gC,MAAA,0BAAAiB,EAAA0Y,OAAAZ,MAAAi4C,QAGAvf,EAAAI,WAAAn2B,0CAKAtF,EAAAoF,GAEA,IAAAhU,EAAAgU,EAAAnH,qBAAA8lB,WACA0yB,EAAAwD,iEAAA,EAAA9oD,UAAAC,GACAjC,EAAAzF,KAAA+wD,OAAAhE,EAAArxC,GACAnb,EAAAM,KAAAU,UAAAkE,GACAxE,OAAAy0B,gDAAA,EAAAz0B,CAAAqV,EAAA,IAAAtW,KAAA2b,cAAApb,6CAMA,6CAMA,4CAMA,OAAA6gB,KAAApP,SAAA,+DAMA,OAAAoP,KAAApP,SAAA,6DAMA,oDAMA,OAAAm/C,oDAAA,iJAhLAC,gFAAA,YAoLAf,4CAAe3uD,oBAAA,umBApLf2uD,uiECHAgB,oCAEA,SAAAA,SAAA9hD,GACA,OAAA7K,gBAAA1E,KAAAqxD,UAAA7hD,2BAAAxP,KAAAyP,gBAAA4hD,UAAA3hD,KAAA1P,KACAuP,sGAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,YAAAgd,MAAA,6BAAAC,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,SACAwB,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,kMACA3C,2CAAAC,EAAAzB,cAAA,WAAAgN,KAAA,UAAAqmB,OAAA,oCACA7xB,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,kGACA3C,2CAAAC,EAAAzB,cAAA,SACAwB,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,obAIA3C,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,4sCAWA3C,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,i3BAQA3C,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,2FAEA3C,2CAAAC,EAAAzB,cAAA,SACAwB,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,iTACA3C,2CAAAC,EAAAzB,cAAA,UAAAgN,KAAA,UAAAN,GAAA,OAAAC,GAAA,OAAA5I,EAAA,QACAvC,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,mTACA3C,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,iPA5CA3C,2CAAAC,EAAAO,oBAmDAkhD,oCAAe3vD,oBAAA,mkBAnDf2vD,wqECGAC,mDAEA,SAAAA,qBAAA,OAAA5sD,gBAAA1E,KAAAsxD,oBAAA9hD,2BAAAxP,KAAAyP,gBAAA6hD,oBAAA5hD,KAAA1P,wIAGA4b,EAAAF,GACA,IAAA5W,EAAA9E,KACA,WAAA2gC,QAAA,SAAAqwB,EAAApwB,GACA,IAAAtqB,EAAAsF,EAAAklB,KACA,IAAAxqB,EAAA6qB,SAAAr8B,EAAA6W,eAEA,UAAAzb,MAAA,2CAAA4E,EAAA6W,cAAA,MAAArF,GAGA,IAAAq7B,EAAA,IAAAC,WACAD,EAAA55B,OAAA,SAAA5W,GACA,IAAAwf,EAAAjF,EAAAnH,qBACAsK,EAAAnD,EAAAlH,uBACAhP,EAAArE,EAAA0Y,OAAA9U,OACA+7B,EAAAxqB,EAAA3E,UAAA,EAAA2E,EAAAjV,OAAAyD,EAAA6W,cAAAta,OAAA,GACAqG,EAAAiZ,EAAA0Z,WAGA1Z,EAAAoH,KAAA,qBAAArgB,GAEA,IAEA,IAAA6pD,GAAA,IAAAxjD,WAAAC,gBAAAxI,EAAA,YACA+qD,iEAAA,EAAAzvD,MAAAywD,EAAA7pD,GAEAiZ,EAAAoH,KAAA,kBAAArgB,GAEAmX,GAEAA,EAAAkiC,eAAAjgB,GAGAkwB,IAEA,MAAA7vD,GAEAwwC,EAAAG,QACAlR,EAAAz/B,GAjBA,QAqBAwf,EAAAoH,KAAA,sBAAArgB,KAIAiqC,EAAAsf,QAAA,SAAA9vD,GACAy/B,EAAA,IAAA1gC,MAAA,0BAAAiB,EAAA0Y,OAAAZ,MAAAi4C,QAGAvf,EAAAI,WAAAn2B,0CAKAtF,EAAAoF,GAEA,IAAAhU,EAAAgU,EAAAnH,qBAAA8lB,WACA0yB,EAAAwD,iEAAA,EAAA9oD,UAAAC,GACA8pD,GAAA,IAAA16C,eAAAC,kBAAAg2C,GACA9rD,OAAAy0B,gDAAA,EAAAz0B,CAAAqV,EAAA,IAAAtW,KAAA2b,cAAA61C,6CAMA,6CAMA,4CAMA,OAAApwC,KAAApP,SAAA,2DAMA,OAAAoP,KAAApP,SAAA,yDAMA,mDAMA,OAAAy/C,mDAAA,mJApGAL,gFAAA,YAwGAE,8CAAe5vD,oBAAA,2mBAxGf4vD,+iECHAI,mCAEA,SAAAA,QAAAniD,GACA,OAAA7K,gBAAA1E,KAAA0xD,SAAAliD,2BAAAxP,KAAAyP,gBAAAiiD,SAAAhiD,KAAA1P,KACAuP,oGAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,WAAAgd,MAAA,6BAAAC,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,SACAwB,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,kMACA3C,2CAAAC,EAAAzB,cAAA,WAAAgN,KAAA,UAAAqmB,OAAA,oCACA7xB,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,kGACA3C,2CAAAC,EAAAzB,cAAA,SACAwB,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,qJACA3C,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,6HACA3C,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,yDAEA3C,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,8KACA3C,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,8KACA3C,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,8KACA3C,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,8KACA3C,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,UAAA7I,EAAA,4UAvBA3C,2CAAAC,EAAAO,oBA6BAuhD,mCAAehwD,oBAAA,ikBA7BfgwD,q0BCHAC,mBAEA,SAAAA,UACAjtD,gBAAA1E,KAAA2xD,SACA3xD,KAAA6iB,IAAA,KACA7iB,KAAAsoB,UAAA,KACAtoB,KAAAwoB,QAAA,KACAxoB,KAAAgpB,YAAA,KACAhpB,KAAA2gB,gBAAA,KACA3gB,KAAA6e,kBAAA,KAEA7e,KAAAi2B,UAAAj2B,KAAAi2B,UAAA91B,KAAAH,oEAGA6iB,GAEA7iB,KAAA6iB,MACA7iB,KAAAsoB,UAAAzF,EAAAyF,UACAtoB,KAAAwoB,QAAA3F,EAAA2F,QACAxoB,KAAAgpB,YAAAnG,EAAA2X,iBACAx6B,KAAA2gB,gBAAAkC,EAAAtO,qBACAvU,KAAA6e,kBAAAgE,EAAArO,uBAEAkD,OAAA2P,iBAAA,UAAArnB,KAAAi2B,6CAKAve,OAAA7S,oBAAA,UAAA7E,KAAAi2B,6CAGA90B,GAGA,OAAAo/B,MAAAqxB,QAAArxB,MAAAsxB,SAAAtxB,MAAA5C,SACA,CAEA,IAAAqD,EAAAhhC,KAAA6iB,IAAAoH,mBAAAS,0BACAk2B,EAAA5gD,KAAA6e,kBAAAgjB,iBACAb,EAAAc,aAAA8e,EAAA5gD,KAAA6iB,IAAAoH,oBAEA9oB,EAAA8kB,iBACA9kB,EAAA+kB,uBAGA,OAAAqa,MAAAqxB,QAAArxB,MAAAsxB,SAAAtxB,MAAA5C,SAEA4C,MAAAva,SAGAhmB,KAAAgpB,YAAA8oC,OAKA9xD,KAAAgpB,YAAA+oC,OAEA5wD,EAAA8kB,iBACA9kB,EAAA+kB,uBAGA,OAAAqa,MAAAqxB,QAAArxB,MAAAsxB,SAAAtxB,MAAA5C,SACA,CAEA,IAAAsE,EAAAjiC,KAAA6iB,IAAAoH,mBAAAiY,oBACA,KAAA8vB,cAAA3wD,QAAA,GAQA,UAAAnB,MAAA,mDAAAF,KAAA6iB,IAAAoH,mBAAAhH,gBAAA,KANA,IAAAgvC,EAAAhwB,EAAA,GACAiwB,EAAAlyD,KAAA6e,kBAAAgjB,iBACAowB,EAAAnwB,aAAAowB,EAAAlyD,KAAA6iB,IAAAoH,oBAOA9oB,EAAA8kB,iBACA9kB,EAAA+kB,oKAKAyrC,mCAAejwD,oBAAA,2jBAlFfiwD,q3GC2BA,IAAAQ,eAAA,yCAEAC,mCAEA,SAAAA,QAAA7iD,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAAoyD,UACAttD,EAAA0K,2BAAAxP,KAAAyP,gBAAA2iD,SAAA1iD,KAAA1P,KAAAuP,KAEAhB,MAAA,CACA8jD,QAAA,GAGAvtD,EAAAwtD,oBAAAxtD,EAAAwtD,oBAAAnyD,KAAAwZ,8CAAA7U,KACAA,EAAAytD,qBAAAztD,EAAAytD,qBAAApyD,KAAAwZ,8CAAA7U,KACAA,EAAA0tD,YAAA1tD,EAAA0tD,YAAAryD,KAAAwZ,8CAAA7U,KATAA,6GAYA3D,GAEAnB,KAAAuP,MAAA6E,cAAAI,uBAAAi+C,cAAAtxD,EAAApB,0IAeAC,KAAAkgB,SAAA,CAAAmyC,QAAAryD,KAAAuO,MAAA8jD,0CAIA,IAAAl+C,EAAAnU,KACA6iB,EAAA7iB,KAAAuP,MAAAsT,IACAzO,EAAApU,KAAAuP,MAAA6E,cACAmU,EAAAvoB,KAAAuP,MAAAgZ,OACA5H,EAAAvM,EAAAG,qBACAsK,EAAAzK,EAAAI,uBACAwU,EAAAnG,EAAA2X,iBAEA9yB,EAAAiZ,EAAA0Z,WAEAq4B,EAAAC,qBAAAC,OAEA,OAAAjjD,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,qBACAF,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,iBACAF,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,sBAEAF,2CAAAC,EAAAzB,cAAA0kD,6CAAA,GAAAzqD,GAAA,eAAArI,MAAA8e,EAAAgjB,iBAAAhc,SAAA7lB,KAAAsyD,sBAEA3iD,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,qBAEAF,2CAAAC,EAAAzB,cAAA6gC,iDAAA,GAAA5mC,GAAA,eAAA0H,MAAAsR,KAAApP,SAAA,uBACA/B,QAAA,WACA,kBAAA0iD,UAEAA,UAAAG,cAAAC,gBAAA,cAEAxuB,MAAAnjB,KAAApP,SAAA,0BAIAuyB,MAAAnjB,KAAApP,SAAA,2BAKAuyB,MAAAnjB,KAAApP,SAAA,+BAEAhC,SAAA0iD,GACA/iD,2CAAAC,EAAAzB,cAAA6kD,mDAAA,WAWArjD,2CAAAC,EAAAzB,cAAA,SAAA/F,GAAA,eACA6H,QAAA,kBAAAsY,EAAA+L,OAAA,KACAlgB,EAAA6+C,2BAIAtjD,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,gBAEAF,2CAAAC,EAAAzB,cAAA6gC,iDAAA,GAAAn/B,UAAA,UAAAzH,GAAA,cAAA0H,MAAAsR,KAAApP,SAAA,6BACA/B,QAAA,WACAyH,OAAA8sB,QAAApjB,KAAApP,SAAA,wBAEAtK,EAAAhC,QACAsjB,EAAAtjB,QACAmZ,EAAAkiC,eAAA,SAGApxC,2CAAAC,EAAAzB,cAAA+kD,kDAAA,SAGAvjD,2CAAAC,EAAAzB,cAAAglD,8CAAA,GAAAtjD,UAAA,UAAAzH,GAAA,iBAAA0H,MAAAsR,KAAApP,SAAA,gCACA6Q,MACAlC,mBACAhR,2CAAAC,EAAAzB,cAAAghC,iDAAA,SAGAx/B,2CAAAC,EAAAzB,cAAA6gC,iDAAA,GAAAn/B,UAAA,UAAAzH,GAAA,eAAA0H,MAAAsR,KAAApP,SAAA,uBACAhC,UAAAgZ,EAAAsX,UACArwB,QAAA,kBAAA+Y,EAAA+oC,SACApiD,2CAAAC,EAAAzB,cAAAilD,gDAAA,SAGAzjD,2CAAAC,EAAAzB,cAAA6gC,iDAAA,GAAAn/B,UAAA,UAAAzH,GAAA,eAAA0H,MAAAsR,KAAApP,SAAA,uBACAhC,UAAAgZ,EAAAwX,UACAvwB,QAAA,kBAAA+Y,EAAA8oC,SACAniD,2CAAAC,EAAAzB,cAAAklD,gDAAA,SAGA1jD,2CAAAC,EAAAzB,cAAA6gC,iDAAA,GAAAn/B,UAAA,UAAAzH,GAAA,eAAA0H,MAAAsR,KAAApP,SAAA,uBACA/B,QAAA,kBAAAsY,EAAA+L,OAAAg/B,uDAAA,EAAAx+B,4BAAA9kB,SAAAtI,EAAAkiC,WACAj6B,2CAAAC,EAAAzB,cAAAihC,gDAAA,SAIAz/B,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,oBAEAF,2CAAAC,EAAAzB,cAAA6gC,iDAAA,GAAAn/B,UAAA,UAAAzH,GAAA,cAAA0H,MAAAsR,KAAApP,SAAA,sBACA/B,QAAA,SAAA9O,GAAA,OAAAuW,OAAAvC,KAAAg9C,eAAA,YACAxiD,2CAAAC,EAAAzB,cAAAolD,qDAAA,SAGA5jD,2CAAAC,EAAAzB,cAAAqlD,4CAAA,GAAA3jD,UAAA,UAAAzH,GAAA,eAAA0H,MAAAsR,KAAApP,SAAA,wBACArC,2CAAAC,EAAAzB,cAAAslD,gDAAA,SAGA9jD,2CAAAC,EAAAzB,cAAA6gC,iDAAA,GAAAn/B,UAAA,UAAAzH,GAAA,eAAA0H,MAAAsR,KAAApP,SAAA,uBACA/B,QAAA,SAAA9O,GAAAmW,SAAAmO,cAAAD,OAAArR,EAAAq+C,gBACA7iD,2CAAAC,EAAAzB,cAAAulD,oDAAA,SAGA/jD,2CAAAC,EAAAzB,cAAA,UAAA/F,GAAA,sBAAA2H,MAAA,CAAA4jD,SAAA3zD,KAAAuO,MAAA8jD,OAAA,YAAA34C,SAAA,SAAAvY,GAAAigB,KAAAwyC,kBAAAzyD,EAAA0Y,OAAA9Z,SACA4P,2CAAAC,EAAAzB,cAAA,UAAApO,MAAA,oBACA4P,2CAAAC,EAAAzB,cAAA,UAAApO,MAAA,uKAnJA4P,2CAAAC,EAAAO,oBA2JAiiD,mCAAe1wD,oBAAA,2kBA7JfywD,+HAEAC,mlEC1BAyB,wCAEA,SAAAA,aAAAtkD,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAA6zD,eACA/uD,EAAA0K,2BAAAxP,KAAAyP,gBAAAokD,cAAAnkD,KAAA1P,KAAAuP,KAEAg+B,mBAAAzoC,EAAAyoC,mBAAAptC,KAAAwZ,8CAAA7U,KAHAA,sHAMA3D,GAEA,IAAAkqB,EAAAlqB,EAAA0Y,OAAAwR,MACAA,EAAAhqB,OAAA,IAEArB,KAAAuP,MAAAsT,IAAAoH,mBAAAqB,mBAAAC,WAAAF,EAAA,GAAArrB,KAAAuP,MAAAsT,IAAAoH,oBACAuB,MAAA,SAAArqB,GACAy5B,kEAAA,EAAAlP,gBAAA,0DACAhrB,QAAAuY,MAAA9X,KAIAA,EAAA0Y,OAAA9Z,MAAA,qCAMA,IAAAma,EAAAla,KAAAuP,MAAAnH,GAAA,SACA,OAAAuH,2CAAAC,EAAAzB,cAAA,UACA0B,UAAA,6BAAA7P,KAAAuP,MAAAM,UACAzH,GAAApI,KAAAuP,MAAAnH,GACA0H,MAAA9P,KAAAuP,MAAAO,MACAC,MAAA/P,KAAAuP,MAAAQ,MACAC,SAAAhQ,KAAAuP,MAAAS,SACAC,QAAAjQ,KAAAuP,MAAAU,SACAN,2CAAAC,EAAAzB,cAAA,SAAA/F,GAAA8R,EAAAhM,KAAA,OAAA4yB,KAAA,SACA/wB,MAAA,CAAAyF,QAAA,QACAkE,SAAA1Z,KAAAutC,mBACA9kC,OAAAzI,KAAAuP,MAAAsT,IAAAoH,mBAAAqB,mBAAAwoC,qBAAApmD,KAAA,OACAiC,2CAAAC,EAAAzB,cAAA,SAAAiM,QAAAF,GACAla,KAAAuP,MAAAW,sJAxCAP,2CAAAC,EAAAO,oBA8CA0jD,wCAAenyD,oBAAA,qlBA9CfmyD,umECAAE,sCAEA,SAAAA,WAAAxkD,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAA+zD,aACAjvD,EAAA0K,2BAAAxP,KAAAyP,gBAAAskD,YAAArkD,KAAA1P,KAAAuP,KAEAU,QAAAnL,EAAAmL,QAAA9P,KAAAwZ,8CAAA7U,KAHAA,uGAMA3D,GAEAy5B,kEAAA,EAAAo5B,eAEAp5B,kEAAA,EAAArC,WAAAnX,KAAApP,SAAA,mBACA4oB,kEAAA,EAAArC,WAAAnX,KAAApP,SAAA,oBAIA4oB,kEAAA,EAAArC,WAAAnX,KAAApP,SAAA,mBAKA0F,OAAAvC,KADA,mEACA,UAEAnV,KAAAuP,MAAAU,SAEAjQ,KAAAuP,MAAAU,QAAA9O,oCAMA,OAAAwO,2CAAAC,EAAAzB,cAAA,UACA0B,UAAA,2BAAA7P,KAAAuP,MAAAM,UACAzH,GAAApI,KAAAuP,MAAAnH,GACA0H,MAAA9P,KAAAuP,MAAAO,MACAC,MAAA/P,KAAAuP,MAAAQ,MACAC,SAAAhQ,KAAAuP,MAAAS,SACAC,QAAAjQ,KAAAiQ,SACAjQ,KAAAuP,MAAAW,mJAxCAP,2CAAAC,EAAAO,oBA6CA4jD,sCAAeryD,oBAAA,ilBA7CfqyD,qgECDAE,uCAEA,SAAAA,YAAA1kD,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAAi0D,cACAnvD,EAAA0K,2BAAAxP,KAAAyP,gBAAAwkD,aAAAvkD,KAAA1P,KAAAuP,KAEAhB,MAAA,CACAxO,MAAA,MAGA+E,EAAAmxB,UAAAnxB,EAAAmxB,UAAA91B,KAAAwZ,8CAAA7U,KACAA,EAAA4U,SAAA5U,EAAA4U,SAAAvZ,KAAAwZ,8CAAA7U,KACAA,EAAAkxB,QAAAlxB,EAAAkxB,QAAA71B,KAAAwZ,8CAAA7U,KACAA,EAAAogB,OAAApgB,EAAAogB,OAAA/kB,KAAAwZ,8CAAA7U,KAVAA,0GAaA3D,GAEAnB,KAAAkgB,SAAA,CAAAngB,MAAAoB,EAAA0Y,OAAA9Z,0CAGAoB,GAEA,cAAAA,EAAArB,IACA,CACA,IAAA+Z,EAAA1Y,EAAA0Y,OAEA,OADA7Z,KAAAkgB,SAAA,CAAAngB,MAAA,wBAAA8Z,EAAA2L,UACA,EAEA,aAAArkB,EAAArB,IAGA,OADAqB,EAAA0Y,OAAA2L,QACA,kCAIArkB,GAEAnB,KAAAkgB,SAAA,CAAAngB,MAAAC,KAAAuP,MAAAxP,uCAGAoB,GAEAnB,KAAAuO,MAAAxO,OAEAC,KAAAuP,MAAAsW,UAAA7lB,KAAAuP,MAAAsW,SAAA,CAAA9lB,MAAAC,KAAAuO,MAAAxO,QAGAC,KAAAkgB,SAAA,CAAAngB,MAAA,wCAKA,OAAA4P,2CAAAC,EAAAzB,cAAA,SAAAD,KAAA,OACA2B,UAAA7P,KAAAuP,MAAAM,UACAzH,GAAApI,KAAAuP,MAAAnH,GACArI,MAAA,MAAAC,KAAAuO,MAAAxO,MAAAC,KAAAuO,MAAAxO,MAAAC,KAAAuP,MAAAxP,MACA2Z,SAAA1Z,KAAA0Z,SACAuc,UAAAj2B,KAAAi2B,UACAD,QAAAh2B,KAAAg2B,QACA9Q,OAAAllB,KAAAklB,mJA5DAvV,2CAAAC,EAAAO,oBAiEA8jD,uCAAevyD,oBAAA,mlBAjEfuyD,ygECAAC,uCAEA,SAAAA,YAAA3kD,GACA,OAAA7K,gBAAA1E,KAAAk0D,aAAA1kD,2BAAAxP,KAAAyP,gBAAAykD,aAAAxkD,KAAA1P,KACAuP,4GAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,eAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,gBAAA6I,KAAA,SACAxL,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,sPAXA3C,2CAAAC,EAAAO,oBAgBA+jD,uCAAexyD,oBAAA,+jBAhBfwyD,q/DCAAC,oCAEA,SAAAA,SAAA5kD,GACA,OAAA7K,gBAAA1E,KAAAm0D,UAAA3kD,2BAAAxP,KAAAyP,gBAAA0kD,UAAAzkD,KAAA1P,KACAuP,sGAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,YAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,gBAAA6I,KAAA,SACAxL,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,yZAXA3C,2CAAAC,EAAAO,oBAgBAgkD,oCAAezyD,oBAAA,yjBAhBfyyD,y+DCAAC,wCAEA,SAAAA,aAAA7kD,GACA,OAAA7K,gBAAA1E,KAAAo0D,cAAA5kD,2BAAAxP,KAAAyP,gBAAA2kD,cAAA1kD,KAAA1P,KACAuP,8GAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,gBAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,gBAAA6I,KAAA,SACAxL,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,07BAXA3C,2CAAAC,EAAAO,oBA2BAikD,wCAAe1yD,oBAAA,ikBA3Bf0yD,y/DCAAC,uCAEA,SAAAA,YAAA9kD,GACA,OAAA7K,gBAAA1E,KAAAq0D,aAAA7kD,2BAAAxP,KAAAyP,gBAAA4kD,aAAA3kD,KAAA1P,KACAuP,4GAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,eAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,OAAA7I,EAAA,kBACA3C,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,0RAXA3C,2CAAAC,EAAAO,oBAgBAkkD,uCAAe3yD,oBAAA,+jBAhBf2yD,q/DCAAC,yCAEA,SAAAA,cAAA/kD,GACA,OAAA7K,gBAAA1E,KAAAs0D,eAAA9kD,2BAAAxP,KAAAyP,gBAAA6kD,eAAA5kD,KAAA1P,KACAuP,gHAMA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,iBAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,6yBAXA3C,2CAAAC,EAAAO,oBA0BAmkD,yCAAe5yD,oBAAA,mkBA1Bf4yD,wsECCAC,0CAEA,SAAAA,eAAAhlD,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAAu0D,iBACAzvD,EAAA0K,2BAAAxP,KAAAyP,gBAAA8kD,gBAAA7kD,KAAA1P,KAAAuP,KAEAU,QAAAnL,EAAAmL,QAAA9P,KAAAwZ,8CAAA7U,KAHAA,+GAMA3D,GAEA,IAAA0hB,EAAA7iB,KAAAuP,MAAAsT,IACAA,EAAAtU,MAAAkb,aAEA5G,EAAA3C,SAAA,CAAAuJ,cAAA,IAEA5G,EAAAtU,MAAAkH,OAEAoN,EAAA2xC,cAIA3xC,EAAAsQ,8CAOA,IACAhe,EADAnV,KAAAuP,MAAAsT,IACAtU,MAAAkH,OAEA,OAAA9F,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,iBAAAsF,EAAA,YACAlF,QAAAjQ,KAAAiQ,SACAN,2CAAAC,EAAAzB,cAAA,OAAA2e,QAAA,YAAAD,MAAA,8BACAld,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,wNAnCA3C,2CAAAC,EAAAO,oBAyCAokD,0CAAe7yD,oBAAA,ulBAzCf6yD,yiFCIA,IAAAE,mBAAA,EACAC,mBAAA,EACAC,iBAAA,GACAC,iBAAA,EAEAC,mBAAA,QACAC,2BAAA,eAEAC,qCAEA,SAAAA,UAAAxlD,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAA+0D,YACAjwD,EAAA0K,2BAAAxP,KAAAyP,gBAAAslD,WAAArlD,KAAA1P,KAAAuP,KAEAuE,IAAA,KAHAhP,6GAMA0G,EAAAC,GAEA,IAAAmL,EAAA5W,KAAA8T,IACA,IAAA8C,EAAA,YAEA,IAAAxC,EAAApU,KAAAuP,MAAA6E,cACA4nC,EAAA5nC,EAAAE,qBACAqM,EAAAvM,EAAAG,qBAEAuK,EAAAk9B,EAAAliB,kBAAAnR,cACAmnC,EAAAhxC,EAAA8wC,aACAG,EAAAjxC,EAAA+wC,aACAmF,EAAAr0C,EAAA0Z,WAAAhvB,kBACAsmB,EAAAqjC,EAAA1pD,KAAAwkD,EAAA6E,iBACAjjC,EAAAsjC,EAAAzpD,KAAAwkD,EAAA6E,iBACAK,EAAAD,EAAAxpD,MAAA,EAAAmpD,iBACApiD,EAAAyiD,EAAAvpD,OAAA,EAAAmpD,iBACAM,EAAAt+C,EAAAu+C,WAAA,GACAD,EAAA1mD,aAAA,UAAAmjB,EAAA,IAAAD,EAAA,IAAAujC,EAAA,IAAA1iD,GACA2iD,EAAA1mD,aAAA,QAAAhD,GACA0pD,EAAA1mD,aAAA,SAAA/C,GAGAypD,EAAA1mD,aAAA,oBACA0mD,EAAA1mD,aAAA,2BACA0mD,EAAA1mD,aAAA,sCAWA,IADA,IAAA4mD,EAAAF,EAAAG,uBAAA,YACAD,EAAA/zD,OAAA,GACA,CACA+zD,EAAA,GACAE,SAGA,OAAAJ,mCAIA,IAAA/gD,EAAAnU,KACAoU,EAAApU,KAAAuP,MAAA6E,cACAuM,EAAAvM,EAAAG,qBACAynC,EAAA5nC,EAAAE,qBAGAihD,GAFAnhD,EAAAI,uBAEAJ,EAAAK,YAAAogD,qBACAW,EAAAphD,EAAAK,YAAAqgD,4BAEAptD,EAAAiZ,EAAA0Z,WACAvb,EAAAk9B,EAAAliB,kBAAAnR,cAEA4L,EAAAiC,uCAAA,EAAAzzB,mBAAA+C,KAAAuM,IAAAmtC,OAAAI,UAAA9gC,EAAAqf,YACAs3B,EAAAlhC,EAAA,EAGA,OAAA5kB,2CAAAC,EAAAzB,cAAA,OAAA/F,GAAA,oBAAA0L,IAAA,SAAAY,GAAA,OAAAP,EAAAL,IAAAY,GACAoY,SAAA2oC,EAAAhB,mBAAA,MACAgB,EAAAf,oBAAA,IACAngC,EAAA,IAAAA,EACA1H,MAAA,8BAGAld,2CAAAC,EAAAzB,cAAAunD,0CAAA,GAAAlc,QAAA9xC,EAAAkiC,YAGAj6B,2CAAAC,EAAAzB,cAAA,KAAA/F,GAAA,6BAAAg8C,UAAA,aACAtlC,EAAA8wC,aAAA,IACA9wC,EAAA+wC,aAAA,KAGAlgD,2CAAAC,EAAAzB,cAAA,KAAA0B,UAAA,YACAF,2CAAAC,EAAAzB,cAAA,QAAAiW,GAAA,IAAAC,GAAA,KAAAC,GAAA,IAAAC,GAAA,IAAAuS,OAAA,YACAnnB,2CAAAC,EAAAzB,cAAA,QAAAiW,GAAA,KAAAC,GAAA,IAAAC,GAAA,IAAAC,GAAA,IAAAuS,OAAA,aAIAy+B,GACA5lD,2CAAAC,EAAAzB,cAAAonD,EAAA5gD,SAAA,GAAA3U,KAAAuP,MAAA,CAAAqF,OAAA5U,QAGAw1D,GACA7lD,2CAAAC,EAAAzB,cAAAqnD,EAAA7gD,SAAA,GAAA3U,KAAAuP,MAAA,CAAAqF,OAAA5U,kJAjGA2P,2CAAAC,EAAAO,oBAuGA4kD,qCAAerzD,oBAAA,mlBA/Gf+yD,2IACAC,2IACAC,uIACAC,uIAEAC,2IACAC,2JAEAC,4vECVAY,oCAEA,SAAAA,SAAApmD,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAA21D,WACA7wD,EAAA0K,2BAAAxP,KAAAyP,gBAAAkmD,UAAAjmD,KAAA1P,KAAAuP,KAEAhB,MAAA,CAAAukC,QAAA,GAEAhuC,EAAA8wD,aAAA,KALA9wD,+GASA,IAAAqP,EAAAnU,KACAA,KAAA41D,aAAAp3B,WAAA,WACArqB,EAAA+L,SAAA,CAAA4yB,QAAA,KACAtc,uCAAA,EAAAr0B,gDAKA,IAAAq3C,IAAAx5C,KAAAuO,MAAAukC,QAAA9yC,KAAAuP,MAAAiqC,QACA,OAAA7pC,2CAAAC,EAAAzB,cAAA,QAAA7F,EAAA,OAAAuH,UAAA,qBAAA2pC,EAAA,eACAiK,WAAA,UAAAriC,KAAApP,SAAA,mKAtBArC,2CAAAC,EAAAO,oBA0BAwlD,oCAAej0D,oBAAA,ilBA1Bfi0D,kkCCDAE,oBAEA,SAAAA,WACAnxD,gBAAA1E,KAAA61D,UACA71D,KAAA6iB,IAAA,+DAGAA,GAEA,SAAAizC,2DAAA,EAAAlzB,qBAAA,iBAEAmzB,kEAAA,EAAAx9B,WAAAnX,KAAApP,SAAA,uBACA+jD,kEAAA,EAAAx9B,WAAAnX,KAAApP,SAAA,uKAKA6jD,oCAAen0D,oBAAA,+jBAjBfm0D,q0BCDAG,wBAEA,SAAAA,aAAAC,EAAA39C,EAAAwG,GACApa,gBAAA1E,KAAAg2D,cACAh2D,KAAAk2D,SAAAD,EACAj2D,KAAA07B,SAAApjB,EACAtY,KAAAk8B,UAAApd,EAEA9e,KAAAm2D,SAAA,EACAn2D,KAAAo2D,GAAA,EACAp2D,KAAAq2D,GAAA,EAEAr2D,KAAAs2D,UAAA,CAAAjuD,EAAA,EAAAC,EAAA,uEAMAD,EAAAC,GAIA,OAFAtI,KAAAo2D,GAAA/tD,EACArI,KAAAq2D,GAAA/tD,EACAtI,0CAKAA,KAAAm2D,SAAA,EACAn2D,KAAAs2D,UAAAjuD,EAAArI,KAAAo2D,GACAp2D,KAAAs2D,UAAAhuD,EAAAtI,KAAAq2D,mDAQA,OAAAr2D,KAAAs2D,2DAGAjuD,EAAAC,GAEAtI,KAAAs2D,UAAAjuD,IACArI,KAAAs2D,UAAAhuD,uCAKAtI,KAAAm2D,SAAA,qCAKA,OAAAn2D,KAAAm2D,0DAKA,IAAArZ,EAAA98C,KAAAs2D,UACA3kC,EAAAmrB,EAAAz0C,EAAArI,KAAAo2D,GACA1kC,EAAAorB,EAAAx0C,EAAAtI,KAAAq2D,GACA,OAAA1kC,IAAAD,yCASA,OAAA1xB,KAAA07B,+CASA,OAAA17B,KAAAk8B,+CAQA,OAAAl8B,KAAAk2D,4JAxEA,OAAAl2D,KAAAo2D,6BACA,OAAAp2D,KAAAq2D,gCA2EAL,wCAAet0D,oBAAA,6lBA3Ffs0D,22BCCAO,2BAEA,SAAAA,kBACA7xD,gBAAA1E,KAAAu2D,iBACAv2D,KAAA07B,SAAA,KACA17B,KAAAw2D,SAAA,EACAx2D,KAAAy2D,SAAA,EACAz2D,KAAA02D,aAAA,EACA12D,KAAA22D,aAAA,EACA32D,KAAA42D,eAAA,GAEA52D,KAAA62D,aAAA,EACA72D,KAAA82D,UAAA,EACA92D,KAAA+2D,UAAA,wEAGAz+C,GAGA,OADAtY,KAAA07B,SAAApjB,EACAtY,yCAGAg3D,GAIA,OAFAh3D,KAAA82D,UAAAE,EACAh3D,KAAA62D,aAAA72D,KAAA82D,YAAA92D,KAAA62D,aAAA72D,KAAA82D,WACA92D,yCAGAg3D,GAIA,OAFAh3D,KAAA+2D,UAAAC,EACAh3D,KAAA62D,aAAA72D,KAAA+2D,YAAA/2D,KAAA62D,aAAA72D,KAAA+2D,WACA/2D,8CAGAi3D,GAGA,OADAj3D,KAAA42D,eAAAK,EACAj3D,sCAKA,IAAA2xB,EAAA3xB,KAAA02D,aAAA12D,KAAAw2D,SACAx2D,KAAAw2D,UAAA7kC,EAAA3xB,KAAA42D,eACA,IAAAllC,EAAA1xB,KAAA22D,aAAA32D,KAAAy2D,SACAz2D,KAAAy2D,UAAA/kC,EAAA1xB,KAAA42D,6DAGApjC,EAAAC,GAEA,IAAAzzB,KAAA07B,SAAA,OAAArzB,EAAAmrB,EAAAxzB,KAAAw2D,SAAAluD,EAAAmrB,EAAAzzB,KAAAy2D,UAEA,IAAAtG,EAAAnwD,KAAA07B,SAAA00B,eACA,OACA/nD,GAAAmrB,EAAA28B,EAAAhvD,GAAAgvD,EAAAvgD,EAAA5P,KAAAw2D,SACAluD,GAAAmrB,EAAA08B,EAAAv9C,GAAAu9C,EAAA79C,EAAAtS,KAAAy2D,4CAIApuD,EAAAC,GACAlH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,IAGApB,KAAA02D,aAAA12D,KAAAw2D,SAAAnuD,EACArI,KAAA22D,aAAA32D,KAAAy2D,SAAAnuD,IAIAtI,KAAA02D,aAAAruD,EACArI,KAAA22D,aAAAruD,qCAIAqpB,EAAAD,GACAtwB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,IAGApB,KAAAw2D,UAAA7kC,EACA3xB,KAAAy2D,UAAA/kC,EACA1xB,KAAA02D,aAAA12D,KAAAw2D,SACAx2D,KAAA22D,aAAA32D,KAAAy2D,WAIAz2D,KAAA02D,cAAA/kC,EACA3xB,KAAA22D,cAAAjlC,oCAIAslC,GAEAh3D,KAAA62D,aAAA/wD,KAAAC,IAAA/F,KAAA+2D,UAAAjxD,KAAAuM,IAAArS,KAAA82D,UAAAE,qCAGAE,GAEAl3D,KAAA62D,cAAAK,EAEAl3D,KAAA62D,aAAA72D,KAAA+2D,UAAA/2D,KAAA62D,aAAA72D,KAAA+2D,UACA/2D,KAAA62D,aAAA72D,KAAA82D,YAAA92D,KAAA62D,aAAA72D,KAAA82D,gDAKA,OAAA92D,KAAAw2D,8CAKA,OAAAx2D,KAAAy2D,oDAKA,OAAAz2D,KAAA42D,kDAKA,OAAA52D,KAAA62D,mDAKA,OAAA72D,KAAA82D,gDAKA,OAAA92D,KAAA+2D,+CAKA,OAAA/2D,KAAA07B,kKAIA66B,2CAAe70D,oBAAA,mmBA5If60D,2vECDAY,+CAEA,SAAAA,oBAAA5nD,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAAm3D,sBACAryD,EAAA0K,2BAAAxP,KAAAyP,gBAAA0nD,qBAAAznD,KAAA1P,KAAAuP,KAEA6nD,cAAAtyD,EAAAsyD,cAAAj3D,KAAAwZ,8CAAA7U,KAHAA,+HAMA3D,GAEAnB,KAAAuP,MAAAxP,MACAmhB,yCAMA,IAAAT,EAAAzgB,KAAAuP,MAAAxP,MACA,OAAA4P,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,4DAAA4Q,EAAA42C,UAAA,IAAAr3D,KAAAuP,MAAAM,UACAzH,GAAApI,KAAAuP,MAAAnH,GAAA2H,MAAA/P,KAAAuP,MAAAQ,OACA/P,KAAAuP,MAAAW,UAAAuQ,EAAA1gB,MAAA0N,MAAA,OAAAumB,IAAA,SAAA7yB,GAAA,OAAAwO,2CAAAC,EAAAzB,cAAA,KAAArO,IAAAqB,SAAAsf,EACA9Q,2CAAAC,EAAAzB,cAAA,UAAA8B,QAAAjQ,KAAAo3D,eAAAh2C,KAAApP,SAAA,4KAtBArC,2CAAAC,EAAAO,oBA0BAgnD,+CAAez1D,oBAAA,ioBA1Bfy1D,iuGCQA,IAAAG,mBAAA,mBACAC,yBAAA,eACAC,2BAAA,WACAC,qBAAA,wCAEAC,OAAA,CACA,mEACA,4DACA,oEACA,gCACA,oDACA,uDACA,qEACA,0CACA,oDACA,qEACA,kDACA,yCACA,6DACA,mDACA,8DACA,2DACA,gEACA,+DACA,sDACA,2EAEAC,YAAA7xD,KAAA6M,MAAA7M,KAAA8P,SAAA8hD,OAAAr2D,2CACAq2D,OAAAC,gBAAAC,qCAAAC,wCAEAC,cAAA,mEACAC,UAAA,mEACAC,WAAA,gEACAC,gBAAA,yCACAC,YAAA,2CAEAC,gBAAA,kCACAC,UAAA,mDACAC,UAAA,sDACAC,WAAA,0CACAC,UAAA,wDACAC,YAAA,qDACAC,YAAA,oDACAC,UAAA,GACAC,aAAA,GAEAC,uCAEA,SAAAA,YAAArpD,GACA,IAAAzK,EAAA,OAAAJ,gBAAA1E,KAAA44D,cACA9zD,EAAA0K,2BAAAxP,KAAAyP,gBAAAmpD,aAAAlpD,KAAA1P,KAAAuP,KAEAspD,OAAA,KACA/zD,EAAAg0D,WAAA,KAEAh0D,EAAAi0D,eAAAj0D,EAAAi0D,eAAA54D,KAAAwZ,8CAAA7U,KACAA,EAAAk0D,iBAAAl0D,EAAAk0D,iBAAA74D,KAAAwZ,8CAAA7U,KACAA,EAAAm0D,mBAAAn0D,EAAAm0D,mBAAA94D,KAAAwZ,8CAAA7U,KACAA,EAAAo0D,kBAAAp0D,EAAAo0D,kBAAA/4D,KAAAwZ,8CAAA7U,KACAA,EAAAq0D,cAAAr0D,EAAAq0D,cAAAh5D,KAAAwZ,8CAAA7U,KACAA,EAAAs0D,aAAAt0D,EAAAs0D,aAAAj5D,KAAAwZ,8CAAA7U,KACAA,EAAAu0D,eAAAv0D,EAAAu0D,eAAAl5D,KAAAwZ,8CAAA7U,KAZAA,qHAgBA,IAAAqP,EAAAnU,KAEA0X,OAAA4hD,SAAA,SAAAn4D,GACA,IAAAsK,EAAA3F,KAAAuM,IACAiF,SAAAkB,KAAA+gD,aAAAjiD,SAAAkiD,gBAAAD,aACAjiD,SAAAkB,KAAAmc,aAAArd,SAAAkiD,gBAAA7kC,aACArd,SAAAkB,KAAAihD,aAAAniD,SAAAkiD,gBAAAC,cACA/hD,OAAAgiD,YACAC,EAAAjiD,OAAAkiD,YACA75D,EAAA+F,KAAAoL,MAAAzF,EAAAkuD,GAAA,EAEAxlD,EAAA0kD,QAAA1kD,EAAA2kD,aAEA3kD,EAAA0kD,OAAA9oD,MAAA8pD,OAAA95D,EAAA,KACAoU,EAAA2kD,WAAA/oD,MAAAsc,QAAAstC,EAAAluD,2CAKAtK,GAGA24D,uCAAA,EAAAx+C,QAAAy+C,4CAAA,4CAGA54D,GAEAuW,OAAAvC,KAAA2iD,cAAA,UACAvyC,mDAGApkB,GAEAuW,OAAAsiD,SAAA,CAAAhK,IAAA,EAAAiK,SAAA,qDAGA94D,GAEAuW,OAAAvC,KAAA8iD,gBAAA,UACA1yC,8CAGApkB,GAEAuW,OAAAvC,KAAA6iD,WAAA,UACAzyC,6CAGApkB,GAEAuW,OAAAvC,KAAA4iD,UAAA,UACAxyC,+CAGApkB,GAEAuW,OAAAvC,KAAA+iD,YAAA,UACA3yC,yCAIA,IACA20C,EADAp0C,EAAA9lB,KAwBA,OAlBAk6D,EAFAxiD,OAAA8c,WAAA,sBAAAC,QAEA,GAGA/c,OAAA8c,WAAA,sBAAAC,QAEA+iC,2BAGA9/C,OAAA8c,WAAA,qBAAAC,QAEA8iC,yBAKAD,mBAGA3nD,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,qBAEAF,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,qBAGAF,2CAAAC,EAAAzB,cAAA,cACAwB,2CAAAC,EAAAzB,cAAAgsD,sCAAA,GAAA/xD,GAAA,UAIAuH,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,WACAF,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,2BACAF,2CAAAC,EAAAzB,cAAAisD,uCAAA,GAAAr6D,MAAA63D,cAAArvD,MAAAsvD,oBAEAloD,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,oBACAF,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,iBACAF,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,gBACAF,2CAAAC,EAAAzB,cAAA,UAAA/F,GAAA,gBAAA6H,QAAAjQ,KAAA+4D,gBACAmB,GAEAvqD,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,kBAEAF,2CAAAC,EAAAzB,cAAA,OAAA/F,GAAA,6BACAuH,2CAAAC,EAAAzB,cAAA,UAAA/F,GAAA,kBAAA6H,QAAAjQ,KAAAg5D,kBACAvB,yBAMA9nD,2CAAAC,EAAAzB,cAAA,OAAA2F,IAAA,SAAAY,GAAA,OAAAoR,EAAAgzC,WAAApkD,GAAAtM,GAAA,eACAuH,2CAAAC,EAAAzB,cAAA,OAAA0e,MAAA,6BACArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,YACA7c,QAAAjQ,KAAAi5D,oBACAtpD,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,OAAA7I,EAAA,oBACA3C,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,mEAMA3C,2CAAAC,EAAAzB,cAAA,UAAA2F,IAAA,SAAA8S,GAAA,OAAAd,EAAA+yC,OAAAjyC,IACAjX,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,WACAF,2CAAAC,EAAAzB,cAAA,WAAAwB,2CAAAC,EAAAzB,cAAA,KAAA0B,UAAA,OAAAI,QAAAjQ,KAAAk5D,mBAAA,iBACAvpD,2CAAAC,EAAAzB,cAAA,WAAAwB,2CAAAC,EAAAzB,cAAA,KAAA0B,UAAA,OAAAI,QAAAjQ,KAAAm5D,eAAA,UACAxpD,2CAAAC,EAAAzB,cAAA,WAAAwB,2CAAAC,EAAAzB,cAAA,KAAA0B,UAAA,OAAAI,QAAAjQ,KAAAo5D,cAAA,UAEAzpD,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,WACAF,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,UACAF,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,QACAF,2CAAAC,EAAAzB,cAAA,wBACAwB,2CAAAC,EAAAzB,cAAA,KAAA0B,UAAA,UAAAI,QAAA,kBAAAyH,OAAAvC,KAAAgjD,gBAAA,UAAA5yC,UAAA,eAEA5V,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,SACAF,2CAAAC,EAAAzB,cAAA,yBACAwB,2CAAAC,EAAAzB,cAAA,KAAA8B,QAAA,kBAAAyH,OAAAvC,KAAAsjD,YAAA,UAAAlzC,UAAA,UACA5V,2CAAAC,EAAAzB,cAAA,KAAA8B,QAAA,kBAAAyH,OAAAvC,KAAAqjD,YAAA,UAAAjzC,UAAA,UACA5V,2CAAAC,EAAAzB,cAAA,KAAA8B,QAAA,kBAAAyH,OAAAvC,KAAAwjD,aAAA,UAAApzC,UAAA,WACA5V,2CAAAC,EAAAzB,cAAA,KAAA8B,QAAA,kBAAAyH,OAAAvC,KAAAujD,UAAA,UAAAnzC,UAAA,QACA5V,2CAAAC,EAAAzB,cAAA,gBACAwB,2CAAAC,EAAAzB,cAAA,KAAA8B,QAAA,kBAAAyH,OAAAvC,KAAAijD,UAAA,UAAA7yC,UAAA,QACA5V,2CAAAC,EAAAzB,cAAA,KAAA8B,QAAA,kBAAAyH,OAAAvC,KAAAkjD,UAAA,UAAA9yC,UAAA,QACA5V,2CAAAC,EAAAzB,cAAA,KAAA8B,QAAA,kBAAAyH,OAAAvC,KAAAmjD,WAAA,UAAA/yC,UAAA,SACA5V,2CAAAC,EAAAzB,cAAA,KAAA8B,QAAA,kBAAAyH,OAAAvC,KAAAojD,UAAA,UAAAhzC,UAAA,SAEA5V,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,WAGAF,2CAAAC,EAAAzB,cAAA,WACAwB,2CAAAC,EAAAzB,cAAA,KAAA0B,UAAA,OAAAI,QAAAjQ,KAAAq5D,gBACA1pD,2CAAAC,EAAAzB,cAAA,OAAA0e,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAgN,KAAA,OAAA7I,EAAA,oBACA3C,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,gGAHA,cAKA3C,2CAAAC,EAAAzB,cAAA,qBAIAwB,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,sBACAF,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,YACA,oEAEAF,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,YACAF,2CAAAC,EAAAzB,cAAA,sMA3LAwB,2CAAAC,EAAAO,oBAoMAlP,OAAAyrB,mDAAA,IAAAzrB,CAAA23D,wCAAel3D,oBAAA,ylBAlPf41D,8IACAC,0JACAC,8JACAC,kJAEAC,sHAsBAC,gIACAC,oIAAAC,0IAEAC,oIACAC,4HACAC,8HACAC,wIACAC,gIAEAC,wIACAC,4HACAC,4HACAC,8HACAC,4HACAC,gIACAC,gIACAC,4HACAC,kIAEAC,+gECvDAyB,gCAEA,SAAAA,KAAA9qD,GACA,OAAA7K,gBAAA1E,KAAAq6D,MAAA7qD,2BAAAxP,KAAAyP,gBAAA4qD,MAAA3qD,KAAA1P,KACAuP,8FAMA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA+mB,QAAA,MAAA9sB,GAAApI,KAAAuP,MAAAnH,GAAAykB,MAAA,6BAAAxkB,EAAA,MAAAC,EAAA,MACAwkB,QAAA,eACAnd,2CAAAC,EAAAzB,cAAA,SAAAD,KAAA,uUAUAyB,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,MAAAyC,EAAA,wCACA3C,2CAAAC,EAAAzB,cAAA,UAAA0B,UAAA,MAAAgL,GAAA,OAAAC,GAAA,OAAA5I,EAAA,SACAvC,2CAAAC,EAAAzB,cAAA,WAAA0B,UAAA,MAAA2xB,OAAA,iCACA7xB,2CAAAC,EAAAzB,cAAA,QAAAi2C,UAAA,kCAAAv0C,UAAA,sBACAF,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,MAAAyC,EAAA,sCACA3C,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,MAAAyC,EAAA,2CACA3C,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,MAAAyC,EAAA,sCACA3C,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,MAAAyC,EAAA,2CACA3C,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,MAAAyC,EAAA,2CACA3C,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,MAAAyC,EAAA,2CACA3C,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,MAAAyC,EAAA,mCACA3C,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,MAAAuU,GAAA,IAAAC,GAAA,OAAAC,GAAA,IAAAC,GAAA,SACA5U,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,MAAAyC,EAAA,mCACA3C,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,MAAAuU,GAAA,OAAAC,GAAA,OAAAC,GAAA,QAAAC,GAAA,SACA5U,2CAAAC,EAAAzB,cAAA,QAAA0B,UAAA,MAAAuU,GAAA,KAAAC,GAAA,OAAAC,GAAA,OAAAC,GAAA,6IApCA5U,2CAAAC,EAAAO,oBAyCAkqD,gCAAe34D,oBAAA,2kBAzCf24D,mqECCAC,iCAEA,SAAAA,MAAA/qD,GACA,OAAA7K,gBAAA1E,KAAAs6D,OAAA9qD,2BAAAxP,KAAAyP,gBAAA6qD,OAAA5qD,KAAA1P,KACAuP,gGAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,mBACAF,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,SACA7P,KAAAuP,MAAAxP,OAEA4P,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,YACA7P,KAAAuP,MAAAhH,4IAdAoH,2CAAAC,EAAAO,oBAoBAmqD,iCAAe54D,oBAAA,6kBApBf44D,6aCkBA5iD,OAAA2P,iBAAA,gBAAAkZ,GACA7/B,QAAAC,IAAA,8CACA45D,IACA7iD,OAAA8iD,sBAAAC,KAIA/iD,OAAA2P,iBAAA,wBAAAkZ,GAIA,GAFAt/B,OAAAy5D,EAAA,EAAAz5D,GAEA,SAAA05D,EAAA,EAAA/3B,qBAAA,sBACA,CACA,IAAAniB,EAAAW,KAAApP,SAAA,qBAMA,OALAuuB,KAAA7oB,OAAA6oB,SAEAA,EAAAq6B,YAAAn6C,GAGAA,KAKA/I,OAAAmjD,kBAAAC,KAAA,SAAAC,GACA,GAAAA,EACA,CACA,IAAAt6C,EAAA,GACAu6C,EAAA,GAAAA,EAAA,SAEAv6C,GAAAu6C,EAAA,OAGAt6D,QAAAC,IAAA,2CACA+W,OAAA6sB,MAAA,gEACA9jB,EAAA,KAAAA,EAAA,QAKA,IAEAuiB,EACAltB,MAHAmlD,EAAA,GACAC,EAAA,EAKA,SAAAX,IAEAt5D,OAAAy5D,EAAA,EAAAz5D,GACA+hC,EAAA1rB,SAAA2rB,eAAA,QAGA,SAAA03B,EAAA,EAAA/3B,qBAAA,sBAEIjC,QAAAw6B,IAAA,CAAAC,EAAAj6D,EAAA,GAAAi6D,EAAAj6D,EAAA,KAAA25D,KAAAM,EAAAj7D,KAAA,WACJ26D,KAAA,SAAApmD,GAAA,IAAA2mD,EAAA3mD,EAAA4mD,QAAA,OAAAxB,EAAA,EAAAx+C,QAAA+/C,KAEA,SAAAV,EAAA,EAAA/3B,qBAAA,eAEAk3B,EAAA,EAAAx+C,QAAAigD,EAAA,GAIAzB,EAAA,EAAAx+C,QAAAkgD,EAAA,GAKA,SAAAf,EAAAgB,GAEA3lD,GAAA2lD,EAAAP,GAAAD,EAEA,IAAAS,EAAA5B,EAAA,EAAAt+C,iBACAkgD,GAEAC,EAAA/rD,EAAAgsD,OAAAjsD,EAAAC,EAAAzB,cAAAutD,GAAA14B,GAGAk4B,EAAAO,EACA/jD,OAAA8iD,sBAAAC,sZAtFA,qFAIA,8FA2CAQ,sFACAC,6EACAl4B,yEACAltB,uEAGAykD,oFAsBAE,0MCzFA,SAAAoB,EAAAlZ,EAAAphC,GAEA,iBAAAA,QAAAnU,OAAAC,aAIA,IAFA,IAAAkB,EAAAo0C,EAAAjhC,gBACAnV,EAAA,KACA,OAAAA,EAAAgV,EAAAjU,OAAAvN,QAEAwO,EAAAo0C,EAAA7W,aAAAv9B,EAAAhC,GAEA,OAAAo2C,EAAAtgC,aAAA9T,+cAVAstD,81DCEAC,uCAEA,SAAAA,YAAAvsD,GACA,OAAA7K,gBAAA1E,KAAA87D,aAAAtsD,2BAAAxP,KAAAyP,gBAAAqsD,aAAApsD,KAAA1P,KACAuP,4GAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,eAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,uOACA3C,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,gBAAA6I,KAAA,oJAXAxL,2CAAAC,EAAAO,oBAgBA2rD,YAAeC,+BAAA,ylBAhBfD,6/DCAAE,6CAEA,SAAAA,kBAAAzsD,GACA,IAAAzK,EAAAJ,gBAAA1E,KAAAg8D,oBACAl3D,EAAA0K,2BAAAxP,KAAAyP,gBAAAusD,mBAAAtsD,KAAA1P,KAAAuP,KAEA+Q,YAAA,EACAxb,EAAAyb,YAAA,GACA,IAAAC,EAAAjR,EAAAkR,QAAA1gB,MAAAygB,QALA1T,GAAA,EAAAC,GAAA,EAAAC,OAAA1L,EAAA,IAMA,QAAA2L,EAAAC,EAAAsT,EAAApT,OAAAC,cAAAP,GAAAG,EAAAC,EAAAI,QAAAC,MAAAT,GAAA,EACA,KADA+M,EACA5M,EAAAlN,MACA+E,EAAAyb,YAAAlf,OAAA,IAEAyD,EAAAyb,aAAA,MAEAzb,EAAAyb,aAAA1G,EAAArR,gBAZA,MAAAoF,GAAAb,GAAA,EAAAC,EAAAY,EAAA,YAAAd,GAAA,MAAAI,EAAAW,QAAAX,EAAAW,SAAA,WAAAd,EAAA,MAAAC,GAAA,OAeAlI,EAAAmL,QAAAnL,EAAAmL,QAAA9P,KAAAwZ,8CAAA7U,KAfAA,qHAkBA3D,GAEA,IAAAwf,EAAA3gB,KAAAuP,MAAAoR,gBACA9B,EAAA7e,KAAAuP,MAAAsP,kBACA+B,EAAAzf,EAAA0Y,OAAA9Z,MACA0gB,EAAAzgB,KAAAuP,MAAAkR,QACA,OAAAG,GAEA,aAEA,IAAAC,EAAAJ,EAAA1gB,MAAAygB,QACAM,EAAAD,EAAAxf,OACA,GAAAyf,EAAA,GAAA9gB,KAAAsgB,YAAAQ,EACA,CAEA,IAAAjH,EAAAgH,EAAA7gB,KAAAsgB,eACAtgB,KAAAsgB,aAAAQ,IAAA9gB,KAAAsgB,YAAA,GAGAK,EAAAyR,YAAAvY,GAGA,MACA,gBAEA,IAAAmH,EAAAP,EAAA1gB,MAAAygB,QAEAG,EAAA0R,kBAAArR,GAGAnC,EAAAa,oBAAA4S,QAAAC,wBAGA9R,EAAAS,QAEA,MACA,QACA,UAAAhhB,MAAA,sEAOA,IAAAugB,EAAAzgB,KAAAuP,MAAAkR,QACA,OAAA9Q,2CAAAC,EAAAzB,cAAA,WACAwB,2CAAAC,EAAAzB,cAAA,SAAAsS,EAAA1gB,MAAAohB,KAAA,KAAAnhB,KAAAugB,aACA5Q,2CAAAC,EAAAzB,cAAA,UAAApO,MAAA,SAAAkQ,QAAAjQ,KAAAiQ,SAAAmR,KAAApP,SAAA,0BACArC,2CAAAC,EAAAzB,cAAA,UAAApO,MAAA,YAAAkQ,QAAAjQ,KAAAiQ,SAAAmR,KAAApP,SAAA,8KArEArC,2CAAAC,EAAAO,oBA0EA6rD,kBAAeD,+BAAA,6oBA1EfC,yjECAAC,oCAEA,SAAAA,SAAA1sD,GACA,OAAA7K,gBAAA1E,KAAAi8D,UAAAzsD,2BAAAxP,KAAAyP,gBAAAwsD,UAAAvsD,KAAA1P,KACAuP,sGAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,YAAAgd,MAAA,6BAAArhB,MAAA,KAAAC,OAAA,KAAAqhB,QAAA,aACAnd,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,gBAAA6I,KAAA,SACAxL,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,gSAXA3C,2CAAAC,EAAAO,oBAgBA8rD,SAAeF,+BAAA,mlBAhBfE,y+DCAAC,0CAEA,SAAAA,eAAA3sD,GACA,OAAA7K,gBAAA1E,KAAAk8D,gBAAA1sD,2BAAAxP,KAAAyP,gBAAAysD,gBAAAxsD,KAAA1P,KACAuP,kHAKA,OAAAI,2CAAAC,EAAAzB,cAAA,OAAA0B,UAAA,mBAAAgd,MAAA,6BAAAC,QAAA,YAAAthB,MAAA,KAAAC,OAAA,MACAkE,2CAAAC,EAAAzB,cAAA,QAAAmE,EAAA,sRAVA3C,2CAAAC,EAAAO,oBAeA+rD,eAAeH,+BAAA,+lBAffG","file":"app.bundle.ee1c712bad93173f995c.js","sourcesContent":["const LOCAL_STORAGE_ID = \"config\";\n\nconst cfg = {};\ncfg._resetOnLoad = false;\ncfg._userDefined = false;\ncfg._dirty = false;\ncfg.setValue = function(key, value) {\n  if (this.hasOwnProperty(key))\n  {\n    this._userDefined = true;\n    this._dirty = true;\n    this[key] = value;\n  }\n  else\n  {\n    throw new Error(\"Trying to assign value to non-existant key in config\");\n  }\n}.bind(cfg);\nexport default cfg;\n\n//Preferences\n\n//General\ncfg.MACHINE_ERRORS_MESSAGE_TAG = \"machineError\";\ncfg.MACHINE_CONVERSION_MESSAGE_TAG = \"machineConversion\";\n\ncfg.ERROR_CHECK_INTERVAL = 2000;\ncfg.GRAPH_IMMEDIATE_INTERVAL = 50;\n\n//Controller\ncfg.SMOOTH_OFFSET_DAMPING = 0.4;\ncfg.SCROLL_SENSITIVITY = 1.0 / 300.0;\ncfg.MIN_SCALE = 0.1;\ncfg.MAX_SCALE = 10;\n\n//Workspace\ncfg.INIT_WAITTIME = 1500;\n\n//NodalGraph\ncfg.STR_TRANSITION_DEFAULT_LABEL = \"\";\ncfg.STR_STATE_LABEL = \"q\";\ncfg.PARALLEL_EDGE_HEIGHT = 10;\ncfg.SELF_LOOP_HEIGHT = 40;\n\n//Input Fields\ncfg.SUBMIT_KEY = 13; //ENTER\ncfg.CLEAR_KEY = 27; //ESCAPE\ncfg.TAB_KEY = 9; //TAB\ncfg.UP_KEY = 38; //UP\ncfg.DOWN_KEY = 40; //DOWN\ncfg.DELETE_KEY = 8; //DELETE\n\n/** LEGACY CONFIG **/\n\n//Input\ncfg.DELETE_FORWARD_KEY = 46; //DELETE FORWARD\n\n//Geometry\ncfg.DEFAULT_GRAPH_SIZE = 300;\n\ncfg.NODE_RADIUS = 16;\ncfg.NODE_RADIUS_SQU = cfg.NODE_RADIUS * cfg.NODE_RADIUS;\ncfg.NODE_DIAMETER = cfg.NODE_RADIUS * 2;\ncfg.NODE_RADIUS_INNER = 12;\n\ncfg.INITIAL_MARKER_OFFSET_X = -(cfg.NODE_RADIUS + (cfg.NODE_RADIUS / 2));\n\ncfg.EDGE_RADIUS = 12;\ncfg.EDGE_RADIUS_SQU = cfg.EDGE_RADIUS * cfg.EDGE_RADIUS;\ncfg.ARROW_WIDTH = 10;\ncfg.PLACEHOLDER_LENGTH = cfg.NODE_RADIUS * 3;\ncfg.ENDPOINT_RADIUS = 6;\ncfg.ENDPOINT_RADIUS_SQU = cfg.ENDPOINT_RADIUS * cfg.ENDPOINT_RADIUS;\n\ncfg.HOVER_RADIUS_OFFSET = 4;\ncfg.CURSOR_RADIUS = 4;\ncfg.CURSOR_RADIUS_SQU = cfg.CURSOR_RADIUS * cfg.CURSOR_RADIUS;\n\n//Interface\ncfg.DOUBLE_TAP_TICKS = 600;\ncfg.LONG_TAP_TICKS = 600;\ncfg.SPAWN_RADIUS = 64;\ncfg.DEFAULT_SHOULD_DESTROY_POINTLESS_EDGE = true;\ncfg.DRAGGING_BUFFER = 18;\ncfg.DRAGGING_BUFFER_SQU = cfg.DRAGGING_BUFFER * cfg.DRAGGING_BUFFER;\n\n//Graph sorting\ncfg.PADDING_RADIUS_SQU = 2304;\n\n\n/** LOCAL STORAGE FUNCTIONS **/\n\n//check if browser support local storage\nexport function doesSupportLocalStorage()\n{\n  return typeof(Storage) !== 'undefined';\n}\n\nexport function loadConfig()\n{\n  const jsonString = localStorage.getItem(LOCAL_STORAGE_ID);\n  //If cannot find a config...\n  if (!jsonString)\n  {\n    //Just use the default one and don't save anything...\n    console.log(\"Using default config...\");\n    return;\n  }\n\n  try\n  {\n    console.log(\"Loading config...\");\n    const jsonData = JSON.parse(jsonString);\n    if (jsonData['_resetOnLoad'] == true)\n    {\n      //Reset the config\n      clearConfig();\n\n      //Save a new config\n      saveConfig();\n    }\n    else\n    {\n      Object.assign(cfg, jsonData);\n    }\n  }\n  catch (e)\n  {\n    //Reset the config\n    clearConfig();\n  }\n};\n\nexport function saveConfig(forceSave=false)\n{\n  if (forceSave || (cfg._userDefined && cfg._dirty))\n  {\n    try\n    {\n      console.log(\"Saving config...\");\n      const jsonString = JSON.stringify(cfg);\n      localStorage.setItem(LOCAL_STORAGE_ID, jsonString);\n\n      cfg._dirty = false;\n    }\n    catch (e)\n    {\n      //Reset the config\n      clearConfig();\n    }\n  }\n};\n\nexport function clearConfig()\n{\n  localStorage.removeItem(LOCAL_STORAGE_ID);\n\n  cfg._dirty = true;\n};\n","class EventHandler\n{\n  constructor(eventLogger, controller, eventName, postEventName)\n  {\n    this.eventLogger = eventLogger;\n    this.controller = controller;\n    this.eventName = eventName;\n    this.postEventName = postEventName || null;\n\n    this.onEvent = this.onEvent.bind(this);\n\n    this.controller.on(this.eventName, this.onEvent);\n  }\n\n  destroy()\n  {\n    this.controller.removeEventListener(this.eventName, this.onEvent);\n  }\n\n  onEvent(...args)\n  {\n    const result = {};\n    result.applyUndo = this.applyUndo.bind(this, result);\n    result.applyRedo = this.applyRedo.bind(this, result);\n\n    result.eventData = this.captureEvent(...args);\n\n    if (this.postEventName)\n    {\n      //Wait for post event to finalize event\n      this.controller.once(this.postEventName, (...args) => {\n        result.postData = this.capturePostEvent(...args);\n\n        this.eventLogger.captureEvent(result);\n      });\n    }\n    else\n    {\n      result.postData = result.eventData;\n\n      //Finalize event right now\n      this.eventLogger.captureEvent(result);\n    }\n  }\n\n  captureEvent(...args)\n  {\n    return {};\n  }\n\n  capturePostEvent(...args)\n  {\n    return {};\n  }\n\n  applyUndo(e)\n  {\n\n  }\n\n  applyRedo(e)\n  {\n\n  }\n}\n\nexport default EventHandler;\n","import FSAGraph from './FSAGraph.js';\nimport { SYMBOL_SEPARATOR } from './FSAEdge.js';\n\nconst GRAPH_PARSER_VERSION = \"1.0.0\";\n\nexport const JSON = {\n  parse(data, dst=null)\n  {\n    if (!dst) dst = new FSAGraph();\n    else dst.clear();\n\n    const nodeDatas = data['nodes'] || [];\n    const nodeCount = Math.min(nodeDatas.length || 0, data['nodeCount'] || 0);\n    const edgeDatas = data['edges'] || [];\n    const edgeCount = Math.min(edgeDatas.length || 0, data['edgeCount'] || 0);\n    const initialIndex = data['initial'] || 0;\n\n    const nodeIndices = new Map();\n    for(let i = 0; i < nodeCount; ++i)\n    {\n      const nodeData = nodeDatas[i];\n      if (!nodeData) continue;\n\n      //NOTE: Assumes createNode will maintain order\n      const node = dst.createNode(nodeData['x'] || 0, nodeData['y'] || 0, nodeData['id']);\n      node.setNodeLabel(nodeData['label'] || \"\");\n      node.setNodeAccept(nodeData['accept'] || false);\n      node.setNodeCustom(nodeData['custom'] || false);\n\n      nodeIndices.set(i, node);\n    }\n\n    const initialNode = nodeIndices.get(initialIndex);\n    if (initialNode)\n    {\n      dst.setStartNode(initialNode);\n    }\n\n    for(let i = 0; i < edgeCount; ++i)\n    {\n      const edgeData = edgeDatas[i];\n      if (!edgeData) continue;\n      const sourceNode = nodeIndices.get(edgeData['from']) || null;\n      //Cannot create source-less edges\n      if (!sourceNode) continue;\n      const destinationNode = nodeIndices.get(edgeData['to']) || null;\n      //NOTE: Assumes createEdge will maintain order\n      const edge = dst.createEdge(sourceNode, destinationNode, edgeData['id']);\n      const quadData = edgeData['quad'] || {};\n      edge.setEdgeLabel(edgeData['label'] || \"\");\n      edge.setQuadratic(quadData['radians'] || 0, quadData['length'] || 0);\n    }\n\n    return dst;\n  },\n  objectify(graph)\n  {\n    const graphNodes = graph.getNodes() || [];\n    const nodeCount = graphNodes.length || 0;\n    const graphEdges = graph.getEdges() || [];\n    const edgeCount = graphEdges.length || 0;\n    const graphInitial = graph.getStartNode();\n\n    const nodeDatas = new Array(nodeCount);\n    const nodeIndices = new Map();\n    for(let i = 0; i < nodeCount; ++i)\n    {\n      const node = graphNodes[i];\n      if (node)\n      {\n        //NOTE: Assumes node must have an id\n        const elementID = node.getGraphElementID();\n\n        nodeIndices.set(node, i);\n        nodeDatas[i] = {\n          id: elementID,\n          x: node.x || 0, y: node.y || 0,\n          label: node.getNodeLabel() || \"\",\n          accept: node.getNodeAccept() || false,\n          custom: node.getNodeCustom() || false\n        };\n      }\n    }\n\n    const edgeDatas = new Array(edgeCount);\n    for(let i = 0; i < edgeCount; ++i)\n    {\n      const edge = graphEdges[i];\n      if (edge)\n      {\n        //NOTE: Assumes edge must have an id\n        const elementID = edge.getGraphElementID();\n\n        const quad = edge.getQuadratic() || {};\n        const edgeSource = edge.getSourceNode();\n        const edgeDestination = edge.getDestinationNode();\n        const sourceIndex = nodeIndices.has(edgeSource) ? nodeIndices.get(edgeSource) : -1;\n        const destinationIndex = nodeIndices.has(edgeDestination) ? nodeIndices.get(edgeDestination) : -1;\n        edgeDatas[i] = {\n          id: elementID,\n          from: sourceIndex,\n          to: destinationIndex,\n          quad: { radians: quad['radians'] || 0, length: quad['length'] || 0 },\n          label: edge.getEdgeLabel() || \"\"\n        };\n      }\n    }\n\n    const initialIndex = nodeIndices.get(graphInitial) || 0;\n\n    return {\n      nodeCount: nodeCount,\n      nodes: nodeDatas,\n      edgeCount: edgeCount,\n      edges: edgeDatas,\n      initial: initialIndex,\n      _version: GRAPH_PARSER_VERSION\n    };\n  }\n};\n\nexport const XML = {\n  parse(data, dst=NULL)\n  {\n    if (!dst) dst = new FSAGraph();\n    else dst.clear();\n\n    const nodeElements = data.getElementsByTagName('state') || [];\n    const nodeCount = nodeElements.length;\n    const edgeElements = data.getElementsByTagName('transition') || [];\n    const edgeCount = edgeElements.length;\n    let initialIndex = \"0\";\n\n    //Get the nodes...\n    const nodeElementIDs = new Map();\n    for(let i = 0; i < nodeCount; ++i)\n    {\n      const nodeElement = nodeElements[i];\n      if (!nodeElement) continue;\n      const nodeElementID = nodeElement.getAttribute('id');\n      if (!nodeElementID) continue;\n\n      //Get x value\n      let x = 0;\n      const xElements = nodeElement.getElementsByTagName('x');\n      //If no elements exists, we are guaranteed an empty list...\n      if (xElements.length > 0)\n      {\n        const xElement = xElements[0];\n        if (xElement.hasChildNodes())\n        {\n          //hasChildNodes() guarantees at least 1 element\n          const xValue = xElement.childNodes[0];\n          if (xValue)\n          {\n            try\n            {\n              x = parseFloat(xValue.nodeValue) || 0;\n            }\n            catch (e)\n            {\n              x = 0;\n            }\n          }\n        }\n      }\n\n      //Get y value\n      let y = 0;\n      const yElements = nodeElement.getElementsByTagName('y');\n      //If no elements exists, we are guaranteed an empty list...\n      if (yElements.length > 0)\n      {\n        const yElement = yElements[0];\n        if (yElement.hasChildNodes())\n        {\n          //hasChildNodes() guarantees at least 1 element\n          const yValue = yElement.childNodes[0];\n          if (yValue)\n          {\n            try\n            {\n              y = parseFloat(yValue.nodeValue) || 0;\n            }\n            catch (e)\n            {\n              y = 0;\n            }\n          }\n        }\n      }\n\n      //Get initial flag\n      const initialElements = nodeElement.getElementsByTagName('initial');\n      //If no elements exists, we are guaranteed an empty list...\n      const initial = initialElements.length > 0;\n\n      //Get final flag\n      const finalElements = nodeElement.getElementsByTagName('final');\n      //If no elements exists, we are guaranteed an empty list...\n      const final = finalElements.length > 0;\n\n      //NOTE: Assumes createNode will maintain order\n      const node = dst.createNode(x, y);\n      node.setNodeLabel(nodeElement.getAttribute('name') || \"\");\n      node.setNodeAccept(final);\n\n      if (initial) initialIndex = nodeElementID;\n      nodeElementIDs.set(nodeElementID, node);\n    }\n\n    //Set the initial node...\n    const initialNode = nodeElementIDs.get(initialIndex);\n    if (initialNode)\n    {\n      dst.setStartNode(initialNode);\n    }\n\n    //Readjust the center of graph...\n    const boundingRect = dst.getBoundingRect();\n    const minX = boundingRect.minX;\n    const minY = boundingRect.minY;\n    const width = boundingRect.width;\n    const height = boundingRect.height;\n    const graphNodes = dst.getNodes();\n    for(let i = 0, len = graphNodes.length; i < len; ++i)\n    {\n      graphNodes[i].x -= minX + width / 2;\n      graphNodes[i].y -= minY + height / 2;\n    }\n\n    //Get the transitions...\n    const transitionMapping = new Map();\n    for(let i = 0; i < edgeCount; ++i)\n    {\n      const edgeElement = edgeElements[i];\n      if (!edgeElement) continue;\n\n      //Get from value\n      let sourceID = null;\n      const fromElements = edgeElement.getElementsByTagName('from');\n      //If no elements exists, we are guaranteed an empty list...\n      if (fromElements.length > 0)\n      {\n        const fromElement = fromElements[0];\n        if (fromElement.hasChildNodes())\n        {\n          //hasChildNodes() guarantees at least 1 element\n          const fromValue = fromElement.childNodes[0];\n          if (fromValue)\n          {\n            sourceID = fromValue.nodeValue;\n          }\n        }\n      }\n\n      //Cannot create source-less edges\n      if (!nodeElementIDs.has(sourceID)) continue;\n\n      //Get to value\n      let destinationID = \"\";\n      const toElements = edgeElement.getElementsByTagName('to');\n      //If no elements exists, we are guaranteed an empty list...\n      if (toElements.length > 0)\n      {\n        const toElement = toElements[0];\n        if (toElement.hasChildNodes())\n        {\n          //hasChildNodes() guarantees at least 1 element\n          const toValue = toElement.childNodes[0];\n          if (toValue)\n          {\n            destinationID = toValue.nodeValue || \"\";\n          }\n        }\n      }\n\n      //Get read value\n      let symbol = \"\";\n      const readElements = edgeElement.getElementsByTagName('read');\n      //If no elements exists, we are guaranteed an empty list...\n      if (readElements.length > 0)\n      {\n        const readElement = readElements[0];\n        if (readElement.hasChildNodes())\n        {\n          //hasChildNodes() guarantees at least 1 element\n          const readValue = readElement.childNodes[0];\n          if (readValue)\n          {\n            symbol = readValue.nodeValue || \"\";\n          }\n        }\n      }\n\n      const transitionID = sourceID + \"\\n\" + destinationID;\n      let symbols;\n      if (transitionMapping.has(transitionID))\n      {\n        symbols = transitionMapping.get(transitionID);\n      }\n      else\n      {\n        symbols = [];\n        transitionMapping.set(transitionID, symbols);\n      }\n      symbols.push(symbol);\n    }\n\n    for(const transitionKey of transitionMapping.keys())\n    {\n      const key = transitionKey.split(\"\\n\");\n      if (key.length !== 2) continue;\n\n      const symbols = transitionMapping.get(transitionKey);\n      const label = symbols.join(SYMBOL_SEPARATOR);\n      //Should never be null, since it was checked before...\n      const sourceNode = nodeElementIDs.get(key[0]);\n      const destinationNode = nodeElementIDs.get(key[1]);\n\n      //NOTE: Assumes createEdge will maintain order\n      const edge = dst.createEdge(sourceNode, destinationNode);\n      edge.setEdgeLabel(label);\n    }\n\n    return dst;\n  },\n  objectify(graph)\n  {\n    const graphNodes = graph.getNodes() || [];\n    const nodeCount = graphNodes.length || 0;\n    const graphEdges = graph.getEdges() || [];\n    const edgeCount = graphEdges.length || 0;\n    const graphInitial = graph.getStartNode();\n\n    const header = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"no\\\"?>\" +\n      \"<!--Created with flap.js \" + GRAPH_PARSER_VERSION + \"-->\" +\n      \"<structure></structure>\";\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(header, \"application/xml\");\n    const structure = doc.getElementsByTagName(\"structure\")[0];\n\n    const type = doc.createElement(\"type\");\n    type.innerHTML = \"fa\"; //finite automata\n    structure.appendChild(type);\n\n    const automaton = doc.createElement(\"automaton\");\n    structure.appendChild(automaton);\n\n    const nodeIndices = new Map();\n    for(let i = 0; i < nodeCount; ++i)\n    {\n      const node = graphNodes[i];\n      nodeIndices.set(node, i);\n\n      //state tag\n      const state = doc.createElement(\"state\");\n      state.id = \"\" + i;\n      state.setAttribute(\"name\", node.getNodeLabel());\n      automaton.appendChild(state);\n\n      //x tag\n      const x = doc.createElement(\"x\");\n      x.innerHTML = \"\" + (node.x || 0);\n      state.appendChild(x);\n\n      //y tag\n      const y = doc.createElement(\"y\");\n      y.innerHTML = \"\" + (node.y || 0);\n      state.appendChild(y);\n\n      //initial tag\n      if (graphInitial === node)\n      {\n        state.appendChild(doc.createElement(\"initial\"));\n      }\n\n      //final tag\n      if (node.getNodeAccept())\n      {\n        state.appendChild(doc.createElement(\"final\"));\n      }\n    }\n\n    for(let edge of graphEdges)\n    {\n      const symbols = edge.getEdgeSymbolsFromLabel();\n      for(let symbol of symbols)\n      {\n        //transition tag\n        const transition = doc.createElement(\"transition\");\n        automaton.appendChild(transition);\n\n        //from tag\n        const from = doc.createElement(\"from\");\n        from.innerHTML = \"\" + (nodeIndices.get(edge.getSourceNode()) || 0);\n        transition.appendChild(from);\n\n        //to tag\n        const to = doc.createElement(\"to\");\n        to.innerHTML = \"\" + (nodeIndices.get(edge.getDestinationNode()) || 0);\n        transition.appendChild(to);\n\n        //read tag\n        const read = doc.createElement(\"read\");\n        read.innerHTML = \"\" + (symbol || \"\");\n        transition.appendChild(read);\n      }\n    }\n\n    return doc;\n  }\n};\n","import React from 'react';\nimport './IconButton.css';\n\nclass IconButton extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <button\n      className={\"icon-button \" + this.props.className}\n      id={this.props.id}\n      title={this.props.title}\n      style={this.props.style}\n      disabled={this.props.disabled}\n      onClick={this.props.onClick}>\n      {this.props.children}\n    </button>;\n  }\n}\n\nexport default IconButton;\n","export const EMPTY = '\\u03B5';\nexport const ARROW = '\\u2192';\nexport const EMPTY_SET = '\\u2205';\n\n//'\\u03BB' = LAMBDA\n","import NotificationManager from './NotificationManager.js';\n\n//Singleton pattern (I know, I'm sorry. But we must.)\nconst INSTANCE = new NotificationManager();\nexport default INSTANCE;\n","import LocalSaveManager from './LocalSaveManager.js';\n\n//Singleton pattern (I know, I'm sorry. But we must.)\nconst INSTANCE = new LocalSaveManager();\nexport default INSTANCE;\n","const RGB_WHITE = [255, 255, 255];\nconst RGB_BLACK = [0, 0, 0];\n\nexport function blendRGB(percent, rgb1, rgb2=null, dst=[])\n{\n  const blendAmount = Math.abs(percent);\n  if (!rgb2) rgb2 = percent < 0 ? RGB_BLACK : RGB_WHITE;\n\n  dst[0] = rgb1[0] + Math.round(blendAmount * (rgb2[0] - rgb1[0]));\n  dst[1] = rgb1[1] + Math.round(blendAmount * (rgb2[1] - rgb1[1]));\n  dst[2] = rgb1[2] + Math.round(blendAmount * (rgb2[2] - rgb1[2]));\n  return dst;\n}\n\nexport function invertRGB(rgb, blackwhite=false, dst=[])\n{\n  if (blackwhite)\n  {\n    // http://stackoverflow.com/a/3943023/112731\n    if ((rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114) > 186)\n    {\n      dst[0] = 0;\n      dst[1] = 0;\n      dst[2] = 0;\n    }\n    else\n    {\n      dst[0] = 0xFF;\n      dst[1] = 0xFF;\n      dst[2] = 0xFF;\n    }\n  }\n  else\n  {\n    dst[0] = (255 - rgb[0]);\n    dst[1] = (255 - rgb[1]);\n    dst[2] = (255 - rgb[2]);\n  }\n  return dst;\n}\n\n/* RGB and HSL conversions: https://gist.github.com/mjackson/5311256 */\nexport function HEXtoRGB(hex, dst=[])\n{\n  if (hex.indexOf('#') === 0) hex = hex.slice(1);\n  if (hex.length === 3) hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n  if (hex.length !== 6) throw new Error('Invalid hex color format');\n  const red = hex.substring(0, 2);\n  const green = hex.substring(2, 4);\n  const blue = hex.substring(4, 6);\n\n  dst[0] = parseInt(red, 16);\n  dst[1] = parseInt(green, 16);\n  dst[2] = parseInt(blue, 16);\n  return dst;\n}\nexport function RGBtoHEX(rgb)\n{\n  return '#' + (rgb[2] | (rgb[1] << 8) | (rgb[0] << 16) | (1 << 24)).toString(16).slice(1);\n}\nexport function RGBtoHSV(rgb, dst=[])\n{\n  let r = rgb[0] / 255;\n  let g = rgb[1] / 255;\n  let b = rgb[2] / 255;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const d = max - min;\n\n  let h = 0;\n  const s = max == 0 ? 0 : d / max;\n  const v = max;\n  if (max == min)\n  {\n    h = 0;\n  }\n  else\n  {\n    switch(max)\n    {\n      case r: h = (g - b) / d + (g < b ? 6 : 0); break;\n      case g: h = (b - r) / d + 2; break;\n      case b: h = (r - g) / d + 4; break;\n    }\n\n    h /= 6;\n  }\n\n  dst[0] = h;\n  dst[1] = s;\n  dst[2] = v;\n  return dst;\n}\nexport function HSVtoRGB(h, s, v, dst=[])\n{\n  let r = 0; let g = 0; let b = 0;\n  const i = Math.floor(h * 6);\n  const f = h * 6 - i;\n  const p = v * (1 - s);\n  const q = v * (1 - f * s);\n  const t = v * (1 - (1 - f) * s);\n  switch(i % 6)\n  {\n    case 0: r = v, g = t, b = p; break;\n    case 1: r = q, g = v, b = p; break;\n    case 2: r = p, g = v, b = t; break;\n    case 3: r = p, g = q, b = v; break;\n    case 4: r = t, g = p, b = v; break;\n    case 5: r = v, g = p, b = q; break;\n  }\n\n  dst[0] = r * 255;\n  dst[1] = g * 255;\n  dst[2] = b * 255;\n  return dst;\n}\n","import QuadraticEdge from 'graph/QuadraticEdge.js';\n\nexport const SYMBOL_SEPARATOR = ' ';\nexport const EMPTY_CHAR = '\\u03B5';\n\nclass FSAEdge extends QuadraticEdge\n{\n  constructor(id, from, to=null)\n  {\n    super(id, from, to);\n  }\n\n  //Override\n  setEdgeLabel(label)\n  {\n    if (typeof label === 'string')\n    {\n      super.setEdgeLabel(label);\n    }\n    else\n    {\n      super.setEdgeLabel(EMPTY_CHAR);\n    }\n  }\n\n  getEdgeSymbolsFromLabel()\n  {\n    return this.getEdgeLabel().split(SYMBOL_SEPARATOR);\n  }\n}\n\nexport default FSAEdge;\n","import GraphNode from 'graph/GraphNode.js';\nimport Config from 'config.js';\n\nclass FSANode extends GraphNode\n{\n  constructor(id, x, y)\n  {\n    super(id, x, y);\n\n    this._accept = false;\n\n    //this is not saved to hash since it is an aesthetic option\n    this._custom = false;\n  }\n\n  setNodeAccept(value)\n  {\n    this._accept = value;\n  }\n\n  getNodeAccept()\n  {\n    return this._accept;\n  }\n\n  setNodeCustom(value)\n  {\n    this._custom = value;\n  }\n\n  getNodeCustom()\n  {\n    return this._custom;\n  }\n\n  //Override\n  getNodeSize()\n  {\n    return Config.NODE_RADIUS;\n  }\n\n  //Override\n  getHashString(usePosition=true)\n  {\n    return super.getHashString(usePosition) + \":\" + (this._accept ? \"1\" : \"0\");\n  }\n}\n\nexport default FSANode;\n","import React from 'react';\nimport './Viewport.css';\n\nconst VIEWPORT_RENDER_LAYER = \"viewport\";\n\nclass Viewport extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.ref = null;\n    this.labelEditor = null;\n\n    this.state = {\n      prevMode: Viewport.NORMAL,\n      mode: Viewport.NORMAL\n    };\n  }\n\n  //Override\n  render()\n  {\n    const currentModule = this.props.currentModule;\n    const inputController = currentModule.getInputController();\n    const graphController = currentModule.getGraphController();\n    const machineController = currentModule.getMachineController();\n\n    const ViewportRenderer = currentModule.getRenderer(VIEWPORT_RENDER_LAYER);\n\n    return <div className={\"viewport-container viewport-\" + this.state.mode} ref={ref=>this.ref=ref}>\n      { ViewportRenderer &&\n        <ViewportRenderer {...this.props} parent={this}/>}\n    </div>;\n  }\n}\nViewport.NORMAL = \"normal\";\nViewport.WAITING = \"waiting\";\nViewport.TESTING = \"testing\";\nViewport.DANGEROUS = \"dangerous\";\n\nexport default Viewport;\n","import React from 'react';\nimport './OptionGroup.css';\n\nimport IconToggle from 'icons/IconToggle.js';\nimport DropDownIcon from 'icons/DropDownIcon.js';\n\nclass OptionGroup extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.dropdown = React.createRef();\n  }\n\n  isOpen()\n  {\n    return this.dropdown.state ? this.dropdown.state.open : false;\n  }\n\n  render()\n  {\n    return <div className={\"option-group \" + this.props.className}>\n      <div className=\"option-header\" onClick={(e)=>this.dropdown.onClick(e)}>\n        <label>{this.props.title}</label>\n        <label>({this.props.label})</label>\n        <IconToggle id=\"collapse\" ref={ref=>this.dropdown=ref} defaultValue={this.props.defaultValue}\n          style={{pointerEvents: \"none\"}}>\n          <DropDownIcon/>\n        </IconToggle>\n      </div>\n      <div className=\"option-content\"\n        style={{display: this.isOpen() ? \"block\" : \"none\"}}>\n        { this.props.children }\n      </div>\n    </div>;\n  }\n}\n\nexport default OptionGroup;\n","export function guid()\n{\n  function s4()\n  {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n  return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();\n};\n\nexport function lerp(a, b, dt)\n{\n  return a * (1 - dt) + b * dt;\n};\n\nexport function stringHash(value=\"\")\n{\n  let hash = 0;\n  for(let i = 0, len = value.length; i < len; i++)\n  {\n    hash = Math.imul(31, hash) + value.charCodeAt(i) | 0;\n  }\n  return hash;\n};\n","import React from 'react';\nimport './OptionHotkey.css';\n\nclass OptionHotkey extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <div className={\"option-container option-hotkey \" + this.props.className}>\n      <label>{this.props.label}</label>\n      <span>{this.props.keyName}</span>\n    </div>;\n  }\n}\n\nexport default OptionHotkey;\n","export const FILE_TYPE_PNG = \"png\";\nexport const FILE_TYPE_JPG = \"jpg\";\n\nexport function downloadText(filename, textData)\n{\n  downloadURL(filename, getTextDataURI(textData));\n}\n\nexport function downloadSVG(filename, filetype, svg, width, height)\n{\n  const serializer = new XMLSerializer();\n  const svgString = serializer.serializeToString(svg);\n  const blob = new Blob([svgString], {type:'image/svg+xml'});\n  const url = URL.createObjectURL(blob);\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext(\"2d\");\n  const pixelRatio = window.devicePixelRatio || 1;\n  canvas.width = width * pixelRatio;\n  canvas.height = height * pixelRatio;\n  canvas.style.width = width + \"px\";\n  canvas.style.height = height + \"px\";\n  ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n\n  const image = new Image();\n  image.onload = () => {\n    ctx.drawImage(image, 0, 0);\n    URL.revokeObjectURL(url);\n\n    const imageURI = canvas.toDataURL('image/' + filetype).replace('image/' + filetype, 'image/octet-stream');\n    downloadURL(filename + '.' + filetype, imageURI);\n  };\n  image.src = url;\n}\n\nexport function downloadURL(filename, url)\n{\n  const element = document.createElement('a');\n  const headerIndex = url.indexOf(\";\");\n  url = url.substring(0, headerIndex + 1) + \"headers=Content-Disposition%3A%20attachment%3B%20filename=\" + filename + \";\" + url.substring(headerIndex + 1);\n  element.setAttribute('href', url);\n  element.setAttribute('download', filename);\n\n  element.style.display = \"none\";\n  document.body.appendChild(element);\n\n  element.click();\n  document.body.removeChild(element);\n}\n\nfunction getTextDataURI(data)\n{\n  return 'data:text/plain; charset=utf-8,' + encodeURIComponent(data);\n}\n","import React from 'react';\nimport './InfoBlock.css';\n\nimport IconToggle from 'icons/IconToggle.js';\nimport DropDownIcon from 'icons/DropDownIcon.js';\n\n//TODO: Should be deprecated to use OptionGroup (or something similar)\nclass InfoBlock extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.dropdown = React.createRef();\n  }\n\n  isOpen()\n  {\n    return this.dropdown.state ? this.dropdown.state.open : false;\n  }\n\n  render()\n  {\n    return <div className={\"infoblock-container \" + this.props.className}>\n      <div className=\"infoblock-header\" onClick={(e)=>this.dropdown.onClick(e)}>\n        <label>{this.props.title}</label>\n        <IconToggle id=\"collapse\" ref={ref=>this.dropdown=ref} defaultValue={this.props.defaultValue}\n          style={{pointerEvents: \"none\"}}>\n          <DropDownIcon/>\n        </IconToggle>\n      </div>\n      <div className=\"infoblock-content\"\n        style={{display: this.isOpen() ? \"block\" : \"none\"}}>\n        {this.props.children}\n      </div>\n    </div>;\n  }\n}\n\nexport default InfoBlock;\n","import FSA from './FSA.js';\n\nconst SRC = 0;\nconst SYMBOL = 1;\nconst DST = 2;\n\nclass DFA extends FSA\n{\n  constructor()\n  {\n    super();\n  }\n\n  validate()\n  {\n    //TODO: Deprecate this\n    console.error(\"This is deprecated, please use FSA.isValidDFA()\");\n    return this.isValidDFA();\n  }\n\n  //Override default behavior\n  newTransition(fromState, toState, symbol)\n  {\n    if (!this._states.includes(fromState))\n    {\n      throw new Error(\"State \\'\" + fromState + \"\\' does not exist.\");\n    }\n\n    if (!this._states.includes(toState))\n    {\n      throw new Error(\"State \\'\" + toState + \"\\' does not exist.\");\n    }\n\n    for(const transition of this._transitions)\n    {\n      //Check if already exists...\n      if (transition[SRC] == fromState && transition[SYMBOL] == symbol && transition[DST] == toState)\n      {\n        return;\n      }\n      //Check if valid deterministic transition...\n      else if (transition[SRC] == fromState && transition[SYMBOL] == symbol)\n      {\n        throw new Error(\"Unable to create illegal nondeterministic transition for DFA.\");\n      }\n    }\n\n    //Create new transition\n    this._transitions.push([fromState, symbol, toState]);\n  }\n}\n\nexport default DFA;\n","import React from 'react';\n\nclass StyleInput extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(e)\n  {\n    const newValue = e.target.value;\n    const value = this.props.value;\n    const onChange = this.props.onChange;\n\n    value.setStyle(newValue);\n    if (onChange) onChange(value);\n  }\n\n  //Override\n  render()\n  {\n    const title = this.props.title;\n    const value = this.props.value;\n    const propName = value.prop;\n    const inputType = value.type;\n    const inputID = \"styleopt-\" + propName;\n\n    return <span id={this.props.id} className={this.props.className} style={this.props.style}>\n      <input id={inputID} type={inputType} value={value.getStyle()} onChange={this.onChange} disabled={this.props.disabled}/>\n      <label htmlFor={inputID}>{title}</label>\n    </span>;\n  }\n}\nexport default StyleInput;\n","import React from 'react';\nimport Config from 'config.js';\n\nconst HIGHLIGHT_RADIUS_OFFSET = 4;\nconst HIGHLIGHT_LINE_WIDTH = 3;\nconst HIGHLIGHT_LINE_ARRAY = [8, 6];\n\nclass HighlightRenderer extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    const target = this.props.target;\n    const type = this.props.type;\n\n    let x = 0;\n    let y = 0;\n    let r = Config.CURSOR_RADIUS;\n    switch(type)\n    {\n      case \"node\":\n        x = target.x || 0;\n        y = target.y || 0;\n        r = Config.NODE_RADIUS;\n        break;\n      case \"edge\":\n        const center = target.getCenterPoint();\n        x = center.x || 0;\n        y = center.y || 0;\n        r = Config.EDGE_RADIUS;\n        break;\n      case \"endpoint\":\n        const endpoint = target.getEndPoint();\n        x = endpoint.x || 0;\n        y = endpoint.y || 0;\n        r = Config.ENDPOINT_RADIUS;\n        break;\n      case \"initial\":\n        x = target.x + Config.INITIAL_MARKER_OFFSET_X || 0;\n        y = target.y || 0;\n        r = Config.EDGE_RADIUS;\n        break;\n    }\n\n    return <g className=\"graph-highlight-container\">\n      <circle className={\"graph-highlight \" + this.props.className}\n        cx={x} cy={y}\n        r={r + HIGHLIGHT_RADIUS_OFFSET}\n        strokeDashoffset={this.props.offset || 0}\n        strokeDasharray={HIGHLIGHT_LINE_ARRAY}\n        strokeWidth={HIGHLIGHT_LINE_WIDTH}\n        fill=\"none\"/>\n    </g>;\n  }\n}\n\nexport default HighlightRenderer;\n","const ROUTER = {\n  _current: null,\n  routeTo(component)\n  {\n    this._current = component;\n  },\n  getCurrentPage()\n  {\n    return this._current;\n  }\n};\n\nexport default ROUTER;\n","class AbstractGraphExporter\n{\n  constructor() {}\n\n  importFromData(data, module)\n  {\n    throw new Error(\"Unsupported import for type \\'\" + this.getFileType() + \"\\'\");\n  }\n\n  exportToData(module)\n  {\n    throw new Error(\"Unsupported export for type \\'\" + this.getFileType() + \"\\'\");\n  }\n\n  doesSupportData()\n  {\n    return false;\n  }\n\n  importFromFile(fileBlob, module)\n  {\n    throw new Error(\"Unsupported import for type \\'\" + this.getFileType() + \"\\'\");\n  }\n\n  exportToFile(filename, module)\n  {\n    throw new Error(\"Unsupported export for type \\'\" + this.getFileType() + \"\\'\");\n  }\n\n  doesSupportFile()\n  {\n    return false;\n  }\n\n  canImport()\n  {\n    return false;\n  }\n\n  getTitle()\n  {\n    return this.getLabel();\n  }\n\n  getIconClass()\n  {\n    return null;\n  }\n\n  getLabel()\n  {\n    return \"Export as \" + this.getFileType().toUpperCase();\n  }\n\n  getFileType()\n  {\n    throw new Error(\"Unknown file type for exporter\");\n  }\n}\n\nexport default AbstractGraphExporter;\n","import FSA from './FSA.js';\nimport { EMPTY } from './Symbols.js';\n\nconst SRC = 0;\nconst SYMBOL = 1;\nconst DST = 2;\n\nclass NFA extends FSA\n{\n  constructor()\n  {\n    super();\n  }\n\n  //Override\n  getUsedAlphabet(dst=[])\n  {\n    const result = dst;\n    for(const transition of this._transitions)\n    {\n      const symbol = transition[SYMBOL];\n      if (!result.includes(symbol) && symbol != EMPTY)\n      {\n        result.push(symbol);\n      }\n    }\n    return result;\n  }\n\n  //Override\n  doTransition(state, symbol, dst=[])\n  {\n    const result = dst;\n    for(const transition of this._transitions)\n    {\n      if (transition[SRC] == state && transition[SYMBOL] == symbol)\n      {\n        result.push(transition[DST]);\n      }\n    }\n    return result;\n  }\n\n  doClosureTransition(state, dst=[])\n  {\n    const result = dst;\n    result.push(state);\n    for(let i = 0; i < result.length; ++i)\n    {\n      const transitions = this.getOutgoingTransitions(result[i]);\n      for(const transition of transitions)\n      {\n        if (transition[SYMBOL] == EMPTY)\n        {\n          const dst = transition[DST];\n          if (!result.includes(dst))\n          {\n            result.push(dst);\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  doTerminalTransition(state, symbol, dst=[])\n  {\n    const result = dst;\n    for(const transition of this._transitions)\n    {\n      if (transition[SRC] == state && transition[SYMBOL] == symbol)\n      {\n        //Get closure on destination states\n        const states = this.doClosureTransition(transition[DST]);\n        for(const s of states)\n        {\n          if (!result.includes(s))\n          {\n            result.push(s);\n          }\n        }\n      }\n    }\n\n    return result;\n  }\n\n    getPowerSet() {\n        var ps = [[]];\n        var nfaStates = this.getStates();\n        for(var i=0; i < nfaStates.length; i++) {\n            for(var j=0, len = ps.length; j < len; j++) {\n                ps.push(ps[j].concat(nfaStates[i]));\n            }\n        }\n        return ps;\n    }\n}\n\nexport default NFA;\n","\nfunction getReachableState(graph)\n{\n  let reachable = [];\n  let startNode = graph.getStartNode();\n  reachable.push(startNode);\n  for(let i = 0; i < reachable.length; i++)\n  {\n    for (const edge of graph.getEdges())\n    {\n      if(edge._from == reachable[i])\n      {\n        if(!reachable.includes(edge._to))\n        {\n          reachable.push(edge._to);\n        }\n      }\n    }\n  }\n  return reachable;\n}\n\nclass GraphLayout\n{\n  static applyLayout(graph, type=\"circle\")\n  {\n    if (type != \"circle\") throw new Error(\"Invalid layout type\");\n    //seperate node to reachable and unreachable\n    const reachableNode= getReachableState(graph);\n    function unreachable(node)\n    {\n      return !reachableNode.includes(node)\n    }\n    const unreachableNode = graph.getNodes().filter(unreachable)\n\n    //get num of nodes\n    const numOfReachable = reachableNode.length;\n    const numOfUnreachable = unreachableNode.length;\n    const numOfNode = graph.getNodes().length;\n    const maxNum = Math.max(numOfReachable, numOfUnreachable)\n    if(numOfNode == 0)\n    {\n      return;\n    }\n    //set radius\n    var radius;\n    if(numOfReachable < 10 && numOfUnreachable < 10){\n      radius = maxNum/4 * 50 + 30;\n    }\n    else{\n      radius = (maxNum/5) * 40 + 30;\n    }\n\n    let currentStep = 0\n    if (numOfReachable == 1)\n    {\n      let degree = 2* Math.PI/numOfNode\n      for(const node of graph.getNodes())\n      {\n        node.y = Math.sin(degree*currentStep + Math.PI)*radius;\n        node.x = Math.cos(degree*currentStep + Math.PI)*radius;\n        currentStep += 1\n      }\n    }\n    else {\n      const degree_re = 2* Math.PI/numOfReachable;\n      const degree_un = 2* Math.PI/numOfUnreachable;\n\n      currentStep = 0\n      for(const node of reachableNode)\n      {\n        node.y = Math.sin(degree_re*currentStep + Math.PI)*radius;\n        node.x = Math.cos(degree_re*currentStep + Math.PI)*radius;\n        currentStep += 1\n      }\n      currentStep = 0\n      for(const node of unreachableNode)\n      {\n        node.y = Math.sin(degree_un*currentStep + Math.PI)*(radius + 100);\n        node.x = Math.cos(degree_un*currentStep + Math.PI)*(radius + 100);\n        currentStep += 1\n      }\n    }\n    /*for(const node of graph.getNodes())\n    {\n      node.y = Math.sin(degree*currentStep + Math.PI)*radius;\n      node.x = Math.cos(degree*currentStep + Math.PI)*radius;\n      currentStep += 1\n    }*/\n  }\n\n\n}\n\nexport default GraphLayout;\n","import Viewport from 'content/viewport/Viewport.js';\nimport TestMode from './TestMode.js';\nimport TestingInputList from './TestingInputList.js';\n\nclass TestingManager\n{\n  constructor()\n  {\n    this.machineController = null;\n    this.viewport = null;\n\n    this.inputList = new TestingInputList();\n\n    this.shouldCheckError = false;\n    this.isImmediateErrorCheck = false;\n    this.errorCheckMode = TestingManager.NO_ERROR_CHECK;\n    this.stepByStepMode = false;\n\n    this.testMode = new TestMode(this);\n  }\n\n  initialize(module, viewport)\n  {\n    this.machineController = module.getMachineController();\n    this.viewport = viewport;\n\n    this.testMode.initialize(module);\n  }\n\n  destroy()\n  {\n\n  }\n\n  setErrorCheckMode(mode)\n  {\n    const machineBuilder = this.machineController.getMachineBuilder();\n\n    //Update machine builder error checker\n    machineBuilder.setMachineType(machineBuilder.getMachineType());\n\n    if (mode == TestingManager.NO_ERROR_CHECK)\n    {\n      this.shouldCheckError = false;\n      this.errorCheckMode = mode;\n    }\n    else if (mode == TestingManager.DELAYED_ERROR_CHECK)\n    {\n      this.shouldCheckError = true;\n      this.isImmediateErrorCheck = false;\n      this.errorCheckMode = mode;\n    }\n    else if (mode == TestingManager.IMMEDIATE_ERROR_CHECK)\n    {\n      this.shouldCheckError = true;\n      this.isImmediateErrorCheck = true;\n      this.errorCheckMode = mode;\n    }\n    else\n    {\n      throw new Error(\"Unknown error check mode \\'\" + mode + \"\\'\");\n    }\n  }\n\n  getErrorCheckMode()\n  {\n    return this.errorCheckMode;\n  }\n\n  setStepByStepMode(mode)\n  {\n    this.stepByStepMode = mode ? true : false;\n    if (mode)\n    {\n      if (this.testMode.isStarted()) this.testMode.onStop();\n      this.testMode.onStart();\n      this.viewport.setState((prev, props) => {\n        if (prev.mode != Viewport.TESTING)\n        {\n          return {\n            prevMode: prev.mode,\n            mode: Viewport.TESTING\n          };\n        }\n        else\n        {\n          //It's already the correct viewport mode\n        }\n      });\n    }\n    else\n    {\n      if (this.testMode.isStarted()) this.testMode.onStop();\n      this.viewport.setState((prev, props) => {\n        return {mode: prev.prevMode};\n      });\n    }\n  }\n\n  getStepByStepMode()\n  {\n    return this.stepByStepMode;\n  }\n}\nTestingManager.NO_ERROR_CHECK = \"none\";\nTestingManager.DELAYED_ERROR_CHECK = \"delayed\";\nTestingManager.IMMEDIATE_ERROR_CHECK = \"immediate\";\n\nexport default TestingManager;\n","import React from 'react';\n\nimport { ARROW } from 'machine/Symbols.js';\n\nclass TransitionErrorMessage extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.targetIndex = 0;\n    this.targetLabel = \"\";\n    const targets = props.message.value.targets;\n    for(const target of targets)\n    {\n      if (this.targetLabel.length > 0)\n      {\n        this.targetLabel += \", \";\n      }\n      this.targetLabel += \"(\" + target.getSourceNode().getNodeLabel() + \", \" + (target.getDestinationNode() ? target.getDestinationNode().getNodeLabel() : \"null\") + \") \" + ARROW + \" \" + target.getEdgeLabel();\n    }\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick(e)\n  {\n    const graphController = this.props.graphController;\n    const machineController = this.props.machineController;\n    const buttonValue = e.target.value;\n    const message = this.props.message;\n    switch(buttonValue)\n    {\n      case \"locate\":\n      {\n        const targets = message.value.targets;\n        const targetLength = targets.length;\n        if (targetLength > 0 && this.targetIndex < targetLength)\n        {\n          //Locate the target edge\n          const target = targets[this.targetIndex++];\n          if (this.targetIndex >= targetLength) this.targetIndex = 0;\n\n          //Move pointer to target\n          graphController.focusOnEdge(target);\n        }\n      }\n      break;\n      case \"deleteall\":\n      {\n        const targets = message.value.targets;\n        //Delete all target edges\n        graphController.deleteTargetEdges(targets);\n\n        //Exit the message\n        message.close();\n      }\n      break;\n      default:\n        throw new Error(\"Unknown button value for message\");\n    }\n  }\n\n  //Override\n  render()\n  {\n    return <div>\n      <p>{this.props.message.value.text + \": \" + this.targetLabel}</p>\n      <button value=\"locate\" onClick={this.onClick}>{I18N.toString(\"message.action.locate\")}</button>\n      <button value=\"deleteall\" onClick={this.onClick}>{I18N.toString(\"message.action.deleteall\")}</button>\n    </div>;\n  }\n}\n\nexport default TransitionErrorMessage;\n","import { EMPTY } from 'machine/Symbols.js';\nimport NFA from 'machine/NFA.js'\n\n//This ASSUMES that the passed-in machine is an NFA! (and not a DFA)\nexport function solveNFA(nfa, input)\n{\n  if (typeof input === 'string') input = input[Symbol.iterator]();\n\n  let cachedStates = [];\n  let cachedSymbols = [];\n  cachedStates.push({state: nfa.getStartState(), index: 0});\n  for (let currState of nfa.doClosureTransition(nfa.getStartState()))\n  {\n    cachedStates.push({state: currState , index: 0});\n  }\n  let checkedStates = [];\n  let symbol = null;\n\n  let counter = 0;\n\n  while(cachedStates.length > 0)\n  {\n    symbol = input.next().value;\n    let res = solveNFAbyStep(nfa, symbol, cachedStates, cachedSymbols, checkedStates);\n    if (res) return true;\n\n    //HACK: This is to stop any infinite loops! This will be fixed in the future!\n    ++counter;\n    if (counter > 1000)\n    {\n      return false;\n    }\n  }\n\n  return false;\n}\n\n//TODO: When an empty transition occurs, it does a closure transition.\n//The closure chain will be stored as a group\n//Any future transitions must not re-enter the group\nexport function solveNFAbyStep(nfa, symbol, cachedStates, cachedSymbols, checkedStates)\n{\n  //initialize variables\n  let state = null;\n  let nextStates = [];\n  let nextIndex = 0;\n\n  if (symbol != null)\n  {\n    cachedSymbols.push(symbol);\n  }\n\n  for(let cstate of cachedStates)\n  {\n    state = cstate.state;\n    symbol = cstate.index < cachedSymbols.length ? cachedSymbols[cstate.index] : null;\n\n    if (symbol != null)\n    {\n      //Read to next state...\n      nextIndex = cstate.index + 1;\n      for(let nextState of nfa.doTerminalTransition(state, symbol))\n      {\n        nextStates.push({state: nextState, index: nextIndex});\n      }\n    }\n    else\n    {\n      if (nfa.isFinalState(state)) return true;\n      checkedStates.push(state);\n    }\n\n    //Read none to next state...\n    nextIndex = cstate.index;\n    /*for(let nextState of nfa.doTransition(state,EMPTY))\n    {\n      if (checkedStates.includes(nextState)) continue;\n      if (symbol == null && nfa.isFinalState(nextState)) return true;\n\n      nextStates.push({state: nextState, index: nextIndex});\n    }*/\n  }\n  cachedStates.length = 0\n  cachedStates.push(...nextStates);\n  return false;\n}\n","import GraphImporter from './exporter/GraphImporter.js';\nimport GraphImageExporter from './exporter/GraphImageExporter.js';\n\nimport ExportingPanel from './panels/exporting/ExportingPanel.js';\nimport OptionsPanel from './panels/options/OptionsPanel.js';\n\nexport const DEFAULT_GRAPH_EXPORTERS = [];\nexport const DEFAULT_IMAGE_EXPORTERS = [\n  new GraphImageExporter('png'),\n  new GraphImageExporter('jpg')\n];\n//TODO: This is inserted by Drawer.js, not used here. (which is weird)\nexport const DEFAULT_PANELS = [ExportingPanel, OptionsPanel];\n\nclass AbstractModule\n{\n  constructor(app)\n  {\n    this._importer = new GraphImporter(this);\n  }\n\n  initialize(app) {}\n\n  destroy(app) {}\n\n  update(app) {}\n\n  getRenderer(renderLayer) { return null; }\n  getInputController() { throw new Error(\"Missing input controller for module \\'\" + this.getModuleName() + \"\\'\"); }\n  getGraphController() { throw new Error(\"Missing graph controller for module \\'\" + this.getModuleName() + \"\\'\"); }\n  getMachineController() { throw new Error(\"Missing machine controller for module \\'\" + this.getModuleName() + \"\\'\"); }\n  getDefaultGraphExporter()\n  {\n    const exporters = this.getGraphExporters();\n    if (exporters.length > 0) return exporters[0];\n\n    throw new Error(\"Missing default graph exporter for module \\'\" + this.getModuleName() + \"\\'\");\n  }\n  getImageExporters() { return DEFAULT_IMAGE_EXPORTERS; }\n  getGraphExporters() { return DEFAULT_GRAPH_EXPORTERS; }\n  getGraphImporter() { return this._importer; }\n  getModulePanels() { return []; }\n  getModuleVersion() { return '0.0.0'; }\n  getModuleName() { throw new Error(\"Missing module name\"); }\n  getLocalizedModuleName() { return \"Module\"; }\n}\n\nexport default AbstractModule;\n","import NodalGraph from 'graph/NodalGraph.js';\nimport FSANode from './FSANode.js';\nimport FSAEdge, { SYMBOL_SEPARATOR } from './FSAEdge.js';\n\nconst PARALLEL_EDGE_HEIGHT = 10;\n\nclass FSAGraph extends NodalGraph\n{\n  constructor()\n  {\n    super(FSANode, FSAEdge);\n  }\n\n  setStartNode(node)\n  {\n    if (this._nodes.length <= 0) throw new Error(\"Cannot set start node to empty graph\");\n\n    //There is only one node, and that is already the start node\n    if (this._nodes.length === 1) return;\n\n    const i = this._nodes.indexOf(node);\n    if (i > 0)\n    {\n      //This does a swap; we could do a prepend but that's more costly...\n      const prev = this._nodes[0];\n      this._nodes[0] = node;\n      this._nodes[i] = prev;\n    }\n    else if (i < 0)\n    {\n      throw new Error(\"Cannot set start node for unknown node\");\n    }\n  }\n\n  getStartNode()\n  {\n    return this._nodes.length > 0 ? this._nodes[0] : null;\n  }\n\n  //This is more like addEdge() without adding it to the graph and just returns the result\n  //This should only be called once when completing an edge\n  formatEdge(edge)\n  {\n    const edgeSource = edge.getSourceNode();\n    const edgeDestination = edge.getDestinationNode();\n    const edgeLabel = edge.getEdgeSymbolsFromLabel();\n\n    //Look for an existing edge with similar from and to\n    for(const otherEdge of this._edges)\n    {\n      if (otherEdge === edge) continue;\n      if (otherEdge.getSourceNode() === edgeSource && otherEdge.getDestinationNode() === edgeDestination)\n      {\n        const otherSymbols = otherEdge.getEdgeSymbolsFromLabel();\n        if (edgeLabel.length > 0)\n        {\n          const result = otherSymbols.concat(edgeLabel);\n          otherEdge.setEdgeLabel(result.join(SYMBOL_SEPARATOR));\n        }\n\n        //Merged with newfound edge...\n        return otherEdge;\n      }\n    }\n\n    //Otherwise, format the current edge\n\n    if (!edge.isSelfLoop())\n    {\n      let flag = false;\n\n      //Bend away if there is another edge not bent with the same src/dst\n      const parallelEdgeHeight = PARALLEL_EDGE_HEIGHT;\n      const HALFPI = Math.PI / 2;\n      for(const otherEdge of this._edges)\n      {\n        if (otherEdge.isQuadratic() && Math.abs(otherEdge.getQuadratic().length) >= parallelEdgeHeight * 2) continue;\n        if ((otherEdge.getDestinationNode() === edgeSource && otherEdge.getSourceNode() === edgeDestination))\n        {\n          edge.setQuadratic(HALFPI, parallelEdgeHeight);\n          otherEdge.setQuadratic(HALFPI, parallelEdgeHeight);\n          flag = true;\n\n          //ASSUMES that there will only ever be 2 edges that are parallel...\n          break;\n        }\n      }\n\n      //Try to move the edge away from intersecting nodes...\n      if (!flag)\n      {\n        const maxNodeSize = Math.max(edgeSource.getNodeSize(), edgeDestination.getNodeSize());\n        const x1 = edgeSource.x;\n        const y1 = edgeSource.y;\n        const x2 = edgeDestination.x;\n        const y2 = edgeDestination.y;\n        const dist12sq = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n        let vertical = false;\n        let m = 0;\n        let b = 0;\n\n        if(x1 > x2)\n        {\n          m = (y1-y2) / (x1-x2);\n          b = y2-m*x2;\n        }\n        else if (x1 < x2)\n        {\n          m = (y2-y1) / (x2-x1);\n          b = y1-m*x1;\n        }\n        else\n        {\n          vertical = true;\n        }\n\n        for(const node of this._nodes)\n        {\n          if(node === edgeSource || node === edgeDestination) continue;\n\n          const x0 = node.x;\n          const y0 = node.y;\n\n          const dist01sq = (x1-x0)*(x1-x0) + (y1-y0)*(y1-y0);\n          const dist02sq = (x2-x0)*(x2-x0) + (y2-y0)*(y2-y0);\n          if(dist01sq > dist12sq || dist02sq > dist12sq) continue;\n\n          let dist = 0;\n          if(vertical) {\n            dist = Math.abs(x1-x0);\n          } else {\n            dist = Math.abs(b+ m*x0 - y0) / Math.sqrt(1+m*m);\n          }\n\n          if(dist < node.getNodeSize())\n          {\n            flag = true;\n            break;\n          }\n        }\n\n        if (flag)\n        {\n          edge.setQuadratic(-Math.PI / 2, maxNodeSize + 10);\n        }\n      }\n    }\n\n    return edge;\n  }\n}\n\nexport default FSAGraph;\n","import React from 'react';\n\nclass FormattedInput extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.element = null;\n    this.ignoreSaveOnExit = false;\n\n    const defaultValue = props.defaultValue || \"\";\n    this.state = {\n      value: defaultValue,\n      prevValue: defaultValue\n    };\n\n    this.onChange = this.onChange.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n    this.onKeyUp = this.onKeyUp.bind(this);\n\n    //props:\n    //  filter - a filter function\n    //  formatter - a format function\n    //  captureOnExit - what to capture on blur (none, save, reset)\n    //  defaultValue - the default value for input\n    //  multiline - whether to allow multiple lines\n  }\n\n  //Override\n  componentWillReceiveProps(nextProps)\n  {\n    //Don't overwrite user input...\n    if (this.hasFocus()) return;\n\n    //TODO: This is a way to update the value if it is suppose to be the default value...\n    if (!this.state.value || this.state.value.length <= 0 || this.state.value === this.props.defaultValue)\n    {\n      this.setState({value: nextProps.defaultValue});\n    }\n  }\n\n  get value()\n  {\n    return this.state.value;\n  }\n\n  focus(replace=false)\n  {\n    if (replace)\n    {\n      this.element.select();\n    }\n    else\n    {\n      this.element.focus();\n    }\n  }\n\n  blur()\n  {\n    this.element.blur();\n  }\n\n  hasFocus()\n  {\n    return this.element === document.activeElement;\n  }\n\n  onChange(e)\n  {\n    if (this.props.filter)\n    {\n      const result = e.target.value.replace(this.props.filter, '');\n      this.setState({value: result});\n    }\n    else\n    {\n      this.setState({value: e.target.value});\n    }\n  }\n\n  onBlur(e)\n  {\n    if (this.ignoreSaveOnExit || this.props.captureOnExit == \"none\")\n    {\n      //For those you choose to handle exit, it's value should remain correct.\n      const result = this.formatValue(e.target.value);\n      this.setState({value: result});\n\n      //Don't ignore it for the future.\n      this.ignoreSaveOnExit = false;\n      return;\n    }\n\n    if (this.props.captureOnExit == \"save\")\n    {\n      const prev = this.state.prevValue;\n      const next = e.target.value || this.props.defaultValue || \"\";\n      this.resetValue(next, () => {\n        if (this.props.onSubmit)\n        {\n          this.props.onSubmit(next, prev);\n        }\n      });\n    }\n    else if (this.props.captureOnExit == \"reset\")\n    {\n      this.resetValue(null);\n    }\n  }\n\n  onKeyUp(e)\n  {\n    if (e.key == \"Enter\")\n    {\n      if (this.props.multiline && e.shiftKey)\n      {\n        return true;\n      }\n\n      const prev = this.state.prevValue;\n      const next = e.target.value || this.props.defaultValue || \"\";\n      this.resetValue(next, () => {\n        this.ignoreSaveOnExit = true;\n\n        if (this.props.onSubmit)\n        {\n          this.props.onSubmit(next, prev);\n        }\n        this.element.blur();\n      });\n\n      e.preventDefault();\n      e.stopPropagation();\n      return false;\n    }\n    else if (e.key == \"Escape\")\n    {\n      const prev = this.state.prevValue;\n      this.resetValue(prev, () => {\n        this.ignoreSaveOnExit = true;\n\n        if (this.props.onSubmit)\n        {\n          this.props.onSubmit(prev || \"\", prev);\n        }\n        this.element.blur();\n      });\n\n      e.preventDefault();\n      e.stopPropagation();\n      return false;\n    }\n  }\n\n  resetValue(newValue=null, callback=null)\n  {\n    if (newValue !== null)\n    {\n      const result = this.formatValue(newValue);\n      this.setState({value: result, prevValue: result}, callback);\n    }\n    else\n    {\n      this.setState((prev, props) => {\n        //NOTE: Although you CAN assume prev is valid, but what about when prev does not exist?\n        const result = this.formatValue(prev.prevValue);\n        return {value: result};\n      }, callback);\n    }\n  }\n\n  setValue(value, callback)\n  {\n    if (!value || value.length == 0)\n    {\n      value = this.props.defaultValue || \"\";\n    }\n    else\n    {\n      value = this.formatValue(value);\n    }\n\n    this.setState({value: value}, callback);\n  }\n\n  appendValue(value, separator=\",\")\n  {\n    let result = this.state.value;\n    //If the entire input is selected...\n    if (this.element.selectionStart == 0 &&\n      this.element.selectionEnd == value.length)\n    {\n      //Replace it!\n      result = value;\n    }\n    //Or just append to the end...\n    else\n    {\n      if (!result || result.length == 0)\n      {\n        result = value;\n      }\n      else\n      {\n        result = result + separator + value;\n      }\n    }\n\n    //If can filter input...\n    if (this.props.filter)\n    {\n      result = result.replace(this.props.filter, '');\n    }\n\n    this.setState({value: this.formatValue(result)});\n  }\n\n  formatValue(value)\n  {\n    const formatter = this.props.formatter;\n    const result = formatter(value);\n    return result || \"\";\n  }\n\n  //Override\n  render()\n  {\n    if (this.props.multiline)\n    {\n      return (\n        <textarea\n          id={this.props.id} className={this.props.className} style={this.props.style}\n          ref={ref=>this.element=ref}\n          type=\"text\" value={this.state.value}\n          rows=\"1\"\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onKeyUp={this.onKeyUp}>\n        </textarea>\n      );\n    }\n    else\n    {\n      return (\n        <input\n          id={this.props.id} className={this.props.className} style={this.props.style}\n          ref={ref=>this.element=ref}\n          type=\"text\" value={this.state.value}\n          onChange={this.onChange}\n          onBlur={this.onBlur}\n          onKeyUp={this.onKeyUp}/>\n      );\n    }\n  }\n}\n\nexport default FormattedInput;\n","const ALLOW_AUTOMATIC_REGISTER = false;\n\nconst Eventable = {\n  __eventListeners: null,\n  mixin(targetClass)\n  {\n    const targetPrototype = targetClass.prototype;\n    Object.assign(targetPrototype, Eventable);\n    delete targetPrototype.mixin;\n  },\n\n  registerEvent(eventName)\n  {\n    if (!this.__eventListeners) this.__eventListeners = new Map();\n\n    if (!this.__eventListeners.has(eventName))\n    {\n      this.__eventListeners.set(eventName, []);\n    }\n    else\n    {\n      throw new Error(\"Already registered event \\'\" + eventName + \"\\'\");\n    }\n  },\n\n  unregisterEvent(eventName)\n  {\n    if (!this.__eventListeners) return;\n\n    if (this.__eventListeners.has(eventName))\n    {\n      this.__eventListeners.delete(eventName);\n    }\n    else\n    {\n      throw new Error(\"Unable to find event \\'\" + eventName + \"\\'\");\n    }\n  },\n\n  addEventListener(eventName, listener)\n  {\n    if (!this.__eventListeners) this.__eventListeners = new Map();\n\n    let listeners;\n    if (this.__eventListeners.has(eventName))\n    {\n      listeners = this.__eventListeners.get(eventName);\n    }\n    else if (ALLOW_AUTOMATIC_REGISTER)\n    {\n      listeners = [];\n      this.__eventListeners.set(eventName, listeners);\n    }\n    else\n    {\n      throw new Error(\"Unable to find event \\'\" + eventName + \"\\'\");\n    }\n\n    listeners.push(listener);\n  },\n\n  removeEventListener(eventName, listener)\n  {\n    if (!this.__eventListeners) return;\n\n    if (this.__eventListeners.has(eventName))\n    {\n      const listeners = this.__eventListeners.get(eventName);\n      let flag = false;\n      let i = listeners.length;\n      while(i--)\n      {\n        if (listeners[i] === listener)\n        {\n          listeners.splice(i, 1);\n          flag = true;\n        }\n      }\n\n      if (!flag)\n      {\n        throw new Error(\"Unable to find listener for event \\'\" + eventName + \"\\'\");\n      }\n    }\n    else\n    {\n      throw new Error(\"Unknown event \\'\" + eventName + \"\\'\");\n    }\n  },\n\n  clearEventListeners(eventName)\n  {\n    if (!this.__eventListeners) return;\n\n    if (this.__eventListeners.has(eventName))\n    {\n      const listeners = this.__eventListeners.get(eventName);\n      listeners.length = 0;\n    }\n    else if (ALLOW_AUTOMATIC_REGISTER)\n    {\n      listeners = [];\n      this.__eventListeners.set(eventName, listeners);\n    }\n    else\n    {\n      throw new Error(\"Unable to find event \\'\" + eventName + \"\\'\");\n    }\n  },\n\n  countEventListeners(eventName)\n  {\n    if (!this.__eventListeners) return 0;\n    return this.__eventListeners.has(eventName) ? this.__eventListeners.get(eventName).length : 0;\n  },\n\n  getEventListeners(eventName)\n  {\n    if (!this.__eventListeners) return null;\n    return this.__eventListeners.get(eventName);\n  },\n\n  on(eventName, listener)\n  {\n    this.addEventListener(eventName, listener);\n  },\n\n  once(eventName, listener)\n  {\n    const f = (...args) => {\n      try\n      {\n        listener.apply(null, args);\n      }\n      finally\n      {\n        this.removeEventListener(eventName, f);\n      }\n    };\n\n    this.addEventListener(eventName, f);\n  },\n\n  emit(eventName, ...args)\n  {\n    try\n    {\n      if (!this.__eventListeners) return;\n\n      let listeners;\n      if (!this.__eventListeners.has(eventName))\n      {\n        if (ALLOW_AUTOMATIC_REGISTER)\n        {\n          listeners = [];\n          this.__eventListeners.set(eventName, listeners);\n        }\n        else\n        {\n          throw new Error(\"Unable to find event \\'\" + eventName + \"\\'\");\n        }\n      }\n      else\n      {\n        listeners = this.__eventListeners.get(eventName);\n\n        let result = null;\n        let i = listeners.length;\n        while(i--)\n        {\n          try\n          {\n            result = listeners[i].apply(null, args);\n          }\n          catch(e)\n          {\n            console.error(e);\n          }\n\n          if (result === true) break;\n        }\n      }\n    }\n    finally\n    {\n      this.onEventProcessed(eventName, ...args);\n    }\n  },\n\n  onEventProcessed(eventName, ...args)\n  {\n    //Do nothing.\n  }\n};\n\nexport default Eventable;\n","import React from 'react';\nimport { hot } from 'react-hot-loader/root';\nimport './App.css';\n\nimport Config from 'config.js';\n\n//import Modules from './Modules.js';\n//import Module from 'modules/default/DefaultModule.js';\nimport Module from 'modules/fsa/FSAModule.js';\n\nimport HotKeys from './HotKeys.js';\nimport LocalSave from 'system/localsave/LocalSave.js';\n\nimport Toolbar from './toolbar/Toolbar.js';\nimport Workspace from './workspace/Workspace.js';\nimport Drawer from './drawer/Drawer.js';\nimport Viewport from './viewport/Viewport.js';\nimport Tutorial from 'tutorial/Tutorial.js';\n\nimport InputAdapter from 'system/inputadapter/InputAdapter.js';\nimport Notifications from 'system/notification/Notifications.js';\nimport NotificationView from 'system/notification/components/NotificationView.js';\nimport UndoManager from 'system/undomanager/UndoManager.js';\n\nclass App extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    //Create references\n    this.container = null;\n    this.workspace = null;\n    this.viewport = null;\n    this.drawer = null;\n    this.toolbar = null;\n\n    //These need to be initialized before module\n    this.inputAdapter = new InputAdapter();\n    this.inputAdapter.getViewport()\n      .setMinScale(Config.MIN_SCALE)\n      .setMaxScale(Config.MAX_SCALE)\n      .setOffsetDamping(Config.SMOOTH_OFFSET_DAMPING);\n\n    this.undoManager = new UndoManager();\n\n    //Modules should handle its own initialization, regardless of web state\n    //Also, loading from file should be handled by modules themselves\n    this._module = new Module(this);\n    /*\n    Modules['fsa'].fetch((Module) => {\n      const prevModule = this._module;\n      if (prevModule && this._init)\n      {\n        prevModule.destroy(this);\n      }\n\n      this._module = new Module(this);\n\n      if (this._init)\n      {\n        this._module.initialize(this);\n      }\n    });\n    */\n\n    this.hotKeys = new HotKeys();\n    this.tutorial = new Tutorial();\n\n    this.state = {\n      isOpen: true,\n      isDangerous: false,\n      isFullscreen: false,\n      isWaitingForFile: false\n    };\n\n    this.onDragOver = this.onDragOver.bind(this);\n    this.onDragEnter = this.onDragEnter.bind(this);\n    this.onDragLeave = this.onDragLeave.bind(this);\n    this.onFileDrop = this.onFileDrop.bind(this);\n\n    this._init = false;\n  }\n\n  //Override\n  componentDidMount()\n  {\n    //Initialize input adapter\n    const workspaceDOM = this.workspace.ref;\n    this.inputAdapter.initialize(workspaceDOM);\n\n    //Initialize the module...\n    const module = this.getCurrentModule();\n    module.initialize(this);\n\n    this.hotKeys.initialize(this);\n\n    //Upload drop zone\n    workspaceDOM.addEventListener(\"drop\", this.onFileDrop);\n    workspaceDOM.addEventListener(\"dragover\", this.onDragOver);\n    workspaceDOM.addEventListener(\"dragenter\", this.onDragEnter);\n    workspaceDOM.addEventListener(\"dragleave\", this.onDragLeave);\n\n    //Begin tutorial\n    this.tutorial.start(this);\n\n    LocalSave.registerHandler(this);\n    LocalSave.initialize();\n\n    this._init = true;\n  }\n\n  //Override\n  componentWillUnmount()\n  {\n    LocalSave.unregisterHandler(this);\n    LocalSave.terminate();\n\n    this.hotKeys.destroy();\n\n    this._module.destroy(this);\n\n    this.inputAdapter.destroy();\n\n    //Upload drop zone\n    const workspaceDOM = this.workspace.ref;\n    workspaceDOM.removeEventListener(\"drop\", this.onFileDrop);\n    workspaceDOM.removeEventListener(\"dragover\", this.onDragOver);\n    workspaceDOM.removeEventListener(\"dragenter\", this.onDragEnter);\n    workspaceDOM.removeEventListener(\"dragleave\", this.onDragLeave);\n\n    this._init = false;\n  }\n\n  //Ducktype(AbstractLocalSaver)\n  onLoadSave()\n  {\n    const moduleName = this._module.getModuleName();\n\n    const data = LocalSave.loadFromStorage(\"graph-\" + moduleName);\n    if (data)\n    {\n      const exporter = this._module.getDefaultGraphExporter();\n      exporter.importFromData(data, this._module);\n    }\n  }\n\n  //Ducktype(AbstractLocalSaver)\n  onAutoSave()\n  {\n    const moduleName = this._module.getModuleName();\n\n    const exporter = this._module.getDefaultGraphExporter();\n    const data = exporter.exportToData(this._module);\n    LocalSave.saveToStorage(\"graph-\" + moduleName, data);\n  }\n\n  //Called to prevent default file open\n  onDragOver(ev)\n  {\n    ev.preventDefault();\n  }\n\n  onDragEnter(ev)\n  {\n    ev.preventDefault();\n\n    //Change state\n    this.setState({ isWaitingForFile: true });\n    this.viewport.setState((prev, props) => {\n      return {\n        prevMode: prev.mode,\n        mode: Viewport.DANGEROUS\n      };\n    });\n  }\n\n  onDragLeave(ev)\n  {\n    ev.preventDefault();\n\n    //Revert state\n    this.setState({ isWaitingForFile: false });\n    this.viewport.setState((prev, props) => {\n      return {\n        prevMode: prev.mode,\n        mode: prev.prevMode\n      };\n    });\n  }\n\n  onFileDrop(ev)\n  {\n    //Prevent file from being opened\n    ev.preventDefault();\n\n    //Revert state\n    this.setState({ isWaitingForFile: false });\n    this.viewport.setState((prev, props) => {\n      return {\n        prevMode: prev.mode,\n        mode: prev.prevMode\n      };\n    });\n\n    let fileBlob = null;\n    if (ev.dataTransfer.items)\n    {\n      const length = ev.dataTransfer.items.length;\n\n      //Just get the first one\n      if (length >= 1)\n      {\n        const file = ev.dataTransfer.items[0];\n        if (file.kind === 'file')\n        {\n          fileBlob = file.getAsFile();\n        }\n      }\n    }\n    else\n    {\n      const length = ev.dataTransfer.files.length;\n\n      //Just get the first one\n      if (length >= 1)\n      {\n        fileBlob = ev.dataTransfer.files[0];\n      }\n    }\n\n    if (fileBlob)\n    {\n      this.props.app.getCurrentModule().getGraphImporter().importFile(fileBlob, this._module)\n        .catch((e) => {\n          Notifications.addErrorMessage(\"ERROR: Unable to load invalid JSON file.\", \"errorUpload\");\n        });\n    }\n\n    if (ev.dataTransfer.items)\n    {\n      ev.dataTransfer.items.clear();\n    }\n    else\n    {\n      ev.dataTransfer.clearData();\n    }\n  }\n\n  openDrawer(full=null)\n  {\n    if (typeof full === 'boolean')\n    {\n      this.setState((prev, props) => {\n        return { isOpen: true, isFullscreen: full };\n      });\n    }\n    else\n    {\n      this.setState((prev, props) => {\n        return { isOpen: true };\n      });\n    }\n  }\n\n  closeDrawer()\n  {\n    this.setState((prev, props) => {\n      return { isOpen: false };\n    });\n  }\n\n  isDrawerOpen()\n  {\n    return this.state.isOpen;\n  }\n\n  shouldHideContent()\n  {\n    return this.state.isFullscreen && this.state.isOpen;\n  }\n\n  getCurrentModule()\n  {\n    return this._module;\n  }\n\n  getInputController()\n  {\n    return this._module.getInputController();\n  }\n\n  getGraphController()\n  {\n    return this._module.getGraphController();\n  }\n\n  getMachineController()\n  {\n    return this._module.getMachineController();\n  }\n\n  getInputAdapter()\n  {\n    return this.inputAdapter;\n  }\n\n  getUndoManager()\n  {\n    return this.undoManager;\n  }\n\n  render()\n  {\n    const currentModule = this._module;\n    const screen = this.workspace ? this.workspace.ref : null;\n\n    if (this._init)\n    {\n      this.inputAdapter.update();\n      currentModule.update(this);\n    }\n\n    return <div className=\"app-container\" ref={ref=>this.container=ref}>\n      <Toolbar ref={ref=>this.toolbar=ref}\n        app={this}\n        currentModule={currentModule}\n        drawer={this.drawer}/>\n\n      <NotificationView notificationManager={Notifications}/>\n\n      <div className=\"workspace-container\">\n        <div className={\"workspace-main\" +\n          (this.state.isOpen ? \" open\" : \"\")}\n          style={{\n            visibility: this.shouldHideContent() ? \"hidden\" : \"visible\",\n            opacity: this.state.isWaitingForFile ? \"0.1\" : \"1\"\n          }}>\n\n          <Workspace ref={ref=>this.workspace=ref}\n            currentModule={currentModule}/>\n        </div>\n\n        <div className={\"workspace-viewport\" +\n          (this.state.isOpen ? \" open\" : \"\")}\n          style={{\n            visibility: this.shouldHideContent() ? \"hidden\" : \"visible\"\n          }}>\n\n          <Viewport ref={ref=>this.viewport=ref}\n            app={this}\n            currentModule={currentModule}\n            screen={screen}/>\n        </div>\n\n        <div className={\"workspace-drawer\" +\n          (this.state.isOpen ? \" open\" : \"\") +\n          (this.state.isFullscreen ? \" fullscreen\" : \"\")}>\n\n          <Drawer ref={ref=>this.drawer=ref}\n            app={this}\n            currentModule={currentModule}\n            toolbar={this.toolbar}/>\n        </div>\n      </div>\n    </div>;\n  }\n}\n\n//For hotloading this class\nexport default hot(App);\n","import React from 'react';\nimport './IconToggle.css';\n\nclass IconToggle extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.state = {\n      open: this.props.defaultValue || false\n    };\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick(e)\n  {\n    //Toggle state\n    this.setState((prev, props) => {\n      return {open: !prev.open};\n    });\n\n    //Call passed-in onClick listener\n    if (this.props.onClick)\n    {\n      this.props.onClick(e);\n    }\n  }\n\n  render()\n  {\n    return <button\n      className={\"icon-button icon-toggle \" + (this.state.open ? \" open \" : \"\") + this.props.className}\n      id={this.props.id}\n      title={this.props.title}\n      style={this.props.style}\n      disabled={this.props.disabled}\n      onClick={this.onClick}>\n      {this.props.children}\n    </button>;\n  }\n}\n\nexport default IconToggle;\n","import React from 'react';\n\nclass DropDownIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"dropdown-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path d=\"M7 10l5 5 5-5z\"/>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n    </svg>;\n  }\n}\n\nexport default DropDownIcon;\n","import React from 'react';\n\nclass BoxAddIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"boxadd-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path d=\"M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"/>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n    </svg>;\n  }\n}\n\nexport default BoxAddIcon;\n","const SRC = 0;\nconst SYMBOL = 1;\nconst DST = 2;\n\nclass FSA\n{\n  constructor()\n  {\n    this._states = [];\n    this._transitions = [];\n    this._finalStates = [];\n\n    this._customAlphabet = [];\n  }\n\n  clear()\n  {\n    this._states.length = 0;\n    this._transitions.length = 0;\n    this._finalStates.length = 0;\n\n    this._customAlphabet.length = 0;\n  }\n\n  copy(fsa)\n  {\n    this._states.length = 0;\n    for(let state of fsa._states)\n    {\n      this._states.push(state);\n    }\n    this._transitions.length = 0;\n    for(let transition of fsa._transitions)\n    {\n      this._transitions.push(transition.slice());\n    }\n    this._finalStates.length = 0;\n    for(let final of fsa._finalStates)\n    {\n      this._finalStates.push(final);\n    }\n    this._customAlphabet.length = 0;\n    for(let symbol of fsa._customAlphabet)\n    {\n      this._customAlphabet.push(symbol);\n    }\n  }\n\n  newState(state)\n  {\n    if (this._states.includes(state))\n    {\n      throw new Error(\"State \\'\" + state + \"\\' already added to states.\");\n    }\n\n    this._states.push(state);\n    return state;\n  }\n\n  deleteState(state)\n  {\n    if (!this._states.includes(state))\n    {\n      throw new Error(\"State \\'\" + state + \"\\' does not exist.\");\n    }\n\n    this._states.splice(this._states.indexOf(state), 1);\n  }\n\n  renameState(oldState, newState)\n  {\n    if (!this._states.includes(oldState))\n    {\n      throw new Error(\"State \\'\" + oldState + \"\\' does not exist.\");\n    }\n    if (this._states.includes(newState))\n    {\n      throw new Error(\"State \\'\" + newState + \"\\' already exists.\");\n    }\n\n    for(let transition of this._transitions)\n    {\n      if (transition[SRC] == oldState)\n      {\n        transition[SRC] = newState;\n      }\n      if (transition[DST] == oldState)\n      {\n        transition[DST] = newState;\n      }\n    }\n\n    const index = this._states.indexOf(oldState);\n    this._states[index] = newState;\n  }\n\n  newTransition(fromState, toState, symbol)\n  {\n    if (!this._states.includes(fromState))\n    {\n      throw new Error(\"State \\'\" + fromState + \"\\' does not exist.\");\n    }\n\n    if (!this._states.includes(toState))\n    {\n      throw new Error(\"State \\'\" + toState + \"\\' does not exist.\");\n    }\n\n    //Check if already exists...\n    for(const transition of this._transitions)\n    {\n      if (transition[SRC] == fromState && transition[SYMBOL] == symbol && transition[DST] == toState)\n      {\n        return;\n      }\n    }\n\n    //Create new transition\n    this._transitions.push([fromState, symbol, toState]);\n  }\n\n  deleteTransition(fromState, toState, symbol=null)\n  {\n    for(let i = this._transitions.length - 1; i >= 0; --i)\n    {\n      const transition = this._transitions[i];\n      if (transition[SRC] == fromState && transition[DST] == toState)\n      {\n        //Delete if src, dst, and symbols match... or if deleting all symbols\n        if (symbol == null || transition[SYMBOL] == symbol)\n        {\n          this._transitions.splice(i, 1);\n        }\n      }\n    }\n  }\n\n  newSymbol(symbol)\n  {\n    if (this._customAlphabet.includes(symbol))\n    {\n      throw new Error(\"Symbol \\'\" + symbol + \"\\' already added to alphabet.\");\n    }\n\n    this._customAlphabet.push(symbol);\n  }\n\n  deleteSymbol(symbol)\n  {\n    if (!this._customAlphabet.includes(symbol))\n    {\n      throw new Error(\"Unable to remove symbol \\'\" + symbol + \"\\'.\");\n    }\n\n    this._customAlphabet.splice(this._customAlphabet.indexOf(symbol), 1);\n  }\n\n  setStartState(state)\n  {\n    if (this._states.length <= 0)\n    {\n      throw new Error(\"Not enough states.\");\n    }\n\n    if (!this._states.includes(state))\n    {\n      throw new Error(\"State \\'\" + state + \"\\' does not exist.\");\n    }\n\n    if (this.getStartState() == state) return;\n\n    this._states.splice(this._states.indexOf(state), 1);\n    this._states.unshift(state);\n  }\n\n  setFinalState(state, isFinal=true)\n  {\n    if (!this._states.includes(state))\n    {\n      throw new Error(\"State \\'\" + state + \"\\' does not exist.\");\n    }\n\n    if (isFinal)\n    {\n      if (this._finalStates.includes(state)) return;\n\n      this._finalStates.push(state);\n    }\n    else\n    {\n      if (!this._finalStates.includes(state)) return;\n      this._finalStates.splice(this._finalStates.indexOf(state), 1);\n    }\n  }\n\n  doTransition(state, symbol)\n  {\n    for(const transition of this._transitions)\n    {\n      if (transition[SRC] == state && transition[SYMBOL] == symbol)\n      {\n        return transition[DST];\n      }\n    }\n    return null;\n  }\n\n  isFinalState(state)\n  {\n    return this._finalStates.includes(state);\n  }\n\n  hasState(state)\n  {\n    return this._states.includes(state);\n  }\n\n  getStates()\n  {\n    return this._states;\n  }\n\n  //Is the same as isAlphabet if the user did not add custom symbols\n  isUsedAlphabet(symbol)\n  {\n    for(const transition of this._transitions)\n    {\n      if (transition[SYMBOL] == symbol)\n      {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  //Includes custom user-defined symbols (from newSymbol)\n  isAlphabet(symbol)\n  {\n    for(const s of this._customAlphabet)\n    {\n      if (s == symbol) return true;\n    }\n\n    return this.isUsedAlphabet(symbol);\n  }\n\n  getUsedAlphabet(dst=[])\n  {\n    const result = dst;\n    for(const transition of this._transitions)\n    {\n      const symbol = transition[SYMBOL];\n      if (symbol.length > 0 && !result.includes(symbol))\n      {\n        result.push(symbol);\n      }\n    }\n    return result;\n  }\n\n  getAlphabet(dst=[])\n  {\n    const result = dst;\n    for(const s of this._customAlphabet)\n    {\n      result.push(s);\n    }\n    return this.getUsedAlphabet(result);\n  }\n\n  getOutgoingTransitions(state=null, dst=[])\n  {\n    const result = dst;\n    for(const transition of this._transitions)\n    {\n      if (transition[SRC] == state)\n      result.push(transition);\n    }\n    return result;\n  }\n\n  getTransitions()\n  {\n    return this._transitions;\n  }\n\n  getStartState()\n  {\n    return this._states.length <= 0 ? null : this._states[0];\n  }\n\n  getFinalStates()\n  {\n    return this._finalStates;\n  }\n\n  isValidDFA()\n  {\n    const alphabet = this.getAlphabet();\n    const foundSymbols = new Array(alphabet.length);\n    foundSymbols.fill(false);\n\n    for(const state of this._states)\n    {\n      //Get all outgoing transitions\n      const transitions = this.getOutgoingTransitions(state);\n      for(const transition of transitions)\n      {\n        const index = alphabet.indexOf(transition[1]);\n        if (foundSymbols[index] == false)\n        {\n          foundSymbols[index] = true;\n        }\n        else\n        {\n          //Found duplicate\n          return false;\n        }\n      }\n\n      //Reset foundSymbols for next state\n      const length = foundSymbols.length;\n      for(let i = 0; i < length; ++i)\n      {\n        if (foundSymbols[i] == false)\n        {\n          //Found missing symbol for state\n          return false;\n        }\n        foundSymbols[i] = false;\n      }\n    }\n\n    return true;\n  }\n\n  toJSON()\n  {\n    const result = {};\n    if (this instanceof DFA) result.type = \"DFA\";\n    else if (this instanceof NFA) result.type = \"NFA\";\n    else result.type = \"FSA\";\n    result.states = this._states.slice();\n    result.alphabet = this._customAlphabet.slice();\n    result.usedAlphabet = this.getUsedAlphabet();\n    result.transitions = this._transitions.slice();\n    result.startState = this.getStartState();\n    result.finalStates = this._finalStates.slice();\n\n    return result;\n  }\n}\n\nexport default FSA;\n","import React from 'react';\n\nclass UploadIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"upload-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path d=\"M9,16V10H5L12,3L19,10H15V16H9M5,20V18H19V20H5Z\"/>\n    </svg>;\n  }\n}\n\nexport default UploadIcon;\n","import React from 'react';\n\nclass SaveIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"save-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path d=\"M19 12v7H5v-7H3v7c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-7h-2zm-6 .67l2.59-2.58L17 11.5l-5 5-5-5 1.41-1.41L11 12.67V3h2z\"/>\n      <path fill=\"none\" d=\"M0 0h24v24H0z\"/>\n    </svg>;\n  }\n}\n\nexport default SaveIcon;\n","/**\n * Used by InputAdapter to handle input event logic.\n */\nclass AbstractInputController\n{\n  constructor() {}\n\n  /**\n   * Called by InputAdapter before an InputEvent begins.\n   * Returns true if the event should be consumed. If consumed, the event will\n   * not begin.\n   */\n  onPreInputEvent(pointer) { return false; }\n\n  /**\n   * Called by InputAdapter when an InputEvent resolves and is not an Alt input.\n   * To handle events for Alt inputs, refer to onAltInputEvent().\n   * Returns true if the event should be consumed. If consumed, the event will\n   * not propagate to other trigger other events.\n   */\n  onInputEvent(pointer) { return false; }\n\n  /**\n   * Called by InputAdapter when an InputEvent resolves and is an Alt input.\n   * To handle events for non-Alt inputs, refer to onInputEvent().\n   * Returns true if the event should be consumed. If consumed, the event will\n   * not propagate to other trigger other events.\n   */\n  onAltInputEvent(pointer) { return false; }\n\n  /**\n   * Called by InputAdapter when a DblInputEvent resolves. The input is\n   * assumed by a non-Alt input, since only non-Alt inputs can trigger this\n   * event.\n   * Returns true if the event should be consumed. If consumed, the event will\n   * not propagate to other trigger other events.\n   */\n  onDblInputEvent(pointer) { return false; }\n\n  /**\n   * Called by InputAdapter before a drag begins. The input could be either\n   * an Alt or non-Alt input.\n   * Returns true if the event should be consumed. If consumed, the event will\n   * not propagate to other trigger other events, nor continue the drag input.\n   */\n  onDragStart(pointer) { return false; }\n\n  /**\n   * Called by InputAdapter while dragging moves. The input could be either\n   * an Alt or non-Alt input.\n   * Will always be called after onDragStart() and will be followed by\n   * onDragStop() when complete.\n   */\n  onDragMove(pointer) {}\n\n  /**\n   * Called by InputAdapter after a drag ends. The input could be either an\n   * Alt or non-Alt input.\n   * Will always be called after onDragStart(). Although onDragMove may be\n   * called in-between, it is not guaranteed.\n   */\n  onDragStop(pointer) {}\n\n  /**\n   * Called by InputAdapter after an InputEvent ends.\n   */\n  onPostInputEvent(pointer) {}\n\n  /**\n   * Called by InputAdapter when zoom changes.\n   * Returns true if the zoom change can be applied to the current viewport.\n   */\n  onZoomChange(pointer, zoomValue, prevValue)\n  {\n    return true;\n  }\n}\n\nexport default AbstractInputController;\n","import GraphElement from 'graph/GraphElement.js';\n\nclass GraphNode extends GraphElement\n{\n  constructor(id, x, y)\n  {\n    super(id);\n\n    this.x = x;\n    this.y = y;\n\n    this._label = \"\";\n  }\n\n  setNodeLabel(label)\n  {\n    this._label = label;\n    return this;\n  }\n\n  getNodeLabel()\n  {\n    return this._label;\n  }\n\n  getNodeSize()\n  {\n    return 16;\n  }\n\n  //Override\n  getHashString(usePosition=true)\n  {\n    if (usePosition)\n    {\n      return super.getHashString(usePosition) + \":\" + Math.floor(this.x) + \",\" + Math.floor(this.y) + \".\" + this._label;\n    }\n    else\n    {\n      return super.getHashString(usePosition) + \":\" + this._label;\n    }\n  }\n}\n\nexport default GraphNode;\n","class GraphElement\n{\n  constructor(id)\n  {\n    this._id = id;\n  }\n\n  setGraphElementID(graphElementID)\n  {\n    this._id = graphElementID;\n    return this;\n  }\n\n  //A unique identifier for this graph element\n  getGraphElementID()\n  {\n    return this._id;\n  }\n\n  //Calls getHashString() to generate an integer hash generally unqiue to the instance.\n  //Should only be used to distinguish between other objects with the same\n  //hash function. In other words, every instance should only be compared to\n  //other instances of the same class.\n  //usePosition can be used to tell the hash function whether or not to consider\n  //aesthetic, or position, attributes of the element.\n  getHashString(usePosition=true)\n  {\n    return this._id;\n  }\n}\nexport default GraphElement;\n","import GraphElement from 'graph/GraphElement.js';\n\nclass GraphEdge extends GraphElement\n{\n  constructor(id, from, to=null)\n  {\n    super(id);\n\n    if (!from) throw new Error(\"Source of edge cannot be null.\");\n\n    this._from = from;\n    this._to = to;\n\n    this._label = \"\";\n  }\n\n  setSourceNode(node)\n  {\n    if (!node) throw new Error(\"Source of edge cannot be null.\");\n\n    this._from = node;\n    return this;\n  }\n\n  getSourceNode()\n  {\n    return this._from;\n  }\n\n  setDestinationNode(node)\n  {\n    this._to = node;\n    return this;\n  }\n\n  changeDestinationNode(node)\n  {\n    this._to = node;\n  }\n\n  getDestinationNode()\n  {\n    return this._to;\n  }\n\n  setEdgeLabel(label)\n  {\n    this._label = label;\n  }\n\n  getEdgeLabel()\n  {\n    return this._label;\n  }\n\n  getEdgeDirection()\n  {\n    const from = this._from;\n    const to = this._to;\n    const HALFPI = Math.PI / 2;\n    let result = 0;\n\n    if (this.isPlaceholder())\n    {\n      result = Math.PI / 4;\n    }\n    else\n    {\n      const dy = to.y - from.y;\n      const dx = to.x - from.x;\n      result = Math.atan2(dy, dx);\n    }\n\n    if (result > HALFPI || result < -HALFPI)\n    {\n      result += Math.PI;\n    }\n\n    return result;\n  }\n\n  getStartPoint(dst={x: 0, y: 0})\n  {\n    const from = this._from;\n    dst.x = from.x;\n    dst.y = from.y;\n    return dst;\n  }\n\n  getCenterPoint(dst={x: 0, y: 0})\n  {\n    const from = this._from;\n    const to = this._to;\n    if (this.isPlaceholder())\n    {\n      const halfPlaceholderLength = this.getPlaceholderLength() / 2;\n      dst.x = from.x + halfPlaceholderLength;\n      dst.y = from.y + halfPlaceholderLength;\n    }\n    else\n    {\n      dst.x = from.x + (to.x - from.x) / 2;\n      dst.y = from.y + (to.y - from.y) / 2;\n    }\n    return dst;\n  }\n\n  getEndPoint(dst={x: 0, y: 0})\n  {\n    if (this.isPlaceholder())\n    {\n      const from = this._from;\n      const placeholderLength = this.getPlaceholderLength();\n      dst.x = from.x + placeholderLength;\n      dst.y = from.y + placeholderLength;\n    }\n    else\n    {\n      const to = this._to;\n      dst.x = to.x;\n      dst.y = to.y;\n    }\n    return dst;\n  }\n\n  getPlaceholderLength()\n  {\n    return this._from.getNodeSize();\n  }\n\n  isPlaceholder()\n  {\n    return !this._to;\n  }\n\n  isSelfLoop()\n  {\n    return this._from === this._to;\n  }\n\n  //Override\n  getHashString(usePosition=true)\n  {\n    const src = this._from ? this._from.getHashString(usePosition) : \"\";\n    //HACK: to may be a pointer, which is not a node, so getHashString does not exist.\n    const dst = this._to ? this._to.getHashString ? this._to.getHashString(usePosition) : \"0\" : \"\";\n    return super.getHashString(usePosition) + \":\" + src + \",\" + dst + \".\" + this._label;\n  }\n}\n\nexport default GraphEdge;\n","import React from 'react';\n\nclass UndoIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"undo-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n      <path d=\"M12.5 8c-2.65 0-5.05.99-6.9 2.6L2 7v9h9l-3.62-3.62c1.39-1.16 3.16-1.88 5.12-1.88 3.54 0 6.55 2.31 7.6 5.5l2.37-.78C21.08 11.03 17.15 8 12.5 8z\"/>\n    </svg>;\n  }\n}\n\nexport default UndoIcon;\n","import React from 'react';\n\nclass RedoIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"redo-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n      <path d=\"M18.4 10.6C16.55 8.99 14.15 8 11.5 8c-4.65 0-8.58 3.03-9.96 7.22L3.9 16c1.05-3.19 4.05-5.5 7.6-5.5 1.95 0 3.73.72 5.12 1.88L13 16h9V7l-3.6 3.6z\"/>\n    </svg>;\n  }\n}\n\nexport default RedoIcon;\n","import React from 'react';\n\nclass StateUnreachableWarningMessage extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.targetIndex = 0;\n    this.targetLabel = \"\";\n    const targets = props.message.value;\n    for(const target of targets)\n    {\n      if (this.targetLabel.length > 0)\n      {\n        this.targetLabel += \", \";\n      }\n      this.targetLabel += target.getNodeLabel();\n    }\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick(e)\n  {\n    const graphController = this.props.graphController;\n    const machineController = this.props.machineController;\n    const buttonValue = e.target.value;\n    const message = this.props.message;\n    switch(buttonValue)\n    {\n      case \"locate\":\n      {\n        //Locate the target node\n        const target = message.value[this.targetIndex++];\n        if (this.targetIndex >= message.value.length)\n        {\n          this.targetIndex = 0;\n        }\n\n        //Move pointer to target\n        graphController.focusOnNode(target);\n      }\n      break;\n      case \"deleteall\":\n      {\n        const targets = message.value;\n        //Delete all target nodes\n        graphController.deleteTargetNodes(targets);\n\n        //Sort the nodes after deleting if enabled...\n        machineController.getMachineBuilder().labeler.sortDefaultNodeLabels();\n\n        //Exit the message\n        message.close();\n      }\n      break;\n      default:\n        throw new Error(\"Unknown button value for message\");\n    }\n  }\n\n  //Override\n  render()\n  {\n    return <div>\n      <p>{I18N.toString(\"message.warning.unreachable\") + \": \" + this.targetLabel}</p>\n      <button value=\"locate\" onClick={this.onClick}>{I18N.toString(\"message.action.locate\")}</button>\n      <button value=\"deleteall\" onClick={this.onClick}>{I18N.toString(\"message.action.deleteall\")}</button>\n    </div>;\n  }\n}\n\nexport default StateUnreachableWarningMessage;\n","import React from 'react';\nimport './Drawer.css';\n\nimport DrawerExpander from './DrawerExpander.js';\n\nimport { DEFAULT_PANELS } from 'modules/abstract/AbstractModule.js';\nconst DEFAULT_TAB_INDEX = 0;\n\nconst MAX_PANEL_THRESHOLD = 50;\nconst MIN_PANEL_SIZE = 300;//180\n\nclass Drawer extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.state = {\n      tabIndex: DEFAULT_TAB_INDEX,\n      dragging: false\n    };\n\n    this.onTouchStart = this.onTouchStart.bind(this);\n    this.onMouseDown = this.onMouseDown.bind(this);\n    this.onScroll = this.onScroll.bind(this);\n\n    this._ontouchmove = null;\n    this._ontouchend = null;\n  }\n\n  setTab(index)\n  {\n    const app = this.props.app;\n\n    //Open drawer if it is closed\n    if (!app.state.isOpen)\n    {\n      app.openDrawer();\n    }\n    //Full drawer if clicked on same one\n    else\n    {\n      if (this.state.tabIndex === index)\n      {\n        app.openDrawer(!app.state.isFullscreen);\n      }\n    }\n\n    this.setState((prev, props) => {\n      return { tabIndex: index };\n    });\n  }\n\n  onStartDraggingDrawerBorder(x, y)\n  {\n    const app = this.props.app;\n    this.setState({dragging: true});\n\n    //Disable fullscreen if dragging off of it\n    if (app.state.isFullscreen)\n    {\n      app.openDrawer(false);\n    }\n\n    //Update panel to current click position\n    updatePanelSize(app, x, y);\n  }\n\n  onStopDraggingDrawerBorder()\n  {\n    this.setState({dragging: false});\n  }\n\n  onTouchStart(e)\n  {\n    e.stopPropagation();\n    e.preventDefault();\n\n    if (this._ontouchmove)\n    {\n      document.removeEventListener(\"touchmove\", this._ontouchmove);\n      this._ontouchmove = null;\n    }\n\n    if (this._ontouchend)\n    {\n      document.removeEventListener(\"touchend\", this._ontouchend);\n      this._ontouchend = null;\n    }\n\n    const app = this.props.app;\n    //Ignore drag move if closed\n    if (!app.state.isOpen)\n    {\n      /*\n      //Opens the drawer if dragging, but closed\n      this.props.app.openDrawer();\n      */\n      this.setState({dragging: false});\n      return;\n    }\n\n    const touch = e.changedTouches[0];\n    this.onStartDraggingDrawerBorder(touch.clientX, touch.clientY);\n\n    this._ontouchmove = function(ev)\n    {\n      e.stopPropagation();\n      e.preventDefault();\n\n      const touch = ev.changedTouches[0];\n      updatePanelSize(app, touch.clientX, touch.clientY);\n    };\n\n    document.addEventListener(this._ontouchmove);\n\n    this._ontouchend = function(ev)\n    {\n      e.stopPropagation();\n      e.preventDefault();\n\n      const touch = ev.changedTouches[0];\n      updatePanelSize(app, touch.clientX, touch.clientY);\n      this.onStopDraggingDrawerBorder();\n\n      //Remove listeners that are no longer needed\n      document.removeEventListener(\"touchend\", this._ontouchend);\n      document.removeEventListener(\"touchmove\", this._ontouchmove);\n    };\n\n    //Start listening to move and release events\n    document.addEventListener(\"touchend\", this._ontouchend);\n    document.addEventListener(\"touchmove\", this._ontouchmove);\n  }\n\n  onMouseDown(e)\n  {\n    e.stopPropagation();\n    e.preventDefault();\n\n    const app = this.props.app;\n    //Ignore drag move if closed\n    if (!app.state.isOpen)\n    {\n      /*\n      //Opens the drawer if dragging, but closed\n      this.props.app.openDrawer();\n      */\n      return;\n    }\n\n    this.onStartDraggingDrawerBorder(e.clientX, e.clientY);\n\n    const onMouseMove = (ev) => {\n      ev.stopPropagation();\n      ev.preventDefault();\n\n      updatePanelSize(app, ev.clientX, ev.clientY);\n    };\n\n    const onMouseUp = (ev) => {\n      ev.stopPropagation();\n      ev.preventDefault();\n\n      updatePanelSize(app, ev.clientX, ev.clientY);\n      this.onStopDraggingDrawerBorder();\n\n      //Remove listeners that are no longer needed\n      document.removeEventListener(\"mouseup\", onMouseUp);\n      document.removeEventListener(\"mousemove\", onMouseMove);\n    };\n\n    //Start listening to move and release events\n    document.addEventListener(\"mouseup\", onMouseUp);\n    document.addEventListener(\"mousemove\", onMouseMove);\n  }\n\n  onScroll(e)\n  {\n    //if (this.panel)\n    {\n      //TODO: this.panel.container.scrollBy(0, e.deltaY);\n      //TODO: return false;\n    }\n  }\n\n  render()\n  {\n    const app = this.props.app;\n    const currentModule = this.props.currentModule;\n    const graphController = currentModule.getGraphController();\n    const machineController = currentModule.getMachineController();\n\n    const tabIndex = this.state.tabIndex;\n    const InfoPanel = currentModule ? currentModule.getModulePanels()[0] : null;\n\n    return <div className={\"drawer-container\"} onWheel={this.onScroll}>\n      <div className=\"drawer-content\">\n      {\n        currentModule &&\n        currentModule.getModulePanels().map((PanelClass, i) => {\n          const panelID = i + 1;\n          return <PanelClass key={currentModule.getModuleName() + \":\" + panelID}\n            style={{display: tabIndex == panelID ? \"block\" : \"none\"}}\n            currentModule={currentModule}/>;\n        })\n      }\n      {\n        tabIndex == 0 && InfoPanel != null &&\n        <InfoPanel currentModule={currentModule}/>\n      }\n      {\n        DEFAULT_PANELS.map((PanelClass, i) => {\n          const panelID = -(i + 1);\n          return <PanelClass key={\"default:\" + panelID}\n            style={{display: tabIndex == panelID ? \"block\" : \"none\"}}\n            currentModule={currentModule}/>;\n        })\n      }\n      </div>\n      <div className=\"tab-list\">\n        <DrawerExpander app={app}/>\n        {\n          currentModule &&\n          currentModule.getModulePanels().map((PanelClass, i) => {\n            //Hide panels with no name...\n            if (!PanelClass.UNLOCALIZED_NAME) return;\n\n            const panelID = i + 1;\n            return <button key={currentModule.getModuleName() + \":\" + panelID}\n              className={\"tab-link\" + (tabIndex === panelID ? \" active\" : \"\")}\n              onClick={ev=>this.setTab(panelID)}>\n              {I18N.toString(PanelClass.UNLOCALIZED_NAME || \"component.untitled.title\")}\n            </button>;\n          })\n        }\n        {\n          DEFAULT_PANELS.map((PanelClass, i) => {\n            const panelID = -(i + 1);\n            return <button key={\"default:\" + panelID}\n              className={\"tab-link\" + (tabIndex === panelID ? \" active\" : \"\")}\n              onClick={ev=>this.setTab(panelID)}>\n              {I18N.toString(PanelClass.UNLOCALIZED_NAME || \"component.untitled.title\")}\n            </button>;\n          })\n        }\n        <div className=\"tab-right\"></div>\n      </div>\n\n      <div className={\"drawer-border\" + (this.state.dragging ? \" dragging\" : \"\")}\n        onTouchStart={this.onTouchStart}\n        onMouseDown={this.onMouseDown}>\n      </div>\n    </div>;\n  }\n}\n\nfunction updatePanelSize(app, x, y)\n{\n  const container = app.container;\n  let fullscreen = false;\n  let size = 0;\n  //This is the same criteria as in App.css\n  if (window.matchMedia(\"(max-width: 420px)\").matches)\n  {\n    //Vertical slide\n    const viewportOffsetY = app.viewport.ref.getBoundingClientRect().y;\n    if (y - viewportOffsetY < MAX_PANEL_THRESHOLD)\n    {\n      //Enable fullscreen\n      app.setState((prev, props) => {\n        return {\n          isFullscreen: true\n        };\n      });\n    }\n    else\n    {\n      size = container.offsetHeight - y;\n\n      //Disable fullscreen\n      if (app.state.isFullscreen)\n      {\n        app.setState((prev, props) => {\n          return {\n            isFullscreen: false\n          };\n        });\n      }\n    }\n  }\n  else\n  {\n    //Horizontal slide\n    if (x < MAX_PANEL_THRESHOLD)\n    {\n      //Enable fullscreen\n      app.setState((prev, props) => {\n        return {\n          isFullscreen: true\n        };\n      });\n    }\n    else\n    {\n      size = container.offsetWidth - x;\n\n      //Disable fullscreen\n      if (app.state.isFullscreen)\n      {\n        app.setState((prev, props) => {\n          return {\n            isFullscreen: false\n          };\n        });\n      }\n    }\n  }\n\n  //Make sure is greater than minimum size and vice versa\n  if (size < MIN_PANEL_SIZE) size = MIN_PANEL_SIZE;\n\n  //Set panel size\n  container.style.setProperty(\"--panel-size\", size + \"px\");\n}\nDrawer.EXPORTING_PANEL_TAB_INDEX = -1;\nDrawer.OPTIONS_PANEL_TAB_INDEX = -2;\n\nexport default Drawer;\n","//Version 0.3.1\nconst changeLog = [\n  \"FIXED: Renaming an uploaded file does not download file with new name.\",\n  \"This is our first user-reported bug! Hooray!\",\n  \"Thank you and have a hug whoever you are <3.\"\n];\nconst changeVersion = process.env.VERSION;\n\nconst result = {\n  show: changeLog && changeLog.length > 0,\n  log: \"\\nChangelog v\" + changeVersion + \":\\n - \" + changeLog.join(\"\\n - \"),\n  version: changeVersion\n}\nexport default result;\n","import AbstractGraphExporter from './AbstractGraphExporter.js';\n\nimport PNGIcon from 'icons/flat/PNGIcon.js';\nimport JPGIcon from 'icons/flat/JPGIcon.js';\nimport { downloadSVG } from 'util/Downloader.js';\n\nclass GraphImageExporter extends AbstractGraphExporter\n{\n  constructor(imageType='png')\n  {\n    super();\n    this._imageType = imageType;\n  }\n\n  //Override\n  exportToFile(filename, module)\n  {\n    const workspace = module._workspace;\n    const workspaceDim = workspace.ref.viewBox.baseVal;\n    const width = workspaceDim.width;\n    const height = workspaceDim.height;\n    const svg = workspace.getSVGForExport(width, height);\n\n    downloadSVG(filename, this._imageType, svg, width, height);\n  }\n\n  //Override\n  doesSupportFile()\n  {\n    return true;\n  }\n\n  //Override\n  canImport()\n  {\n    return false;\n  }\n\n  //Override\n  getTitle()\n  {\n    switch(this._imageType)\n    {\n      case 'png': return I18N.toString(\"file.export.png.hint\");\n      case 'jpg': return I18N.toString(\"file.export.jpg.hint\");\n      default: return super.getTitle();\n    }\n  }\n\n  //Override\n  getLabel()\n  {\n    switch(this._imageType)\n    {\n      case 'png': return I18N.toString(\"file.export.png\");\n      case 'jpg': return I18N.toString(\"file.export.jpg\");\n      default: return super.getLabel();\n    }\n  }\n\n  //Override\n  getFileType()\n  {\n    return this._imageType;\n  }\n\n  //Override\n  getIconClass()\n  {\n    switch(this._imageType)\n    {\n      case 'png': return PNGIcon;\n      case 'jpg': return JPGIcon;\n      default: return null;\n    }\n  }\n}\n\nexport default GraphImageExporter;\n","import React from 'react';\n\nimport './AlphabetTag.css';\nimport Config from 'config.js';\n\nclass AlphabetTag extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.ref = null;\n\n    this.state = {\n      symbol: null,\n      error: false\n    };\n\n    this.onValueChange = this.onValueChange.bind(this);\n    this.onFocus = this.onFocus.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.onKeyUp = this.onKeyUp.bind(this);\n  }\n\n  onFocus(e)\n  {\n    const target = e.target;\n    this.setState({\n      symbol: this.props.src,\n      error: false\n    }, () => target.select());\n\n    //Call any listening focus\n    if (this.props.onFocus) this.props.onFocus(e);\n  }\n\n  onBlur(e)\n  {\n    const machineController = this.props.machineController;\n    const newSymbol = this.state.symbol;\n\n    if (newSymbol != null)\n    {\n      const oldSymbol = this.props.src;\n      if (newSymbol.length > 0)\n      {\n        const alphabet = machineController.getAlphabet();\n        if (!alphabet.includes(newSymbol))\n        {\n          if (oldSymbol)\n          {\n            //Valid! Rename it!\n            machineController.renameSymbol(oldSymbol, newSymbol);\n          }\n          else\n          {\n            //Valid! Add it to the list!\n            machineController.createSymbol(newSymbol);\n          }\n        }\n        else\n        {\n          //Found something already named that! Ignore!\n        }\n      }\n      else if (oldSymbol)\n      {\n        //Delete!\n        machineController.deleteSymbol(oldSymbol);\n      }\n    }\n\n    this.setState({symbol: null, error: false});\n\n    //Call any listening blurs\n    if (this.props.onBlur) this.props.onBlur(e);\n  }\n\n  onKeyDown(e)\n  {\n    if (e.keyCode === Config.SUBMIT_KEY || e.keyCode === Config.CLEAR_KEY)\n    {\n      e.preventDefault();\n    }\n  }\n\n  onKeyUp(e)\n  {\n    if (e.keyCode === Config.SUBMIT_KEY)\n    {\n      e.target.blur();\n    }\n    else if (e.keyCode === Config.CLEAR_KEY)\n    {\n      const target = e.target;\n      this.setState({ symbol: null, error: false}, () => {\n        target.blur();\n      });\n    }\n  }\n\n  onValueChange(e)\n  {\n    const machineController = this.props.machineController;\n    const symbol = e.target.value.trim();\n    let error = false;\n    if (symbol.length > 0)\n    {\n      const alphabet = machineController.getAlphabet();\n      if (alphabet.includes(symbol) && symbol != this.props.src)\n      {\n        error = true;\n      }\n    }\n\n    this.setState({\n      symbol: symbol,\n      error: error\n    });\n  }\n\n  render()\n  {\n    const symbol = this.state.symbol != null ? this.state.symbol : this.props.src;\n    const isUsed = false;\n    //TODO: const isUsed = this.props.src && this.props.machineController.getMachineBuilder().getMachine().getUsedAlphabet().includes(symbol);\n    return <div className={\"alphatag-container\" +\n      (isUsed ? \" usedtag\" : \"\") +\n      (this.props.src && (!symbol || symbol.length == 0) ? \" emptytag\" : \"\") +\n      (this.state.symbol && this.state.error ? \" errortag\" : \"\")}>\n      <input type=\"text\" ref={ref=>this.ref=ref} className=\"alphatag-input\"\n        spellCheck=\"false\"\n        maxLength=\"1\"\n        value={symbol}\n        onChange={this.onValueChange}\n        onFocus = {this.onFocus}\n        onBlur={this.onBlur}\n        onKeyUp={this.onKeyUp}\n        onKeyDown={this.onKeyDown}/>\n    </div>;\n  }\n}\n\nexport default AlphabetTag;\n","import React from 'react';\n\nimport Node from 'modules/fsa/graph/FSANode.js';\n\nimport Config from 'config.js';\n\nclass InitialMarkerRenderer extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    const node = this.props.node;\n    //node.x + offset marker back to center if not a node (or is a pointer)\n    const x = node.x + (!(node instanceof Node) ? -Config.INITIAL_MARKER_OFFSET_X : 0);\n    const y = node.y;\n    const r = Config.NODE_RADIUS;\n    const d = r * 2;\n    return <g className=\"graph-initial-container\">\n      <path className=\"graph-initial\" d={\n        \"M\" + (x - r) + \" \" + (y) +\n        \" L\" + (x - d) + \" \" + (y - r) +\n        \" L\" + (x - d) + \" \" + (y + r) +\n        \" Z\"}\n        fill=\"none\"\n\n        stroke=\"#000000\"/>\n    </g>;\n  }\n}\n\nexport default InitialMarkerRenderer;\n","import Config from 'config.js';\nimport { EMPTY } from 'machine/Symbols.js';\n\nimport Notifications from 'system/notification/Notifications.js';\nimport StateUnreachableWarningMessage from 'modules/fsa/notifications/StateUnreachableWarningMessage.js';\nimport StateMissingTransitionErrorMessage from 'modules/fsa/notifications/StateMissingTransitionErrorMessage.js';\nimport TransitionErrorMessage from 'modules/fsa/notifications/TransitionErrorMessage.js';\nimport StateErrorMessage from 'modules/fsa/notifications/StateErrorMessage.js';\n\nclass DFAErrorChecker\n{\n  constructor(machineBuilder, graph)\n  {\n    this.machineBuilder = machineBuilder;\n    this.graph = graph;\n\n    this.errorNodes = [];\n    this.errorEdges = [];\n    this.warningNodes = [];\n    this.warningEdges = [];\n  }\n\n  clear()\n  {\n    this.errorNodes.length = 0;\n    this.errorEdges.length = 0;\n    this.warningNodes.length = 0;\n    this.warningEdges.length = 0;\n  }\n\n  checkErrors(shouldNotifyErrors=false, graphController=null, machineController=null)\n  {\n    //This should only run for \"DFA\" machine types...\n    if (this.machineBuilder.getMachineType() != \"DFA\")\n    {\n      throw new Error(\"Invalid machine type to check for DFA errors\");\n    }\n\n    const machine = this.machineBuilder.getMachine();\n    const graph = this.graph;\n    const alphabet = machine.getAlphabet();\n    const errorNodes = this.errorNodes;\n    const errorEdges = this.errorEdges;\n    const warnNodes = this.warningNodes;\n    const warnEdges = this.warningEdges;\n    this.clear();\n\n    let nodeTransitionMap = new Map();\n    let startNode = graph.getStartNode();\n\n    const placeholderEdges = [];\n    const emptyEdges = [];\n    const dupeEdges = [];\n    for(const edge of graph.getEdges())\n    {\n      //check incomplete edges\n      if (edge.isPlaceholder())\n      {\n        //Update cached error targets\n        placeholderEdges.push(edge);\n        if (errorEdges.indexOf(edge) == -1) errorEdges.push(edge);\n      }\n      else\n      {\n        const from = edge.getSourceNode();\n        const to = edge.getDestinationNode();\n        const labels = edge.getEdgeSymbolsFromLabel();\n\n        for(const label of labels)\n        {\n          //check for empty transitions\n          if(label == EMPTY)\n          {\n            //Update cached error targets\n            emptyEdges.push(edge);\n            if (errorEdges.indexOf(edge) == -1) errorEdges.push(edge);\n          }\n          else\n          {\n            if(!nodeTransitionMap.has(from))\n            {\n              nodeTransitionMap.set(from, [label]);\n            }\n            else\n            {\n              //check for duplicate transitions\n              const currentAlphabet = nodeTransitionMap.get(from);\n              if(currentAlphabet.includes(label))\n              {\n                //Update cached error targets\n                dupeEdges.push(edge);\n                if (errorEdges.indexOf(edge) == -1) errorEdges.push(edge);\n              }\n              else\n              {\n                currentAlphabet.push(label);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    const missingNodes = [];\n    //Check for missing transitions\n    for(const node of graph.getNodes())\n    {\n      const nodeTransitions = nodeTransitionMap.get(node);\n      if (!nodeTransitions && alphabet.length != 0 ||\n        nodeTransitions && nodeTransitions.length < alphabet.length)\n      {\n        //Get the required missing symbols\n        /*\n        let array;\n        if (nodeTransitions)\n        {\n          array = [];\n          for(const symbol of alphabet)\n          {\n            if (!nodeTransitions.includes(symbol))\n            {\n              array.push(symbol);\n            }\n          }\n        }\n        else\n        {\n          array = alphabet.slice();\n        }\n        */\n\n        //Update cached error targets\n        missingNodes.push(node);\n        if (errorNodes.indexOf(node) == -1) errorNodes.push(node);\n      }\n    }\n\n    const result = !(errorNodes.length == 0 && errorEdges.length == 0 &&\n      warnNodes.length == 0 && warnEdges.length == 0);\n\n    //Callbacks for all collected errors\n    if (shouldNotifyErrors)\n    {\n      const messageTag = Config.MACHINE_ERRORS_MESSAGE_TAG;\n      //Clear the existing messages\n      Notifications.clearMessages(messageTag);\n\n      //No errors!\n      if (!result)\n      {\n        Notifications.addMessage(I18N.toString(\"message.error.none\"), \"success\", messageTag, null, null, false);\n      }\n      //There are some errors/warnings...\n      else\n      {\n        const props = {graphController: graphController, machineController: machineController};\n        //Add new warning messages\n        const unReachedNodes = this.getUnreachableNodes();\n        if (unReachedNodes.length > 0)\n        {\n          Notifications.addMessage(unReachedNodes,\n            \"warning\", messageTag, StateUnreachableWarningMessage, props, false);\n        }\n\n        //Add new error messages\n        if (placeholderEdges.length > 0)\n        {\n          Notifications.addMessage({text: I18N.toString(\"message.error.incomplete\"), targets: placeholderEdges},\n            \"error\", messageTag, TransitionErrorMessage, props, false);\n        }\n        if (emptyEdges.length > 0)\n        {\n          Notifications.addMessage({text: I18N.toString(\"message.error.empty\"), targets: emptyEdges},\n            \"error\", messageTag, TransitionErrorMessage, props, false);\n        }\n        if (dupeEdges.length > 0)\n        {\n          Notifications.addMessage({text: I18N.toString(\"message.error.dupe\"), targets: dupeEdges},\n            \"error\", messageTag, TransitionErrorMessage, props, false);\n        }\n        if (missingNodes.length > 0)\n        {\n          Notifications.addMessage({targets: missingNodes},\n            \"error\", messageTag, StateMissingTransitionErrorMessage, props, false);\n        }\n      }\n    }\n\n    return result;\n  }\n\n  getUnreachableNodes() {\n    const graph = this.graph;\n    if (graph.getNodeCount() <= 1) return [];\n\n    const edges = graph.getEdges();\n    const nodes = graph.getNodes().slice();\n    const startNode = nodes.shift();\n    let nextNodes = [];\n    nextNodes.push(startNode);\n\n    while(nextNodes.length > 0)\n    {\n      const node = nextNodes.pop();\n      for(const edge of edges)\n      {\n        if (edge.getSourceNode() === node)\n        {\n          const i = nodes.indexOf(edge.getDestinationNode());\n          if (i >= 0)\n          {\n            const nextNode = nodes.splice(i, 1)[0];\n            nextNodes.push(nextNode);\n          }\n        }\n      }\n    }\n\n    return nodes;\n  }\n}\n\nexport default DFAErrorChecker;\n","import AbstractModule from 'modules/abstract/AbstractModule.js';\n\nimport Notifications from 'system/notification/Notifications.js';\n\nimport OverviewPanel from './panels/overview/OverviewPanel.js';\nimport TestingPanel from './panels/testing/TestingPanel.js';\nimport AnalysisPanel from './panels/analysis/AnalysisPanel.js';\nimport AboutPanel from './panels/about/AboutPanel.js';\n\nimport InputController from './controller/InputController.js';\nimport GraphController from './controller/GraphController.js';\nimport MachineController from './controller/MachineController.js';\n\nimport FSAGraphRenderer from './renderer/FSAGraphRenderer.js';\nimport FSAGraphOverlayRenderer from './renderer/FSAGraphOverlayRenderer.js';\nimport ViewportRenderer from './renderer/ViewportRenderer.js';\n\nimport FSABuilder from './builder/FSABuilder.js';\nimport GraphLayout from './graph/GraphLayout.js';\nimport EventManager from './EventManager.js';\nimport LabelEditor from './editor/LabelEditor.js';\nimport TestingManager from './testing/TestingManager.js';\n\nimport FSAGraphExporter from './exporter/FSAGraphExporter.js';\nimport JFLAPGraphExporter from './exporter/JFLAPGraphExporter.js';\n\nconst VERSION = \"0.0.1\";\nconst PANELS = [AboutPanel, TestingPanel, OverviewPanel, AnalysisPanel];\nconst EXPORTERS = [\n  new FSAGraphExporter(),\n  new JFLAPGraphExporter()\n];\n\nclass FSAModule extends AbstractModule\n{\n  constructor(app)\n  {\n    super(app);\n\n    this._workspace = null;\n\n    this._refreshRate = 60;\n    this._ticks = 0;\n\n    this._inputController = new InputController(this, app.getInputAdapter());\n    this._graphController = new GraphController(this);\n    this._machineController = new MachineController(this);\n\n    this._machineBuilder = new FSABuilder(this._graphController.getGraph());\n\n    this._eventManager = new EventManager(app.getUndoManager());\n    this._testingManager = new TestingManager();\n  }\n\n  //Override\n  initialize(app)\n  {\n    super.initialize(app);\n\n    const viewport = app.viewport;\n    const workspace = app.workspace;\n\n    this._workspace = workspace;\n\n    this._inputController.initialize(this);\n    this._graphController.initialize(this);\n    this._machineController.initialize(this);\n\n    this._machineBuilder.initialize(this);\n\n    this._eventManager.initialize(this);\n\n    this._testingManager.initialize(this, viewport);\n\n    //Notify on create in delete mode\n    const tryCreateWhileTrash = () => {\n      if (this._inputController.isTrashMode())\n      {\n        Notifications.addMessage(I18N.toString(\"message.warning.cannotmodify\"), \"warning\", \"tryCreateWhileTrash\");\n      }\n    };\n    this._graphController.on(\"tryCreateWhileTrash\", tryCreateWhileTrash);\n  }\n\n  //Override\n  destroy(app)\n  {\n    this._testingManager.destroy();\n\n    this._eventManager.destroy();\n\n    this._machineBuilder.destroy();\n\n    this._machineController.destroy();\n    this._graphController.destroy();\n    this._inputController.destroy();\n\n    super.destroy(app);\n  }\n\n  //Override\n  update(app)\n  {\n    this._inputController.update(this);\n    this._graphController.update(this);\n\n    if (--this._ticks <= 0)\n    {\n      this._machineBuilder.update(this);\n      this._ticks = this._refreshRate;\n    }\n  }\n\n  getGraph()\n  {\n    return this._graphController.getGraph();\n  }\n\n  getTestingManager()\n  {\n    return this._testingManager;\n  }\n\n  getDefaultGraphLayout()\n  {\n    return GraphLayout;\n  }\n\n  getMachineBuilder()\n  {\n    return this._machineBuilder;\n  }\n\n  getLabelFormatter()\n  {\n    return this._machineBuilder.formatAlphabetString.bind(this._machineBuilder);\n  }\n\n  getLabelEditor()\n  {\n    return LabelEditor;\n  }\n\n  //Override\n  getRenderer(renderLayer)\n  {\n    switch(renderLayer)\n    {\n      case \"graph\":\n        return FSAGraphRenderer;\n      case \"graphoverlay\":\n        return FSAGraphOverlayRenderer;\n      case \"viewport\":\n        return ViewportRenderer;\n    }\n    return null;\n  }\n  //Override\n  getInputController() { return this._inputController; }\n  //Override\n  getGraphController() { return this._graphController; }\n  //Override\n  getMachineController() { return this._machineController; }\n  //Override\n  getGraphExporters() { return EXPORTERS; }\n  //Override\n  getModuleVersion() { return VERSION; }\n  //Override\n  getModulePanels() { return PANELS; }\n  //Override\n  getModuleName() { return \"fsa\"; }\n  //Override\n  getLocalizedModuleName() { return this._machineBuilder.getMachineType(); }\n}\nexport default FSAModule;\n","import React from 'react';\n\nclass NFAToDFAConversionWarningMessage extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n        this.onClick = this.onClick.bind(this);\n    }\n\n    onClick(e)\n    {\n        const message = this.props.message;\n        const buttonValue = e.target.value;\n\n        switch(buttonValue)\n        {\n            case \"convert\":\n                {\n                    const machineController = this.props.machineController;\n                    machineController.convertMachineTo(\"DFA\");\n                    message.close();\n                }\n            break;\n            default:\n              throw new Error(\"Unknown button value for message\");\n        }\n    }\n\n    render()\n    {\n        const machineController = this.props.machineController;\n        const machine = machineController.getMachineBuilder().getMachine();\n        const stateCount = machine.getStates().length;\n\n        return <div>\n          <p>{I18N.toString(\"message.warning.convertNFAToDFA\")}</p>\n          <p>{`${stateCount} states -> ${Math.pow(2, stateCount)} states`}</p>\n          <button value=\"convert\" onClick={this.onClick}>{I18N.toString(\"message.action.convert\")}</button>\n        </div>;\n\n    }\n}\n\nexport default NFAToDFAConversionWarningMessage;\n","import Config from 'config.js';\n\nimport InputPointer from './InputPointer.js';\nimport ViewportAdapter from './ViewportAdapter.js';\n\n/**\n * Provides an interface for InputController to interact with a HTMLElement.\n * Each listenable element should correspond to only a single InputAdapter.\n */\nclass InputAdapter\n{\n  constructor()\n  {\n    this._controller = null;\n    this._element = null;\n    this._cursor = {\n      _mousemove: null,\n      _mouseup: null,\n      _touchmove: null,\n      _touchend: null,\n      _timer: null\n    };\n    this._pointer = null;\n\n    this._viewport = new ViewportAdapter();\n\n    //Although dragging could be in pointer, it should be here to allow\n    //the adapter to be independent of pointer.\n    this._dragging = false;\n    this._altinput = false;\n\n    this._holdInputDelay = Config.LONG_TAP_TICKS;\n    this._dblInputDelay = Config.DOUBLE_TAP_TICKS;\n    this._scrollSensitivity = Config.SCROLL_SENSITIVITY;\n    this._minTapRadius = Config.CURSOR_RADIUS_SQU * 16;\n    this._draggingRadiusSqu = Config.CURSOR_RADIUS_SQU + Config.DRAGGING_BUFFER_SQU;\n\n    this._prevEmptyInput = false;\n    this._prevEmptyTime = 0;\n    this._prevEmptyX = 0;\n    this._prevEmptyY = 0;\n\n    this.onContextMenu = this.onContextMenu.bind(this);\n    this.onMouseDown = this.onMouseDown.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n    this.onTouchStart = this.onTouchStart.bind(this);\n    this.onWheel = this.onWheel.bind(this);\n\n    this.onMouseDownThenMove = this.onMouseDownThenMove.bind(this);\n    this.onMouseDownThenUp = this.onMouseDownThenUp.bind(this);\n    this.onTouchStartThenMove = this.onTouchStartThenMove.bind(this);\n    this.onTouchStartThenEnd = this.onTouchStartThenEnd.bind(this);\n\n    this.onDelayedInputDown = this.onDelayedInputDown.bind(this);\n  }\n\n  setController(controller)\n  {\n    this._controller = controller;\n    return this;\n  }\n\n  initialize(element)\n  {\n    if (!(element instanceof SVGElement)) throw new Error(\"Missing SVG element for input adapter's viewport\");\n    if (this._element) throw new Error(\"Trying to initialize an InputAdapter already initialized\");\n\n    this._viewport.setElement(this._element = element);\n    this._pointer = new InputPointer(this, this._element, this._viewport);\n\n    this._element.addEventListener('mousedown', this.onMouseDown);\n    this._element.addEventListener('mousemove', this.onMouseMove);\n    this._element.addEventListener('touchstart', this.onTouchStart);\n    this._element.addEventListener('touchmove', this.onTouchMove);\n    this._element.addEventListener('contextmenu', this.onContextMenu);\n    this._element.addEventListener('wheel', this.onWheel);\n  }\n\n  destroy()\n  {\n    if (!this._element) throw new Error(\"Trying to destroy an InputAdapter that is not yet initialized\");\n\n    this._element.removeEventListener('mousedown', this.onMouseDown);\n    this._element.removeEventListener('mousemove', this.onMouseMove);\n    this._element.removeEventListener('touchstart', this.onTouchStart);\n    this._element.removeEventListener('contextmenu', this.onContextMenu);\n    this._element.removeEventListener('wheel', this.onWheel);\n\n    this._element = null;\n  }\n\n  update()\n  {\n    //Smooth transition offset\n    this._viewport.update();\n  }\n\n  onMouseDown(e)\n  {\n    if (!this._controller) return false;\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const cursor = this._cursor;\n\n    //Blur any element in focus\n    document.activeElement.blur();\n    this._element.focus();\n\n    //Make sure mouse move is deleted, just in case\n    if (cursor._mousemove)\n    {\n      document.removeEventListener('mousemove', cursor._mousemove);\n      cursor._mousemove = null;\n    }\n    //Make sure mouse up is deleted, just in case\n    if (cursor._mouseup)\n    {\n      document.removeEventListener('mouseup', cursor._mouseup);\n      cursor._mouseup = null;\n    }\n\n    //HACK: To allow Mac's to use ctrl+click as right clicks\n    const button = e.ctrlKey ? 2 : e.button;\n\n    //Is this a valid mouse down?\n    if (this.onInputDown(e.clientX, e.clientY, button))\n    {\n      //Start mouse down logic...\n      cursor._mousemove = this.onMouseDownThenMove;\n      cursor._mouseup = this.onMouseDownThenUp;\n\n      document.addEventListener('mousemove', cursor._mousemove);\n      document.addEventListener('mouseup', cursor._mouseup);\n    }\n\n    return false;\n  }\n\n  onMouseMove(e)\n  {\n    if (!this._controller) return false;\n\n    const mouse = this._viewport.transformScreenToView(e.clientX, e.clientY);\n    this._pointer.setPosition(mouse.x, mouse.y);\n\n    //Can update target here for hover effects...\n  }\n\n  onMouseDownThenMove(e)\n  {\n    if (!this._controller) return false;\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    this.onInputMove(e.clientX, e.clientY);\n\n    return false;\n  }\n\n  onMouseDownThenUp(e)\n  {\n    if (!this._controller) return false;\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const cursor = this._cursor;\n\n    //Make sure mouse move is deleted, just in case\n    if (cursor._mousemove)\n    {\n      document.removeEventListener('mousemove', cursor._mousemove);\n      cursor._mousemove = null;\n    }\n    //Make sure mouse up is deleted, just in case\n    if (cursor._mouseup)\n    {\n      document.removeEventListener('mouseup', cursor._mouseup);\n      cursor._mouseup = null;\n    }\n\n    this.onInputUp(e.clientX, e.clientY);\n\n    return false;\n  }\n\n  onTouchStart(e)\n  {\n    if (!this._controller) return false;\n\n    if (e.changedTouches.length == 1)\n    {\n      e.stopPropagation();\n      e.preventDefault();\n\n      const cursor = this._cursor;\n\n      //Blur any element in focus\n      document.activeElement.blur();\n      this._element.focus();\n\n      //Make sure touch move is deleted, just in case\n      if (cursor._touchmove)\n      {\n        document.removeEventListener('touchmove', cursor._touchmove);\n        cursor._touchmove = null;\n      }\n      //Make sure touch end is deleted, just in case\n      if (cursor._touchend)\n      {\n        document.removeEventListener('touchend', cursor._touchend);\n        cursor._touchend = null;\n      }\n\n      const touch = e.changedTouches[0];\n      //Is this a valid touch start?\n      if (this.onInputDown(touch.clientX, touch.clientY, 0))\n      {\n        //Start touch start logic...\n        cursor._touchmove = this.onTouchStartThenMove;\n        cursor._touchend = this.onTouchStartThenEnd;\n\n        document.addEventListener('touchmove', cursor._touchmove);\n        document.addEventListener('touchend', cursor._touchend);\n      }\n\n      return false;\n    }\n  }\n\n  onTouchStartThenEnd(e)\n  {\n    if (!this._controller) return false;\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const cursor = this._cursor;\n\n    //Make sure mouse move is deleted, just in case\n    if (cursor._touchmove)\n    {\n      document.removeEventListener('touchmove', cursor._touchmove);\n      cursor._touchmove = null;\n    }\n    //Make sure mouse up is deleted, just in case\n    if (cursor._touchend)\n    {\n      document.removeEventListener('touchend', cursor._touchend);\n      cursor._touchend = null;\n    }\n\n    const touch = e.changedTouches[0];\n    this.onInputUp(touch.clientX, touch.clientY);\n\n    return false;\n  }\n\n  onTouchStartThenMove(e)\n  {\n    if (!this._controller) return false;\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const touch = e.changedTouches[0];\n    this.onInputMove(touch.clientX, touch.clientY);\n\n    return false;\n  }\n\n  onContextMenu(e)\n  {\n    if (!this._controller) return false;\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    return false;\n  }\n\n  onWheel(e)\n  {\n    if (!this._controller) return false;\n\n    e.stopPropagation();\n    e.preventDefault();\n\n    const controller = this._controller;\n    const pointer = this._pointer;\n    const dy = e.deltaY * this._scrollSensitivity;\n    const prev = this._viewport.getScale();\n    const next = prev + dy;\n\n    if (controller.onZoomChange(pointer, next, prev))\n    {\n      this._viewport.setScale(next);\n    }\n\n    return false;\n  }\n\n  onInputDown(x, y, button)\n  {\n    if (!this._controller) throw new Error(\"Missing controller for input adapter\");\n\n    //Setup for hold timer...\n    const cursor = this._cursor;\n    const controller = this._controller;\n    const pointer = this._pointer;\n    const mouse = this._viewport.transformScreenToView(x, y);\n    pointer.setPosition(mouse.x, mouse.y);\n\n    this._dragging = false;\n    this._altinput = button == 2;\n\n    if (!controller.onPreInputEvent(pointer))\n    {\n      pointer.beginInput();\n      cursor._timer = setTimeout(this.onDelayedInputDown, this._holdInputDelay);\n      return true;\n    }\n\n    return false;\n  }\n\n  onDelayedInputDown()\n  {\n    if (!this._controller) throw new Error(\"Missing controller for input adapter\");\n\n    //That means the input is remaining still (like a hold)...\n    if (!this._dragging)\n    {\n      this._altinput = true;\n    }\n  }\n\n  onInputMove(x, y)\n  {\n    if (!this._controller) throw new Error(\"Missing controller for input adapter\");\n\n    const controller = this._controller;\n    const pointer = this._pointer;\n    const mouse = this._viewport.transformScreenToView(x, y);\n    pointer.setPosition(mouse.x, mouse.y);\n\n    if (!this._dragging)\n    {\n      if (pointer.getDistanceSquToInitial() > this._draggingRadiusSqu)\n      {\n        this._dragging = true;\n        if (!controller.onDragStart(pointer))\n        {\n          this._dragging = false;\n\n          //TODO: you could NOT cancel the event and just update the target?\n          //If so, who is the initial target then?\n\n          //Stop the input event early...\n          this.cancelInputEvent();\n        }\n      }\n      else\n      {\n        //Still a click or hold...\n      }\n    }\n    else\n    {\n      //Continue to drag...\n      controller.onDragMove(pointer);\n    }\n  }\n\n  onInputUp(x, y)\n  {\n    if (!this._controller) throw new Error(\"Missing controller for input adapter\");\n\n    const cursor = this._cursor;\n    const timer = cursor._timer;\n    if (timer)\n    {\n      clearTimeout(timer);\n      cursor._timer = null;\n    }\n\n    //Update pointer target to final position\n    const controller = this._controller;\n    const pointer = this._pointer;\n    const mouse = this._viewport.transformScreenToView(x, y);\n    pointer.setPosition(mouse.x, mouse.y);\n\n    if (this._dragging)\n    {\n      //Stop dragging!\n      controller.onDragStop(pointer);\n    }\n    else\n    {\n      if (this._altinput)\n      {\n        //Alt Tap!\n        controller.onAltInputEvent(pointer);\n      }\n      else\n      {\n        //Tap!\n        const result = controller.onInputEvent(pointer);\n\n        //If the input was not consumed...\n        if (!result)\n        {\n          //Try for double tap...\n          const dx = x - this._prevEmptyX;\n          const dy = y - this._prevEmptyY;\n          const dist = dx * dx + dy * dy;\n          const dt = Date.now() - this._prevEmptyTime;\n          if (this._prevEmptyInput &&\n            dist < this._minTapRadius &&\n            dt < this._dblInputDelay)\n          {\n            //Double tap!\n            controller.onDblInputEvent(pointer);\n\n            this._prevEmptyInput = false;\n          }\n          else\n          {\n            this._prevEmptyInput = true;\n            this._prevEmptyTime = Date.now();\n            this._prevEmptyX = x;\n            this._prevEmptyY = y;\n          }\n        }\n      }\n    }\n\n    pointer.endInput();\n    controller.onPostInputEvent(pointer);\n  }\n\n  cancelInputEvent()\n  {\n    const controller = this._controller;\n    const pointer = this._pointer;\n    const cursor = this._cursor;\n\n    //Make sure mouse move is deleted, just in case\n    if (cursor._mousemove)\n    {\n      document.removeEventListener('mousemove', cursor._mousemove);\n      cursor._mousemove = null;\n    }\n    //Make sure mouse up is deleted, just in case\n    if (cursor._mouseup)\n    {\n      document.removeEventListener('mouseup', cursor._mouseup);\n      cursor._mouseup = null;\n    }\n\n    const timer = cursor._timer;\n    if (timer)\n    {\n      clearTimeout(timer);\n      cursor._timer = null;\n    }\n\n    pointer.endInput();\n    controller.onPostInputEvent(pointer);\n  }\n\n  getActiveElement()\n  {\n    return this._element;\n  }\n\n  getViewport()\n  {\n    return this._viewport;\n  }\n\n  getPointerX()\n  {\n    return this._pointer ? this._pointer.x : 0;\n  }\n\n  getPointerY()\n  {\n    return this._pointer ? this._pointer.y : 0;\n  }\n\n  isPointerActive()\n  {\n    return this._pointer ? this._pointer.isActive() : false;\n  }\n\n  isUsingTouch()\n  {\n    return this._cursor._touchmove || this._cursor._touchend;\n  }\n\n  isAltInput()\n  {\n    return this._altinput;\n  }\n\n  isDragging()\n  {\n    return this._dragging;\n  }\n}\n\nexport default InputAdapter;\n","import React from 'react';\nimport './NotificationView.css';\n\nimport NotificationMessage from './NotificationMessage.js';\n\nclass NotificationView extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  //Override\n  render()\n  {\n    const notificationManager = this.props.notificationManager;\n    return <div className={\"notification-container \" + this.props.className} id={this.props.id} style={this.props.style}>\n    {\n      notificationManager.getMessages().map(e => {\n        const id = e.getID();\n        const ComponentClass = e.getComponentClass();\n        const componentProps = e.getComponentProps() || {};\n\n        return <NotificationMessage key={id} value={e}>\n        { ComponentClass && <ComponentClass message={e} {...componentProps}/> }\n        </NotificationMessage>;\n      })\n    }\n    </div>;\n  }\n}\nexport default NotificationView;\n","const MAX_HISTORY_LENGTH = 1000;\n\nclass UndoManager\n{\n  constructor()\n  {\n    this.history = [];\n    this.offsetIndex = 0;\n  }\n\n  clear()\n  {\n    this.history.length = 0;\n    this.offsetIndex = 0;\n  }\n\n  captureEvent(eventHandler)\n  {\n    //Pop it all until current event\n    while(this.offsetIndex > 0)\n    {\n      this.history.pop();\n      --this.offsetIndex;\n    }\n\n    //Push the current event to the stack\n    this.history.push(eventHandler);\n\n    while(this.history.length > MAX_HISTORY_LENGTH)\n    {\n      this.history.unshift();\n    }\n  }\n\n  undo()\n  {\n    if (!this.canUndo())\n    {\n      //Already the oldest recorded event!\n      return;\n    }\n\n    const event = this.history[this.history.length - this.offsetIndex - 1];\n    ++this.offsetIndex;\n\n    event.applyUndo();\n  }\n\n  canUndo()\n  {\n    return this.offsetIndex < this.history.length;\n  }\n\n  redo()\n  {\n    if (!this.canRedo())\n    {\n      //Already the most recent event!\n      return;\n    }\n\n    --this.offsetIndex;\n    const event = this.history[this.history.length - this.offsetIndex - 1];\n\n    event.applyRedo();\n  }\n\n  canRedo()\n  {\n    return this.offsetIndex > 0;\n  }\n}\n\nexport default UndoManager;\n","class GraphImporter\n{\n  constructor(module)\n  {\n    this._module = module;\n  }\n\n  importFile(fileBlob, module)\n  {\n    if (!fileBlob) throw new Error(\"Unable to import null file\");\n    if (!(fileBlob instanceof File)) throw new Error(\"Unable to import object as file\");\n\n    let result = Promise.reject();\n    const fileName = fileBlob.name;\n    const exporters = module.getGraphExporters();\n\n    for(const exporter of exporters)\n    {\n      if (exporter.canImport() && exporter.doesSupportFile() && fileName.endsWith(exporter.getFileType()))\n      {\n        result = result.catch(e => exporter.importFromFile(fileBlob, module));\n      }\n    }\n\n    return result.catch(e => {\n      console.error(e);\n      throw new Error(\"Cannot find valid exporter for file: \" + fileName);\n    });\n  }\n\n  importData(data, module)\n  {\n    if (!data) throw new Error(\"Unable to import null data\");\n\n    let result = Promise.reject();\n    const exporters = module.getGraphExporters();\n\n    for(const exporter of exporters)\n    {\n      if (exporter.canImport() && exporter.doesSupportData())\n      {\n        result = result.catch(e => exporter.importFromData(data, module));\n      }\n    }\n\n    return result.catch(e => {\n      throw new Error(\"Cannot find valid exporter for data: \" + JSON.stringify(data));\n    });\n  }\n\n  getImportFileTypes()\n  {\n    return this._module.getGraphExporters().map(e => {\n      if (!e.canImport() || !e.doesSupportFile()) return null;\n      return '.' + e.getFileType();\n    });\n  }\n}\n\nexport default GraphImporter;\n","//https://www.flaticon.com/free-icon/png_136523\nimport React from 'react';\n\nclass PNGIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"png-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 56 56\">\n      <g>\n        <path fill=\"#E9E9E0\" d=\"M36.985,0H7.963C7.155,0,6.5,0.655,6.5,1.926V55c0,0.345,0.655,1,1.463,1h40.074 c0.808,0,1.463-0.655,1.463-1V12.978c0-0.696-0.093-0.92-0.257-1.085L37.607,0.257C37.442,0.093,37.218,0,36.985,0z\"/>\n        <path fill=\"#659C35\" d=\"M48.037,56H7.963C7.155,56,6.5,55.345,6.5,54.537V39h43v15.537C49.5,55.345,48.845,56,48.037,56z\"/>\n        <polygon fill=\"#D9D7CA\" points=\"37.5,0.151 37.5,12 49.349,12 \t\"/>\n        <g>\n          <path fill=\"#FFFFFF\" d=\"M17.385,53h-1.641V42.924h2.898c0.428,0,0.852,0.068,1.271,0.205 c0.419,0.137,0.795,0.342,1.128,0.615c0.333,0.273,0.602,0.604,0.807,0.991s0.308,0.822,0.308,1.306 c0,0.511-0.087,0.973-0.26,1.388c-0.173,0.415-0.415,0.764-0.725,1.046c-0.31,0.282-0.684,0.501-1.121,0.656 s-0.921,0.232-1.449,0.232h-1.217V53z M17.385,44.168v3.992h1.504c0.2,0,0.398-0.034,0.595-0.103 c0.196-0.068,0.376-0.18,0.54-0.335c0.164-0.155,0.296-0.371,0.396-0.649c0.1-0.278,0.15-0.622,0.15-1.032 c0-0.164-0.023-0.354-0.068-0.567c-0.046-0.214-0.139-0.419-0.28-0.615c-0.142-0.196-0.34-0.36-0.595-0.492 c-0.255-0.132-0.593-0.198-1.012-0.198H17.385z\"/>\n          <path fill=\"#FFFFFF\" d=\"M31.316,42.924V53h-1.668l-3.951-6.945V53h-1.668V42.924h1.668l3.951,6.945v-6.945H31.316z\"/>\n          <path fill=\"#FFFFFF\" d={\"M41.16,47.805v3.896c-0.21,0.265-0.444,0.48-0.704,0.649s-0.533,0.308-0.82,0.417 \" +\n            \"S39.052,52.954,38.747,53c-0.306,0.046-0.608,0.068-0.909,0.068c-0.602,0-1.155-0.109-1.661-0.328s-0.948-0.542-1.326-0.971 \" +\n            \"c-0.378-0.429-0.675-0.966-0.889-1.613c-0.214-0.647-0.321-1.395-0.321-2.242s0.107-1.593,0.321-2.235 \" +\n            \"c0.214-0.643,0.51-1.178,0.889-1.606c0.378-0.429,0.822-0.754,1.333-0.978c0.51-0.224,1.062-0.335,1.654-0.335 \" +\n            \"c0.547,0,1.057,0.091,1.531,0.273c0.474,0.183,0.897,0.456,1.271,0.82l-1.135,1.012c-0.219-0.265-0.47-0.456-0.752-0.574 \" +\n            \"c-0.283-0.118-0.574-0.178-0.875-0.178c-0.337,0-0.659,0.063-0.964,0.191c-0.306,0.128-0.579,0.344-0.82,0.649 \" +\n            \"c-0.242,0.306-0.431,0.699-0.567,1.183s-0.21,1.075-0.219,1.777c0.009,0.684,0.08,1.276,0.212,1.777 \" +\n            \"c0.132,0.501,0.314,0.911,0.547,1.23s0.497,0.556,0.793,0.711c0.296,0.155,0.608,0.232,0.937,0.232c0.1,0,0.234-0.007,0.403-0.021 \" +\n            \"c0.168-0.014,0.337-0.036,0.506-0.068c0.168-0.032,0.33-0.075,0.485-0.13c0.155-0.055,0.269-0.132,0.342-0.232v-2.488h-1.709 v-1.121H41.16z\"}/>\n        </g>\n        <circle fill=\"#F3D55B\" cx=\"18.931\" cy=\"14.431\" r=\"4.569\"/>\n        <polygon fill=\"#88C057\" points=\"6.5,39 17.5,39 49.5,39 49.5,28 39.5,18.5 29,30 23.517,24.517 \t\"/>\n      </g>\n    </svg>;\n  }\n}\n\nexport default PNGIcon;\n","//https://www.flaticon.com/free-icon/jpg_136524\nimport React from 'react';\n\nclass JPGIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"jpg-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 56 56\">\n      <g>\n        <path fill=\"#E9E9E0\" d=\"M36.985,0H7.963C7.155,0,6.5,0.655,6.5,1.926V55c0,0.345,0.655,1,1.463,1h40.074 c0.808,0,1.463-0.655,1.463-1V12.978c0-0.696-0.093-0.92-0.257-1.085L37.607,0.257C37.442,0.093,37.218,0,36.985,0z\"/>\n        <polygon fill=\"#D9D7CA\" points=\"37.5,0.151 37.5,12 49.349,12 \t\"/>\n        <circle fill=\"#F3D55B\" cx=\"18.931\" cy=\"14.431\" r=\"4.569\"/>\n        <polygon fill=\"#26B99A\" points=\"6.5,39 17.5,39 49.5,39 49.5,28 39.5,18.5 29,30 23.517,24.517 \t\"/>\n        <path fill=\"#14A085\" d=\"M48.037,56H7.963C7.155,56,6.5,55.345,6.5,54.537V39h43v15.537C49.5,55.345,48.845,56,48.037,56z\"/>\n        <g>\n          <path fill=\"#FFFFFF\" d={\"M21.426,42.65v7.848c0,0.474-0.087,0.873-0.26,1.196c-0.173,0.323-0.406,0.583-0.697,0.779 \" +\n            \"c-0.292,0.196-0.627,0.333-1.005,0.41C19.085,52.961,18.696,53,18.295,53c-0.201,0-0.436-0.021-0.704-0.062 \" +\n            \"c-0.269-0.041-0.547-0.104-0.834-0.191s-0.563-0.185-0.827-0.294c-0.265-0.109-0.488-0.232-0.67-0.369l0.697-1.107 \" +\n            \"c0.091,0.063,0.221,0.13,0.39,0.198c0.168,0.068,0.353,0.132,0.554,0.191c0.2,0.06,0.41,0.111,0.629,0.157 \" +\n            \"s0.424,0.068,0.615,0.068c0.483,0,0.868-0.094,1.155-0.28s0.439-0.504,0.458-0.95V42.65H21.426z\"}/>\n          <path fill=\"#FFFFFF\" d={\"M25.514,52.932h-1.641V42.855h2.898c0.428,0,0.852,0.068,1.271,0.205 \" +\n            \"c0.419,0.137,0.795,0.342,1.128,0.615c0.333,0.273,0.602,0.604,0.807,0.991s0.308,0.822,0.308,1.306 \" +\n            \"c0,0.511-0.087,0.973-0.26,1.388c-0.173,0.415-0.415,0.764-0.725,1.046c-0.31,0.282-0.684,0.501-1.121,0.656 \" +\n            \"s-0.921,0.232-1.449,0.232h-1.217V52.932z M25.514,44.1v3.992h1.504c0.2,0,0.398-0.034,0.595-0.103 \" +\n            \"c0.196-0.068,0.376-0.18,0.54-0.335s0.296-0.371,0.396-0.649c0.1-0.278,0.15-0.622,0.15-1.032c0-0.164-0.023-0.354-0.068-0.567 \" +\n            \"c-0.046-0.214-0.139-0.419-0.28-0.615c-0.142-0.196-0.34-0.36-0.595-0.492C27.5,44.166,27.163,44.1,26.744,44.1H25.514z\"}/>\n          <path fill=\"#FFFFFF\" d={\"M39.5,47.736v3.896c-0.21,0.265-0.444,0.48-0.704,0.649s-0.533,0.308-0.82,0.417 \" +\n            \"s-0.583,0.187-0.889,0.232C36.781,52.978,36.479,53,36.178,53c-0.602,0-1.155-0.109-1.661-0.328s-0.948-0.542-1.326-0.971 \" +\n            \"c-0.378-0.429-0.675-0.966-0.889-1.613c-0.214-0.647-0.321-1.395-0.321-2.242s0.107-1.593,0.321-2.235 \" +\n            \"c0.214-0.643,0.51-1.178,0.889-1.606c0.378-0.429,0.822-0.754,1.333-0.978c0.51-0.224,1.062-0.335,1.654-0.335 \" +\n            \"c0.547,0,1.057,0.091,1.531,0.273c0.474,0.183,0.897,0.456,1.271,0.82l-1.135,1.012c-0.219-0.265-0.47-0.456-0.752-0.574 \" +\n            \"c-0.283-0.118-0.574-0.178-0.875-0.178c-0.337,0-0.659,0.063-0.964,0.191c-0.306,0.128-0.579,0.344-0.82,0.649 \" +\n            \"c-0.242,0.306-0.431,0.699-0.567,1.183s-0.21,1.075-0.219,1.777c0.009,0.684,0.08,1.276,0.212,1.777 \" +\n            \"c0.132,0.501,0.314,0.911,0.547,1.23s0.497,0.556,0.793,0.711c0.296,0.155,0.608,0.232,0.937,0.232c0.1,0,0.234-0.007,0.403-0.021 \" +\n            \"c0.168-0.014,0.337-0.036,0.506-0.068c0.168-0.032,0.33-0.075,0.485-0.13c0.155-0.055,0.269-0.132,0.342-0.232v-2.488h-1.709 \" +\n            \"v-1.121H39.5z\"}/>\n        </g>\n      </g>\n    </svg>;\n  }\n}\n\nexport default JPGIcon;\n","import React from 'react';\nimport '../Panel.css';\nimport './ExportingPanel.css';\n\nimport IconButton from 'icons/IconButton.js';\n\nclass ExportingPanel extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.container = null;\n  }\n\n  renderExporterButton(exporter)\n  {\n    if (!exporter.doesSupportFile()) return null;\n\n    return <IconButton key={exporter.getFileType()}\n      className=\"export-button\"\n      id={\"export-\" + exporter.getFileType()}\n      title={exporter.getTitle()}\n      onClick={() => {\n        const module = this.props.currentModule;\n        const machineController = module.getMachineController();\n        const filename = machineController.getMachineName() || \"Untitled\";\n        exporter.exportToFile(filename, module);\n      }}>\n      { React.createElement(exporter.getIconClass()) }\n      <label>{ exporter.getLabel() }</label>\n    </IconButton>;\n  }\n\n  //Override\n  render()\n  {\n    const module = this.props.currentModule;\n    const graphExporters = module.getGraphExporters();\n    const imageExporters = module.getImageExporters();\n\n    return <div className={\"panel-container \" + this.props.className} id=\"exporting\" ref={ref=>this.container=ref} style={this.props.style}>\n      <div className=\"panel-title\">\n        <h1>{I18N.toString(\"component.exporting.title\")}</h1>\n      </div>\n      <div className=\"panel-content\">\n      {\n        graphExporters.map(e => this.renderExporterButton(e))\n      }\n      {\n        imageExporters.map(e => this.renderExporterButton(e))\n      }\n        <hr/>\n        {/*Save to E-mail*/}\n        <div className=\"export-email\">\n        </div>\n      </div>\n\n      <div className=\"panel-bottom\"></div>\n    </div>;\n  }\n}\nObject.defineProperty(ExportingPanel, 'TITLE', {\n  get: function() { return I18N.toString(\"component.exporting.title\"); }\n});\nExportingPanel.UNLOCALIZED_NAME = \"component.exporting.title\";\n\nexport default ExportingPanel;\n","import React from 'react';\nimport '../Panel.css';\nimport './OptionsPanel.css';\n\nimport Config from 'config.js';\nimport { saveConfig } from 'config.js';\n\nimport LocalSave from 'system/localsave/LocalSave.js';\nimport * as ColorHelper from 'util/ColorHelper.js';\nimport StyleOptionRegistry from 'system/styleopt/StyleOptionRegistry.js';\nimport StyleInput from 'system/styleopt/components/StyleInput.js';\n\nimport OptionGroup from './OptionGroup.js';\nimport OptionHotkey from './OptionHotkey.js';\n\n//This should be the same as the one referred to by index.js\nconst LOCAL_STORAGE_ID = \"skipWelcome\";\n\nclass OptionsPanel extends React.Component\n{\n  constructor(props)\n  {\n    super(props)\n\n    this.container = React.createRef();\n    this.styleOpts = new StyleOptionRegistry();\n\n    this.state = {\n      theme: \"default\",\n      customTheme: false,\n      skipWelcome: LocalSave.getStringFromStorage(LOCAL_STORAGE_ID) === \"true\",\n      disableExitWarning: LocalSave.getStringFromStorage(\"disableExitWarning\") === \"true\"\n    };\n\n    this.onChangeTheme = this.onChangeTheme.bind(this);\n    this.onChangeModule = this.onChangeModule.bind(this);\n  }\n\n  //Override\n  componentDidMount()\n  {\n    const root = document.getElementById(\"root\");\n    const opts = this.styleOpts;\n\n    const invertFunc = function(opt, value) {\n      const color = [];\n      ColorHelper.HEXtoRGB(value, color);\n      ColorHelper.invertRGB(color, false, color);\n      const result = ColorHelper.RGBtoHEX(color);\n      //Set style\n      opts.getOptionByProp(opt.prop + \"-invert\").setStyle(result);\n    };\n\n    const darkFunc = function(opt, value) {\n      //v < 0.15 ? lighten : darken\n      const color = [];\n      const inverted = [];\n      ColorHelper.HEXtoRGB(value, color);\n      ColorHelper.invertRGB(color, true, inverted);\n      ColorHelper.blendRGB(0.2, color, inverted, color);\n      const result = ColorHelper.RGBtoHEX(color);\n      //Set style\n      opts.getOptionByProp(opt.prop + \"-dark\").setStyle(result);\n    };\n\n    const subtleFunc = function(opt, value)\n    {\n      //v < 0.15 ? lighten : darken\n      const color = [];\n      const inverted = [];\n      ColorHelper.HEXtoRGB(value, color);\n      ColorHelper.invertRGB(color, true, inverted);\n      ColorHelper.blendRGB(0.39, color, inverted, color);\n      const result = ColorHelper.RGBtoHEX(color);\n      //Set style\n      opts.getOptionByProp(opt.prop + \"-subtle\").setStyle(result);\n    };\n\n    const ghostFunc = function(opt, value)\n    {\n      //v < 0.15 ? lighten : darken\n      const color = [];\n      const inverted = [];\n      ColorHelper.HEXtoRGB(value, color);\n      ColorHelper.invertRGB(color, true, inverted);\n      ColorHelper.blendRGB(0.26, color, inverted, color);\n      const result = ColorHelper.RGBtoHEX(color);\n      //Set style\n      opts.getOptionByProp(opt.prop + \"-ghost\").setStyle(result);\n    };\n\n    const backFunc = function(opt, value)\n    {\n      //v < 0.15 ? lighten : darken\n      const color = [];\n      const inverted = [];\n      ColorHelper.HEXtoRGB(value, color);\n      ColorHelper.invertRGB(color, true, inverted);\n      ColorHelper.blendRGB(0.13, color, inverted, color);\n      const result = ColorHelper.RGBtoHEX(color);\n      //Set style\n      opts.getOptionByProp(opt.prop + \"-back\").setStyle(result);\n    };\n\n    //Toolbar\n    opts.registerStyleOption(root, \"--color-toolbar-main\", \"color\", \"toolbar\", darkFunc);\n    opts.registerStyleOption(root, \"--color-toolbar-main-dark\", \"color\", \"hidden\");\n    opts.registerStyleOption(root, \"--color-toolbar-accent\", \"color\", \"toolbar\", darkFunc);\n    opts.registerStyleOption(root, \"--color-toolbar-accent-dark\", \"color\", \"hidden\");\n    opts.registerStyleOption(root, \"--color-toolbar-text\", \"color\", \"toolbar\", invertFunc);\n    opts.registerStyleOption(root, \"--color-toolbar-text-invert\", \"color\", \"hidden\");\n\n    //Drawer\n    opts.registerStyleOption(root, \"--color-drawer-main\", \"color\", \"drawer\", darkFunc);\n    opts.registerStyleOption(root, \"--color-drawer-main-dark\", \"color\", \"hidden\");\n    opts.registerStyleOption(root, \"--color-drawer-accent\", \"color\", \"drawer\");\n    opts.registerStyleOption(root, \"--color-drawer-text\", \"color\", \"drawer\", (...args) => {\n      subtleFunc(...args);\n      ghostFunc(...args);\n      invertFunc(...args);\n      backFunc(...args);\n    });\n    opts.registerStyleOption(root, \"--color-drawer-text-subtle\", \"color\", \"hidden\");\n    opts.registerStyleOption(root, \"--color-drawer-text-ghost\", \"color\", \"hidden\");\n    opts.registerStyleOption(root, \"--color-drawer-text-invert\", \"color\", \"hidden\");\n    opts.registerStyleOption(root, \"--color-drawer-text-back\", \"color\", \"hidden\");\n    opts.registerStyleOption(root, \"--color-drawer-error\", \"color\", \"drawer\");\n\n    //Testing\n    opts.registerStyleOption(root, \"--color-testing-success\", \"color\", \"testing\");\n    opts.registerStyleOption(root, \"--color-testing-failure\", \"color\", \"testing\");\n    opts.registerStyleOption(root, \"--color-testing-working\", \"color\", \"testing\");\n    opts.registerStyleOption(root, \"--color-testing-text\", \"color\", \"testing\");\n\n    //Notification\n    opts.registerStyleOption(root, \"--color-notification-text\", \"color\", \"notification\");\n    opts.registerStyleOption(root, \"--color-notification-info\", \"color\", \"notification\", darkFunc);\n    opts.registerStyleOption(root, \"--color-notification-info-dark\", \"color\", \"hidden\");\n    opts.registerStyleOption(root, \"--color-notification-error\", \"color\", \"notification\", darkFunc);\n    opts.registerStyleOption(root, \"--color-notification-error-dark\", \"color\", \"hidden\");\n    opts.registerStyleOption(root, \"--color-notification-warning\", \"color\", \"notification\", darkFunc);\n    opts.registerStyleOption(root, \"--color-notification-warning-dark\", \"color\", \"hidden\");\n\n    //Workspace\n    opts.registerStyleOption(root, \"--color-graph-node\", \"color\", \"workspace\");\n    opts.registerStyleOption(root, \"--color-workspace-text\", \"color\", \"workspace\");\n    opts.registerStyleOption(root, \"--color-workspace-main\", \"color\", \"workspace\");\n\n    //Label editor\n    opts.registerStyleOption(root, \"--color-labeleditor-text\", \"color\", \"labeleditor\");\n    opts.registerStyleOption(root, \"--color-labeleditor-main\", \"color\", \"labeleditor\");\n\n    //Viewport\n    opts.registerStyleOption(root, \"--color-viewport-error\", \"color\", \"viewport\");\n    opts.registerStyleOption(root, \"--color-viewport-testing\", \"color\", \"viewport\");\n    opts.registerStyleOption(root, \"--color-viewport-warning\", \"color\", \"viewport\");\n    opts.registerStyleOption(root, \"--color-highlight-select\", \"color\", \"viewport\");\n\n    opts.initialize();\n\n    LocalSave.registerHandler(this);\n    this.onLoadSave();\n  }\n\n  //Override\n  componentWillUnmount()\n  {\n    this.styleOpts.terminate();\n\n    LocalSave.unregisterHandler(this);\n  }\n\n  //Ducktype(AbstractLocalSaver)\n  onLoadSave()\n  {\n    const opts = this.styleOpts;\n    const data = LocalSave.loadFromStorage(\"prefs-color\");\n    for(let prop in data)\n    {\n      const opt = opts.getOptionByProp(prop);\n      if (opt)\n      {\n        opt.setStyle(data[prop]);\n      }\n    }\n  }\n\n  //Ducktype(AbstractLocalSaver)\n  onAutoSave()\n  {\n    const opts = this.styleOpts;\n    const data = {};\n    for(let opt of opts.getOptions())\n    {\n      if (!opt.isDefaultStyle())\n      {\n        data[opt.prop] = opt.getStyle();\n      }\n    }\n    LocalSave.saveToStorage(\"prefs-color\", data);\n  }\n\n  onChangeTheme(e)\n  {\n    const prevTheme = this.state.theme;\n    const theme = e.target.value;\n    if (prevTheme === theme) return;\n\n    if (theme === \"default\")\n    {\n      for(let option of this.styleOpts.getOptions())\n      {\n        option.resetStyle();\n      }\n    }\n\n    this.setState({theme: theme});\n  }\n\n  onChangeModule(e)\n  {\n    //Nothing yet...\n  }\n\n  //Override\n  render()\n  {\n    const root = document.getElementById(\"root\");\n    const opts = this.styleOpts;\n\n    return <div className={\"panel-container \" + this.props.className} id=\"option\" ref={ref=>this.container=ref} style={this.props.style}>\n      <div className=\"panel-title\">\n        <h1>{I18N.toString(\"component.options.title\")}</h1>\n      </div>\n      <div className=\"panel-content\">\n\n        <OptionGroup title={I18N.toString(\"component.workspace.title\")} label={I18N.toString(\"options.category.shortcuts\")}>\n          <OptionHotkey label={I18N.toString(\"action.toolbar.savemachine\")} keyName=\"Ctrl + S\"/>\n          <OptionHotkey label={I18N.toString(\"action.toolbar.undo.label\")} keyName=\"Ctrl + Z\"/>\n          <OptionHotkey label={I18N.toString(\"action.toolbar.redo.label\")} keyName=\"Ctrl + Shift + Z\"/>\n          <OptionHotkey label={I18N.toString(\"action.toolbar.saveimage\")} keyName=\"Ctrl + P\"/>\n        </OptionGroup>\n\n        <OptionGroup title={I18N.toString(\"component.testing.title\")} label={I18N.toString(\"options.category.shortcuts\")}>\n          <OptionHotkey label={\"Add test input\"} keyName=\"Enter\"/>\n          <OptionHotkey label={\"Run test input\"} keyName=\"Shift + Enter\"/>\n        </OptionGroup>\n\n        <OptionGroup title={I18N.toString(\"component.labeleditor.title\")} label={I18N.toString(\"options.category.shortcuts\")}>\n          <OptionHotkey label={I18N.toString(\"action.workspace.submit.label\")} keyName=\"Enter\"/>\n          <OptionHotkey label={I18N.toString(\"action.workspace.cancel.label\")} keyName=\"Escape\"/>\n        </OptionGroup>\n\n        <div className=\"panel-checkbox\" style={{marginTop: \"10px\"}}>\n          <input id=\"option-skipwelcome\" type=\"checkbox\" checked={this.state.skipWelcome}\n          onChange={(e) => {\n            const result = e.target.checked;\n            this.setState({skipWelcome: e.target.checked});\n            LocalSave.setStringToStorage(LOCAL_STORAGE_ID, \"\" + result);\n          }}/>\n          <label htmlFor=\"option-skipwelcome\">{I18N.toString(\"options.skipwelcome\")}</label>\n        </div>\n\n        <hr/>\n\n        <div>\n          <div id=\"options-theme-select-container\">\n            <label htmlFor=\"options-theme-select\">Theme</label>\n            <select id=\"options-theme-select\" className=\"panel-select\" value={this.state.theme} onChange={this.onChangeTheme} disabled={this.state.customTheme}>\n              <option value=\"default\">Default</option>\n              <option value=\"ucsd\" disabled={true}>UC San Diego (Coming Soon)</option>\n              <option value=\"duke\" disabled={true}>Duke University (Coming Soon)</option>\n            </select>\n            {\n              !this.state.customTheme &&\n              <button className=\"panel-button\" onClick={() => this.setState({customTheme: true})}>\n                {I18N.toString(\"action.options.changetheme\")}\n              </button>\n            }\n          </div>\n          {\n            this.state.customTheme && <div>\n              <OptionGroup title={I18N.toString(\"component.toolbar.title\")} label={I18N.toString(\"options.category.colors\")}>\n              { opts.getPropsByGroup(\"toolbar\").map(e => <div key={e}>\n                  <StyleInput className=\"option-container\" value={opts.getOptionByProp(e)} title={I18N.toString(\"options.\" + e)}/>\n                </div>) }\n              </OptionGroup>\n\n              <OptionGroup title={I18N.toString(\"component.drawer.title\")} label={I18N.toString(\"options.category.colors\")}>\n              { opts.getPropsByGroup(\"drawer\").map(e => <div key={e}>\n                  <StyleInput className=\"option-container\" value={opts.getOptionByProp(e)} title={I18N.toString(\"options.\" + e)}/>\n                </div>) }\n              </OptionGroup>\n\n              <OptionGroup title={I18N.toString(\"component.testing.title\")} label={I18N.toString(\"options.category.colors\")}>\n              { opts.getPropsByGroup(\"testing\").map(e => <div key={e}>\n                  <StyleInput className=\"option-container\" value={opts.getOptionByProp(e)} title={I18N.toString(\"options.\" + e)}/>\n                </div>) }\n              </OptionGroup>\n\n              <OptionGroup title={I18N.toString(\"component.notification.title\")} label={I18N.toString(\"options.category.colors\")}>\n              { opts.getPropsByGroup(\"notification\").map(e => <div key={e}>\n                  <StyleInput className=\"option-container\" value={opts.getOptionByProp(e)} title={I18N.toString(\"options.\" + e)}/>\n                </div>) }\n              </OptionGroup>\n\n              <OptionGroup title={I18N.toString(\"component.graph.title\")} label={I18N.toString(\"options.category.colors\")}>\n              { opts.getPropsByGroup(\"workspace\").map(e => <div key={e}>\n                  <StyleInput className=\"option-container\" value={opts.getOptionByProp(e)} title={I18N.toString(\"options.\" + e)}/>\n                </div>) }\n              </OptionGroup>\n\n              <OptionGroup title={I18N.toString(\"component.labeleditor.title\")} label={I18N.toString(\"options.category.colors\")}>\n              { opts.getPropsByGroup(\"labeleditor\").map(e => <div key={e}>\n                  <StyleInput className=\"option-container\" value={opts.getOptionByProp(e)} title={I18N.toString(\"options.\" + e)}/>\n                </div>) }\n              </OptionGroup>\n\n              <OptionGroup title={I18N.toString(\"options.category.general\")} label={I18N.toString(\"options.category.colors\")}>\n              { opts.getPropsByGroup(\"viewport\").map(e => <div key={e}>\n                  <StyleInput className=\"option-container\" value={opts.getOptionByProp(e)} title={I18N.toString(\"options.\" + e)}/>\n                </div>) }\n              </OptionGroup>\n\n              <button className=\"panel-button\" onClick={(e) => {\n                for(let option of this.styleOpts.getOptions())\n                {\n                  option.resetStyle();\n                }\n                this.setState({customTheme: false});\n              }}>{I18N.toString(\"action.options.reset\")}</button>\n            </div>\n          }\n        </div>\n\n        <hr/>\n\n        <div>\n          <h2>Experimental</h2>\n\n          <select id=\"options-experimental-modules\" className=\"panel-select\" value={this.props.currentModule.getModuleName()} onChange={this.onChangeModule}>\n            <option value=\"fsa\">Finite State Automata</option>\n            <option value=\"pda\" disabled={true}>Pushdown Automata (Coming Soon)</option>\n            <option value=\"cfg\" disabled={true}>Context-Free Grammar (Future)</option>\n            <option value=\"tm\" disabled={true}>Turing Machine (Future)</option>\n            <option value=\"rdt\" disabled={true}>Red-Black Tree (Future)</option>\n            <option value=\"hlsm\" disabled={true}>High Level State Machine (Future)</option>\n          </select>\n\n          <div className=\"panel-checkbox\" style={{marginTop: \"10px\"}}>\n            <input id=\"option-disableexitwarning\" type=\"checkbox\" checked={this.state.disableExitWarning}\n            onChange={(e) => {\n              const result = e.target.checked;\n              this.setState({disableExitWarning: result});\n              LocalSave.setStringToStorage(\"disableExitWarning\", \"\" + result);\n            }}/>\n            <label htmlFor=\"option-disableexitwarning\">{\"Disable Exit Warning\"}</label>\n          </div>\n\n          <button className=\"panel-button\" style={{marginTop: \"10px\"}} onClick={(e) => {\n            if (LocalSave.getStringFromStorage(\"enableExperimental\") === \"true\")\n            {\n              window.alert(\"Please restart to begin the awakening...\");\n            }\n            else if (window.confirm(\"Be careful! This will PERMANENTLY change \" +\n              \"your app and is intended only for debugging purposes. You \" +\n              \"should only enable this if you know what you are doing. Are \" +\n              \"you sure about this?\"))\n            {\n              if (window.confirm(\"Seriously, THIS CAN BREAK THE APP \" +\n                \"PERMANENTLY! So only proceed if you are absolutely sure \" +\n                \"about this. Ask a member of the dev team for assistance.\"))\n              {\n                if (window.prompt(\"Well, at this point, you are either a \" +\n                \"member of the dev team (welcome to the team) or you have \" +\n                \"been instructed to do so by a member of the dev team \" +\n                \"(hello human). Please ask them for the password:\") === \"I solemnly swear I am up to no good.\")\n                {\n                  if (window.confirm(\"Alright, here we go. Last chance to \" +\n                  \"leave. Cancel it now or restart and face the consequences.\"))\n                  {\n                    LocalSave.setStringToStorage(\"enableExperimental\", \"true\");\n                  }\n                }\n                else\n                {\n                  window.alert(\"Sorry, it looks like you are a normal human. Have a hug. <3\");\n                }\n              }\n            }\n          }}>\n            {\"Enable Experimental Mode\"}\n          </button>\n\n        </div>\n\n      </div>\n\n      <div className=\"panel-bottom\"></div>\n    </div>;\n  }\n}\nObject.defineProperty(OptionsPanel, 'TITLE', {\n  get: function() { return I18N.toString(\"component.options.title\"); }\n});\nOptionsPanel.UNLOCALIZED_NAME = \"component.options.title\";\n\nexport default OptionsPanel;\n","class LocalSaveManager\n{\n  constructor()\n  {\n    this._handlers = new Set();\n    this._intervalID = null;\n    this._intervalMillis = 1000;\n\n    this._init = false;\n\n    this.onIntervalUpdate = this.onIntervalUpdate.bind(this);\n  }\n\n  setAutoSaveInterval(millis)\n  {\n    if (!millis || millis <= 0) throw new Error(\"AutoSave interval must be greater than 0\");\n    this._intervalMillis = millis;\n  }\n\n  registerHandler(handler)\n  {\n    if (this._handlers.has(handler))\n    {\n      throw new Error(\"Cannot register handler, since it is already registered\");\n    }\n\n    if (this._init)\n    {\n      //NOTE: Due to duck typing, it might not exist...\n      if (typeof handler['onLoadSave'] === 'function')\n      {\n        handler.onLoadSave();\n      }\n    }\n\n    this._handlers.add(handler);\n  }\n\n  unregisterHandler(handler)\n  {\n    if (!this._handlers.has(handler))\n    {\n      throw new Error(\"Cannot remove handler, since it is not yet registered\");\n    }\n\n    if (this._init)\n    {\n      //NOTE: Due to duck typing, it might not exist...\n      if (typeof handler['onUnloadSave'] === 'function')\n      {\n        handler.onUnloadSave();\n      }\n    }\n\n    this._handlers.delete(handler);\n  }\n\n  initialize()\n  {\n    if (this._init) throw new Error(\"Cannot initialize LocalSave, since it is already initialized\");\n\n    if (this.doesSupportLocalStorage())\n    {\n      this._init = true;\n\n      for(const handler of this._handlers)\n      {\n        //NOTE: Due to duck typing, it might not exist...\n        if (typeof handler['onLoadSave'] === 'function')\n        {\n          handler.onLoadSave();\n        }\n      }\n\n      //Prepare autosave\n      this._intervalID = setInterval(this.onIntervalUpdate, this._intervalMillis);\n    }\n    else\n    {\n      //Does not support local storage, so ignore everything...\n    }\n  }\n\n  terminate()\n  {\n    if (!this._init) throw new Error(\"Cannot terminate LocalSave, since it is not yet initialized\");\n\n    clearInterval(this._intervalID);\n\n    for(const handler of this._handlers)\n    {\n      //NOTE: Due to duck typing, it might not exist...\n      if (typeof handler['onUnloadSave'] === 'function')\n      {\n        handler.onUnloadSave();\n      }\n    }\n\n    this._handlers.clear();\n    this._init = false;\n  }\n\n  onIntervalUpdate()\n  {\n    //Save most recent save for all registered handlers\n    for(let handler of this._handlers)\n    {\n      try\n      {\n        //NOTE: Due to duck typing, it might not exist...\n        if (typeof handler['onAutoSave'] === 'function')\n        {\n          handler.onAutoSave();\n        }\n      }\n      catch(e)\n      {\n        console.error(e);\n      }\n    }\n  }\n\n  setStringToStorage(saveKey, stringData)\n  {\n    if (!this.doesSupportLocalStorage()) return;\n    if (stringData.length > 0)\n    {\n      localStorage.setItem(saveKey, stringData);\n    }\n    else\n    {\n      localStorage.removeItem(saveKey);\n    }\n  }\n\n  getStringFromStorage(saveKey)\n  {\n    if (!this.doesSupportLocalStorage()) return \"\";\n    return localStorage.getItem(saveKey) || \"\";\n  }\n\n  loadFromStorage(saveKey)\n  {\n    if (!this.doesSupportLocalStorage()) return null;\n    try\n    {\n      const value = localStorage.getItem(saveKey);\n      if (value && value.length > 0)\n      {\n        return JSON.parse(value);\n      }\n      else\n      {\n        return null;\n      }\n    }\n    catch(e)\n    {\n      console.error(e);\n      return {};\n    }\n  }\n\n  saveToStorage(saveKey, jsonData)\n  {\n    if (!this.doesSupportLocalStorage()) return;\n\n    let hidden, visibilityChange;\n\n    // Opera 12.10 and Firefox 18 and later support\n    if (typeof document.hidden !== \"undefined\")\n    {\n      hidden = \"hidden\";\n      visibilityChange = \"visibilitychange\";\n    }\n    else if (typeof document.msHidden !== \"undefined\")\n    {\n      hidden = \"msHidden\";\n      visibilityChange = \"msvisibilitychange\";\n    }\n    else if (typeof document.webkitHidden !== \"undefined\")\n    {\n      hidden = \"webkitHidden\";\n      visibilityChange = \"webkitvisibilitychange\";\n    }\n\n    if (document[hidden])\n    {\n      //Don't save anything...\n      return;\n    }\n\n    try\n    {\n      if (typeof jsonData == 'object')\n      {\n        let flag = jsonData;\n        if (flag)\n        {\n          flag = false;\n\n          //Don't save empty objects, cause that is wasteful.\n          for(let key in jsonData)\n          {\n            if (jsonData.hasOwnProperty(key))\n            {\n              flag = true;\n              break;\n            }\n          }\n        }\n\n        //Save or remove the data...\n        if (flag)\n        {\n          localStorage.setItem(saveKey, JSON.stringify(jsonData));\n        }\n        else\n        {\n          localStorage.removeItem(saveKey);\n        }\n      }\n      else if (typeof jsonData == 'string')\n      {\n        const flag = jsonData.length <= 0;\n\n        //Save or remove the data...\n        if (flag)\n        {\n          localStorage.setItem(saveKey, jsonData);\n        }\n        else\n        {\n          localStorage.removeItem(saveKey);\n        }\n      }\n    }\n    catch(e)\n    {\n      console.error(e);\n    }\n  }\n\n  existsInStorage(saveKey)\n  {\n    if (!this.doesSupportLocalStorage()) return false;\n    return localStorage.getItem(saveKey) != null;\n  }\n\n  clearStorage()\n  {\n    if (!this.doesSupportLocalStorage()) return;\n\n    localStorage.clear();\n  }\n\n  doesSupportLocalStorage()\n  {\n    //check if browser support local storage\n    return typeof Storage !== 'undefined';\n  }\n}\nexport default LocalSaveManager;\n","class StyleOption\n{\n  constructor(elementSource, propName, inputType, groupName, callback)\n  {\n    //the html element that this css variable reflects\n    this.element = elementSource;\n    //the name of the css variable\n    this.prop = propName;\n    //the css variable type\n    this.type = inputType;\n    //the group that the variable belongs to (\"default\" if not specified)\n    this.group = groupName;\n\n    this._callback = callback;\n    this._value = null;\n    this._defaultValue = null;\n  }\n\n  /**\n   * Update the current value to reflect the computed style's value.\n   */\n  updateStyle(computedStyle=null, shouldPropagateChange=true)\n  {\n    if (!computedStyle)\n    {\n      computedStyle = window.getComputedStyle(this.element);\n    }\n    const newValue = computedStyle.getPropertyValue(this.prop);\n    if (!newValue)\n    {\n      throw new Error(\"Cannot find style option with prop name \\'\" + this.prop + \"\\' for element\");\n    }\n\n    this._value = newValue.trim();\n    this._defaultValue = this._value;\n    if (shouldPropagateChange && this._callback) this._callback(this, newValue);\n  }\n\n  /**\n   * Reset the current value to reflect the computed style's value.\n   */\n  resetStyle()\n  {\n    this.setStyle(this._defaultValue);\n  }\n\n  /**\n   * Changes the variable's value for prop name.\n   * These changes are reflected to the css source.\n   */\n  setStyle(val, shouldPropagateChange=true)\n  {\n    this._value = val;\n    this.element.style.setProperty(this.prop, val);\n\n    if (shouldPropagateChange && this._callback) this._callback.call(null, this, val);\n  }\n\n  /** Returns the variable's current value. Null if not yet initialized. */\n  getStyle()\n  {\n    return this._value;\n  }\n\n  isDefaultStyle()\n  {\n    return this._value == this._defaultValue;\n  }\n}\n\nclass StyleOptionRegistry\n{\n  constructor()\n  {\n    this._options = new Map();\n    this._groups = new Map();\n\n    this._init = false;\n  }\n\n  registerStyleOption(elementSource, propName, inputType=\"text\", groupName=\"default\", changeCallback=null)\n  {\n    if (this._options.has(propName))\n    {\n      throw new Error(\"Style option with prop name \\'\" + propName + \"\\' already registered\");\n    }\n\n    const result = new StyleOption(elementSource, propName, inputType, groupName, changeCallback);\n    this._options.set(propName, result);\n\n    let group;\n    if (!this._groups.has(groupName))\n    {\n      group = [];\n      this._groups.set(groupName, group);\n    }\n    else\n    {\n      group = this._groups.get(groupName);\n\n      if (group.indexOf(propName) != -1)\n      {\n        //Ignore it, it's already in here\n        return;\n      }\n    }\n    group.push(propName);\n  }\n\n  unregisterStyleOption(propName)\n  {\n    if (this._options.has(propName))\n    {\n      const option = this._options.get(propName);\n      this._options.delete(propName);\n      const groupName = option.group;\n      if (this._groups.has(groupName))\n      {\n        const group = this._groups.get(groupName);\n        const index = group.indexOf(propName);\n        if (index >= 0)\n        {\n          group.splice(index, 1);\n        }\n      }\n    }\n  }\n\n  initialize()\n  {\n    if (this._init)\n    {\n      throw new Error(\"Already initialized\");\n    }\n\n    //Compute the styles\n    const computedStyles = {};\n    let computedStyle;\n    for(let option of this._options.values())\n    {\n      const element = option.element;\n      computedStyle = computedStyles[element];\n      if (!computedStyle)\n      {\n        computedStyle = window.getComputedStyle(element);\n        computedStyles[element] = computedStyle;\n      }\n      option.updateStyle(computedStyle, false);\n    }\n\n    this._init = true;\n  }\n\n  terminate()\n  {\n    if (!this._init)\n    {\n      throw new Error(\"Not yet initialized\");\n    }\n\n    this._options.clear();\n    this._groups.clear();\n\n    this._init = false;\n  }\n\n  getOptionByProp(propName)\n  {\n    return this._options.get(propName);\n  }\n\n  getPropsByGroup(groupName)\n  {\n    return this._groups.get(groupName) || [];\n  }\n\n  getOptions()\n  {\n    return this._options.values();\n  }\n\n  isEmpty()\n  {\n    return this._options.size <= 0;\n  }\n}\n\nexport default StyleOptionRegistry;\n","import { guid } from 'util/MathHelper.js';\n\nclass Message\n{\n  constructor(handler, value, type, tags, componentClass, componentProps)\n  {\n    this._handler = handler;\n    this._id = guid();\n    this._type = type;\n\n    this.value = value;\n    this.tags = tags;\n    this.componentClass = componentClass;\n    this.componentProps = componentProps;\n  }\n\n  close()\n  {\n    const messages = this._handler.getMessages();\n    const index = messages.indexOf(this);\n    if (index < 0) throw new Error(\"Trying to close an unopened notification message\");\n    messages.splice(index, 1);\n  }\n\n  getType()\n  {\n    return this._type;\n  }\n\n  getID()\n  {\n    return this._id;\n  }\n\n  getComponentClass()\n  {\n    return this.componentClass;\n  }\n\n  getComponentProps()\n  {\n    return this.componentProps;\n  }\n\n  hasTag(tag)\n  {\n    return this.tags.indexOf(tag) >= 0;\n  }\n}\n\nclass NotificationManager\n{\n  constructor()\n  {\n    this._messageQueue = [];\n  }\n\n  addMessage(value, type=null, tags=null, componentClass=null, componentProps=null, shouldReplaceRelated=true)\n  {\n    if (tags && shouldReplaceRelated)\n    {\n      this.clearMessages(tags);\n    }\n\n    const result = new Message(this, value, type || \"default\", tags || [], componentClass, componentProps);\n    this._messageQueue.unshift(result);\n  }\n\n  addDefaultMessage(value, tags=null, componentClass=null, componentProps=null, shouldReplaceRelated=true)\n  {\n    this.addMessage(value, \"default\", tags, componentClass, componentProps, shouldReplaceRelated);\n  }\n\n  addErrorMessage(value, tags=null, componentClass=null, componentProps=null, shouldReplaceRelated=true)\n  {\n    this.addMessage(value, \"error\", tags, componentClass, componentProps, shouldReplaceRelated);\n  }\n\n  addWarningMessage(value, tags=null, componentClass=null, componentProps=null, shouldReplaceRelated=true)\n  {\n    this.addMessage(value, \"warning\", tags, componentClass, componentProps, shouldReplaceRelated);\n  }\n\n  clearMessages(tags=null)\n  {\n    if (!tags)\n    {\n      this._messageQueue.length = 0;\n    }\n    else\n    {\n      if (!Array.isArray(tags)) tags = [tags];\n\n      let message;\n      for(let i = this._messageQueue.length - 1; i >= 0; --i)\n      {\n        message = this._messageQueue[i];\n        for(const tag of tags)\n        {\n          if (message.hasTag(tag))\n          {\n            this._messageQueue.splice(i, 1);\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  hasMessages(tags=null)\n  {\n    if (!tags)\n    {\n      return this._messageQueue.length >= 0;\n    }\n    else\n    {\n      if (!Array.isArray(tags)) tags = [tags];\n\n      for(let i = this._messageQueue.length - 1; i >= 0; --i)\n      {\n        message = this._messageQueue[i];\n        for(const tag of tags)\n        {\n          if (message.hasTag(tag))\n          {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n  }\n\n  getMessages()\n  {\n    return this._messageQueue;\n  }\n}\nexport default NotificationManager;\n","import React from 'react';\nimport '../Panel.css';\nimport './OverviewPanel.css';\n\nimport Config from 'config.js';\n\nimport FormattedInput from 'system/formattedinput/FormattedInput.js';\n\nimport StatesList from './stateslist/StatesList.js';\nimport AlphabetList from './alphabetlist/AlphabetList.js';\nimport TransitionTable from './transitiontable/TransitionTable.js';\nimport TransitionFunction from './transitionfunction/TransitionFunction.js';\nimport FormalDefinition from \"./formaldefinition/FormalDefinition\";\n\nclass OverviewPanel extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.container = null;\n\n    this.state = {\n      viewFormal: false\n    };\n\n    this.onChangeMachineType = this.onChangeMachineType.bind(this);\n    this.onAutoLayout = this.onAutoLayout.bind(this);\n\n    this.onChangeAutoRename = this.onChangeAutoRename.bind(this);\n    this.onSubmitAutoStatePrefix = this.onSubmitAutoStatePrefix.bind(this);\n    this.onAutoStateFormat = this.onAutoStateFormat.bind(this);\n\n    this.switchDefinition = this.switchDefinition.bind(this);\n  }\n\n  onAutoLayout(e)\n  {\n    const graphController = this.props.currentModule.getGraphController();\n    graphController.applyAutoLayout();\n  }\n\n  onChangeMachineType(e)\n  {\n    const value = e.target.value;\n    const machineController = this.props.currentModule.getMachineController();\n    machineController.changeMachineTo(value);\n  }\n\n  onChangeAutoRename(e)\n  {\n    const machineBuilder = this.props.currentModule.getMachineController().getMachineBuilder();\n    machineBuilder.setAutoRenameNodes(e.target.checked);\n  }\n\n  onSubmitAutoStatePrefix(next, prev)\n  {\n    const labeler = this.props.currentModule.getMachineController().getMachineBuilder().getLabeler();\n    if (labeler.prefix != next)\n    {\n      labeler.prefix = next;\n      labeler.sortDefaultNodeLabels();\n    }\n  }\n\n  onAutoStateFormat(value)\n  {\n    return value && value.length > 0 ? value : Config.STR_STATE_LABEL;\n  }\n\n  switchDefinition()\n  {\n    this.setState((prev, props) => {\n      return { viewFormal: !prev.viewFormal };\n    });\n  }\n\n  render()\n  {\n    const currentModule = this.props.currentModule;\n    const graphController = currentModule.getGraphController();\n    const machineController = currentModule.getMachineController();\n\n    const graph = graphController.getGraph();\n    const machineBuilder = machineController.getMachineBuilder();\n\n    return <div className={\"panel-container \" + this.props.className} id=\"overview\" ref={ref=>this.container=ref} style={this.props.style}>\n      <div className=\"panel-title\">\n        <h1>{I18N.toString(\"component.overview.title\")}</h1>\n      </div>\n        <div className=\"panel-content\">\n          <select className=\"machine-type panel-select\"\n            value={machineBuilder.getMachineType()}\n            onChange={this.onChangeMachineType}>\n            <option value=\"DFA\">DFA</option>\n            <option value=\"NFA\">NFA</option>\n          </select>\n\n          {this.state.viewFormal &&\n            <FormalDefinition machineBuilder={machineBuilder}/>}\n\n          {\n            !this.state.viewFormal &&\n            <div>\n              <div>\n                <div className=\"graphinfo-important\">\n                  <StatesList graphController={graphController}/>\n                  <AlphabetList machineController={machineController}/>\n                </div>\n                <div className=\"graphinfo\">\n                  <TransitionFunction machineBuilder={machineBuilder}/>\n                  <TransitionTable machineBuilder={machineBuilder}/>\n                </div>\n              </div>\n              <hr/>\n\n              {/*State Labeling*/}\n              <div style={{paddingBottom: \"0.5em\"}}>\n                <h3 style={{marginBottom: \"0\"}}>State Labels</h3>\n                <div style={{display: \"flex\", flexDirection: \"row\"}}>\n                  <div className=\"statetag-container\">\n                    <FormattedInput defaultValue={machineBuilder.getLabeler().prefix} style={{width: \"4em\"}} formatter={this.onAutoStateFormat} captureOnExit=\"save\" onSubmit={this.onSubmitAutoStatePrefix}/>\n                  </div>\n                  <select style={{\n                      background: \"none\",\n                      outline: \"none\",\n                      border: \"none\",\n                      padding: \"0\",\n                      margin: \"0\",\n                      appearance: \"none\",\n                      color: \"white\"\n                    }} disabled={true}>\n                    <option>{\"0-9\"}</option>\n                    <option>{\"a-z\"}</option>\n                    <option>{\"A-Z\"}</option>\n                  </select>\n                </div>\n                <div className=\"panel-checkbox\">\n\n                  <input type=\"checkbox\" id=\"auto-statename\"\n                    onChange={this.onChangeAutoRename}\n                    checked={machineBuilder.shouldAutoRenameNodes()}/>\n                  <label htmlFor=\"auto-statename\">{I18N.toString(\"options.autolabel\")}</label>\n                </div>\n              </div>\n\n              <hr/>\n\n              <button className=\"panel-button\" onClick={this.onAutoLayout} disabled={graph.isEmpty()}>\n                {I18N.toString(\"action.overview.autolayout\")}\n              </button>\n            </div>\n          }\n\n          <button className=\"panel-button\" onClick={this.switchDefinition}>\n            {this.state.viewFormal ? \"Back\" : \"View Definition\"}\n          </button>\n        </div>\n      <div className=\"panel-bottom\"></div>\n    </div>;\n  }\n}\nObject.defineProperty(OverviewPanel, 'TITLE', {\n  get: function() { return I18N.toString(\"component.overview.title\"); }\n});\nOverviewPanel.UNLOCALIZED_NAME = \"component.overview.title\";\n\nexport default OverviewPanel;\n","import React from 'react';\nimport './StatesList.css';\n\nimport InfoBlock from '../infoblock/InfoBlock.js';\nimport IconButton from 'icons/IconButton.js';\nimport BoxAddIcon from 'icons/BoxAddIcon.js';\nimport TriangleIcon from 'icons/TriangleIcon.js';\n\nimport StateTag from './StateTag.js';\n\nclass StatesList extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.onStateCreate = this.onStateCreate.bind(this);\n  }\n\n  onStateCreate(e)\n  {\n    const x = -100 + (Math.random() * 100 * 2);\n    const y = -100 + (Math.random() * 100 * 2);\n    this.props.graphController.createNode(x, y);\n  }\n\n  render()\n  {\n    const graphController = this.props.graphController;\n    const graph = graphController.getGraph();\n    return <InfoBlock title={I18N.toString(\"component.stateslist.title\")} defaultValue=\"true\">\n      <div className=\"statelist-container\">\n        <div className=\"statelist\">\n          <TriangleIcon/>\n          {\n            graph.getNodes().map((e, i) => {\n              return <StateTag key={e.getGraphElementID()} src={e} label={e.getNodeLabel()} accept={e.getNodeAccept()}\n                graphController={graphController}\n                onFocus={ev => graphController.focusOnNode(e)}/>\n            })\n          }\n        </div>\n        <IconButton onClick={this.onStateCreate}>\n          <BoxAddIcon/>\n        </IconButton>\n      </div>\n    </InfoBlock>;\n  }\n}\n\nexport default StatesList;\n","import React from 'react';\n\nclass TriangleIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"triangle-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path d=\"M12 7.77L18.39 18H5.61L12 7.77M12 4L2 20h20L12 4z\"/>\n      <path fill=\"none\" d=\"M0 0h24v24H0V0z\"/>\n    </svg>;\n  }\n}\n\nexport default TriangleIcon;\n","import React from 'react';\nimport './StateTag.css';\n\nimport Config from 'config.js';\n\nclass StateTag extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.state = {\n      value: null,\n      error: false\n    };\n\n    this.onValueChange = this.onValueChange.bind(this);\n    this.onFocus = this.onFocus.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.onKeyUp = this.onKeyUp.bind(this);\n  }\n\n  onFocus(e)\n  {\n    const target = e.target;\n    //This is a prop, refer to StateList for the actual node.getNodeLabel()\n    this.setState({ value: this.props.label, error: false }, () => {\n      target.select()\n    });\n\n    //Call any listening focus\n    if (this.props.onFocus) this.props.onFocus(e);\n  }\n\n  onBlur(e)\n  {\n    const graphController = this.props.graphController;\n    const newLabel = this.state.value;\n\n    //The value is already processed, abort\n    if (newLabel != null)\n    {\n      const node = this.props.src;\n      const graph = graphController.getGraph();\n      if (newLabel.length > 0)\n      {\n        const nodes = graph.getNodesByLabel(newLabel);\n        if (nodes.length <= 0)\n        {\n          //Valid! Rename it!\n          graphController.renameNode(node, newLabel);\n        }\n        else\n        {\n          //Found something already named that! Ignore!\n        }\n      }\n      else\n      {\n        //Delete!\n        graphController.deleteTargetNode(this.props.src);\n      }\n\n      this.setState({ value: null, error: false });\n\n      //Call any listening blurs\n      if (this.props.onBlur) this.props.onBlur(e);\n    }\n  }\n\n  onKeyDown(e)\n  {\n    if (e.keyCode === Config.SUBMIT_KEY || e.keyCode === Config.CLEAR_KEY)\n    {\n      e.preventDefault();\n    }\n  }\n\n  onKeyUp(e)\n  {\n    if (e.keyCode === Config.SUBMIT_KEY)\n    {\n      e.target.blur();\n    }\n    else if (e.keyCode === Config.CLEAR_KEY)\n    {\n      const target = e.target;\n      this.setState({ value: null, error: false}, () => {\n        target.blur();\n      });\n    }\n  }\n\n  onValueChange(e)\n  {\n    const graph = this.props.graphController.getGraph();\n    const value = e.target.value.trim();\n    let error = false;\n    if (value.length > 0)\n    {\n      const nodes = graph.getNodesByLabel(value);\n      if (nodes.length > 0)\n      {\n        //If there are more than 1 that have the same name\n        //OR if it is NOT the one we have...\n        if (nodes.length > 1 || nodes[0] !== this.props.src)\n        {\n          error = true;\n        }\n      }\n    }\n\n    this.setState({\n      value: value,\n      error: error\n    });\n  }\n\n  render()\n  {\n    const isCustom = this.props.src.getNodeCustom();\n    const value = this.state.value != null ? this.state.value : this.props.label;\n    return <div className={\"statetag-container\" +\n      (isCustom ? \" customtag\" : \"\") +\n      (value.length == 0 ? \" emptytag\" : \"\") +\n      (this.state.value && this.state.error ? \" errortag\" : \"\")}>\n      <input type=\"text\" className={(this.props.accept ? \" accept\" : \"\")}\n        spellCheck=\"false\"\n        style={{width: value.length + \"ch\"}}\n        value={value}\n        onChange={this.onValueChange}\n        onFocus={this.onFocus}\n        onBlur={this.onBlur}\n        onKeyUp={this.onKeyUp}\n        onKeyDown={this.onKeyDown}/>\n    </div>;\n  }\n}\n\nexport default StateTag;\n","import React from 'react';\nimport './AlphabetList.css';\n\nimport InfoBlock from '../infoblock/InfoBlock.js';\nimport IconButton from 'icons/IconButton.js';\nimport BoxAddIcon from 'icons/BoxAddIcon.js';\n\nimport AlphabetTag from './AlphabetTag.js';\n\nclass AlphabetList extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n    this.editingTag = null;\n\n    this.state = {\n      editing: false\n    };\n\n    this.onSymbolCreate = this.onSymbolCreate.bind(this);\n    this.onStopEditing = this.onStopEditing.bind(this);\n  }\n\n  onSymbolCreate(e)\n  {\n    this.setState({editing: true}, () => {\n      this.editingTag.ref.focus();\n    });\n  }\n\n  onStopEditing(e)\n  {\n    this.setState({editing: false});\n  }\n\n  render()\n  {\n    const machineController = this.props.machineController;\n    const alphabet = machineController.getAlphabet();\n\n    return <InfoBlock title={I18N.toString(\"component.alphabetlist.title\")}>\n      <div className=\"alphalist-container\">\n        <div className=\"alphalist\">\n          {\n            alphabet.map((e, i) => {\n              return <AlphabetTag key={e + \".\" + i} src={e} machineController={machineController}/>\n            })\n          }\n          {\n            this.state.editing &&\n            <AlphabetTag ref={ref=>this.editingTag=ref} src={\"\"} machineController={machineController}\n              onBlur={this.onStopEditing}/>\n          }\n        </div>\n\n        <IconButton onClick={this.onSymbolCreate}>\n          <BoxAddIcon/>\n        </IconButton>\n      </div>\n    </InfoBlock>;\n  }\n}\n\nexport default AlphabetList;\n","import React from 'react';\nimport './TransitionTable.css';\n\nimport InfoBlock from '../infoblock/InfoBlock.js';\nimport NFA from 'machine/NFA.js';\nimport { EMPTY } from 'machine/Symbols.js';\n\nconst SRC = 0;\nconst SYMBOL = 1;\nconst DST = 2;\n\nconst SYMBOL_AXIS = \"symbols\";\nconst STATE_AXIS = \"states\";\n\nclass TransitionTable extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.state = {\n      rowAxis: SYMBOL_AXIS\n    }\n  }\n\n  render()\n  {\n    const machineBuilder = this.props.machineBuilder;\n    const machine = machineBuilder.getMachine();\n    const states = machine.getStates();\n    const alphabet = machine.getAlphabet();\n    const transitions = machine.getTransitions();\n    const rowAxisType = this.state.rowAxis;\n    const isNFAMachine = machineBuilder.getMachineType() == \"NFA\";\n    const hasEmptyColumn = rowAxisType === SYMBOL_AXIS && isNFAMachine;\n\n    return <InfoBlock title={I18N.toString(\"component.transitiontable.title\")}>\n      <div className=\"transitiontable-container\">\n        <table className=\"transitiontable\">\n          <tbody>\n            <tr>\n              <th className=\"emptycell\">\n                <button className=\"panel-button\" onClick={()=>\n                  this.setState((prev, props)=>{\n                    return {\n                      rowAxis: prev.rowAxis == SYMBOL_AXIS ? STATE_AXIS : SYMBOL_AXIS\n                    };\n                  })}>\n                  {this.state.rowAxis == SYMBOL_AXIS ? \"Q/\\u03A3\" : \"Q/Q\"}\n                </button>\n              </th>\n              {\n                rowAxisType === SYMBOL_AXIS ?\n                  alphabet.map((e, i)=><th key={e} scope=\"col\" className=\"col\">{e}</th>) :\n                rowAxisType === STATE_AXIS ?\n                  states.map((e, i)=><th key={e} scope=\"col\" className=\"col\">{e}</th>) :\n                null\n              }\n              {\n                hasEmptyColumn &&\n                  <th scope=\"col\">{EMPTY}</th>\n              }\n            </tr>\n            {\n              states.map((e, i)=><tr key={e}>\n                <th scope=\"row\" className=\"row\">{e}</th>\n                {\n                  rowAxisType === SYMBOL_AXIS ?\n                    alphabet.map((symbol, i) => {\n                      let className = \"\";//TODO: machine.isFinalState(e) ? \"accept\" : \"\";\n                      const result = getDestinationFromSourceAndSymbol(machine, e, symbol, isNFAMachine);\n                      if (!isNFAMachine && (result.startsWith(\"{\") || result == \"-\"))\n                      {\n                        className += \" error\";\n                      }\n                      return <td key={e + \",\" + symbol} className={className}>\n                        {result}\n                      </td>;\n                    }) :\n                  rowAxisType === STATE_AXIS ?\n                    states.map((dst, i) => {\n                      const result = getSymbolFromSourceAndDestination(machine, e, dst);\n                      return <td key={e + \",\" + dst}>\n                        {result}\n                      </td>;\n                    }) :\n                  null\n                }\n                {\n                  hasEmptyColumn &&\n                    <td>{getDestinationFromSourceAndSymbol(machine, e, EMPTY)}</td>\n                }\n              </tr>)\n            }\n          </tbody>\n        </table>\n      </div>\n    </InfoBlock>;\n  }\n}\n\nfunction getDestinationFromSourceAndSymbol(machine, src, symbol, isSet=true)\n{\n  const result = machine.doTransition(src, symbol);\n\n  //Assumes that the machine is always an NFA, therefore the result is an array\n  if (Array.isArray(result))\n  {\n    return !isSet && result.length == 1 ?\n      result[0] :\n      result.length > 0 ?\n      \"{\" + result.join(\", \") + \"}\" : \"-\";\n  }\n  else\n  {\n    return result || \"-\";\n  }\n}\n\nfunction getSymbolFromSourceAndDestination(machine, src, dst)\n{\n  const result = [];\n  const transitions = machine.getTransitions();\n  for(const transition of transitions)\n  {\n    if (transition[SRC] == src && transition[DST] == dst)\n    {\n      result.push(transition[SYMBOL]);\n    }\n  }\n\n  if (result.length === 1)\n  {\n    return result[0];\n  }\n  else if (result.length > 0)\n  {\n    return \"{\" + result.join(\", \") + \"}\";\n  }\n  else\n  {\n    return \"-\";\n  }\n}\n\nexport default TransitionTable;\n","import React from 'react';\nimport './TransitionFunction.css';\n\nimport InfoBlock from '../infoblock/InfoBlock';\nimport { EMPTY } from 'machine/Symbols.js';\n\nclass TransitionFunction extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const machineBuilder = this.props.machineBuilder;\n    const machine = machineBuilder.getMachine();\n    const states = machine.getStates();\n    const alphabet = machine.getAlphabet().sort();\n    let isNFA = machineBuilder.getMachineType() == \"NFA\";\n    return(\n        <InfoBlock title=\"Transition Chart\">\n          <div className=\"transitionfunction-container\">\n            <table className=\"transitionfunction-table\">\n              <tbody>\n                <tr>\n                  <th>Q{\"\\u00d7\"}&Sigma;</th>\n                  <th>{isNFA ? \"\\u2118(Q)\" : \"Q\"}</th>\n                </tr>\n                {\n                  states.map((state, i) => {\n                    let emptrans = machine.doTransition(state, EMPTY);\n                    let empclassName = \"\";\n\n                    let transitions = alphabet.map((symbol, j) => {\n                      let className = \"\";\n                      let trans = machine.doTransition(state, symbol);\n                      if(isNFA && !trans.length) return;\n                      if(!isNFA && !trans.length) {\n                        className = \"error\";\n                        trans = \"-\";\n                      }\n                      if(!isNFA && trans.length > 1) {\n                        className = \"error\";\n                        trans = \"{\" + trans + \"}\"\n                      }\n                      trans = isNFA ? \"{\" + trans + \"}\" : \"\" + trans;\n                      return <tr key={\"\"+state+symbol}>\n                          <td className=\"transitionfunction-key\">{\"(\" + state + \",\" + symbol + \")\"}</td>\n                          <td className={\"transitionfunction-value \" + className}>{trans}</td>\n                        </tr>\n                    });\n\n                    if(emptrans.length > 0) {\n                      if(!isNFA) {\n                        empclassName = \"error\";\n                      }\n                      const addBrac = isNFA || emptrans.length > 1;\n                      emptrans = addBrac ? \"{\" + emptrans + \"}\" : \"\" + emptrans;\n                      transitions.unshift(\n                          <tr key={\"\"+state+EMPTY}>\n                            <td className={\"transitionfunction-key \" + empclassName}>{\"(\" + state + \",\" + EMPTY + \")\"}</td>\n                            <td className=\"transitionfunction-value\">{emptrans}</td>\n                          </tr>\n                      );\n                    }\n                    return transitions;\n                  })\n                }\n              </tbody>\n            </table>\n          </div>\n        </InfoBlock>\n    );\n  }\n}\n\nexport default TransitionFunction;\n","import React from 'react';\nimport './FormalDefinition.css';\nimport { EMPTY } from 'machine/Symbols.js';\n\nimport { EMPTY_SET, ARROW } from 'machine/Symbols.js';\n\nconst EQUAL = \"=\";\nconst DELTA = \"\\u03b4\";\n\nclass FormalDefinition extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    const machineBuilder = this.props.machineBuilder;\n    const machine = machineBuilder.getMachine();\n    const states = machine.getStates();\n    const finalStates = machine.getFinalStates();\n    const alphabet = machine.getAlphabet().sort();\n    let isNFA = machineBuilder.getMachineType() == \"NFA\";\n    return <div className=\"formaldef-container\">\n      <h2>{\"M = (Q, \\u03A3, \\u03b4, q0, F)\"}</h2>\n      <div>\n        <h3>Q =</h3>\n        <span className=\"formaldef-values\">\n          {states.length > 0 ? \"{ \" + states.join(\", \") + \" }\" : EMPTY_SET}\n        </span>\n      </div>\n      <div>\n        <h3>&Sigma; =</h3>\n        <span className=\"formaldef-values\">\n          {alphabet.length > 0 ? \"{ \" + alphabet.join(\", \") + \" }\" : EMPTY_SET}\n        </span>\n      </div>\n      <div>\n        <h3>{DELTA}</h3>\n        <div className=\"formaldef-values\">\n          {\n            states.map((state, i) => {\n              let emptrans = machine.doTransition(state, EMPTY);\n              let empclassName = \"\";\n\n              let transitions = alphabet.map((symbol, j) => {\n                let className = \"\";\n                let trans = machine.doTransition(state, symbol);\n                if(isNFA && !trans.length) return;\n                if(!isNFA && !trans.length) {\n                  className = \"error\";\n                  trans = \"-\";\n                }\n                if(!isNFA && trans.length > 1) {\n                  className = \"error\";\n                  trans = \"{ \" + trans + \" }\"\n                }\n                trans = isNFA ? \"{ \" + trans + \" }\" : \"\" + trans;\n                return <div key={\"\"+state+symbol} className={className}>\n                      {DELTA + \"( ( \" + state + \", \" + symbol + \" ) )\" + \" \" + EQUAL + \" \" + trans}\n                </div>\n              });\n\n              if(emptrans.length > 0) {\n                if(!isNFA) {\n                  empclassName = \"error\";\n                }\n                const addBrac = isNFA || emptrans.length > 1;\n                emptrans = addBrac ? \"{ \" + emptrans + \" }\" : \"\" + emptrans;\n                transitions.unshift(\n                    <div key={\"\" + state + EMPTY} className={empclassName}>\n                      {DELTA + \"( ( \" + state + \", \" + EMPTY + \" ) )\" + \" \" + EQUAL + \" \" + emptrans}\n                    </div>\n                );\n              }\n              return transitions;\n            })\n          }\n          {\n            isNFA && <div id=\"formaldef-otherinputs\">\n              <div>{\"For all other inputs (q, x),\"}</div>\n              <div>{DELTA + \"( (q, x) )\" + \" \" + EQUAL + \" \" + EMPTY_SET}</div>\n            </div>\n          }\n        </div>\n      </div>\n      <div>\n        <h3>q0 =</h3>\n        <span className=\"formaldef-values\">\n          {states[0]}\n        </span>\n      </div>\n      <div>\n        <h3>F =</h3>\n        <span className=\"formaldef-values\">\n          {finalStates.length > 0 ? \"{ \" + finalStates.join(\",\") + \" }\" : EMPTY_SET}\n        </span>\n      </div>\n    </div>;\n  }\n}\n\nexport default FormalDefinition;\n","import React from 'react';\nimport '../Panel.css';\nimport './TestingPanel.css';\n\nimport { downloadText } from 'util/Downloader.js';\n\nimport TestingManager from 'modules/fsa/testing/TestingManager.js';\nimport TestingInput from './TestingInput.js';\n\nimport IconButton from 'icons/IconButton.js';\nimport UploadTestButton from './components/UploadTestButton.js';\n\nimport UploadIcon from 'icons/UploadIcon.js';\nimport CreateIcon from 'icons/PageNewContentIcon.js';\nimport SaveIcon from 'icons/SaveIcon.js';\nimport CloseIcon from 'icons/CloseIcon.js';\n\nconst TEST_FILENAME = \"test.txt\";\n\n//TODO: This is faster, since it's pretty easy to tell latency here. But really it shouldn't.\nconst REFRESH_TEST_TICKS = 30;\n\nclass TestingPanel extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.container = React.createRef();\n    this.uploadInput = React.createRef();\n\n    this.state = {\n      errorCheckMode: this.props.currentModule.getTestingManager().getErrorCheckMode(),\n      noTestMode: true\n    };\n\n    this._savedGraphHash = 0;\n    this._ticksSinceHash = 0;\n    this.stepByStepModeChecked = false;\n\n    this.onChangeErrorCheckMode = this.onChangeErrorCheckMode.bind(this);\n    this.onUploadFileChange = this.onUploadFileChange.bind(this);\n    this.onGraphChange = this.onGraphChange.bind(this);\n    this.onTestsRunAll = this.onTestsRunAll.bind(this);\n    this.onTestsClear = this.onTestsClear.bind(this);\n    this.onTestsSave = this.onTestsSave.bind(this);\n    this.onTestsNew = this.onTestsNew.bind(this);\n    this.onTestsUpload = this.onTestsUpload.bind(this);\n  }\n\n  componentWillMount()\n  {\n    const graphController = this.props.currentModule.getGraphController();\n    const graph = graphController.getGraph();\n\n    //HACK: this should be in FSABuilder and listen for machine changes instead\n    this._savedGraphHash = graph.getHashCode();\n    this._ticksSinceHash = 0;\n  }\n\n  componentWillUnmount()\n  {\n    const graphController = this.props.currentModule.getGraphController();\n    const graph = graphController.getGraph();\n    this._savedGraphHash = 0;\n  }\n\n  onGraphChange(g)\n  {\n    const tester = this.props.currentModule.getTestingManager();\n    tester.inputList.resetTests();\n  }\n\n  onUploadFileChange(e)\n  {\n    const files = e.target.files;\n    if (files.length > 0)\n    {\n      const tester = this.props.currentModule.getTestingManager();\n      tester.inputList.importTests(files[0]);\n      document.getElementById(\"test-name\").innerHTML = files[0].name;\n\n      //Makes sure you can upload the same file again.\n      e.target.value = \"\";\n    }\n  }\n\n  onChangeErrorCheckMode(e)\n  {\n    const value = e.target.value;\n\n    const currentModule = this.props.currentModule;\n    const graphController = currentModule.getGraphController();\n    const machineController = currentModule.getMachineController();\n    const tester = currentModule.getTestingManager();\n\n    const graph = graphController.getGraph();\n    const machineBuilder = machineController.getMachineBuilder();\n    tester.setErrorCheckMode(value);\n\n    //HACK: this should automatically be updated by testing manager on set error check mode\n    if (!tester.shouldCheckError)\n    {\n      machineBuilder.machineErrorChecker.clear();\n    }\n    else\n    {\n      machineBuilder.onGraphChange(graph);\n    }\n\n    this.setState({errorCheckMode: value});\n  }\n\n  onTestsRunAll(e)\n  {\n    const currentModule = this.props.currentModule;\n    const machine = currentModule.getMachineController().getMachineBuilder().getMachine();\n    const tester = currentModule.getTestingManager();\n    if (tester.testMode.isStarted())\n    {\n      tester.setStepByStepMode(false);\n    }\n    else\n    {\n      const testList = tester.inputList;\n      const length = testList.getTests().length;\n      tester.setStepByStepMode(this.stepByStepModeChecked);\n      for(let i = 0; i < length; ++i)\n      {\n        testList.testByIndex(i, machine);\n      }\n    }\n  }\n\n  onTestsClear(e)\n  {\n    const tester = this.props.currentModule.getTestingManager();\n    tester.inputList.clearTests();\n    this.clearTestName();\n    this.hideTestInputList();\n    this.setState({noTestMode: true});\n  }\n\n  onTestsSave(e)\n  {\n    const tester = this.props.currentModule.getTestingManager();\n    downloadText(TEST_FILENAME, tester.inputList.getTestsAsStrings().join(\"\\n\"));\n  }\n\n  onTestsNew(e)\n  {\n      this.onTestsClear();\n      this.showTestInputList();\n      this.clearTestName();\n      this.setState({noTestMode: false});\n  }\n\n  onTestsUpload(e)\n  {\n      this.onTestsNew();\n      this.showTestInputList();\n  }\n\n  showTestInputList() {\n      document.getElementById(\"test-inputlist-container\").style.display = \"block\";\n  }\n\n  hideTestInputList() {\n      document.getElementById(\"test-inputlist-container\").style.display = \"none\";\n  }\n\n  clearTestName() {\n      document.getElementById(\"test-name\").innerHTML = \"\";\n  }\n\n  render()\n  {\n    const currentModule = this.props.currentModule;\n    const tester = currentModule.getTestingManager();\n    const testList = tester.inputList;\n    const machineBuilder = currentModule.getMachineController().getMachineBuilder();\n\n    const isTestInvalid = !machineBuilder.isValidMachine();\n\n    if (--this._ticksSinceHash <= 0)\n    {\n      this._ticksSinceHash = REFRESH_TEST_TICKS;\n      const graph = currentModule.getGraphController().getGraph();\n      const graphHash = graph.getHashCode();\n      if (this._savedGraphHash !== graphHash)\n      {\n        this.onGraphChange(graph);\n        this._savedGraphHash = graphHash;\n      }\n    }\n\n    return <div className={\"panel-container \" + this.props.className} id=\"testing\" ref={ref=>this.container=ref} style={this.props.style}>\n      <div className=\"panel-title\">\n        <h1>{I18N.toString(\"component.testing.title\")}</h1>\n      </div>\n\n      <div className=\"test-icon-row\">\n\n          <IconButton className=\"testicon\" id=\"testing-new\" title={I18N.toString(\"action.testing.new\")}\n            onClick={this.onTestsNew}>\n            <CreateIcon/>\n          </IconButton>\n\n          {/*Import Test Button*/}\n          <UploadTestButton className=\"testicon\" id=\"testing-upload\" title={I18N.toString(\"action.testing.import\")}\n            onClick={this.onTestsUpload} onChange={this.onUploadFileChange}>\n            <UploadIcon/>\n          </UploadTestButton>\n\n          {/*Save Test Button*/}\n          <IconButton className=\"testicon\" id=\"testing-save\" title={I18N.toString(\"action.testing.save\")}\n            onClick={this.onTestsSave} disabled={tester.inputList.isEmpty()}>\n            <SaveIcon/>\n          </IconButton>\n\n          <IconButton className=\"testicon\" id=\"testing-clear\" title={I18N.toString(\"action.testing.clear\")}\n            onClick={this.onTestsClear}\n            disabled={this.state.noTestMode}>\n            <CloseIcon/>\n          </IconButton>\n\n      </div>\n\n      <div className=\"panel-content\">\n\n        <div className=\"test-inputlist-container\" id=\"test-inputlist-container\" style={{\"display\": \"none\"}}>\n\n\n          <div className=\"scrollbar-container\">\n            <h3 id=\"test-name\">Test Name</h3>\n            <div className=\"test-inputlist-content\">\n              {\n                isTestInvalid &&\n                <label className=\"test-inputlist-content-warning\">Not a valid machine!</label>\n              }\n              {\n                testList.getTests().map((e, i) =>\n                  <TestingInput key={e.id} index={i}\n                    testList={testList}\n                    machineBuilder={machineBuilder}/>)\n              }\n              {\n                /*\n                <button className=\"panel-button\" onClick={() => testList.addInput(\"\")}>\n                  {I18N.toString(\"action.testing.add\")}\n                </button>\n                */\n              }\n            </div>\n          </div>\n\n          <button className=\"panel-button\" onClick={this.onTestsRunAll}>\n            {tester.testMode.isStarted() ? I18N.toString(\"action.testing.stoprun\") : I18N.toString(\"action.testing.runall\")}\n          </button>\n\n          <div className=\"panel-checkbox\">\n            <input id=\"test-step\" type=\"checkbox\"\n              checked={this.stepByStepModeChecked}\n              onChange={(e) => {\n                this.stepByStepModeChecked = e.target.checked;\n                if(!this.stepByStepModeChecked) tester.setStepByStepMode(false);\n              }}\n              disabled={tester.testMode.isStarted()}/>\n            <label htmlFor=\"test-step\">{I18N.toString(\"options.testing.stepmode\")}</label>\n          </div>\n\n        </div>\n\n        <hr />\n\n        <div id=\"test-errorcheck\">\n          <label>{I18N.toString(\"options.checkerrors\")}</label>\n          <select className=\"panel-select\"\n            value={this.state.errorCheckMode}\n            onChange={this.onChangeErrorCheckMode}>\n            <option value={TestingManager.NO_ERROR_CHECK}>{I18N.toString(\"options.checkerrors.mode.none\")}</option>\n            <option value={TestingManager.DELAYED_ERROR_CHECK}>{I18N.toString(\"options.checkerrors.mode.delayed\")}</option>\n            <option value={TestingManager.IMMEDIATE_ERROR_CHECK}>{I18N.toString(\"options.checkerrors.mode.immediate\")}</option>\n          </select>\n        </div>\n\n      </div>\n\n      <div className=\"panel-bottom\"></div>\n    </div>;\n  }\n}\nObject.defineProperty(TestingPanel, 'TITLE', {\n  get: function() { return I18N.toString(\"component.testing.title\"); }\n});\nTestingPanel.UNLOCALIZED_NAME = \"component.testing.title\";\n\nexport default TestingPanel;\n","import { solveDFA } from 'machine/util/solveDFA.js';\nimport { solveNFA, solveNFAbyStep } from 'machine/util/solveNFA.js';\n\nimport { DFA } from 'machine/DFA.js';\n\nconst STEPTIME = 500;\nconst SKIPTIME = 50;\n\nclass TestMode\n{\n  constructor(testingManager)\n  {\n    this.graphController = null;\n    this.machineController = null;\n\n    this.testingManager = testingManager;\n\n    this.targets = [];\n\n    this.history = [];\n    this.indexofString = -1;\n    this.result = false;\n\n    //for nfa use\n    this.cachedStates = [];\n    this.cachedSymbols = [];\n    this.checkedStates = [];\n    this.running = false;\n    this.started = false;\n    this.skipToEnd = false;\n\n    this.timer = null;\n\n    this.onNodeDestroy = this.onNodeDestroy.bind(this);\n  }\n\n  initialize(module)\n  {\n    this.graphController = module.getGraphController();\n    this.machineController = module.getMachineController();\n\n    //NOTE: This is not necessary because you can edit once in stepbystep mode\n    //this.graphController.getGraph().on(\"nodeDestroy\", this.onNodeDestroy);\n  }\n\n  destroy()\n  {\n    //this.graphController.getGraph().removeEventListener(\"nodeDestroy\", this.onNodeDestroy);\n  }\n\n  onNodeDestroy(node)\n  {\n    //this.targets.splice(this.targets.indexOf(node), 1);\n  }\n\n  onStart()\n  {\n    //Check the machine, if DFA, then it must be a valid DFA\n    /*if (this.machineController.getMachineBuilder().getMachineType() == \"DFA\")\n    {\n      const dfa = this.machineController.getMachineBuilder().toDFA();\n      if (!dfa.validate()) return;\n    }*/\n    this.prepareForNewTest();\n    this.started = true;\n    this.skipToEnd = false;\n  }\n\n  onResume()\n  {\n    //If at the end, restart!\n    if (!this.hasNextStep())\n    {\n      this.testingManager.inputList.resetTests(false);\n    }\n\n    this.running = true;\n\n    const step = () => {\n      if (this.running)\n      {\n        if (this.hasNextStep())\n        {\n          this.onNextStep();\n          this.timer = setTimeout(step, STEPTIME);\n        }\n        else\n        {\n          this.onPause();\n        }\n      }\n    };\n    this.timer = setTimeout(step, STEPTIME);\n  }\n\n  onPause()\n  {\n    this.running = false;\n  }\n\n  onStop()\n  {\n    this.targets.length = 0;\n\n    this.running = false;\n    this.started = false;\n    this.skipToEnd = false;\n  }\n\n  isRunning()\n  {\n    return this.running;\n  }\n\n  isStarted()\n  {\n    return this.started;\n  }\n\n  isSkipping()\n  {\n    return this.skipToEnd;\n  }\n\n  hasPrevStep()\n  {\n    return this.history.length > 0 ||\n      this.testingManager.inputList.hasPrevInput();\n  }\n\n  onPreviousStep()\n  {\n    if (this.history.length > 0)\n    {\n      const previous = this.history.pop();\n      this.targets.length = 0;\n      this.cachedStates.length = 0;\n      this.cachedSymbols.length = 0;\n      this.checkedStates.length = 0;\n\n      //Copy the old step\n      for(const target of previous.targets)\n      {\n        if (!target) throw new Error(\"Found null target\");\n\n        this.targets.push(target);\n      }\n      for(const state of previous.cachedStates)\n      {\n        this.cachedStates.push(state);\n      }\n      for(const symbol of previous.cachedSymbols)\n      {\n        this.cachedSymbols.push(symbol);\n      }\n      for(const state of previous.checkedStates)\n      {\n        this.checkedStates.push(state);\n      }\n\n      this.indexofString--;\n    }\n    else\n    {\n      this.indexofString = -1;\n      this.testingManager.inputList.prevInput();\n    }\n  }\n\n  hasNextStep()\n  {\n    return this.indexofString < this.testingManager.inputList.getCurrentInput().value.length ||\n      this.testingManager.inputList.hasNextInput();\n  }\n\n  onNextStep()\n  {\n    const testInput = this.testingManager.inputList.getCurrentInput();\n    const fsa = this.machineController.getMachineBuilder().getMachine();\n\n    //Get next character of current test string\n    this.indexofString += 1;\n\n    //If no more characters to get...\n    if(this.indexofString >= testInput.value.length)\n    {\n      //End of test string\n      //Run it one more time...\n      this.result = solveNFAbyStep(fsa, null, this.cachedStates, this.cachedSymbols, this.checkedStates);\n      testInput.setResult(this.result);\n\n      //If this is the last test input...\n      if (!this.testingManager.inputList.hasNextInput())\n      {\n        //End of test!\n        this.onPause();\n        return false;\n      }\n      else\n      {\n        const result = this.testingManager.inputList.nextInput();\n\n        //Stop the resume at each string\n        //this.running = false;\n\n        this.prepareForNewTest();\n        return true;\n      }\n    }\n    else\n    {\n      //Update history\n      const currentStep = this.getCurrentCache();\n      this.history.push(currentStep);\n\n      //Run it\n      let nextChar = testInput.value[this.indexofString];\n\n      this.result = solveNFAbyStep(fsa, nextChar, this.cachedStates, this.cachedSymbols, this.checkedStates);\n      //Update targets\n      this.targets.length = 0;\n\n      for(const state of this.cachedStates)\n      {\n        let node = this.machineController.getFirstGraphNodeByLabel(this.graphController.getGraph(), state.state);\n        if (!node) throw new Error(\"Found null target\");\n\n        if (!this.targets.includes(node)) this.targets.push(node);\n      }\n\n      if (this.targets.length <= 0 && !this.running)\n      {\n        this.skipToEnd = true;\n        const skipFunc = () => {\n          if (this.skipToEnd)\n          {\n            this.indexofString += 1;\n            if (this.indexofString >= testInput.value.length)\n            {\n              this.skipToEnd = false;\n            }\n            else\n            {\n              setTimeout(skipFunc, SKIPTIME);\n            }\n          }\n        };\n        setTimeout(skipFunc, SKIPTIME);\n      }\n\n      return true;\n    }\n  }\n\n  getCurrentCache()\n  {\n    return {\n      targets: this.targets.slice(),\n      cachedStates: this.cachedStates.slice(),\n      cachedSymbols: this.cachedSymbols.slice(),\n      checkedStates: this.checkedStates.slice()\n    };\n  }\n\n  getCurrentTestStringIndex()\n  {\n    return this.indexofString + 1;\n  }\n\n  prepareForNewTest()\n  {\n    this.cachedStates.length = 0;\n\n    const graph = this.graphController.getGraph();\n    if (graph.isEmpty()) return;\n\n    const machine = this.machineController.getMachineBuilder().getMachine();\n\n    this.targets.length = 0;\n\n    let startState = machine.getStartState();\n    for (let curr_state of machine.doClosureTransition(startState))\n    {\n      this.cachedStates.push({state: curr_state, index: 0});\n      const node = this.machineController.getFirstGraphNodeByLabel(graph, curr_state);\n      if (!node) throw new Error(\"Found null target\");\n      this.targets.push(node);\n    }\n\n    this.cachedSymbols.length = 0;\n    this.checkedStates.length = 0;\n    this.indexofString = -1;\n    this.history.length = 0;\n\n    this.skipToEnd = false;\n  }\n}\n\nexport default TestMode;\n","import { guid } from 'util/MathHelper.js';\n\nimport { solveNFA } from 'machine/util/solveNFA.js';\n\nconst SUCCESS = true;\nconst FAILURE = false;\nconst PENDING = null;\n\n//Only refer to input by index, NEVER by reference!\nclass TestingInputList\n{\n  constructor()\n  {\n    this.inputList = [];\n    this.addInput(\"\");\n\n    this.inputIndex = 0;\n  }\n\n  isEmpty()\n  {\n    for(const input of this.inputList)\n    {\n      if (input.value.length > 0)\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  testByIndex(index, machine)\n  {\n    if (index < 0 || index >= this.inputList.length)\n    {\n      throw new Error(\"Cannot find test input for index\");\n    }\n\n    const input = this.inputList[index];\n    input.setResult(null);\n    //TODO: make this a promise\n    const result = solveNFA(machine, input.value);\n    input.setResult(result);\n    return result;\n  }\n\n  importTests(file)\n  {\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      try\n      {\n        //The only time the first element is being removed (then replaced)\n        this.inputList.length = 0;\n        this.inputIndex = 0;\n\n        const testInputs = event.target.result.split(\"\\n\");\n        for(let testInput of testInputs)\n        {\n          testInput = testInput.trim();\n          if (testInput.length > 0)\n          {\n            this.addInput(testInput);\n          }\n        }\n\n        //Make sure a first element exists\n        if (this.inputList.length < 0)\n        {\n          this.addInput(\"\");\n        }\n      }\n      catch(e)\n      {\n        reader.abort();\n      }\n    };\n    reader.readAsText(file);\n  }\n\n  getTestsAsStrings()\n  {\n    return this.inputList.map((e, i) => e.value);\n  }\n\n  clearTests()\n  {\n    //Reset first element\n    const first = this.inputList[0];\n    first.value = \"\";\n    first.result = null;\n    first.dirty = true;\n\n    //Reset list\n    this.inputList.length = 1;\n    this.inputIndex = 0;\n  }\n\n  resetTests(markDirty=true)\n  {\n    this.inputIndex = 0;\n\n    if (markDirty)\n    {\n      for(const input of this.inputList)\n      {\n        input.dirty = true;\n      }\n    }\n  }\n\n  getTests()\n  {\n    return this.inputList;\n  }\n\n  addInput(value)\n  {\n    const input = {\n      value: value,\n      result: null,\n      dirty: true,\n      id: guid(),\n      setResult(result)\n      {\n        this.dirty = false;\n        this.result = result;\n      }\n    };\n\n    this.inputList.push(input);\n    return input;\n  }\n\n  getInputByIndex(index)\n  {\n    if (index < 0 || index >= this.inputList.length)\n    {\n      throw new Error(\"Cannot find test input for index\");\n    }\n\n    return this.inputList[index];\n  }\n\n  removeInputByIndex(index)\n  {\n    if (index < 0 || index >= this.inputList.length)\n    {\n      throw new Error(\"Cannot find test input for index\");\n    }\n\n    if (index === 0)\n    {\n      //Cannot delete the first input element\n      throw new Error(\"Cannot delete the first test input\");\n    }\n\n    if (index <= this.inputIndex)\n    {\n      --this.inputIndex;\n    }\n\n    this.inputList.splice(index, 1);\n  }\n\n  nextInput()\n  {\n    ++this.inputIndex;\n    if (this.inputIndex >= this.inputList.length)\n    {\n      this.inputIndex = 0;\n    }\n\n    return this.inputList[this.inputIndex];\n  }\n\n  prevInput()\n  {\n    --this.inputIndex;\n    if (this.inputIndex < 0)\n    {\n      this.inputIndex = this.inputList.length - 1;\n    }\n\n    return this.inputList[this.inputIndex];\n  }\n\n  resetInput()\n  {\n    this.inputIndex = 0;\n  }\n\n  hasNextInput()\n  {\n    return this.inputIndex < this.inputList.length;\n  }\n\n  hasPrevInput()\n  {\n    return this.inputIndex > 0;\n  }\n\n  getCurrentInput()\n  {\n    return this.inputList[this.inputIndex];\n  }\n\n  getCurrentInputIndex()\n  {\n    return this.inputIndex;\n  }\n}\n\nexport default TestingInputList;\n","import React from 'react';\nimport './TestingInput.css';\n\nimport Config from 'config.js';\nimport { EMPTY } from 'machine/Symbols.js';\n\nimport IconButton from 'icons/IconButton.js';\nimport AddIcon from 'icons/AddIcon.js';\nimport RemoveIcon from 'icons/RemoveIcon.js';\n\nimport StatusButton from './StatusButton.js';\n\nclass TestingInput extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.ref = React.createRef();\n\n    this.onStatusClick = this.onStatusClick.bind(this);\n    this.onSubmitClick = this.onSubmitClick.bind(this);\n    this.onValueChange = this.onValueChange.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.onKeyUp = this.onKeyUp.bind(this);\n  }\n\n  getInput()\n  {\n    return this.props.testList.getInputByIndex(this.props.index);\n  }\n\n  isInputFirst()\n  {\n    return this.props.index === 0;\n  }\n\n  onStatusClick(e)\n  {\n    this.props.testList.testByIndex(this.props.index, this.props.machineBuilder.getMachine());\n  }\n\n  onSubmitClick(e)\n  {\n    if (this.isInputFirst())\n    {\n      const src = this.getInput();\n\n      //Add test input to list\n      const newTest = this.props.testList.addInput(src.value);\n      //Copy result to new test (should not be setResult)\n      newTest.result = src.result;\n      newTest.dirty = src.dirty;\n\n      //Delete already processed test\n      src.value = \"\";\n      src.result = null;\n      src.dirty = true;\n\n      //Reselect the target\n      this.ref.focus();\n    }\n    else\n    {\n      //Remove test input from list\n      this.props.testList.removeInputByIndex(this.props.index);\n    }\n  }\n\n  onValueChange(e)\n  {\n    const value = e.target.value.trim();\n    const src = this.getInput();\n    src.value = value;\n    src.dirty = true;\n  }\n\n  onKeyDown(e)\n  {\n    //If it is an 'enter', don't put in a new line...\n    if (e.keyCode === Config.SUBMIT_KEY)\n    {\n      e.preventDefault();\n    }\n    //Delete it if there is no value in it\n    else if (e.keyCode === Config.DELETE_KEY)\n    {\n      const src = this.getInput();\n      if (src.value.length <= 0)\n      {\n        const nextIndex = this.props.index + 1;\n        //Replace this input with the next one if there is one...\n        //Also, cannot delete first input, but this will never get there :)\n        if (this.props.testList.getTests().length > nextIndex)\n        {\n          const nextInput = this.props.testList.getInputByIndex(nextIndex);\n          src.value = nextInput.value;\n          src.result = nextInput.result;\n          src.dirty = nextInput.dirty;\n\n          this.props.testList.removeInputByIndex(nextIndex);\n        }\n      }\n    }\n  }\n\n  onKeyUp(e)\n  {\n    if (e.keyCode === Config.SUBMIT_KEY)\n    {\n      const shouldTestOnly = e.shiftKey;\n\n      //Should try to add and NOT run\n      if (this.isInputFirst() && !shouldTestOnly)\n      {\n        const src = this.getInput();\n\n        //Add test input to list\n        const newTest = this.props.testList.addInput(src.value);\n        //Copy result to new test (should not be setResult)\n        newTest.result = src.result;\n        newTest.dirty = src.dirty;\n\n        //Delete already processed test\n        src.value = \"\";\n        src.result = null;\n        src.dirty = true;\n\n        //Refocus the target\n        this.ref.focus();\n      }\n      //Should try to run ONLY\n      else\n      {\n        this.props.testList.testByIndex(this.props.index, this.props.machineBuilder.getMachine());\n\n        //Select everything again\n        this.ref.select();\n      }\n    }\n    else if (e.keyCode === Config.CLEAR_KEY)\n    {\n      e.target.blur();\n    }\n  }\n\n  render()\n  {\n    const src = this.getInput();\n    const first = this.isInputFirst();\n    return <div className={\"testinginput-container \" +\n      (this.props.testList.getCurrentInputIndex() === this.props.index ? \" active\" : \"\")}>\n\n      <StatusButton active={!src.dirty} mode={src.result} onClick={this.onStatusClick}/>\n\n      <input ref={ref=>this.ref=ref} className=\"testinginput-field\"\n        value={src.value}\n        placeholder={EMPTY}\n        onChange={this.onValueChange}\n        onKeyDown={this.onKeyDown}\n        onKeyUp={this.onKeyUp}\n        onFocus={(e)=>e.target.select()}/>\n\n      <IconButton className=\"testinginput-submit\" onClick={this.onSubmitClick}>\n        {first ? <AddIcon/> : <RemoveIcon/>}\n      </IconButton>\n    </div>;\n  }\n}\n\nexport default TestingInput;\n","import React from 'react';\n\nclass AddIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"add-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n      <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"/>\n    </svg>;\n  }\n}\n\nexport default AddIcon;\n","import React from 'react';\n\nclass RemoveIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"remove-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n      <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11H7v-2h10v2z\"/>\n    </svg>;\n  }\n}\n\nexport default RemoveIcon;\n","import React from 'react';\nimport './StatusButton.css';\n\nimport IconButton from 'icons/IconButton.js';\nimport SuccessIcon from 'icons/SuccessIcon.js';\nimport FailureIcon from 'icons/FailureIcon.js';\nimport WorkingIcon from 'icons/WorkingIcon.js';\nimport RunningManIcon from 'icons/RunningManIcon.js';\n\nclass StatusButton extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    const active = this.props.active;\n    if (this.props.mode === true)\n    {\n      //Success icon\n      return <IconButton className={\"status-icon success\" + (active ? \" active\" : \"\")}\n        onClick={this.props.onClick}>\n        <SuccessIcon/>\n      </IconButton>;\n    }\n    else if (this.props.mode === false)\n    {\n      //Failure icon\n      return <IconButton className={\"status-icon failure\" + (active ? \" active\" : \"\")}\n        onClick={this.props.onClick}>\n        <FailureIcon/>\n      </IconButton>;\n    }\n    else\n    {\n      //Pending icon\n      return <IconButton className={\"status-icon\" + (active ? \" active\" : \"\")}\n        onClick={this.props.onClick}>\n        <RunningManIcon/>\n      </IconButton>;\n    }\n  }\n}\n\nexport default StatusButton;\n","import React from 'react';\n\nclass SuccessIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"success-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path fill=\"none\" d=\"M0 0h24v24H0V0zm0 0h24v24H0V0z\"/>\n      <path d=\"M16.59 7.58L10 14.17l-3.59-3.58L5 12l5 5 8-8zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"/>\n    </svg>;\n  }\n}\n\nexport default SuccessIcon;\n","import React from 'react';\n\nclass FailureIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"failure-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n      <path d=\"M14.59 8L12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"/>\n    </svg>;\n  }\n}\n\nexport default FailureIcon;\n","import React from 'react';\n\nclass RunningManIcon extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n    }\n    render() {\n        return <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n                <path fill=\"none\" d=\"M0 0h24v24H0z\"/>\n                <path d=\"M13.49 5.48c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm-3.6 13.9l1-4.4 2.1 2v6h2v-7.5l-2.1-2 .6-3c1.3 1.5 3.3 2.5 5.5 2.5v-2c-1.9 0-3.5-1-4.3-2.4l-1-1.6c-.4-.6-1-1-1.7-1-.3 0-.5.1-.8.1l-5.2 2.2v4.7h2v-3.4l1.8-.7-1.6 8.1-4.9-1-.4 2 7 1.4z\"/>\n            </svg>;\n    }\n}\n\nexport default RunningManIcon;\n","import React from 'react';\n\nclass UploadTestButton extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <button\n      className={\"icon-button \" + this.props.className}\n      id={this.props.id}\n      title={this.props.title}\n      style={this.props.style}\n      disabled={this.props.disabled}\n      onClick={this.props.onClick}>\n      <input ref={ref=>this.uploadInput=ref}\n        id=\"test-upload-input\" type=\"file\" name=\"import\"\n        style={{display: \"none\"}}\n        onChange={this.props.onChange} accept=\".txt\"/>\n      <label htmlFor=\"test-upload-input\">\n        {this.props.children}\n      </label>\n    </button>;\n  }\n}\n\nexport default UploadTestButton;\n","import React from 'react';\n\nclass PageNewContentIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"pagenewcontent-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path d=\"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z\"/>\n    </svg>;\n  }\n}\n\nexport default PageNewContentIcon;\n","import React from 'react';\n\nclass CloseIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"close-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n    </svg>;\n  }\n}\n\nexport default CloseIcon;\n","import React from 'react';\nimport Config from 'config.js';\n\nimport Notifications from 'system/notification/Notifications.js';\nimport NFAToDFAConversionWarningMessage from 'modules/fsa/notifications/NFAToDFAConversionWarningMessage.js';\n\nclass AnalysisPanel extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.container = null;\n    this.optimizeUnreachOption = null;\n    this.optimizeRedundOption = null;\n\n    this.onConvertToDFA = this.onConvertToDFA.bind(this);\n    this.onConvertToNFA = this.onConvertToNFA.bind(this);\n\n    this.onOptimizeMachine = this.onOptimizeMachine.bind(this);\n  }\n\n  onDeleteAllUnreachable(e)\n  {\n    const currentModule = this.props.currentModule;\n    const graphController = currentModule.getGraphController();\n    const machineController = currentModule.getMachineController();\n    const unreachableArray = machineController.getMachineBuilder().machineErrorChecker.getUnreachableNodes();\n    graphController.deleteTargetNodes(unreachableArray);\n  }\n\n  onConvertToDFA(e)\n  {\n    const currentModule = this.props.currentModule;\n    const graphController = currentModule.getGraphController();\n    const machineController = currentModule.getMachineController();\n    const props = {graphController: graphController, machineController: machineController};\n    const messageTag = Config.MACHINE_CONVERSION_MESSAGE_TAG;\n\n    //machineController.convertMachineTo(\"DFA\");\n    Notifications.addMessage(I18N.toString(\"message.warning.convertNFAToDFA\"),\n      \"warning\", messageTag, NFAToDFAConversionWarningMessage, props);\n  }\n\n  onConvertToNFA(e)\n  {\n    const machineController = this.props.currentModule.getMachineController();\n    machineController.convertMachineTo(\"NFA\");\n  }\n\n  onOptimizeMachine(e)\n  {\n    if (this.optimizeUnreachOption.checked)\n    {\n      this.onDeleteAllUnreachable(e);\n    }\n  }\n\n  canOptimize()\n  {\n    return (this.optimizeRedundOption && this.optimizeRedundOption.checked) ||\n    (this.optimizeUnreachOption && this.optimizeUnreachOption.checked);\n  }\n\n  render()\n  {\n    const currentModule = this.props.currentModule;\n    const graphController = currentModule.getGraphController();\n    const machineController = currentModule.getMachineController();\n\n    const graph = graphController.getGraph();\n    const machineBuilder = machineController.getMachineBuilder();\n\n    return <div className={\"panel-container \" + this.props.className} id=\"analysis\" ref={ref=>this.container=ref} style={this.props.style}>\n      <div className=\"panel-title\"><h1>{I18N.toString(\"component.analysis.title\")}</h1></div>\n      <div className=\"panel-content\">\n\n        {/*Optimize*/}\n        <div style={{paddingBottom: \"0.5em\"}}>\n          <h3 style={{marginBottom: \"0\"}}>Optimizations</h3>\n          <div style={{paddingBottom: \"0.5em\"}}>\n            <div>\n              <input ref={ref=>this.optimizeUnreachOption=ref} id=\"opt-unreach\" type=\"checkbox\"/>\n              <label htmlFor=\"opt-unreach\">Unreachables</label>\n            </div>\n            <div>\n              <input ref={ref=>this.optimizeRedundOption=ref} id=\"opt-redund\" type=\"checkbox\" disabled={true}/>\n              <label htmlFor=\"opt-redund\">Redundant States</label>\n            </div>\n          </div>\n          <button className=\"panel-button\" onClick={this.onOptimizeMachine} disabled={!this.canOptimize()}>Optimize</button>\n        </div>\n\n        <hr/>\n        {\n          machineBuilder.getMachineType() == \"DFA\" ?\n            <button className=\"panel-button\" onClick={this.onConvertToNFA}\n             disabled={this.props.currentModule.getGraphController().getGraph().isEmpty()}>\n              {I18N.toString(\"action.overview.convertnfa\")}\n            </button>\n          : machineBuilder.getMachineType() == \"NFA\" ?\n            <button className=\"panel-button\" onClick={this.onConvertToDFA}\n             disabled={this.props.currentModule.getGraphController().getGraph().isEmpty()}>\n              {I18N.toString(\"action.overview.convertdfa\")}\n            </button>\n          : null\n        }\n\n      </div>\n      <div className=\"panel-bottom\"></div>\n    </div>;\n  }\n}\nObject.defineProperty(AnalysisPanel, 'TITLE', {\n  get: function() { return I18N.toString(\"component.analysis.title\"); }\n});\nAnalysisPanel.UNLOCALIZED_NAME = \"component.analysis.title\";\n\nexport default AnalysisPanel;\n","import React from 'react';\n\nclass AboutPanel extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.container = null;\n  }\n\n  //Override\n  render()\n  {\n    return <div className={\"panel-container \" + this.props.className} id=\"about\" ref={ref=>this.container=ref} style={this.props.style}>\n      <div className=\"panel-title\">\n        <h1>Finite State Automata</h1>\n      </div>\n      <div className=\"panel-content\">\n        <p>{\"Brought to you with \\u2764 by the Flap.js team.\"}</p>\n        <p>{\"<- Tap on a tab to begin!\"}</p>\n      </div>\n      <div className=\"panel-bottom\"></div>\n    </div>;\n  }\n}\n\nexport default AboutPanel;\n","import AbstractModuleInputController from 'modules/abstract/AbstractModuleInputController.js';\nimport Config from 'config.js';\n\nimport GraphPicker from './GraphPicker.js';\nimport Node from 'modules/fsa/graph/FSANode.js';\nimport Edge from 'modules/fsa/graph/FSAEdge.js';\n\nclass InputController extends AbstractModuleInputController\n{\n  constructor(module, inputAdapter)\n  {\n    super(module, inputAdapter);\n\n    this._picker = new GraphPicker();\n\n    this._graphController = null;\n\n    //Used to check if target needs to be updated for the hover effect\n    this.prevPointerX = 0;\n    this.prevPointerY = 0;\n\n    //Make sure this is always false when moving endpoints\n    this.isNewEdge = false;\n\n    //Used to change render to follow pointer when moving initial marker\n    this.ghostInitialMarker = null;\n\n    //Whether to destroy pointless edges\n    this.shouldDestroyPointlessEdges = Config.DEFAULT_SHOULD_DESTROY_POINTLESS_EDGE;\n\n    //Swap left to right clicks and vice versa on anything else but Macs\n    this._swapMouseScheme = true;//!navigator.platform.startsWith(\"Mac\");\n\n    //Used to determine whether the target should be destroyed because of trash mode\n    this._trashMode = false;\n\n    this._disabled = false;\n  }\n\n  //Override\n  initialize(module)\n  {\n    super.initialize(module);\n\n    this._graphController = module.getGraphController();\n  }\n\n  //Override\n  destroy(module)\n  {\n    super.destroy(module);\n  }\n\n  //Override\n  update(module)\n  {\n    const graph = this._graphController.getGraph();\n    const picker = this._picker;\n    const x = this._inputAdapter.getPointerX();\n    const y = this._inputAdapter.getPointerY();\n\n    if (x != this.prevPointerX || y != this.prevPointerY)\n    {\n      this.prevPointerX = x;\n      this.prevPointerY = y;\n\n      //Update target\n      picker.updateTarget(graph, x, y);\n\n      //HACK: to make the cursor look like a pointer when targeting\n      if (picker.hasTarget())\n      {\n        document.body.style.cursor = \"pointer\";\n      }\n      else\n      {\n        document.body.style.cursor = \"auto\";\n      }\n    }\n  }\n\n  setDisabled(disabled)\n  {\n    this._disabled = disabled;\n  }\n\n  isDisabled()\n  {\n    return this._disabled;\n  }\n\n  //Override\n  onPreInputEvent(pointer)\n  {\n    if (this._disabled) return super.onPreInputEvent(pointer);\n\n    const inputController = this;\n    const graphController = this._graphController;\n\n    const graph = graphController.getGraph();\n    const picker = inputController.getPicker();\n    picker.updateTarget(graph, pointer.x, pointer.y);\n    picker.setInitialTarget(picker.target, picker.targetType);\n\n    const target = picker.initialTarget;\n    const targetType = picker.initialTargetType;\n\n    if (picker.hasSelection())\n    {\n      //Unselect everything is clicked on something other than nodes...\n      if (targetType != \"node\" || !picker.isTargetInSelection(target))\n      {\n        picker.clearSelection();\n      }\n    }\n\n    //Disable all graph input when in step-by-step mode\n    if (graphController.tester.getStepByStepMode())\n    {\n      //Consume event!\n      return true;\n    }\n\n    //Override\n    return super.onPreInputEvent(pointer);\n  }\n\n  //Override\n  onInputEvent(pointer)\n  {\n    if (this._disabled) return super.onInputEvent(pointer);\n\n    const inputController = this;\n    const graphController = this._graphController;\n\n    const x = pointer.x;\n    const y = pointer.y;\n\n    const graph = graphController.getGraph();\n    const picker = inputController.getPicker();\n    picker.updateTarget(graph, x, y);\n    const target = picker.initialTarget;\n    const targetType = picker.initialTargetType;\n\n    //If is in trash mode... capture all events!\n    if (inputController.isTrashMode())\n    {\n      //Click to delete node\n      if (targetType === 'node')\n      {\n        //So that the emitted 'delete' events can use this\n        graphController.prevX = target.x;\n        graphController.prevY = target.y;\n\n        //If there exists selected states, delete them all!\n        if (picker.hasSelection())\n        {\n          //Delete all selected nodes\n          graphController.deleteSelectedNodes(target);\n        }\n        else\n        {\n          //Delete a single node\n          graphController.deleteTargetNode(target);\n        }\n\n        return true;\n      }\n      else if (targetType === 'edge' || targetType === 'endpoint')\n      {\n        //Delete a single edge\n        graphController.deleteTargetEdge(target);\n        return true;\n      }\n\n      //Clicked on something you cannot delete\n      //return true;\n      return false;\n    }\n\n    //If not in Trash Mode, then events should pass through to here...\n    //Otherwise, ALL events are captured to prevent ALL default behavior.\n\n    if (!inputController.isMoveMode() && targetType === 'node')\n    {\n      graphController.toggleNode(target);\n      return true;\n    }\n    //Edit label for selected edge\n    else if (targetType === 'edge')\n    {\n      graphController.openLabelEditor(target, x, y);\n      return true;\n    }\n    else if (targetType !== 'none')\n    {\n      //So double click can occur only if not on objects...\n      return true;\n    }\n\n    //Override\n    return super.onInputEvent(pointer);\n  }\n\n  //Override\n  onDblInputEvent(pointer)\n  {\n    if (this._disabled) return super.onDblInputEvent(pointer);\n\n    const graphController = this._graphController;\n    const x = pointer.x;\n    const y = pointer.y;\n\n    if (!this.isTrashMode())\n    {\n      //Create state at position\n      graphController.createNode(x, y);\n      return true;\n    }\n    else\n    {\n      graphController.emit(\"tryCreateWhileTrash\");\n      return true;\n    }\n\n    //Override\n    return super.onDblInputEvent(pointer);\n  }\n\n  //Override\n  onDragStart(pointer)\n  {\n    if (this._disabled) return super.onDragStart(pointer);\n\n    const inputController = this;\n    const graphController = this._graphController;\n\n    const graph = graphController.getGraph();\n    const picker = inputController.getPicker();\n    const x = pointer.x;\n    const y = pointer.y;\n    const target = picker.initialTarget;\n    const targetType = picker.initialTargetType;\n\n    const viewport = inputController.getInputAdapter().getViewport();\n\n    //If is in move mode...\n    if (inputController.isMoveMode())\n    {\n      //Make sure it is not in trash mode\n      if (inputController.isTrashMode())\n      {\n        //inputController.setMoveMode(false, true);//Set to false\n\n        graphController.emit(\"tryCreateWhileTrash\");\n        return false;\n      }\n\n      //Make sure it is not in new edge mode\n      inputController.isNewEdge = false;\n\n      //Makes sure that placeholders are not quadratics!\n      if (targetType === 'edge' && target.isPlaceholder())\n      {\n        //inputController.setMoveMode(false, true);//Set to false\n\n        //Ignore drag event...\n        return false;\n      }\n      //Moving node (and selected nodes)\n      else if (targetType === 'node')\n      {\n        //target MUST be an instance of Node...\n        if (!(target instanceof Node))\n          throw new Error(\"Invalid target \" + target + \" for type \\'\" + targetType + \"\\'. Must be an instance of Node.\");\n\n        //Ready to move node(s)...\n        graphController.prevX = target.x;\n        graphController.prevY = target.y;\n        return true;\n      }\n      //Moving edge center point\n      else if (targetType === 'edge')\n      {\n        //target MUST be an instance of Edge...\n        if (!(target instanceof Edge))\n          throw new Error(\"Invalid target \" + target + \" for type \\'\" + targetType + \"\\'. Must be an instance of Edge.\");\n\n        //Makes sure that placeholders are not quadratics!\n        if (target.isPlaceholder())\n        {\n          //inputController.setMoveMode(false, true);//Set to false\n          return false;\n        }\n\n        //Save previous quadratics\n        const targetQuad = target.getQuadratic();\n        graphController.prevQuad.radians = targetQuad.radians;\n        graphController.prevQuad.length = targetQuad.length;\n\n        //Ready to move the edge vertex to pointer...\n        return true;\n      }\n      //Moving initial marker\n      else if (targetType === 'initial')\n      {\n        inputController.ghostInitialMarker = pointer;\n\n        //Ready to move the initial marker to another state...\n        return true;\n      }\n    }\n    //If is NOT in move mode...\n    else\n    {\n      //If input dragged a node...\n      if (targetType === 'node')\n      {\n        if (!inputController.isTrashMode())\n        {\n          const edge = graph.createEdge(target, pointer);\n          edge.setEdgeLabel(Config.STR_TRANSITION_DEFAULT_LABEL);\n\n          //Redirect pointer to refer to the edge as the new target\n          picker.setInitialTarget(edge, \"endpoint\");\n          inputController.isNewEdge = true;\n\n          //Reset previous quad values for new proxy edge\n          const edgeQuad = edge.getQuadratic();\n          graphController.prevQuad.radians = edgeQuad.radians;\n          graphController.prevQuad.length = edgeQuad.length;\n\n          //Ready to move proxy edge to pointer...\n          //inputController.setMoveMode(true, true);\n          return true;\n        }\n        else\n        {\n          graphController.emit(\"tryCreateWhileTrash\");\n          return false;\n        }\n      }\n      else if (targetType == 'edge')\n      {\n        //Do nothing.\n        return false;\n      }\n      //If input dragged nothing...\n      else if (targetType === 'none')\n      {\n        //Begin selection box...\n        picker.beginSelection(graph, x, y);\n        return true;\n      }\n    }\n\n    //In either moving or not... moving endpoints\n    if (targetType === 'endpoint')\n    {\n      //target MUST be an instance of Edge...\n      if (!(target instanceof Edge))\n        throw new Error(\"Invalid target \" + target + \" for type \\'\" + targetType + \"\\'. Must be an instance of Edge.\");\n\n      const targetQuad = target.getQuadratic();\n      graphController.prevQuad.radians = targetQuad.radians;\n      graphController.prevQuad.length = targetQuad.length;\n\n      graphController.prevEdgeTo = target.getDestinationNode();\n      inputController.isNewEdge = inputController.isMoveMode() ? false : true;\n\n      //Ready to move the edge endpoint to pointer...\n      return true;\n    }\n\n    //All input should be handled\n    //throw new Error(\"Unknown target type \\'\" + targetType + \"\\'.\");\n\n    //Override\n    return super.onDragStart(pointer);\n  }\n\n  //Override\n  onDragMove(pointer)\n  {\n    if (this._disabled) return super.onDragMove(pointer);\n\n    const inputController = this;\n    const graphController = this._graphController;\n    const graph = graphController.getGraph();\n\n    const picker = inputController.getPicker();\n    const x = pointer.x;\n    const y = pointer.y;\n    const target = picker.initialTarget;\n    const targetType = picker.initialTargetType;\n\n    //If is in move mode...\n    if (inputController.isMoveMode())\n    {\n      //Continue to move node(s)\n      if (targetType === 'node')\n      {\n        if (picker.hasSelection())\n        {\n          graphController.moveMultipleNodesTo(pointer, picker.getSelection(graph), x, y);\n        }\n        else\n        {\n          graphController.moveNodeTo(pointer, target, x, y);\n        }\n        return true;\n      }\n      //Continue to move edge vertex\n      else if (targetType === 'edge')\n      {\n        graphController.moveEdgeTo(pointer, target, x, y);\n        return true;\n      }\n      //Continue to move edge endpoint\n      else if (targetType === 'endpoint')\n      {\n        graphController.moveEndpointTo(pointer, target, x, y);\n        return true;\n      }\n      //Continue to move initial\n      else if (targetType === 'initial')\n      {\n        //Move initial marker to node or pointer\n        const dst = picker.getNodeAt(graph, x, y) || pointer;\n        inputController.ghostInitialMarker = dst;\n        return true;\n      }\n      //Continue to move graph\n      else if (targetType === 'none')\n      {\n        //Call super controller at the end...\n      }\n      else\n      {\n        //All move drag should be handled\n        throw new Error(\"Unknown target type \\'\" + targetType + \"\\'.\");\n      }\n    }\n    //If is NOT in move mode...\n    else\n    {\n      if (inputController.isNewEdge)\n      {\n        graphController.moveEndpointTo(pointer, target, x, y);\n        return true;\n      }\n\n      //If the selection box is active...\n      if (picker.isSelecting())\n      {\n        //Update the selection box\n        picker.updateSelection(graph, x, y);\n        return true;\n      }\n\n      //Otherwise, don't do anything. Cause even input drags will become move drags.\n    }\n\n    //Override\n    return super.onDragMove(pointer);\n  }\n\n  //Override\n  onDragStop(pointer)\n  {\n    if (this._disabled) return super.onDragStop(pointer);\n\n    const inputController = this;\n    const graphController = this._graphController;\n\n    const graph = graphController.getGraph();\n    const picker = inputController.getPicker();\n    const x = pointer.x;\n    const y = pointer.y;\n    picker.updateTarget(graph, x, y);\n    const target = picker.initialTarget;\n    const targetType = picker.initialTargetType;\n\n    //If is in move mode...\n    if (inputController.isMoveMode() || inputController.isNewEdge)\n    {\n      //If stopped dragging a node...\n      if (targetType === 'node')\n      {\n        //Delete it if withing trash area...\n        if (inputController.isTrashMode())\n        {\n          //If there exists selected states, delete them all!\n          if (picker.hasSelection())\n          {\n            graphController.deleteSelectedNodes(target);\n          }\n          else\n          {\n            //Delete a single node\n            graphController.deleteTargetNode(target);\n          }\n\n          return true;\n        }\n        //If dragged to an empty space (not trash)\n        else\n        {\n          //Do nothing, since should have moved to position\n          if (picker.hasSelection())\n          {\n            const dx = x - graphController.prevX;\n            const dy = y - graphController.prevY;\n            graphController.emit(\"nodeMoveAll\", graph, picker.getSelection(graph), dx, dy);\n          }\n          else\n          {\n            graphController.emit(\"nodeMove\", graph, target, x, y, graphController.prevX, graphController.prevY);\n          }\n          return true;\n        }\n      }\n      //If stopped dragging a edge...\n      else if (targetType === 'edge')\n      {\n        //Delete it if withing trash area...\n        if (inputController.isTrashMode())\n        {\n          graphController.deleteTargetEdge(target);\n        }\n        else\n        {\n          //Do nothing, since should have moved to position\n          graphController.emit(\"edgeMove\", graph, target, target.getQuadratic(), graphController.prevQuad);\n        }\n        return true;\n      }\n      //If stopped dragging a endpoint...\n      else if (inputController.isNewEdge || targetType === 'endpoint')\n      {\n        //Delete it if withing trash area...\n        if (inputController.isTrashMode())\n        {\n          graphController.deleteTargetEdge(target);\n          return true;\n        }\n        //If hovering over a node...\n        else if (target.getDestinationNode() instanceof Node)\n        {\n          const result = graph.formatEdge(target);\n\n          //If a different edge is the result of the target...\n          if (result !== target)\n          {\n            //Allow the user to edit the merged labels\n            graphController.openLabelEditor(result, x, y, result.getEdgeLabel(), false);\n\n            //Delete the merged label\n            graph.deleteEdge(target);\n            return true;\n          }\n          //Open label editor if a new edge...\n          else\n          {\n            if (inputController.isNewEdge)\n            {\n              graphController.openLabelEditor(target, x, y, null, true, () => {\n                graphController.emit(\"userPostCreateEdge\", graph, target);\n              });\n            }\n            else\n            {\n              graphController.openLabelEditor(target, x, y);\n            }\n          }\n\n          if (inputController.isNewEdge)\n          {\n            //Must be after openLabelEditor() to allow the function to check it...\n            inputController.isNewEdge = false;\n\n            //Emit event\n            graphController.emit(\"userCreateEdge\", graph, target);\n          }\n          else if (graphController.prevEdgeTo !== null)\n          {\n            //Emit event\n            graphController.emit(\"edgeDestination\", graph, target, target.getDestinationNode(), graphController.prevEdgeTo, graphController.prevQuad);\n          }\n\n          return true;\n        }\n        //If hovering over anything else...\n        else\n        {\n          //Destroy any edge that no longer have a destination\n          if (inputController.shouldDestroyPointlessEdges)\n          {\n            if (!inputController.isNewEdge)\n            {\n              graphController.deleteTargetEdge(target);\n            }\n            else\n            {\n              graph.deleteEdge(target);\n            }\n            return true;\n          }\n          //Keep edges as placeholders (used in DFA's)\n          else\n          {\n            target.changeDestinationNode(null);\n\n            //Open label editor if default edge...\n            if (target.getEdgeLabel().length <= 0)\n            {\n              graphController.openLabelEditor(target, x, y);\n            }\n            return true;\n          }\n        }\n      }\n      else if (targetType === 'initial')\n      {\n        //If valid initial object to mark...\n        if (inputController.ghostInitialMarker instanceof Node)\n        {\n          const prevInitial = graph.getStartNode();\n\n          //Set the new object as the initial node\n          graph.setStartNode(inputController.ghostInitialMarker);\n\n          //Emit event\n          graphController.emit(\"nodeInitial\", graph, inputController.ghostInitialMarker, prevInitial);\n        }\n\n        //Reset ghost initial marker\n        inputController.ghostInitialMarker = null;\n        return true;\n      }\n      else if (targetType === 'none')\n      {\n        //Do nothing. It should already be moved.\n      }\n      else if (super.onDragStop(pointer))\n      {\n        return true;\n      }\n      else\n      {\n        //All move drag should be handled\n        throw new Error(\"Unknown target type \\'\" + targetType + \"\\'.\");\n      }\n    }\n    //If is NOT in move mode...\n    else\n    {\n      //If was trying to select...\n      if (picker.isSelecting())\n      {\n        //Stop selecting stuff, fool.\n        picker.endSelection(graph, x, y);\n        return true;\n      }\n    }\n\n    //Override\n    return super.onDragStop(pointer);\n  }\n\n  //Override\n  onPostInputEvent(pointer)\n  {\n    if (this._disabled) return super.onPostInputEvent(pointer);\n\n    const inputController = this;\n    const graphController = this._graphController;\n    const graph = graphController.getGraph();\n    const picker = inputController.getPicker();\n\n    picker.clearTarget();\n    picker.updateTarget(graph, pointer.x, pointer.y);\n\n    //Override\n    super.onPostInputEvent(pointer);\n  }\n\n  setTrashMode(enabled)\n  {\n    this._trashMode = enabled;\n  }\n\n  isTrashMode()\n  {\n    return this._trashMode;\n  }\n\n  setInputScheme(shouldInputFirst)\n  {\n    this._swapMouseScheme = !shouldInputFirst;\n  }\n\n  getInputScheme()\n  {\n    return this._swapMouseScheme;\n  }\n\n  isMoveMode()\n  {\n    const result = this._inputAdapter.isAltInput();\n    return this._swapMouseScheme ? !result : result;\n  }\n\n  isDragging()\n  {\n    return this._inputAdapter.isDragging();\n  }\n\n  isActionMode(graphController)\n  {\n    return this._inputAdapter.isPointerActive() ?\n      //Is considered an input when NOT moving or when creating a new edge...\n      graphController.isNewEdge || !this.isMoveMode() :\n      //If not active, just show default input...\n      !this._swapMouseScheme;\n  }\n\n  getPicker()\n  {\n    return this._picker;\n  }\n}\n\nexport default InputController;\n","import AbstractInputController from 'system/inputadapter/AbstractInputController.js';\n\nimport ViewportInputHandler from './ViewportInputHandler.js';\n\nclass AbstractModuleInputController extends AbstractInputController\n{\n  constructor(module, inputAdapter)\n  {\n    super();\n\n    this._module = module;\n    this._inputAdapter = inputAdapter.setController(this);\n\n    this._viewportInputHandler = new ViewportInputHandler();\n  }\n\n  initialize(module) {}\n  destroy(module) {}\n  update(module) {}\n\n  //Override\n  onPreInputEvent(pointer) { return false; }\n  //Override\n  onInputEvent(pointer) { return false; }\n  //Override\n  onAltInputEvent(pointer) { return this.onInputEvent(pointer); }\n  //Override\n  onDblInputEvent(pointer) { return false; }\n  //Override\n  onDragStart(pointer) { return this._viewportInputHandler.onDragStart(pointer); }\n  //Override\n  onDragMove(pointer) { return this._viewportInputHandler.onDragMove(pointer); }\n  //Override\n  onDragStop(pointer) { return this._viewportInputHandler.onDragStop(pointer); }\n  //Override\n  onPostInputEvent(pointer) {}\n  //Override\n  onZoomChange(pointer, zoomValue, prevValue) { return this._viewportInputHandler.onZoomChange(pointer, zoomValue, prevValue); }\n\n  getInputAdapter()\n  {\n    return this._inputAdapter;\n  }\n\n  getModule()\n  {\n    return this._module;\n  }\n}\n\nexport default AbstractModuleInputController;\n","import AbstractInputController from 'system/inputadapter/AbstractInputController.js';\n\nclass ViewportInputHandler extends AbstractInputController\n{\n  constructor()\n  {\n    super();\n\n    this._prevX = 0;\n    this._prevY = 0;\n  }\n  \n  //Override\n  onDragStart(pointer)\n  {\n    this._prevX = pointer.x;\n    this._prevY = pointer.y;\n    return true;\n  }\n\n  //Override\n  onDragMove(pointer)\n  {\n    const dx = pointer.x - this._prevX;\n    const dy = pointer.y - this._prevY;\n    const adapter = pointer.getAdapter();\n    const viewport = adapter.getViewport();\n    viewport.addOffset(dx, dy, true);\n    return true;\n  }\n\n  //Override\n  onDragStop(pointer)\n  {\n    //Do nothing. It should already be moved.\n    return true;\n  }\n}\n\nexport default ViewportInputHandler;\n","import Config from 'config.js';\n\nclass GraphPicker\n{\n  constructor()\n  {\n    this.selectionBox = {\n      fromX: 0, fromY: 0,\n      toX: 0, toY: 0,\n      visible: false\n    };\n    this.targets = [];\n\n    this.target = null;\n    this.targetType = \"\";\n\n    this.initialTarget = null;\n    this.initialTargetType = \"\";\n  }\n\n  setInitialTarget(target, type)\n  {\n    this.initialTarget = target;\n    this.initialTargetType = type;\n  }\n\n  updateTarget(graph, x, y)\n  {\n    if (this.target = this.getNodeByInitialMarkerAt(graph, x, y))\n    {\n      //Clicked on initial marker\n      this.targetType = \"initial\";\n    }\n    else if (this.target = this.getEdgeByEndPointAt(graph, x, y))\n    {\n      //Clicked on endpoint\n      this.targetType = \"endpoint\";\n    }\n    else if (this.target = this.getNodeAt(graph, x, y))\n    {\n      //Clicked on node\n      this.targetType = \"node\";\n    }\n    else if (this.target = this.getEdgeAt(graph, x, y))\n    {\n      //Clicked on edge\n      this.targetType = \"edge\";\n    }\n    else\n    {\n      //Clicked on graph\n      this.target = null;\n      this.targetType = \"none\";\n    }\n\n    return this.target;\n  }\n\n  clearTarget()\n  {\n    this.target = null;\n    this.targetType = \"none\";\n  }\n\n  hasTarget()\n  {\n    return this.target != null;\n  }\n\n  getNodeAt(graph, x, y)\n  {\n    //Search graph\n    for(const node of graph.getNodes())\n    {\n      const dx = x - node.x;\n      const dy = y - node.y;\n      if (dx * dx + dy * dy < Config.NODE_RADIUS_SQU)\n      {\n        return node;\n      }\n    }\n    return null;\n  }\n\n  getNodeByInitialMarkerAt(graph, x, y)\n  {\n    const startNode = graph.getStartNode();\n    if (!startNode) return null;\n\n    const dx = x - (startNode.x + Config.INITIAL_MARKER_OFFSET_X);\n    const dy = y - startNode.y;\n    if (dx * dx + dy * dy < Config.EDGE_RADIUS_SQU)\n    {\n      return startNode;\n    }\n\n    return null;\n  }\n\n  getEdgeAt(graph, x, y)\n  {\n    const center = {x: 0, y: 0};\n\n    //Search graph\n    for(const edge of graph.getEdges())\n    {\n      edge.getCenterPoint(center);\n      const dx = x - center.x;\n      const dy = y - center.y;\n      if (dx * dx + dy * dy < Config.EDGE_RADIUS_SQU)\n      {\n        return edge;\n      }\n    }\n    return null;\n  }\n\n  getEdgeByEndPointAt(graph, x, y)\n  {\n    const end = {x: 0, y: 0};\n    //Search graph\n    for(const edge of graph.getEdges())\n    {\n      edge.getEndPoint(end);\n      const dx = x - end.x;\n      const dy = y - end.y;\n      if (dx * dx + dy * dy < Config.ENDPOINT_RADIUS_SQU)\n      {\n        return edge;\n      }\n    }\n    return null;\n  }\n\n  getSelectionBox()\n  {\n    return this.selectionBox;\n  }\n\n  getSelection(graph, forceUpdate=false)\n  {\n    if (forceUpdate)\n    {\n      const box = this.selectionBox;\n      const mx = Math.max(box.toX, box.fromX);\n      const my = Math.max(box.toY, box.fromY);\n      const lx = Math.min(box.toX, box.fromX);\n      const ly = Math.min(box.toY, box.fromY);\n      this.clearSelection();\n      getNodesWithin(graph, lx, ly, mx, my, this.targets);\n    }\n\n    return this.targets;\n  }\n\n  hasSelection()\n  {\n    return this.targets.length > 0;\n  }\n\n  clearSelection()\n  {\n    this.targets.length = 0;\n  }\n\n  isTargetInSelection(target)\n  {\n    return this.targets.includes(target || this.target);\n  }\n\n  isTarget(target)\n  {\n    return this.target == target;\n  }\n\n  beginSelection(graph, x, y)\n  {\n    const box = this.selectionBox;\n    box.fromX = box.toX = x;\n    box.fromY = box.toY = y;\n    this.clearSelection();\n\n    box.visible = true;\n  }\n\n  updateSelection(graph, x, y)\n  {\n    const box = this.selectionBox;\n    box.toX = x;\n    box.toY = y;\n    this.getSelection(graph, true);\n  }\n\n  endSelection(graph, x, y)\n  {\n    const box = this.selectionBox;\n    box.toX = x;\n    box.toY = y;\n    this.getSelection(graph, true);\n\n    box.visible = false;\n  }\n\n  isSelecting()\n  {\n    return this.selectionBox.visible;\n  }\n}\n\nfunction getNodesWithin(graph, x1, y1, x2, y2, dst)\n{\n  const fromX = Math.min(x1, x2);\n  const fromY = Math.min(y1, y2);\n  const toX = Math.max(x1, x2);\n  const toY = Math.max(y1, y2);\n\n  for(const node of graph.getNodes())\n  {\n    if (node.x >= fromX && node.x < toX &&\n        node.y >= fromY && node.y < toY)\n    {\n      dst.push(node);\n    }\n  }\n  return dst;\n}\n\nexport default GraphPicker;\n","import GraphEdge from 'graph/GraphEdge.js';\n\nclass GraphCurvedEdge extends GraphEdge\n{\n  constructor(id, from, to=null)\n  {\n    super(id, from, null);\n\n    //radians = the angle in radians, where 0 is the normal of midpoint\n    //length = the distance from midpoint\n    this._quad = {\n      radians: 0,\n      length: 0,\n      _coords: {x: 0, y: 0}\n    };\n\n    //Make sure to format it correctly when creating...\n    this.changeDestinationNode(to);\n  }\n\n  setQuadratic(radians, length=undefined)\n  {\n    this._quad.radians = radians;\n    if (typeof length === 'number')\n    {\n      this._quad.length = length;\n    }\n    return this;\n  }\n\n  getQuadratic()\n  {\n    return this._quad;\n  }\n\n  isQuadratic()\n  {\n    return !this.isPlaceholder() && this._quad.length != 0;\n  }\n\n  setQuadraticByCoords(x, y)\n  {\n    const from = this._from;\n    const to = this._to;\n    const fromx = from.x;\n    const fromy = from.y;\n    const tox = to.x;\n    const toy = to.y;\n\n    let dx = tox - fromx;\n    let dy = toy - fromy;\n    const midpointx = fromx + dx / 2;\n    const midpointy = fromy + dy / 2;\n\n    //Remember: y-axis is flipped because canvas coord-space is -y => +y\n    //Therefore, dy needs to be flipped\n    const angleOffset = Math.atan2(-dy, dx);\n    dx = x - midpointx;\n    dy = y - midpointy;\n\n    const PI = Math.PI;\n    const PI2 = PI * 2;\n    const HALFPI = PI / 2;\n    //0 rad = to the right\n    //Also: angleOffset is the offset from midpoint angle, the orthogonal base vector\n    //This is because the from and to could be flipped, and\n    //therefore give a negative, or at least a reversed angle.\n    let radians = Math.atan2(dy, dx) + angleOffset;\n    let length = Math.sqrt(dx * dx + dy * dy);\n    if (length < 0) length = 0;\n\n    const outrad = radians - (-HALFPI);//-PI / 2 is outward\n    const inrad = radians - (HALFPI);//PI / 2 is inward\n    //TODO: Should be dependent on length\n    const maxdr = PI / 20;\n\n    if (Math.abs(length) < 8)\n    {\n      radians = 0;\n      length = 0;\n    }\n    else if (outrad < maxdr && outrad > -maxdr)\n    {\n      radians = -HALFPI;//-PI / 2 is outward\n    }\n    else if (-inrad < maxdr && -inrad > -maxdr)\n    {\n      radians = HALFPI;//PI / 2 is inward\n    }\n\n    this._quad.radians = radians;\n    this._quad.length = length;\n  }\n\n  getQuadraticAsCoords()\n  {\n    const from = this._from;\n    const to = this._to;\n    const dst = this._quad._coords;\n    if (from == null || to == null)\n    {\n      dst.x = 0;\n      dst.y = 0;\n    }\n    else\n    {\n      /*\n      //To mark dirty...\n      _capture: {\n        fx: 0, fy: 0,\n        tx: 0, ty: 0,\n        ql: 0, qr: 0\n      }\n      */\n      getDirectionalVector(from.x, from.y, to.x, to.y, this._quad.length, this._quad.radians, dst);\n    }\n    return dst;\n  }\n\n  getSelfLoopHeight()\n  {\n    return this._from.getNodeSize();\n  }\n\n  formatAsSelfLoop()\n  {\n    this.setQuadratic(-Math.PI / 2, this._from.getNodeSize() + this.getSelfLoopHeight());\n  }\n\n  formatAsPlaceholder(prevDest)\n  {\n    //Quad is re-used to determine edge angle for placeholder\n    //This can be used specifically for quad since regular quad is\n    //dependent on this._to != null, which placeholder assumes this._to == null.\n    //Also, quad.length is ignored, because the length should always be\n    //getPlaceholderLength(). This is resolved by getStartPoint(), etc.\n    if (prevDest)\n    {\n      const dx = this._from.x - prevDest.x;\n      const dy = this._from.y - prevDest.y;\n      const angle = -Math.atan2(dx, dy) - (Math.PI / 2);\n      this._quad.radians = angle;\n    }\n    else\n    {\n      this._quad.radians = 0;\n    }\n  }\n\n  //Override\n  changeDestinationNode(node)\n  {\n    const prevDest = this._to;\n\n    //Just to optimize this a little :)\n    if (prevDest === node) return;\n\n    super.changeDestinationNode(node);\n\n    if (this.isPlaceholder())\n    {\n      this.formatAsPlaceholder(prevDest);\n    }\n    else if (this.isSelfLoop())\n    {\n      this.formatAsSelfLoop();\n    }\n  }\n\n  //Override\n  getEdgeDirection()\n  {\n    let result = 0;\n    if (this.isQuadratic())\n    {\n      const coords = this.getQuadraticAsCoords();\n      result = Math.atan2(coords.y, coords.x) + Math.PI / 2;\n    }\n    else\n    {\n      result = super.getEdgeDirection();\n    }\n\n    return result;\n  }\n\n  //Override\n  getStartPoint(dst={x: 0, y: 0})\n  {\n    const from = this._from;\n    const to = this._to;\n\n    if (!from) throw new Error(\"Source of edge cannot be null.\");\n    if (!to)\n    {\n      //Make sure to use quad for placeholder direction (not magnitude)\n      const px = Math.cos(this._quad.radians);\n      const py = Math.sin(this._quad.radians);\n      const nodeSize = from.getNodeSize();\n      dst.x = from.x + px * nodeSize;\n      dst.y = from.y + py * nodeSize;\n      return dst;\n    }\n\n    //Check if edge is following something other than a node...then remain flat\n    if (!to.getNodeSize || !this.isQuadratic())\n    {\n      getDirectionalVector(from.x, from.y, to.x, to.y, from.getNodeSize(), 0, dst);\n      dst.x += from.x;\n      dst.y += from.y;\n      return dst;\n    }\n    else\n    {\n      getMidPoint(from.x, from.y, to.x, to.y, dst);\n      const qcoords = this.getQuadraticAsCoords();\n      const qx = dst.x + qcoords.x;\n      const qy = dst.y + qcoords.y;\n      getDirectionalVector(from.x, from.y, qx, qy, from.getNodeSize(), this.isSelfLoop() ? (Math.PI / 4) : 0, dst);\n      dst.x += from.x;\n      dst.y += from.y;\n      return dst;\n    }\n  }\n\n  //Override\n  getEndPoint(dst={x: 0, y: 0})\n  {\n    const from = this._from;\n    const to = this._to;\n\n    if (!from) throw new Error(\"Source of edge cannot be null.\");\n    if (!to)\n    {\n      //Make sure to use quadCoords for placeholder direction (not magnitude)\n      const px = Math.cos(this._quad.radians);\n      const py = Math.sin(this._quad.radians);\n      const placeholderLength = from.getNodeSize() + this.getPlaceholderLength();\n      dst.x = from.x + px * placeholderLength;\n      dst.y = from.y + py * placeholderLength;\n      return dst;\n    }\n\n    //Get end point for non-nodes...\n    if (!to.getNodeSize)\n    {\n      return to;\n    }\n    //Get end point for straight edges...\n    else if (!this.isQuadratic())\n    {\n      getDirectionalVector(to.x, to.y, from.x, from.y, to.getNodeSize(), 0, dst);\n      dst.x += to.x;\n      dst.y += to.y;\n      return dst;\n    }\n    //Get end point for quadratics...\n    else\n    {\n      getMidPoint(from.x, from.y, to.x, to.y, dst);\n      const qcoords = this.getQuadraticAsCoords();\n      const qx = dst.x + qcoords.x;\n      const qy = dst.y + qcoords.y;\n      getDirectionalVector(to.x, to.y, qx, qy, to.getNodeSize(), this.isSelfLoop() ? -(Math.PI / 4.0) : 0, dst);\n      dst.x += to.x;\n      dst.y += to.y;\n      return dst;\n    }\n  }\n\n  //Override\n  getCenterPoint(dst={x: 0, y: 0})\n  {\n    const from = this._from;\n    const to = this._to;\n\n    if (!from) throw new Error(\"Source of edge cannot be null.\");\n    if (!to)\n    {\n      //Make sure to use quad for placeholder direction (not magnitude)\n      const px = Math.cos(this._quad.radians);\n      const py = Math.sin(this._quad.radians);\n      const placeholderLength = from.getNodeSize() + this.getPlaceholderLength() / 2;\n      dst.x = from.x + px * placeholderLength;\n      dst.y = from.y + py * placeholderLength;\n      return dst;\n    }\n\n    getMidPoint(from.x, from.y, to.x, to.y, dst);\n\n    if (this.isQuadratic())\n    {\n      const qcoords = this.getQuadraticAsCoords();\n      dst.x += qcoords.x;\n      dst.y += qcoords.y;\n    }\n\n    return dst;\n  }\n\n  //Override\n  getHashString(usePosition=true)\n  {\n    if (usePosition)\n    {\n      return super.getHashString(usePosition) + \":\" + this._quad.radians + \",\" + this._quad.length;\n    }\n    else\n    {\n      return super.getHashString(usePosition);\n    }\n  }\n}\n\nfunction getDirectionalVector(x1, y1, x2, y2, dist, angleOffset=0, dst={x: 0, y: 0})\n{\n  const dx = x2 - x1;\n  const dy = y2 - y1;\n  const angle = Math.atan2(dy, dx) + angleOffset;\n  dst.x = Math.cos(angle) * dist;\n  dst.y = Math.sin(angle) * dist;\n  return dst;\n}\n\nfunction getMidPoint(x1, y1, x2, y2, dst={x: 0, y: 0})\n{\n  dst.x = x1 + (x2 - x1) / 2;\n  dst.y = y1 + (y2 - y1) / 2;\n  return dst;\n}\n\nexport default GraphCurvedEdge;\n","import AbstractModuleGraphController from 'modules/abstract/AbstractModuleGraphController.js';\n\nimport Config from 'config.js';\nimport Eventable from 'util/Eventable.js';\nimport GraphLayout from 'modules/fsa/graph/GraphLayout.js';\nimport FSAGraph from 'modules/fsa/graph/FSAGraph.js';\n\nclass GraphController extends AbstractModuleGraphController\n{\n  constructor(module)\n  {\n    super(module, new FSAGraph());\n\n    this.inputController = null;\n    this.machineController = null;\n\n    this.labelEditorElement = null;\n    this.tester = null;\n\n    this.prevQuad = {\n      radians: 0, length: 0,\n      x: 0, y: 0\n    };\n    this.prevEdgeTo = null;\n    this.prevX = 0;\n    this.prevY = 0;\n\n    //The difference between controller events vs graph events is: controller has user-intent\n\n    //userCreateNode(graph, node) - When user creates a node\n    this.registerEvent(\"userCreateNode\");\n    this.registerEvent(\"userPreCreateNode\");//(graph, nextNodeID, x, y)\n    this.registerEvent(\"userPostCreateNode\");//(graph, node)\n\n    //userToggleNode(graph, node, prevAccept) - When user toggles the accept state\n    this.registerEvent(\"userToggleNode\");\n\n    //userDeleteNodes(graph, node, targetNodes, prevX, prevY) - When user deletes one or more nodes\n    this.registerEvent(\"userDeleteNodes\");\n    this.registerEvent(\"userPreDeleteNodes\");\n    this.registerEvent(\"userPostDeleteNodes\");\n\n    //userDeleteEdge(graph, edge, prevTo, prevQuad) - When user deletes an edge\n    this.registerEvent(\"userDeleteEdge\");\n    this.registerEvent(\"userPreDeleteEdge\");\n    this.registerEvent(\"userPostDeleteEdge\");\n\n    //userCreateEdge(graph, edge) - When user creates an edge, after naming it\n    this.registerEvent(\"userCreateEdge\");\n    //this.registerEvent(\"userPreCreateEdge\");\n    this.registerEvent(\"userPostCreateEdge\");\n\n    /*\n    //userMoveNodes(graph, nodes, dx, dy) - When user moves one or more nodes\n    this.registerEvent(\"userMoveNodes\");\n    //userMoveInitial(graph, node, prevNode) - When user moves the initial marker to another\n    this.registerEvent(\"userMoveInitial\");\n    //userPreCreateEdge(graph, edge) - When user is about to create an edge, before src\n    this.registerEvent(\"userPreCreateEdge\");\n    //userBeginEdge(graph, edge, src) - When user begins to create an edge, after src and before naming it\n    this.registerEvent(\"userBeginEdge\");\n    //userEndEdge(graph, edge, src, dst) - When user finishes creating an edge, after dst and before naming it (dst could be null for deletion)\n    this.registerEvent(\"userEndEdge\");\n    //userPostCreateEdge(graph, edge) - When user is finished creating an edge, after dst and after quad changes\n    this.registerEvent(\"userPostCreateEdge\");\n    //userMoveEdge(graph, edge, prevDest) - When user changes the dst of edge\n    this.registerEvent(\"userChangeEdge\");\n    //userBendEdge(graph, edge, prevQuad) - When user bends the edge\n    this.registerEvent(\"userBendEdge\");\n    //userLabelEdge(graph, edge, prevLabel) - When user re-labels the edge\n    this.registerEvent(\"userLabelEdge\");\n    */\n\n    //userRenameNode(graph, node, nextLabel, prevLabel, isPrevCustom) - When user sets the label of node\n    this.registerEvent(\"userRenameNode\");\n\n    //userChangeLayout(graph, prevLayout) - When user re-layouts the graph\n    this.registerEvent(\"userChangeLayout\");\n    this.registerEvent(\"userPreChangeLayout\");//before any changes\n    this.registerEvent(\"userPostChangeLayout\");//after all changes\n\n    //userImportGraph(graph) - When user imports a graph\n    this.registerEvent(\"userImportGraph\");\n    this.registerEvent(\"userPreImportGraph\");//before any changes\n    this.registerEvent(\"userPostImportGraph\");//after all changes\n\n    //nodeMove(targetNode, nextX, nextY, prevX, prevY)\n    this.registerEvent(\"nodeMove\");\n    //nodeMoveAll(targetNodes, dx, dy)\n    this.registerEvent(\"nodeMoveAll\");\n    //nodeInitial(nextInitial, prevInitial)\n    this.registerEvent(\"nodeInitial\");\n    //edgeDestination(targetEdge, nextDestination, prevDestination, prevQuad)\n    this.registerEvent(\"edgeDestination\");\n    //edgeMove(targetEdge, nextQuad, prevQuad)\n    this.registerEvent(\"edgeMove\");\n    //edgeLabel(targetEdge, nextLabel, prevLabel)\n    this.registerEvent(\"edgeLabel\");\n    //tryCreateWhileTrash()\n    this.registerEvent(\"tryCreateWhileTrash\");\n  }\n\n  //Override\n  initialize(module)\n  {\n    super.initialize(module);\n    this.tester = module.getTestingManager();\n\n    this.inputController = module.getInputController();\n    this.machineController = module.getMachineController();\n  }\n\n  //Override\n  destroy(module)\n  {\n    super.destroy(module);\n  }\n\n  applyAutoLayout()\n  {\n    this.emit(\"userPreChangeLayout\", this.getGraph());\n    GraphLayout.applyLayout(this.getGraph());\n\n    this.emit(\"userChangeLayout\", this.getGraph());\n    this.emit(\"userPostChangeLayout\", this.getGraph());\n  }\n\n  renameNode(node, name)\n  {\n    const prev = node.getNodeLabel();\n    const isPrevCustom = node.getNodeCustom();\n\n    node.setNodeLabel(name);\n    node.setNodeCustom(true);\n\n    this.emit(\"userRenameNode\", this.getGraph(), node, name, prev, isPrevCustom);\n  }\n\n  createNode(x, y)\n  {\n    const newNodeLabel = this.machineController.getMachineBuilder().getLabeler().getNextDefaultNodeLabel();\n\n    if (typeof x === 'undefined') x = (Math.random() * Config.SPAWN_RADIUS * 2) - Config.SPAWN_RADIUS;\n    if (typeof y === 'undefined') y = (Math.random() * Config.SPAWN_RADIUS * 2) - Config.SPAWN_RADIUS;\n\n    this.emit(\"userPreCreateNode\", this.getGraph(), newNodeLabel, x, y);\n\n    const node = this.getGraph().createNode(x, y);\n    node.setNodeLabel(newNodeLabel);\n\n    this.emit(\"userCreateNode\", this.getGraph(), node);\n\n    this.emit(\"userPostCreateNode\", this.getGraph(), node);\n    return node;\n  }\n\n  toggleNode(node)\n  {\n    const prev = node.getNodeAccept();\n    const result = !prev;\n    //Toggle accept for selected node\n    node.setNodeAccept(result);\n\n    //Emit event\n    this.emit(\"userToggleNode\", this.getGraph(), node, prev);\n  }\n\n  deleteSelectedNodes(selectedNode)\n  {\n    const picker = this.inputController.getPicker();\n    const selection = picker.getSelection(this.getGraph()).slice();\n\n    this.emit(\"userPreDeleteNodes\", this.getGraph(), selectedNode, selection, this.prevX, this.prevY);\n\n    //Remove from graph\n    for(const node of selection)\n    {\n      this.getGraph().deleteNode(node);\n    }\n\n    //Remove from selection\n    picker.clearSelection();\n\n    //Emit event\n    this.emit(\"userDeleteNodes\", this.getGraph(), selectedNode, selection, this.prevX, this.prevY);\n    this.emit(\"userPostDeleteNodes\", this.getGraph(), selectedNode, selection, this.prevX, this.prevY);\n  }\n\n  deleteTargetNode(target)\n  {\n    this.emit(\"userPreDeleteNodes\", this.getGraph(), target, [target], this.prevX, this.prevY);\n\n    this.getGraph().deleteNode(target);\n\n    //Emit event\n    this.emit(\"userDeleteNodes\", this.getGraph(), target, [target], this.prevX, this.prevY);\n    this.emit(\"userPostDeleteNodes\", this.getGraph(), target, [target], this.prevX, this.prevY);\n  }\n\n  deleteTargetNodes(targets)\n  {\n    if (!targets || targets.length <= 0) return;\n\n    this.emit(\"userPreDeleteNodes\", this.getGraph(), targets[0], targets, this.prevX, this.prevY);\n\n    const graph = this.getGraph();\n    for(const node of targets)\n    {\n      graph.deleteNode(node);\n    }\n\n    //Emit event\n    this.emit(\"userDeleteNodes\", this.getGraph(), targets[0], targets, this.prevX, this.prevY);\n    this.emit(\"userPostDeleteNodes\", this.getGraph(), targets[0], targets, this.prevX, this.prevY);\n  }\n\n  deleteTargetEdge(target)\n  {\n    this.emit(\"userPreDeleteEdge\", this.getGraph(), target, this.prevEdgeTo, this.prevQuad);\n    this.getGraph().deleteEdge(target);\n\n    //Emit event\n    this.emit(\"userDeleteEdge\", this.getGraph(), target, this.prevEdgeTo, this.prevQuad);\n    this.emit(\"userPostDeleteEdge\", this.getGraph(), target, this.prevEdgeTo, this.prevQuad);\n  }\n\n  deleteTargetEdges(targets)\n  {\n    if (!targets || targets.length <= 0) return;\n\n    for(const target of targets)\n    {\n      this.deleteTargetEdge(target);\n    }\n  }\n\n  moveNodeTo(pointer, node, x, y)\n  {\n    for(const other of this.getGraph().getNodes())\n    {\n      //Update node collision\n      if (node === other) continue;\n\n      const dx = x - other.x;\n      const dy = y - other.y;\n      const angle = Math.atan2(dy, dx);\n\n      const diameter = (Config.NODE_RADIUS * 2);\n      const nextDX = other.x + (Math.cos(angle) * diameter) - x;\n      const nextDY = other.y + (Math.sin(angle) * diameter) - y;\n\n      if (dx * dx + dy * dy < Config.NODE_RADIUS_SQU * 4)\n      {\n        x += nextDX;\n        y += nextDY;\n      }\n    }\n\n    node.x = x;\n    node.y = y;\n  }\n\n  moveMultipleNodesTo(pointer, nodes, x, y)\n  {\n    //Moves all nodes by difference between initial position with passed-in x and y\n    const pos = pointer.getInputEventPosition();\n    const dx = x - pos.x;\n    const dy = y - pos.y;\n    for(const node of nodes)\n    {\n      node.x += dx;\n      node.y += dy;\n    }\n\n    //Updates initial position to passed-in x and y to maintain relative position\n    pointer.changeInputEventPosition(x, y);\n  }\n\n  moveEdgeTo(pointer, edge, x, y)\n  {\n    edge.setQuadraticByCoords(x, y);\n  }\n\n  moveEndpointTo(pointer, edge, x, y)\n  {\n    //Get ONLY node at x and y (cannot use hover target, since it is not ONLY nodes)\n    const picker = this.inputController.getPicker();\n    const dst = picker.getNodeAt(this.getGraph(), x, y) || pointer;\n\n    edge.changeDestinationNode(dst);\n\n    //If the cursor returns to the state after leaving it...\n    if (edge.isSelfLoop())\n    {\n      //Make it a self loop\n      const sourceNode = edge.getSourceNode();\n      const dx = sourceNode.x - x;\n      const dy = sourceNode.y - y;\n      const radians = Math.atan2(dy, dx) + Math.PI;\n      edge.setQuadratic(radians);\n    }\n    //Otherwise, maintain original curve\n    else\n    {\n      //TODO: This also causes self-loops to act weird when no longer a self loop\n      edge.setQuadratic(this.prevQuad.radians, this.prevQuad.length);\n    }\n  }\n\n  openLabelEditor(target, x, y, placeholder=null, replace=true, callback=null)\n  {\n    if (!this.labelEditorElement)\n    {\n      if (callback) callback();\n      return;\n    }\n\n    const prevLabel = placeholder || target.getEdgeLabel();\n    this.labelEditorElement.openEditor(target, placeholder, replace, () => {\n      const label = target.getEdgeLabel();\n      if (prevLabel.length > 0 && label != prevLabel)\n      {\n        this.emit(\"edgeLabel\", this.getGraph(), target, label, prevLabel);\n      }\n\n      if (callback)\n      {\n        callback();\n      }\n    });\n  }\n\n  focusOnNode(node)\n  {\n    //Center workspace at focused node; inverted due to graph-to-screen space\n    this.inputController.getInputAdapter().getViewport().setOffset(-node.x, -node.y);\n  }\n\n  focusOnEdge(edge)\n  {\n    //Center workspace at focused edge; inverted due to graph-to-screen space\n    const center = edge.getCenterPoint();\n    this.inputController.getInputAdapter().getViewport().setOffset(-center.x, -center.y);\n  }\n\n  focusOnNodes(nodes)\n  {\n    //Center workspace at the average of focused nodes; inverted due to graph-to-screen space\n    const length = nodes.length;\n    let ax = 0;\n    let ay = 0;\n    for(const node of nodes)\n    {\n      ax += node.x;\n      ay += node.y;\n    }\n    this.inputController.getInputAdapter().getViewport().setOffset(-ax / length, -ay / length);\n  }\n}\n//Mixin Eventable\nEventable.mixin(GraphController);\n\nfunction moveNodesOutOfEdges(target, graph)\n{\n\n  const x1 = target.getSourceNode().x;\n  const y1 = target.getSourceNode().y;\n  const x2 = target.getDestinationNode().x;\n  const y2 = target.getDestinationNode().y;\n  const dist12sq = (x2-x1)*(x2-x1) + (y2-y1)*(y2-y1);\n  let vertical = false;\n  let m = 0;\n  let b = 0;\n  if(x1 > x2) {\n    m = (y1-y2) / (x1-x2);\n    b = y2-m*x2;\n  } else if (x1 < x2) {\n    m = (y2-y1) / (x2-x1);\n    b = y1-m*x1;\n  } else {\n    vertical = true;\n  }\n\n  for(const node of graph.getNodes())\n  {\n    if(node === target.getSourceNode() || node === target.getDestinationNode()) continue;\n\n    const x0 = node.x;\n    const y0 = node.y;\n\n    const dist01sq = (x1-x0)*(x1-x0) + (y1-y0)*(y1-y0);\n    const dist02sq = (x2-x0)*(x2-x0) + (y2-y0)*(y2-y0);\n    if(dist01sq > dist12sq || dist02sq > dist12sq) continue;\n\n\n    let dist = 0;\n    let xint = 0;\n    let yint = 0;\n    let m0 = 0;\n    let horizontal = false;\n    if(vertical) {\n      dist = Math.abs(x1-x0);\n      xint = x1;\n      yint = y0;\n      m0 = 0;\n    } else {\n      dist = Math.abs(b+ m*x0 - y0) / Math.sqrt(1+m*m);\n      xint = (x0 + m*y0 - m*b) / (m*m + 1);\n      yint = m * xint + b;\n      if(m !== 0) {\n        m0 = 1 / m;\n      } else {\n        horizontal = true;\n      }\n    }\n\n    if(dist < Config.NODE_RADIUS) {\n      const toMove = Config.NODE_RADIUS - dist + 10;\n      const distx = x0 - xint;\n      const disty = y0 - yint;\n      let signx = -1;\n      let signy = -1;\n      if(distx > 0) signx = 1;\n      if(disty > 0) signy = 1;\n\n      if(horizontal) {\n        node.y = y0 + signy * toMove;\n      } else {\n        let toMovex = toMove / Math.sqrt(m0*m0 + 1);\n        let toMovey = Math.abs(m0) * toMovex;\n        node.x = x0 + signx * toMovex;\n        node.y = y0 + signy * toMovey;\n      }\n    }\n  }\n}\n\nexport default GraphController;\n","class AbstractModuleGraphController\n{\n  constructor(module, graph)\n  {\n    this._module = module;\n    this._graph = graph;\n\n    //throw new Error(\"Missing implementation for graph controller \\'\" + this.getModule().getModuleName() + \"\\'\");\n  }\n\n  initialize(module) {}\n  destroy(module) {}\n  update(module) {}\n\n  getGraph()\n  {\n    return this._graph;\n  }\n\n  getModule()\n  {\n    return this._module;\n  }\n}\n\nexport default AbstractModuleGraphController;\n","import GraphNode from './GraphNode.js';\nimport GraphEdge from './GraphEdge.js';\nimport { guid, stringHash } from 'util/MathHelper.js';\n\nclass NodalGraph\n{\n  constructor(nodeClass=GraphNode, edgeClass=GraphEdge)\n  {\n    this._nodeClass = nodeClass;\n    this._edgeClass = edgeClass;\n\n    this._nodes = [];\n    this._edges = [];\n    this._nodeMapping = new Map();\n    this._edgeMapping = new Map();\n  }\n\n  /** NODES **/\n\n  createNode(x=0, y=0, id=null)\n  {\n    const result = new (this._nodeClass)(id || guid(), x, y);\n    const i = this._nodes.length;\n    this._nodes.push(result);\n    this._nodeMapping.set(result.getGraphElementID(), i);\n    return result;\n  }\n  deleteNode(node)\n  {\n    const elementID = node.getGraphElementID();\n    const i = this._nodeMapping.get(elementID);\n    if (i >= 0)\n    {\n      this._nodes.splice(i, 1);\n      this._nodeMapping.delete(elementID);\n\n      //HACK: This is inefficient, you should convert everything to use only\n      //the map so the indicies would not need to be fixed in the array.\n      //Basically, get rid of this._nodes (you will have to change how setStartNode works)\n      for(let j = i, len = this._nodes.length; j < len; ++j)\n      {\n        this._nodeMapping.set(this._nodes[j].getGraphElementID(), j);\n      }\n\n      const nullSourceEdges = [];\n\n      //Remove connected edges\n      for(const edge of this._edges)\n      {\n        if (edge.getSourceNode() === node)\n        {\n          nullSourceEdges.push(edge);\n        }\n        else if (edge.getDestinationNode() === node)\n        {\n          edge.changeDestinationNode(null);\n        }\n      }\n      for(const edge of nullSourceEdges)\n      {\n        this.deleteEdge(edge);\n      }\n    }\n  }\n  addNode(node)\n  {\n    if (!node.getGraphElementID()) node.setGraphElementID(guid());\n\n    const i = this._nodes.length;\n    this._nodes.push(node);\n    this._nodeMapping.set(node.getGraphElementID(), i);\n    return node;\n  }\n  clearNodes() { this._nodes.length = 0; this._nodeMapping.clear(); }\n  getNodeByElementID(elementID)\n  {\n    const index = this._nodeMapping.get(elementID);\n    return index >= 0 ? this._nodes[index] : null;\n  }\n  getNodesByLabel(label, dst=[])\n  {\n    for(const node of this._nodes)\n    {\n      if (node.getNodeLabel() == label) dst.push(node);\n    }\n    return dst;\n  }\n  getNodes() { return this._nodes; }\n  getNodeCount() { return this._nodes.length; }\n  getNodeClass() { return this._nodeClass; }\n\n  /** EDGES **/\n\n  createEdge(from, to=null, id=null)\n  {\n    const result = new (this._edgeClass)(id || guid(), from, to);\n    const i = this._edges.length;\n    this._edges.push(result);\n    this._edgeMapping.set(result.getGraphElementID(), i);\n    return result;\n  }\n  deleteEdge(edge)\n  {\n    const elementID = edge.getGraphElementID();\n    const i = this._edgeMapping.get(elementID);\n    if (i >= 0)\n    {\n      this._edges.splice(i, 1);\n      this._edgeMapping.delete(elementID);\n\n      //HACK: This is inefficient, refer to deleteNode().\n      for(let j = i, len = this._edges.length; j < len; ++j)\n      {\n        this._edgeMapping.set(this._edges[j].getGraphElementID(), j);\n      }\n    }\n  }\n  addEdge(edge)\n  {\n    if (!edge.getGraphElementID()) edge.setGraphElementID(guid());\n\n    const i = this._edges.length;\n    this._edges.push(edge);\n    this._edgeMapping.set(edge.getGraphElementID(), i);\n    return edge;\n  }\n  clearEdges() { this._edges.length = 0; this._edgeMapping.clear(); }\n  getEdgeByElementID(elementID)\n  {\n    const index = this._edgeMapping.get(elementID);\n    return index >= 0 ? this._edges[index] : null;\n  }\n  getEdges() { return this._edges; }\n  getEdgeCount() { return this._edges.length; }\n  getEdgeClass() { return this._edgeClass; }\n\n  /** HELPER **/\n\n  clear()\n  {\n    this.clearEdges();\n    this.clearNodes();\n  }\n\n  isEmpty()\n  {\n    return this.getNodeCount() <= 0 && this.getEdgeCount() <= 0;\n  }\n\n  getBoundingRect()\n  {\n    if (this._nodes.length <= 0) return {\n      minX: 0,\n      minY: 0,\n      maxX: 1,\n      maxY: 1,\n      width: 1,\n      height: 1\n    };\n\n    var minNX = Number.MAX_VALUE;\n    var minNY = Number.MAX_VALUE;\n    var maxNX = Number.MIN_VALUE;\n    var maxNY = Number.MIN_VALUE;\n\n    var maxNodeSize = 0;\n    for(const node of this._nodes)\n    {\n      const x = node.x;\n      const y = node.y;\n      const size = node.getNodeSize();\n      if (size > maxNodeSize) maxNodeSize = size;\n\n      minNX = Math.min(minNX, x);\n      maxNX = Math.max(maxNX, x);\n\n      minNY = Math.min(minNY, y);\n      maxNY = Math.max(maxNY, y);\n    }\n\n    minNX -= maxNodeSize;\n    minNY -= maxNodeSize;\n    maxNX += maxNodeSize;\n    maxNY += maxNodeSize;\n\n    var minEX = Number.MAX_VALUE;\n    var minEY = Number.MAX_VALUE;\n    var maxEX = Number.MIN_VALUE;\n    var maxEY = Number.MIN_VALUE;\n\n    const startPoint = {x: 0, y: 0};\n    const endPoint = {x: 0, y: 0};\n    const centerPoint = {x: 0, y: 0};\n    for(const edge of this._edges)\n    {\n      //Will store into point objects...\n      edge.getStartPoint(startPoint);\n      edge.getEndPoint(endPoint);\n      edge.getCenterPoint(centerPoint);\n\n      const sx = startPoint.x;\n      const sy = startPoint.y;\n      const ex = endPoint.x;\n      const ey = endPoint.y;\n      const cx = centerPoint.x;\n      const cy = centerPoint.y;\n\n      minEX = Math.min(minEX, sx, ex, cx);\n      maxEX = Math.max(maxEX, sx, ex, cx);\n\n      minEY = Math.min(minEY, sy, ey, cy);\n      maxEY = Math.max(maxEY, sy, ey, cy);\n    }\n\n    const result = {\n      minX: Math.min(minNX, minEX),\n      minY: Math.min(minNY, minEY),\n      maxX: Math.max(maxNX, maxEX),\n      maxY: Math.max(maxNY, maxEY),\n      width: 0,\n      height: 0\n    };\n    result.width = result.maxX - result.minX;\n    result.height = result.maxY - result.minY;\n    return result;\n  }\n\n  //Gets a hash of the graph's current state. Can generally assume the hash will\n  //change if the graph's content has changed (including nodes and edges).\n  getHashCode(usePosition=true)\n  {\n    let string = \"\";\n    for(const node of this._nodes)\n    {\n      string += node.getHashString(usePosition) + \",\";\n    }\n    string += \"|\";\n    for(const edge of this._edges)\n    {\n      string += edge.getHashString(usePosition) + \",\";\n    }\n    return stringHash(string);\n  }\n}\n\nexport default NodalGraph;\n","import AbstractModuleMachineController from 'modules/abstract/AbstractModuleMachineController.js';\nimport Eventable from 'util/Eventable.js';\n\nimport GraphLayout from 'modules/fsa/graph/GraphLayout.js';\nimport { convertToDFA } from 'machine/util/convertNFA.js';\nimport DFA from 'machine/DFA.js';\n\nclass MachineController extends AbstractModuleMachineController\n{\n  constructor(module)\n  {\n    super(module);\n\n    this.machineName = null;\n\n    this.graphController = null;\n\n    //userChangeMachine(machineBuilder, nextMachineType, prevMachineType) - when user changes machine type\n    this.registerEvent(\"userChangeMachine\");\n    //userConvertMachine(machineBuilder, nextMachineType, prevMachineType) - when user converts machine type\n    this.registerEvent(\"userConvertMachine\");\n    this.registerEvent(\"userPreConvertMachine\");//Before changes\n    this.registerEvent(\"userPostConvertMachine\");//After all changes\n    //userRenameMachine(machineBuilder, nextMachineName, prevMachineName) - when machine name is changed\n    this.registerEvent(\"userRenameMachine\");\n    //userCreateSymbol(machineBuilder, symbol) - When user adds a custom symbol\n    this.registerEvent(\"userCreateSymbol\");\n    //userDeleteSymbol(machineBuilder, symbol, prevEdges) - When user delets a symbol (and affects the edges)\n    this.registerEvent(\"userDeleteSymbol\");\n    this.registerEvent(\"userPreDeleteSymbol\");//userPreDeleteSymbol(machineBuilder, symbol)\n    this.registerEvent(\"userPostDeleteSymbol\");\n    //userRenameSymbol(machineBuilder, symbol, prevSymbol, targetEdges) - When user renames a used symbol (and affects the edges)\n    this.registerEvent(\"userRenameSymbol\");\n    this.registerEvent(\"userPreRenameSymbol\");//userPreDeleteSymbol(machineBuilder, symbol, prevSymbol)\n    this.registerEvent(\"userPostRenameSymbol\");\n  }\n\n  setModule(module)\n  {\n    this._module = module;\n  }\n\n  initialize(module)\n  {\n    this.graphController = module.getGraphController();\n  }\n\n  destroy()\n  {\n\n  }\n\n  getLabelFormatter()\n  {\n    return this._module.getLabelFormatter();\n  }\n\n  getMachineBuilder()\n  {\n    return this._module.getMachineBuilder();\n  }\n\n  getMachineType()\n  {\n    return this.getMachineBuilder().getMachineType();\n  }\n\n  setMachineType(machineType)\n  {\n    this.getMachineBuilder().setMachineType(machineType);\n  }\n\n  getMachineName()\n  {\n    return this.machineName || I18N.toString(\"file.untitled\");\n  }\n\n  setMachineName(machineName)\n  {\n    if (!machineName || machineName.length <= 0)\n    {\n      this.machineName = null;\n    }\n    else\n    {\n      this.machineName = machineName;\n    }\n\n    const value = this.getMachineName();\n    const element = document.getElementById('window-title');\n    const string = element.innerHTML;\n    const separator = string.indexOf('-');\n    if (separator !== -1)\n    {\n      element.innerHTML = value + \" - \" + string.substring(separator + 1).trim();\n    }\n    else\n    {\n      element.innerHTML = value + \" - \" + string;\n    }\n  }\n\n  renameMachine(machineName)\n  {\n    const prev = this.machineName;\n    this.setMachineName(machineName);\n\n    //Emit a user rename machine event\n    this.emit(\"userRenameMachine\", this.getMachineBuilder(), machineName, prev);\n  }\n\n  changeMachineTo(machineType)\n  {\n    const prev = this.getMachineBuilder().getMachineType();\n    if (prev != machineType)\n    {\n      this.setMachineType(machineType);\n\n      //Emit event\n      this.emit(\"userChangeMachine\", this.getMachineBuilder(), machineType, prev);\n    }\n  }\n\n  getFirstGraphNodeByLabel(graph, label)\n  {\n    for(const node of graph.getNodes())\n    {\n      if (node.getNodeLabel() == label)\n      {\n        return node;\n      }\n    }\n\n    return null;\n  }\n\n  setGraphToMachine(graph, machine)\n  {\n    graph.clear();\n\n    //Add all states\n    let node;\n    for(const state of machine.getStates())\n    {\n      node = graph.createNode(0, 0);\n      node.setNodeLabel(state);\n      if (machine.isFinalState(state))\n      {\n        node.setNodeAccept(true);\n      }\n    }\n\n    //Add all transitions\n    let edge, from, to, read, labels, flag;\n    for(let transition of machine.getTransitions())\n    {\n      from = this.getFirstGraphNodeByLabel(graph, transition[0]);\n      read = transition[1];\n      to = this.getFirstGraphNodeByLabel(graph, transition[2]);\n      edge = graph.createEdge(from, to);\n      edge.setEdgeLabel(read);\n      const formattedEdge = graph.formatEdge(edge);\n      if (edge != formattedEdge) graph.deleteEdge(edge);\n    }\n\n    //Set start state\n    const startState = machine.getStartState();\n    graph.setStartNode(this.getFirstGraphNodeByLabel(graph, startState));\n\n    //Auto layout graph\n    GraphLayout.applyLayout(graph);\n  }\n\n  convertMachineTo(machineType)\n  {\n    const currentMachineType = this.getMachineType();\n\n    //Already converted machine...\n    if (currentMachineType === machineType) return;\n\n    if (machineType == \"DFA\" && currentMachineType == \"NFA\")\n    {\n      this.emit(\"userPreConvertMachine\", this.getMachineBuilder(), machineType, currentMachineType);\n\n      const result = convertToDFA(this.getMachineBuilder().getMachine(), new DFA());\n      this.setGraphToMachine(this.graphController.getGraph(), result);\n      this.setMachineType(machineType);\n\n      this.emit(\"userConvertMachine\", this.getMachineBuilder(), machineType, currentMachineType);\n      this.emit(\"userPostConvertMachine\", this.getMachineBuilder(), machineType, currentMachineType);\n    }\n    else if (machineType == \"NFA\" && currentMachineType == \"DFA\")\n    {\n      this.changeMachineTo(machineType);\n    }\n    else\n    {\n      throw new Error(\"Conversion scheme between \\'\" + currentMachineType + \"\\' to \\'\" + machineType + \"\\' is not supported\");\n    }\n  }\n\n  getAlphabet()\n  {\n    return this.getMachineBuilder().getAlphabet();\n  }\n\n  createSymbol(symbol)\n  {\n    this.getMachineBuilder().addCustomSymbol(symbol);\n\n    this.emit(\"userCreateSymbol\", this.getMachineBuilder(), symbol);\n  }\n\n  deleteSymbol(symbol)\n  {\n    let edge = null;\n    let index = null;\n    let result = null;\n    const targets = [];\n\n    this.emit(\"userPreDeleteSymbol\", this.getMachineBuilder(), symbol);\n\n    const graph = this.graphController.getGraph();\n    for(let i = graph.getEdges().length - 1; i >= 0; --i)\n    {\n      edge = graph.getEdges()[i];\n      index = edge.getEdgeLabel().indexOf(symbol);\n      if (index >= 0)\n      {\n        result = edge.getEdgeLabel().substring(0, index) + edge.getEdgeLabel().substring(index + 1);\n        if (result.length > 0)\n        {\n          edge.setEdgeLabel(result);\n        }\n        else\n        {\n          edge.setEdgeLabel(\"\");\n          graph.deleteEdge(edge);\n        }\n        targets.push(edge);\n      }\n    }\n\n    if (targets.length <= 0)\n    {\n      this.getMachineBuilder().removeCustomSymbol(symbol);\n    }\n\n    this.emit(\"userDeleteSymbol\", this.getMachineBuilder(), symbol, targets);\n    this.emit(\"userPostDeleteSymbol\", this.getMachineBuilder(), symbol, targets);\n  }\n\n  renameSymbol(prevSymbol, nextSymbol)\n  {\n    let edge = null;\n    let result = null;\n    const targets = [];\n\n    this.emit(\"userPreRenameSymbol\", this.getMachineBuilder(), nextSymbol, prevSymbol);\n\n    const graph = this.graphController.getGraph();\n    const length = graph.getEdges().length;\n    for(let i = 0; i < length; ++i)\n    {\n      edge = graph.getEdges()[i];\n      let result = edge.getEdgeLabel().replace(prevSymbol, nextSymbol);\n      if (result != edge.getEdgeLabel())\n      {\n        targets.push(edge);\n      }\n      edge.setEdgeLabel(result);\n    }\n\n    if (targets.length <= 0)\n    {\n      this.getMachineBuilder().renameCustomSymbol(prevSymbol, nextSymbol);\n    }\n\n    this.emit(\"userRenameSymbol\", this.getMachineBuilder(), nextSymbol, prevSymbol, targets);\n    this.emit(\"userPostRenameSymbol\", this.getMachineBuilder(), nextSymbol, prevSymbol, targets);\n  }\n\n  getCustomSymbols()\n  {\n    return this.getMachineBuilder()._symbols;\n  }\n\n  isCustomSymbol(symbol)\n  {\n    return this.getMachineBuilder().isCustomSymbol(symbol);\n  }\n}\nEventable.mixin(MachineController);\n\nexport default MachineController;\n","class AbstractModuleMachineController\n{\n  constructor(module)\n  {\n    this._module = module;\n\n    //throw new Error(\"Missing implementation for graph controller \\'\" + this.getModule().getModuleName() + \"\\'\");\n  }\n\n  initialize(module) {}\n  destroy(module) {}\n  update(module) {}\n  \n  getModule()\n  {\n    return this._module;\n  }\n}\n\nexport default AbstractModuleMachineController;\n","import DFA from 'machine/DFA.js';\nimport { EMPTY } from 'machine/Symbols.js';\n\nexport function convertToDFA(nfa, dst=null)\n{\n\n  //Avoid runtime errors for empty nfas\n  if(nfa.getStates().length == 0) return;\n\n  const result = dst || new DFA();\n\n  const alphabet = nfa.getAlphabet();\n  const startState = nfa.getStartState();\n\n  //Make new DFA start state\n  let nextStates = nfa.doClosureTransition(startState);\n  const newStartState = newDFAStateFromNFA(result, nfa, nextStates);\n\n  //For every state from the NFA's powerset, add it to DFA with correct transitions\n  const powerSetStates = nfa.getPowerSet();\n  for(const powerSetState of powerSetStates) {\n      console.log(\"Adding to DFA: \" + getStateFromSet(powerSetState));\n      if(powerSetState.length != 0)\n        expandPowersetStateToDFA(powerSetState, nfa, result);\n  }\n\n  //Create trap state\n  const trapState = result.newState(\"{}\");\n  let flag = false;\n\n  //Check for the new alphabet...\n  const newAlphabet = result.getAlphabet();\n  for(const state of result.getStates())\n  {\n    for(const symbol of newAlphabet)\n    {\n      //If transition for this symbol does not exist...\n      if (!result.doTransition(state, symbol))\n      {\n        //Create it\n        result.newTransition(state, trapState, symbol);\n\n        if (state !== trapState) flag = true;\n      }\n    }\n  }\n\n  return result;\n}\n\n/* Inspired by expandNFAStateToDFA, it takes a powerSetState, which is a set\n * of NFA states from the powerset (e.g. [q1, q1]) and adds it to the DFA as a\n * single state (e.g. {q1, q2}) and adds its transitions\n */\nfunction expandPowersetStateToDFA(powerSetState, nfa, dfa) {\n    const result = [];\n    const alphabet = nfa.getAlphabet();\n    const state = getStateFromSet(powerSetState);\n\n    if(!dfa.hasState(state)) {\n        result.push(newDFAStateFromNFA(dfa, nfa, powerSetState));\n    }\n\n    let terminals = [];\n    let dfaState = null;\n\n    for(const symbol of alphabet)\n    {\n      //Get all closed reachable states...\n      for(const s of powerSetState)\n      {\n        nfa.doTerminalTransition(s, symbol, terminals);\n      }\n\n      //If has reachable states...\n      if (terminals.length > 0)\n      {\n        dfaState = getStateFromSet(terminals);\n\n        //Create state if it does not exist...\n        if (!dfa.hasState(dfaState))\n        {\n          dfaState = newDFAStateFromNFA(dfa, nfa, terminals);\n          result.push(dfaState);\n        }\n\n        //Create transition for reachable state\n        dfa.newTransition(state, dfaState, symbol);\n      }\n\n      //Reset list\n      terminals.length = 0;\n    }\n\n    return result;\n}\n\nfunction expandNFAStateToDFA(state, nfa, dfa)\n{\n  const result = [];\n  const alphabet = nfa.getAlphabet();\n\n  let terminals = [];\n  let nfaStates = null;\n  let dfaState = null;\n\n  for(const symbol of alphabet)\n  {\n    //Get all closed reachable states...\n    nfaStates = getSetFromState(state);\n    for(const s of nfaStates)\n    {\n      nfa.doTerminalTransition(s, symbol, terminals);\n    }\n\n    //If has reachable states...\n    if (terminals.length > 0)\n    {\n      dfaState = getStateFromSet(terminals);\n\n      //Create state if it does not exist...\n      if (!dfa.hasState(dfaState))\n      {\n        dfaState = newDFAStateFromNFA(dfa, nfa, terminals);\n        result.push(dfaState);\n      }\n\n      //Create transition for reachable state\n      dfa.newTransition(state, dfaState, symbol);\n    }\n\n    //Reset list\n    terminals.length = 0;\n  }\n\n  return result;\n}\n\nfunction newDFAStateFromNFA(dfa, nfa, nfaStates)\n{\n  const result = dfa.newState(getStateFromSet(nfaStates));\n\n  //If the NFA states contain a final, then DFA state should be final\n  for(const s of nfaStates)\n  {\n    if (nfa.isFinalState(s))\n    {\n      dfa.setFinalState(result);\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction getStateFromSet(nfaStates)\n{\n  nfaStates.sort();\n  return \"{\" + nfaStates.join(\",\") + \"}\";\n}\n\nfunction getSetFromState(dfaState)\n{\n  return dfaState.substring(1, dfaState.length - 1).split(\",\");\n}\n","import React from 'react';\nimport './FSAGraphRenderer.css';\n\nimport NodeRenderer from './NodeRenderer.js';\nimport EdgeRenderer from './EdgeRenderer.js';\nimport InitialMarkerRenderer from './InitialMarkerRenderer.js';\n\nclass FSAGraphRenderer extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  //Override\n  render()\n  {\n    //Inherits props from parent\n    const currentModule = this.props.currentModule;\n    const inputController = currentModule.getInputController();\n    const graphController = currentModule.getGraphController();\n    const graph = graphController.getGraph();\n\n    return <g>\n      {/* Nodes */}\n      {graph.getNodes().map((e, i) => <NodeRenderer key={e.getGraphElementID() || i} node={e}/>)}\n\n      {/* Edges */}\n      {graph.getEdges().map((e, i) => <EdgeRenderer key={e.getGraphElementID() || i} edge={e}/>)}\n\n      {/* Initial marker and ghost */}\n      { graph.getStartNode() && (inputController.ghostInitialMarker == null ?\n        <InitialMarkerRenderer node={graph.getStartNode()}/> :\n        <InitialMarkerRenderer node={inputController.ghostInitialMarker}/>) }\n    </g>;\n  }\n}\n\nexport default FSAGraphRenderer;\n","import React from 'react';\n\nimport Config from 'config.js';\n\nclass NodeRenderer extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    //TODO: Refer to app.css for comparable colors\n    const node = this.props.node;\n    return <g className=\"graph-node-container\">\n      {/*Outer circle*/}\n      <circle className=\"graph-node\"\n        cx={node.x}\n        cy={node.y}\n        r={Config.NODE_RADIUS}\n\n        fill=\"#FEE781\"\n        stroke=\"#000000\"/>\n\n      {/*Inner circle*/}\n      {node.getNodeAccept() &&\n        <circle className=\"graph-node-inner\"\n          cx={node.x}\n          cy={node.y}\n          r={Config.NODE_RADIUS_INNER}\n          fill=\"none\"\n\n          stroke=\"#000000\"/>}\n\n      //Label\n      <text className=\"graph-node-label\"\n        x={node.x} y={node.y + 4}\n        pointerEvents=\"none\"\n        style={{\n          userSelect: \"none\",\n          fontSize: (1 - Math.min(Math.max(node.getNodeLabel().length - 2, 0) / 6, 0.5)) + \"em\"\n        }}\n        textAnchor=\"middle\">\n        {node.getNodeLabel()}\n      </text>\n    </g>;\n  }\n}\n\nexport default NodeRenderer;\n","import React from 'react';\n\nimport Config from 'config.js';\n\nclass EdgeRenderer extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    const SIXTH_PI = Math.PI / 6;\n\n    let arrowAngle = 0;\n    const edge = this.props.edge;\n    const start = edge.getStartPoint();\n    const end = edge.getEndPoint();\n    const center = edge.getCenterPoint();\n    const label = edge.getEdgeLabel();\n    const quad = edge.getQuadratic();\n    const quadCoords = edge.getQuadraticAsCoords();\n    const edgeDir = edge.getEdgeDirection();\n    const flipLabel = quadCoords.y > 0;\n\n    //Calculate curved lines...\n    let quadLine = null;\n    if (!edge.isQuadratic())\n    {\n      //Straight line\n      arrowAngle = Math.atan2(start.x - end.x, start.y - end.y) + Math.PI;\n      quadLine = \"L \" + end.x + \" \" + end.y;\n    }\n    else\n    {\n      //Quadratic curve\n      //center = (midpoint + the quadratic offset) + the quadratic offset\n      const cx = center.x + quadCoords.x;\n      const cy = center.y + quadCoords.y;\n      arrowAngle = Math.atan2(cx - end.x, cy - end.y) + Math.PI;\n      quadLine = \"Q \" + cx + \" \" + cy + \" \" + end.x + \" \" + end.y;\n    }\n\n    //Draw multiple labels\n    const labels = edge.getEdgeSymbolsFromLabel();\n    let dy = 0;\n\n    const cx = (center && center.x || 0);\n    const cy = (center && center.y || 0);\n\n    return <g className=\"graph-edge-container\">\n      //Draw lines\n      <path className=\"graph-edge\" id={\"edge:\" + edge.getGraphElementID()}\n        d={\n          \"M \" + start.x + \" \" + start.y + \" \" +\n          quadLine + \" \" +\n          \"M \" +\n            (end.x - (Config.ARROW_WIDTH * Math.sin(arrowAngle - SIXTH_PI))) + \" \" +\n            (end.y - (Config.ARROW_WIDTH * Math.cos(arrowAngle - SIXTH_PI))) + \" \" +\n          \"L \" + end.x + \" \" + end.y + \" \" +\n          \"L \" +\n            (end.x - (Config.ARROW_WIDTH * Math.sin(arrowAngle + SIXTH_PI))) + \" \" +\n            (end.y - (Config.ARROW_WIDTH * Math.cos(arrowAngle + SIXTH_PI)))}\n        fill=\"none\"\n\n        stroke=\"#000000\"/>\n\n      {/*Draw labels*/}\n      <g transform={\"translate(\" + (cx) + \",\" + (cy) + \") rotate(\" + (edgeDir * 180 / Math.PI) + \")\"}>\n      { labels.length > 0 && labels.map((str, i) => {\n          const yy = (i + 1) * -15;\n\n          //TODO: ctx.clearRect(xx - cx - 2, yy - 5, (cx * 2) + 4, 10);\n          return <text\n            key={str + \".\" + i}\n            className=\"graph-edge-label\"\n            transform={\"translate(0, \" + yy + \")\" + (flipLabel ? \" scale(-1, -1)\" : \"\")}\n            alignmentBaseline=\"central\"\n            pointerEvents=\"none\"\n            style={{userSelect: \"none\"}}\n            textAnchor=\"middle\">\n            {str}\n          </text>;\n      })}\n      </g>\n    </g>;\n  }\n}\n\nexport default EdgeRenderer;\n","import React from 'react';\n\nimport SelectionBoxRenderer from 'content/workspace/renderer/SelectionBoxRenderer.js';\nimport HighlightRenderer from 'content/workspace/renderer/HighlightRenderer.js';\n\nclass FSAGraphOverlayRenderer extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  //Override\n  render()\n  {\n    //Inherits props from parent\n    const parent = this.props.parent;\n    const currentModule = this.props.currentModule;\n\n    const graphController = currentModule.getGraphController();\n    const inputController = currentModule.getInputController();\n    const machineController = currentModule.getMachineController();\n    const tester = currentModule.getTestingManager();\n\n    const graph = graphController.getGraph();\n    const viewport = inputController.getInputAdapter().getViewport();\n    const machineBuilder = machineController.getMachineBuilder();\n    const picker = inputController.getPicker();\n    const selectionBox = picker.getSelectionBox();\n\n    return <g>\n      {/* Selected elements */}\n      { picker.hasSelection() &&\n        picker.getSelection(graph).map((e, i) =>\n          <HighlightRenderer key={e.getGraphElementID()} className={inputController.isTrashMode() ? \"highlight-error\" : \"highlight-select\"} target={e} type=\"node\"/>) }\n\n      {/* Selection box */}\n      <SelectionBoxRenderer visible={selectionBox.visible}\n        fromX={selectionBox.fromX} fromY={selectionBox.fromY}\n        toX={selectionBox.toX} toY={selectionBox.toY}/>\n\n      {/* Node warning targets */}\n      { machineController.getMachineBuilder().machineErrorChecker.warningNodes.map((e, i) =>\n        <HighlightRenderer key={e.getGraphElementID()} className=\"highlight-warning graph-gui\" target={e} type=\"node\" offset=\"6\"/>) }\n\n      {/* Edge warning targets */}\n      { machineController.getMachineBuilder().machineErrorChecker.warningEdges.map((e, i) =>\n        <HighlightRenderer key={e.getGraphElementID()} className=\"highlight-warning graph-gui\" target={e} type=\"edge\" offset=\"6\"/>) }\n\n      {/* Node error targets */}\n      { machineController.getMachineBuilder().machineErrorChecker.errorNodes.map((e, i) =>\n        <HighlightRenderer key={e.getGraphElementID()} className=\"highlight-error graph-gui\" target={e} type=\"node\" offset=\"6\"/>) }\n\n      {/* Edge error targets */}\n      { machineController.getMachineBuilder().machineErrorChecker.errorEdges.map((e, i) =>\n        <HighlightRenderer key={e.getGraphElementID()} className=\"highlight-error graph-gui\" target={e} type=\"edge\" offset=\"6\"/>) }\n\n      {/* Node test targets */}\n      { tester.testMode.targets.map((e, i) => {\n          return <HighlightRenderer key={e.getGraphElementID()} className=\"highlight-test graph-gui\" target={e} type=\"node\" offset=\"6\"/>;\n        }) }\n\n      {/* Hover markers */}\n      { picker.hasTarget() &&\n        !picker.isTargetInSelection() &&\n        <HighlightRenderer className={inputController.isTrashMode() ? \"highlight-error\" : \"highlight-select\"} target={picker.target} type={picker.targetType}/> }\n    </g>;\n  }\n}\n\nexport default FSAGraphOverlayRenderer;\n","import React from 'react';\n\nimport Config from 'config.js';\n\nclass SelectionBoxRenderer extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  //Override\n  render()\n  {\n    const visible = this.props.visible;\n    const fromX = this.props.fromX || 0;\n    const fromY = this.props.fromY || 0;\n    const toX = this.props.toX || fromX + 1;\n    const toY = this.props.toY || fromY + 1;\n\n    const dx = toX - fromX;\n    const dy = toY - fromY;\n\n    return <g className=\"graph-selection-container\">\n    { visible &&\n      <rect className=\"graph-selection\"\n        x={dx < 0 ? toX : fromX}\n        y={dy < 0 ? toY : fromY}\n        width={dx < 0 ? -dx : dx}\n        height={dy < 0 ? -dy : dy}/> }\n    </g>;\n  }\n}\n\nexport default SelectionBoxRenderer;\n","import React from 'react';\n\nimport TrashCan from 'content/viewport/TrashCan.js';\nimport TestTray from './TestTray.js';\nimport CursorMode from 'content/viewport/CursorMode.js';\n\nclass ViewportRenderer extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  //Override\n  render()\n  {\n    //Inherits props from parent\n    const parent = this.props.parent;\n    const currentModule = this.props.currentModule;\n    const screen = this.props.screen;\n\n    const inputController = currentModule.getInputController();\n    const graphController = currentModule.getGraphController();\n    const machineController = currentModule.getMachineController();\n    const tester = currentModule.getTestingManager();\n\n    const LabelEditor = currentModule.getLabelEditor();\n\n    return <span>\n    { LabelEditor &&\n      <LabelEditor ref={ref=>graphController.labelEditorElement=ref}\n      inputController={inputController}\n      graphController={graphController}\n      machineController={machineController}\n      screen={screen}/> }\n    {\n      tester.getStepByStepMode() ?\n      <div className=\"anchor-bottom-left\" style={{width: \"100%\"}}>\n        <TestTray tester={tester} graphController={graphController}/>\n      </div>\n      :\n      <span>\n        <div className=\"anchor-bottom-left\" style={{width: \"100%\"}}>\n          <CursorMode inputController={inputController} graphController={graphController}/>\n        </div>\n        <div className=\"anchor-bottom-right\">\n          <TrashCan inputController={inputController} viewport={parent}/>\n        </div>\n      </span>\n    }\n    </span>;\n  }\n}\nexport default ViewportRenderer;\n","import React from 'react';\nimport './TrashCan.css';\n\nimport Viewport from './Viewport.js';\n\nclass TrashCan extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.state = {\n      staticTrash: false\n    };\n  }\n\n  onTrashEnter(e)\n  {\n    if (this.state.staticTrash) return;\n    this.props.inputController.setTrashMode(true);\n\n    //Enable mode: dangerous\n    this.props.viewport.setState((prev, props) => {\n      return {mode: Viewport.DANGEROUS};\n    });\n  }\n\n  onTrashLeave(e)\n  {\n    if (this.state.staticTrash) return;\n    this.props.inputController.setTrashMode(false);\n\n    //Disable mode: dangerous\n    this.props.viewport.setState((prev, props) => {\n      return {mode: Viewport.NORMAL};\n    });\n  }\n\n  onTrashClick(e)\n  {\n    e.stopPropagation();\n    e.preventDefault();\n\n    this.setState((prev, props) => {\n      const result = !prev.staticTrash;\n      this.props.inputController.setTrashMode(result);\n\n      //Enable mode: dangerous\n      this.props.viewport.setState((prev, props) => {\n        return {mode: result ? Viewport.DANGEROUS : Viewport.NORMAL};\n      })\n\n      return {\n        staticTrash: result\n      };\n    });\n  }\n\n  render()\n  {\n    const inputController = this.props.inputController;\n    const inputAdapter = inputController.getInputAdapter();\n\n    return <svg id=\"trash-btn\"\n      className={(inputController.isTrashMode() ? \"danger \" : \"\") +\n        (inputAdapter.isUsingTouch() && inputAdapter.isDragging() ? \"hidden\" : \"\")}\n      width=\"24\" height=\"24\"\n      viewBox=\"0 0 24 24\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      onMouseEnter={this.onTrashEnter.bind(this)}\n      onMouseLeave={this.onTrashLeave.bind(this)}\n      onClick={this.onTrashClick.bind(this)}>\n      <path d={\"M3 6v18h18v-18h-18zm5 14c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 \" +\n      \"1-1s1 .448 1 1v10zm5 0c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 \" +\n      \"1v10zm5 0c0 .552-.448 1-1 1s-1-.448-1-1v-10c0-.552.448-1 1-1s1 .448 1 \" +\n      \"1v10zm4-18v2h-20v-2h5.711c.9 0 1.631-1.099 1.631-2h5.315c0 .901.73 2 1.631 2h5.712z\"}/>\n    </svg>;\n  }\n}\n\nexport default TrashCan;\n","import React from 'react';\nimport './TestTray.css';\n\nimport IconButton from 'icons/IconButton.js';\nimport PlayIcon from 'icons/PlayIcon.js';\nimport PauseIcon from 'icons/PauseIcon.js';\nimport StopIcon from 'icons/StopIcon.js';\nimport UndoIcon from 'icons/UndoIcon.js';\nimport RedoIcon from 'icons/RedoIcon.js';\n\nconst MAX_STRING_PREV_LENGTH = 2;\nconst MAX_ELLIPSIS_COUNT = 3;\n\nclass TestTray extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    const graphController = this.props.graphController;\n    const tester = this.props.tester;\n    const testList = this.props.tester.inputList;\n    const testMode = this.props.tester.testMode;\n    const testInput = testList.getCurrentInput();\n    const testIndex = testMode.getCurrentTestStringIndex();\n\n    return <div className=\"test-tray-container\">\n      <div className=\"test-tray-input-string-container\">\n      {\n        testInput && testIndex >= 0 &&\n        testInput.value.split('').map((e, i) => {\n          const testOffset = testIndex - i;\n          if (testOffset > MAX_ELLIPSIS_COUNT + MAX_STRING_PREV_LENGTH) return;\n          if (testOffset > MAX_STRING_PREV_LENGTH)\n          {\n            return <span key={e + \".\" + i} className=\"test-tray-input-placeholder\">.</span>;\n          }\n          return <span key={e + \".\" + i}\n            className={\"test-tray-input-char\" +\n            (testIndex == i ? \" active\" : \"\")}>\n            {e}\n            </span>;\n        })\n      }\n      </div>\n      <div className=\"test-tray-control\">\n\n        <IconButton onClick={(e)=>{\n          testMode.onResume();\n        }} disabled={testMode.isRunning()}>\n          <PlayIcon/>\n        </IconButton>\n\n        <IconButton onClick = {(e)=>{\n          testMode.onPause();\n        }} disabled={!testMode.isRunning()}>\n          <PauseIcon/>\n        </IconButton>\n\n        <IconButton onClick = {(e)=>{\n          testMode.onPreviousStep();\n          /*if (testMode.targets.length > 0)\n          {\n            graphController.focusOnNodes(testMode.targets);\n          }*/\n        }} disabled={!testMode.hasPrevStep() || testMode.isSkipping()}>\n          <UndoIcon/>\n        </IconButton>\n\n        <IconButton onClick = {(e)=>{\n          testMode.onNextStep();\n          /*if (testMode.targets.length > 0)\n          {\n            graphController.focusOnNodes(testMode.targets);\n          }*/\n        }} disabled={!tester.testMode.hasNextStep() || testMode.isSkipping()}>\n          <RedoIcon/>\n        </IconButton>\n\n        <IconButton onClick={(e)=>{\n          tester.setStepByStepMode(false);\n        }}>\n          <StopIcon/>\n        </IconButton>\n\n        <div className=\"trash-placeholder\">{/*PLACEHOLDER for TRASH*/}</div>\n      </div>\n    </div>;\n  }\n}\n\nexport default TestTray;\n","import React from 'react';\n\nclass PlayIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"play-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path d=\"M8 5v14l11-7z\"/>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n    </svg>;\n  }\n}\n\nexport default PlayIcon;\n","import React from 'react';\n\nclass PauseIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"pause-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path d=\"M6 19h4V5H6v14zm8-14v14h4V5h-4z\"/>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n    </svg>;\n  }\n}\n\nexport default PauseIcon;\n","import React from 'react';\n\nclass StopIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"stop-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n      <path d=\"M6 6h12v12H6z\"/>\n    </svg>;\n  }\n}\n\nexport default StopIcon;\n","import React from 'react';\nimport './CursorMode.css';\n\nimport IconButton from 'icons/IconButton.js';\nimport CreateIcon from 'icons/CreateIcon.js';\nimport MoveIcon from 'icons/MoveIcon.js';\n\nclass CursorMode extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    const inputController = this.props.inputController;\n    const graphController = this.props.graphController;\n    const actionMode = inputController.isActionMode(graphController);\n\n    return <div id=\"cursor-btn\">\n      <IconButton id=\"action-mode\" className={actionMode ? \"active\" : \"\"}\n        onClick={() => inputController.setInputScheme(true)}\n        title={I18N.toString(\"cursor.actionmode\")}>\n        <CreateIcon/>\n      </IconButton>\n      <IconButton id=\"move-mode\" className={!actionMode ? \"active\" : \"\"}\n        onClick={() => inputController.setInputScheme(false)}\n        title={I18N.toString(\"cursor.movemode\")}>\n        <MoveIcon/>\n      </IconButton>\n    </div>;\n  }\n}\n\nexport default CursorMode;\n","import React from 'react';\n\nclass CreateIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"create-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path d=\"M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z\"/>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n    </svg>;\n  }\n}\n\nexport default CreateIcon;\n","import React from 'react';\n\nclass MoveIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"move-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n      <path d=\"M13,6V11H18V7.75L22.25,12L18,16.25V13H13V18H16.25L12,22.25L7.75,18H11V13H6V16.25L1.75,12L6,7.75V11H11V6H7.75L12,1.75L16.25,6H13Z\" />\n    </svg>;\n  }\n}\n\nexport default MoveIcon;\n","import Config from 'config.js';\n\nimport MachineBuilder from './MachineBuilder.js';\nimport DFAErrorChecker from './DFAErrorChecker.js';\nimport NFAErrorChecker from './NFAErrorChecker.js';\nimport DFA from 'machine/DFA.js';\nimport NFA from 'machine/NFA.js';\nimport Node from 'modules/fsa/graph/FSANode.js';\nimport { SYMBOL_SEPARATOR } from 'modules/fsa/graph/FSAEdge.js';\nimport { EMPTY } from 'machine/Symbols.js';\n\nclass FSABuilder extends MachineBuilder\n{\n  constructor(graph)\n  {\n    super(graph);\n\n    this._machine = new NFA();\n    this._machineType = \"DFA\";\n    this._machineValidDFA = false;\n    this._alphabet = [];\n    this._symbols = [];\n\n    this._savedGraphHash = 0;\n\n    this._timer = null;\n    this._errorTimer = null;\n\n    this.machineErrorChecker = new DFAErrorChecker(this, graph);\n    this.tester = null;\n\n    this.graphController = null;\n    this.machineController = null;\n\n    this.onGraphChange = this.onGraphChange.bind(this);\n    this.onDelayedGraphChange = this.onDelayedGraphChange.bind(this);\n    this.onDelayedErrorCheck = this.onDelayedErrorCheck.bind(this);\n  }\n\n  initialize(module)\n  {\n    super.initialize(module);\n\n    this.tester = module.getTestingManager();\n    this.graphController = module.getGraphController();\n    this.machineController = module.getMachineController();\n\n    this._savedGraphHash = this.graph.getHashCode(false);\n    this.onGraphChange();\n  }\n\n  destroy()\n  {\n    this._savedGraphHash = this.graph.getHashCode(false);\n    this.onGraphChange();\n\n    super.destroy();\n  }\n\n  update()\n  {\n    const graphHash = this.graph.getHashCode(false);\n    if (graphHash !== this._savedGraphHash)\n    {\n      this._savedGraphHash = graphHash;\n      this.onGraphChange(this.graph);\n    }\n  }\n\n  onGraphChange(graph)\n  {\n    if (!this.tester) return;\n\n    if (this._timer)\n    {\n      clearTimeout(this._timer);\n      this._timer = null;\n    }\n\n    if (this._errorTimer)\n    {\n      clearTimeout(this._errorTimer);\n      this._errorTimer = null;\n    }\n\n    this._timer = setTimeout(this.onDelayedGraphChange, Config.GRAPH_IMMEDIATE_INTERVAL);\n    this._errorTimer = setTimeout(this.onDelayedErrorCheck,\n      this.tester.isImmediateErrorCheck ? (Config.GRAPH_IMMEDIATE_INTERVAL * 2) : Config.ERROR_CHECK_INTERVAL);\n  }\n\n  onDelayedGraphChange()\n  {\n    this._machine.clear();\n    const result = this.toNFA(this._machine);\n    for(const s of this._symbols)\n    {\n      this._machine.newSymbol(s);\n    }\n    this._machineValidDFA = this._machine.isValidDFA();\n  }\n\n  onDelayedErrorCheck()\n  {\n    if (!this.tester.shouldCheckError) return;\n\n    this.machineErrorChecker.checkErrors(true, this.graphController, this.machineController);\n  }\n\n  formatAlphabetString(string, allowNull=false)\n  {\n    const symbols = string.split(SYMBOL_SEPARATOR);\n    const result = new Set();\n\n    let symbol = \"\";\n    let symbolLength = 0;\n    const length = symbols.length;\n    for(let i = 0; i < length; ++i)\n    {\n      symbol = symbols[i].trim();\n      symbolLength = symbol.length;\n      //If the symbol has none or more than 1 char\n      if (symbolLength !== 1)\n      {\n        //Remove symbol (by not adding to result)\n\n        //Divide multi-char symbol into smaller single char symbols\n        if (symbolLength > 1)\n        {\n          for(let subsymbol of symbol.split(\"\"))\n          {\n            subsymbol = subsymbol.trim();\n            if (!result.has(subsymbol))\n            {\n              result.add(subsymbol);\n            }\n          }\n        }\n      }\n      else\n      {\n        result.add(symbol);\n      }\n    }\n\n    //If it is an empty string...\n    if (result.size <= 0) return allowNull ? null : EMPTY;\n    return Array.from(result).join(SYMBOL_SEPARATOR);\n  }\n\n  setMachineType(machineType)\n  {\n    if (this._machineType == machineType) return;\n\n    this._machineType = machineType;\n    if (machineType == \"DFA\")\n    {\n      this.machineErrorChecker = new DFAErrorChecker(this, this.graph);\n    }\n    else if (machineType == \"NFA\")\n    {\n      this.machineErrorChecker = new NFAErrorChecker(this, this.graph);\n    }\n    else\n    {\n      throw new Error(\"Cannot find error checker for machine type \\'\" + machineType + \"\\'\");\n    }\n\n    this.onGraphChange();\n  }\n\n  getMachineType()\n  {\n    return this._machineType;\n  }\n\n  addCustomSymbol(symbol)\n  {\n    this._symbols.push(symbol);\n\n    this.onGraphChange();\n  }\n\n  removeCustomSymbol(symbol)\n  {\n    this._symbols.splice(this._symbols.indexOf(symbol), 1);\n\n    this.onGraphChange();\n  }\n\n  renameCustomSymbol(prevSymbol, nextSymbol)\n  {\n    const i = this._symbols.indexOf(prevSymbol);\n    if (i <= 0) throw new Error(\"Trying to rename unknown symbol \\'\" + prevSymbol + \"\\'\");\n    this._symbols[i] = nextSymbol;\n\n    this.onGraphChange();\n  }\n\n  isCustomSymbol(symbol)\n  {\n    return this._symbols.includes(symbol);\n  }\n\n  getAlphabet()\n  {\n    const machine = this.getMachine();\n    this._alphabet.length = 0;\n    machine.getAlphabet(this._alphabet);\n    return this._alphabet;\n  }\n\n  isValidMachine()\n  {\n    if (this._machineType == \"DFA\")\n    {\n      return this._machineValidDFA;\n    }\n    else\n    {\n      return true;\n    }\n  }\n\n  toDFA(dst = null)\n  {\n    const result = dst || new DFA();\n    if (!(result instanceof DFA))\n      throw new Error(\"Trying to parse graph mismatched machine type.\");\n    fillFSA(this.graph, result);\n    return result;\n  }\n\n  toNFA(dst=null)\n  {\n    const result = dst || new NFA();\n    if (!(result instanceof NFA))\n      throw new Error(\"Trying to parse graph mismatched machine type.\");\n    fillFSA(this.graph, result);\n    return result;\n  }\n\n  getMachine()\n  {\n    return this._machine;\n  }\n}\n\nfunction fillFSA(graph, fsa)\n{\n  if (graph.getNodes().length <= 0) return fsa;\n  //Create all the nodes\n  for(const node of graph.getNodes())\n  {\n    try\n    {\n      let state = node.getNodeLabel();\n      fsa.newState(state);\n\n      //Set final state\n      if (node.getNodeAccept())\n      {\n        fsa.setFinalState(state, true);\n      }\n    }\n    catch(e)\n    {\n      throw e;\n    }\n  }\n\n  //Create all the edges\n  for(const edge of graph.getEdges())\n  {\n    //Ignore any incomplete edges\n    if (edge.isPlaceholder()) continue;\n    const from = edge.getSourceNode();\n    const to = edge.getDestinationNode();\n    if (from instanceof Node && to instanceof Node)\n    {\n      const labels = edge.getEdgeSymbolsFromLabel();\n      for(const label of labels)\n      {\n        try\n        {\n          fsa.newTransition(from.getNodeLabel(), to.getNodeLabel(), label);\n        }\n        catch(e)\n        {\n          throw e;\n        }\n      }\n    }\n  }\n\n  //Set start state\n  let startState = graph.getStartNode().getNodeLabel();\n  fsa.setStartState(startState);\n\n  return fsa;\n}\n\nexport default FSABuilder;\n","import Config from 'config.js';\nimport MachineLabeler from './MachineLabeler.js';\n\nconst DEFAULT_AUTO_RENAME = true;\n\nclass MachineBuilder\n{\n  constructor(graph)\n  {\n    this.graph = graph;\n    this.graphController = null;\n\n    this.labeler = new MachineLabeler(graph);\n\n    this.onGraphNodeLabelChange = this.onGraphNodeLabelChange.bind(this);\n  }\n\n  initialize(module)\n  {\n    this.graphController = module.getGraphController();\n\n    this.setAutoRenameNodes(DEFAULT_AUTO_RENAME);\n  }\n\n  destroy()\n  {\n\n  }\n\n  onGraphNodeLabelChange(graph, node, targetNodes, prevX, prevY)\n  {\n    this.labeler.sortDefaultNodeLabels();\n  }\n\n  setAutoRenameNodes(enable)\n  {\n    const prev = this.labeler.shouldAutoLabel;\n    this.labeler.shouldAutoLabel = enable;\n    if (prev != enable && enable)\n    {\n      this.graphController.on(\"userDeleteNodes\", this.onGraphNodeLabelChange);\n    }\n    else\n    {\n      this.graphController.removeEventListener(\"userDeleteNodes\", this.onGraphNodeLabelChange);\n    }\n  }\n\n  shouldAutoRenameNodes()\n  {\n    return this.labeler.shouldAutoLabel;\n  }\n\n  getLabeler()\n  {\n    return this.labeler;\n  }\n}\n\nexport default MachineBuilder;\n","import Config from 'config.js';\n\nclass MachineLabeler\n{\n  constructor(graph)\n  {\n    this.graph = graph;\n    this.prefix = Config.STR_STATE_LABEL;\n\n    //TODO: this is hooked into the controller in module\n    this.shouldAutoLabel = false;\n  }\n\n  sortDefaultNodeLabels()\n  {\n    const startNode = this.graph.getStartNode();\n    if (!startNode) return;\n    const isDefaultInitial = !startNode.getNodeCustom();\n\n    const defaultNodes = [];\n    const customLabels = [];\n    for(const node of this.graph.getNodes())\n    {\n      if (node.getNodeCustom())\n      {\n        customLabels.push(node.getNodeLabel());\n      }\n      else\n      {\n        defaultNodes.push(node);\n      }\n    }\n\n    let index = isDefaultInitial ? 0 : 1;\n    for(const node of defaultNodes)\n    {\n      let defaultName = null;\n      while(customLabels.includes(\n        defaultName = this.getDefaultNodeLabelByIndex(index++))) {}\n\n      node.setNodeLabel(defaultName);\n    }\n  }\n\n  getNextDefaultNodeLabel()\n  {\n    //if (!this.shouldAutoLabel) return this.prefix;\n\n    let nodeIndex = 0;\n    let result = this.getDefaultNodeLabelByIndex(nodeIndex);\n    while(!this.isUniqueNodeLabel(result))\n    {\n      ++nodeIndex;\n      result = this.getDefaultNodeLabelByIndex(nodeIndex);\n    }\n    return result;\n  }\n\n  getDefaultNodeLabelByIndex(index)\n  {\n    return this.prefix + (index);\n  }\n\n  isUniqueNodeLabel(newLabel)\n  {\n    for(const node of this.graph.getNodes())\n    {\n      if (node.getNodeLabel() == newLabel)\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n\nexport default MachineLabeler;\n","import React from 'react';\n\nclass StateMissingTransitionErrorMessage extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.targetIndex = 0;\n    this.targetLabel = \"\";\n    const targets = props.message.value.targets;\n    for(const target of targets)\n    {\n      if (this.targetLabel.length > 0)\n      {\n        this.targetLabel += \", \";\n      }\n      this.targetLabel += target.getNodeLabel();\n    }\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick(e)\n  {\n    const graphController = this.props.graphController;\n    const machineController = this.props.machineController;\n    const buttonValue = e.target.value;\n    const message = this.props.message;\n    switch(buttonValue)\n    {\n      case \"locate\":\n      {\n        const targets = message.value.targets;\n        const targetLength = targets.length;\n        if (targetLength > 0 && this.targetIndex < targetLength)\n        {\n          //Locate the target edge\n          const target = targets[this.targetIndex++];\n          if (this.targetIndex >= targetLength) this.targetIndex = 0;\n\n          //Move pointer to target\n          graphController.focusOnNode(target);\n        }\n      }\n      break;\n      default:\n        throw new Error(\"Unknown button value for message\");\n    }\n  }\n\n  //Override\n  render()\n  {\n    return <div>\n      <p>{I18N.toString(\"message.error.missing\") + \": \" + this.targetLabel}</p>\n      <button value=\"locate\" onClick={this.onClick}>{I18N.toString(\"message.action.locate\")}</button>\n    </div>;\n  }\n}\n\nexport default StateMissingTransitionErrorMessage;\n","import Config from 'config.js';\nimport { EMPTY } from 'machine/Symbols.js';\n\nimport Notifications from 'system/notification/Notifications.js';\nimport StateUnreachableWarningMessage from 'modules/fsa/notifications/StateUnreachableWarningMessage.js';\nimport TransitionErrorMessage from 'modules/fsa/notifications/TransitionErrorMessage.js';\n\nclass NFAErrorChecker\n{\n  constructor(machineBuilder, graph)\n  {\n    this.machineBuilder = machineBuilder;\n    this.graph = graph;\n\n    this.errorNodes = [];\n    this.errorEdges = [];\n    this.warningNodes = [];\n    this.warningEdges = [];\n  }\n\n  clear()\n  {\n    this.errorNodes.length = 0;\n    this.errorEdges.length = 0;\n    this.warningNodes.length = 0;\n    this.warningEdges.length = 0;\n  }\n\n  checkErrors(shouldNotifyErrors=false, graphController=null, machineController=null)\n  {\n    const machine = this.machineBuilder.getMachine();\n    const graph = this.graph;\n    const alphabet = machine.getAlphabet();\n    const errorNodes = this.errorNodes;\n    const errorEdges = this.errorEdges;\n    const warnNodes = this.warningNodes;\n    const warnEdges = this.warningEdges;\n    this.clear();\n\n    let nodeTransitionMap = new Map();\n    let unReachedNode = graph.getNodes().slice();\n    let startNode = graph.getStartNode();\n    unReachedNode.splice(unReachedNode.indexOf(startNode),1);\n\n    const placeholderEdges = [];\n    const emptyEdges = [];\n    const dupeEdges = [];\n    for(const edge of graph.getEdges())\n    {\n      //check incomplete edges\n      if (edge.isPlaceholder())\n      {\n        //Update cached error targets\n        placeholderEdges.push(edge);\n        if (errorEdges.indexOf(edge) == -1) errorEdges.push(edge);\n      }\n      else\n      {\n        const from = edge.getSourceNode();\n        const to = edge.getDestinationNode();\n        const labels = edge.getEdgeSymbolsFromLabel();\n\n        for(const label of labels)\n        {\n          //remove to from unReachedNode list\n          if (unReachedNode.includes(to)) unReachedNode.splice(unReachedNode.indexOf(to),1);\n        }\n      }\n    }\n\n    //check disconnect states\n    for (const node of unReachedNode)\n    {\n      if (warnNodes.indexOf(node) == -1) warnNodes.push(node);\n    }\n\n    const result = !(errorNodes.length == 0 && errorEdges.length == 0 &&\n      warnNodes.length == 0 && warnEdges.length == 0);\n\n    //Callbacks for all collected errors\n    const messageTag = Config.MACHINE_ERRORS_MESSAGE_TAG;\n    //Clear the existing messages\n    Notifications.clearMessages(messageTag);\n\n    //No errors!\n    if (!result)\n    {\n      Notifications.addMessage(I18N.toString(\"message.error.none\"), \"success\", messageTag, null, null, false);\n    }\n    //There are some errors/warnings...\n    else\n    {\n      const props = {graphController: graphController, machineController: machineController};\n\n      //Add new warning messages\n      if (unReachedNode.length > 0)\n      {\n        Notifications.addMessage(unReachedNode,\n          \"warning\", messageTag, StateUnreachableWarningMessage, props, false);\n      }\n\n      //Add new error messages\n      if (placeholderEdges.length > 0)\n      {\n        Notifications.addMessage({text: I18N.toString(\"message.error.incomplete\"), targets: placeholderEdges},\n          \"error\", messageTag, TransitionErrorMessage, props, false);\n      }\n    }\n\n    return result;\n  }\n\n  getUnreachableNodes() {\n\n    const graph = this.graph;\n\n    let unReachedNodes = graph.getNodes().slice();\n\n    //keep start state\n    //unReachedNodes.splice(unReachedNodes.indexOf(unReachedNode.getStartNode()), 1);\n    for(const edge of graph.getEdges()) {\n      const labels = edge.label.split(\",\");\n      for(const label of labels) {\n\n        const from = edge.from;\n        const to = edge.to;\n        //remove to from unReachedNode list\n        if(unReachedNodes.includes(to)) unReachedNodes.splice(unReachedNodes.indexOf(to),1);\n      }\n    }\n    return unReachedNodes;\n  }\n}\n\nexport default NFAErrorChecker;\n","import GraphNodeInitialEventHandler from './controller/events/GraphNodeInitialEventHandler.js';\nimport GraphNodeMoveEventHandler from './controller/events/GraphNodeMoveEventHandler.js';\nimport GraphNodeMoveAllEventHandler from './controller/events/GraphNodeMoveAllEventHandler.js';\nimport GraphEdgeMoveEventHandler from './controller/events/GraphEdgeMoveEventHandler.js';\nimport GraphEdgeDestinationEventHandler from './controller/events/GraphEdgeDestinationEventHandler.js';\nimport GraphEdgeLabelEventHandler from './controller/events/GraphEdgeLabelEventHandler.js';\n\nimport UserCreateNodeEventHandler from './controller/events/UserCreateNodeEventHandler.js';\nimport UserToggleNodeEventHandler from './controller/events/UserToggleNodeEventHandler.js';\nimport UserDeleteNodesEventHandler from './controller/events/UserDeleteNodesEventHandler.js';\nimport UserRenameNodeEventHandler from './controller/events/UserRenameNodeEventHandler.js';\n\nimport UserCreateEdgeEventHandler from './controller/events/UserCreateEdgeEventHandler.js';\nimport UserDeleteEdgeEventHandler from './controller/events/UserDeleteEdgeEventHandler.js';\nimport UserImportGraphEventHandler from './controller/events/UserImportGraphEventHandler.js';\nimport SafeGraphEventHandler from './controller/events/SafeGraphEventHandler.js';\n\nimport UserChangeMachineEventHandler from './controller/events/UserChangeMachineEventHandler.js';\nimport UserConvertMachineEventHandler from './controller/events/UserConvertMachineEventHandler.js';\nimport UserRenameMachineEventHandler from './controller/events/UserRenameMachineEventHandler.js';\nimport UserRenameSymbolEventHandler from './controller/events/UserRenameSymbolEventHandler.js';\nimport UserDeleteSymbolEventHandler from './controller/events/UserDeleteSymbolEventHandler.js';\n\nclass EventManager\n{\n  constructor(undoManager)\n  {\n    this.graphController = null;\n    this.machineController = null;\n\n    this.eventHandlers = [];\n\n    this.undoManager = undoManager;\n  }\n\n  initialize(module)\n  {\n    this.graphController = module.getGraphController();\n    this.machineController = module.getMachineController();\n\n    const graph = this.graphController.getGraph();\n    const events = this.undoManager;\n\n    this.eventHandlers.push(new GraphNodeMoveEventHandler(events, this.graphController));\n    this.eventHandlers.push(new GraphNodeMoveAllEventHandler(events, this.graphController));\n    this.eventHandlers.push(new GraphEdgeMoveEventHandler(events, this.graphController));\n    this.eventHandlers.push(new GraphEdgeDestinationEventHandler(events, this.graphController));\n    this.eventHandlers.push(new GraphNodeInitialEventHandler(events, this.graphController));\n    this.eventHandlers.push(new GraphEdgeLabelEventHandler(events, this.graphController));\n\n    this.eventHandlers.push(new UserCreateNodeEventHandler(events, this.graphController));\n    this.eventHandlers.push(new UserRenameNodeEventHandler(events, this.graphController));\n    this.eventHandlers.push(new UserToggleNodeEventHandler(events, this.graphController));\n    this.eventHandlers.push(new UserDeleteNodesEventHandler(events, this.graphController));\n\n    this.eventHandlers.push(new UserCreateEdgeEventHandler(events, this.graphController));\n    this.eventHandlers.push(new UserDeleteEdgeEventHandler(events, this.graphController));\n\n    this.eventHandlers.push(new UserImportGraphEventHandler(events, this.graphController, this.machineController));\n    this.eventHandlers.push(new SafeGraphEventHandler(events, this.graphController, \"userPreChangeLayout\", \"userPostChangeLayout\"));\n\n    this.eventHandlers.push(new UserChangeMachineEventHandler(events, this.machineController));\n    this.eventHandlers.push(new UserConvertMachineEventHandler(events, this.machineController, this.graphController));\n    this.eventHandlers.push(new UserRenameMachineEventHandler(events, this.machineController));\n    this.eventHandlers.push(new UserRenameSymbolEventHandler(events, this.machineController, this.graphController));\n    this.eventHandlers.push(new UserDeleteSymbolEventHandler(events, this.machineController, this.graphController));\n  }\n\n  destroy()\n  {\n    for(const handler of this.eventHandlers)\n    {\n      handler.destroy();\n    }\n\n    //TODO: Remove all event listeners...\n    this.graphController.clearEventListeners();\n  }\n}\n\nexport default EventManager;\n","import EventHandler from './EventHandler.js';\n\nclass GraphEdgeDestinationEventHandler extends EventHandler\n{\n  constructor(eventLogger, graphController)\n  {\n    super(eventLogger, graphController, \"nodeInitial\");\n  }\n\n  //Override\n  captureEvent(graph, nextInitial, prevInitial)\n  {\n    return {\n      graph: graph,\n      nodeID: nextInitial.getGraphElementID(),\n      prevID: prevInitial.getGraphElementID()\n    };\n  }\n\n  //Override - this = event\n  applyUndo(e)\n  {\n    const graph = this.controller.getGraph();\n    const node = graph.getNodeByElementID(e.eventData.prevID);\n    if (!node) throw new Error(\"Unable to find target in graph\");\n\n    graph.setStartNode(node);\n  }\n\n  //Override - this = event\n  applyRedo(e)\n  {\n    const graph = this.controller.getGraph();\n    const node = graph.getNodeByElementID(e.eventData.nodeID);\n    if (!node) throw new Error(\"Unable to find target in graph\");\n\n    graph.setStartNode(node);\n  }\n}\nexport default GraphEdgeDestinationEventHandler;\n","import EventHandler from './EventHandler.js';\n\nclass GraphNodeMoveEventHandler extends EventHandler\n{\n  constructor(eventLogger, graphController)\n  {\n    super(eventLogger, graphController, \"nodeMove\");\n  }\n\n  //Override\n  captureEvent(graph, targetNode, nextX, nextY, prevX, prevY)\n  {\n    return {\n      graph: graph,\n      nodeID: targetNode.getGraphElementID(),\n      nextX: nextX,\n      nextY: nextY,\n      prevX: prevX,\n      prevY: prevY\n    };\n  }\n\n  //Override - this = event\n  applyUndo(e)\n  {\n    const graph = this.controller.getGraph();\n    const node = graph.getNodeByElementID(e.eventData.nodeID);\n    if (!node) throw new Error(\"Unable to find target in graph\");\n\n    node.x = e.eventData.prevX;\n    node.y = e.eventData.prevY;\n  }\n\n  //Override - this = event\n  applyRedo(e)\n  {\n    const graph = this.controller.getGraph();\n    const node = graph.getNodeByElementID(e.eventData.nodeID);\n    if (!node) throw new Error(\"Unable to find target in graph\");\n    \n    node.x = e.eventData.nextX;\n    node.y = e.eventData.nextY;\n  }\n}\nexport default GraphNodeMoveEventHandler;\n","import EventHandler from './EventHandler.js';\n\nclass GraphNodeMoveAllEventHandler extends EventHandler\n{\n  constructor(eventLogger, graphController)\n  {\n    super(eventLogger, graphController, \"nodeMoveAll\");\n  }\n\n  //Override\n  captureEvent(graph, nodes, dx, dy)\n  {\n    return {\n      graph: graph,\n      nodeIDs: nodes.map(e => e.getGraphElementID()),\n      dx: dx,\n      dy: dy\n    };\n  }\n\n  //Override - this = event\n  applyUndo(e)\n  {\n    const graph = this.controller.getGraph();\n    let node = null;\n    for(const nodeID of e.eventData.nodeIDs)\n    {\n      node = graph.getNodeByElementID(nodeID);\n      if (!node) throw new Error(\"Unable to find target in graph\");\n\n      node.x -= e.eventData.dx;\n      node.y -= e.eventData.dy;\n    }\n  }\n\n  //Override - this = event\n  applyRedo(e)\n  {\n    const graph = this.controller.getGraph();\n    let node = null;\n    for(const nodeID of e.eventData.nodeIDs)\n    {\n      node = graph.getNodeByElementID(nodeID);\n      if (!node) throw new Error(\"Unable to find target in graph\");\n\n      node.x += e.eventData.dx;\n      node.y += e.eventData.dy;\n    }\n  }\n}\nexport default GraphNodeMoveAllEventHandler;\n","import EventHandler from './EventHandler.js';\n\nclass GraphEdgeMoveEventHandler extends EventHandler\n{\n  constructor(eventLogger, graphController)\n  {\n    super(eventLogger, graphController, \"edgeMove\");\n  }\n\n  //Override\n  captureEvent(graph, targetEdge, nextQuad, prevQuad)\n  {\n    return {\n      graph: graph,\n      edgeID: targetEdge.getGraphElementID(),\n      nextQuad: Object.assign({}, nextQuad),\n      prevQuad: Object.assign({}, prevQuad)\n    };\n  }\n\n  //Override - this = event\n  applyUndo(e)\n  {\n    const graph = this.controller.getGraph();\n    const edge = graph.getEdgeByElementID(e.eventData.edgeID);\n    if (!edge) throw new Error(\"Unable to find target in graph\");\n\n    edge.setQuadratic(e.eventData.prevQuad.radians, e.eventData.prevQuad.length);\n  }\n\n  //Override - this = event\n  applyRedo(e)\n  {\n    const graph = this.controller.getGraph();\n    const edge = graph.getEdgeByElementID(e.eventData.edgeID);\n    if (!edge) throw new Error(\"Unable to find target in graph\");\n\n    edge.setQuadratic(e.eventData.nextQuad.radians, e.eventData.nextQuad.length);\n  }\n}\nexport default GraphEdgeMoveEventHandler;\n","import EventHandler from './EventHandler.js';\n\nclass GraphEdgeDestinationEventHandler extends EventHandler\n{\n  constructor(eventLogger, graphController)\n  {\n    super(eventLogger, graphController, \"edgeDestination\");\n  }\n\n  //Override\n  captureEvent(graph, targetEdge, nextDestination, prevDestination, prevQuad)\n  {\n    return {\n      graph: graph,\n      edgeID: targetEdge.getGraphElementID(),\n      nextDestination: nextDestination,\n      prevDestination: prevDestination,\n      nextQuad: Object.assign({}, targetEdge.getQuadratic()),\n      prevQuad: Object.assign({}, prevQuad),\n    };\n  }\n\n  //Override - this = event\n  applyUndo(e)\n  {\n    const graph = this.controller.getGraph();\n    const edge = graph.getEdgeByElementID(e.eventData.edgeID);\n    if (!edge) throw new Error(\"Unable to find target in graph\");\n\n    let radians = e.eventData.prevQuad.radians;\n    const length = e.eventData.prevQuad.length;\n\n    edge.changeDestinationNode(e.eventData.prevDestination);\n    //Flip them, since self loops are upside down\n    if (edge.isSelfLoop()) radians = -radians;\n    edge.setQuadratic(radians, length);\n  }\n\n  //Override - this = event\n  applyRedo(e)\n  {\n    const graph = this.controller.getGraph();\n    const edge = graph.getEdgeByElementID(e.eventData.edgeID);\n    if (!edge) throw new Error(\"Unable to find target in graph\");\n\n    let radians = e.eventData.nextQuad.radians;\n    const length = e.eventData.nextQuad.length;\n\n    edge.changeDestinationNode(e.eventData.nextDestination);\n    edge.setQuadratic(radians, length);\n  }\n}\nexport default GraphEdgeDestinationEventHandler;\n","import EventHandler from './EventHandler.js';\n\nclass GraphEdgeLabelEventHandler extends EventHandler\n{\n  constructor(eventLogger, graphController)\n  {\n    super(eventLogger, graphController, \"edgeLabel\");\n  }\n\n  //Override\n  captureEvent(graph, targetEdge, nextLabel, prevLabel)\n  {\n    return {\n      graph: graph,\n      edgeID: targetEdge.getGraphElementID(),\n      nextLabel: nextLabel,\n      prevLabel: prevLabel\n    };\n  }\n\n  //Override - this = event\n  applyUndo(e)\n  {\n    const graph = this.controller.getGraph();\n    const edge = graph.getEdgeByElementID(e.eventData.edgeID);\n    if (!edge) throw new Error(\"Unable to find target in graph\");\n\n    edge.setEdgeLabel(e.eventData.prevLabel);\n  }\n\n  //Override - this = event\n  applyRedo(e)\n  {\n    const graph = this.controller.getGraph();\n    const edge = graph.getEdgeByElementID(e.eventData.edgeID);\n    if (!edge) throw new Error(\"Unable to find target in graph\");\n\n    edge.setEdgeLabel(e.eventData.nextLabel);\n  }\n}\nexport default GraphEdgeLabelEventHandler;\n","import EventHandler from './EventHandler.js';\n\nclass UserCreateNodeEventHandler extends EventHandler\n{\n  constructor(eventLogger, graphController)\n  {\n    super(eventLogger, graphController, \"userPostCreateNode\");\n  }\n\n  //Override\n  captureEvent(graph, node)\n  {\n    return {\n      nodeID: node.getGraphElementID(),\n      x: node.x,\n      y: node.y,\n      accept: node.getNodeAccept(),\n      label: node.getNodeLabel(),\n      custom: node.getNodeCustom()\n    };\n  }\n\n  //Override - this = event\n  applyUndo(e)\n  {\n    const graph = this.controller.getGraph();\n    const node = graph.getNodeByElementID(e.eventData.nodeID);\n    if (!node) throw new Error(\"Unable to find target in graph\");\n\n    graph.deleteNode(node);\n  }\n\n  //Override - this = event\n  applyRedo(e)\n  {\n    const graph = this.controller.getGraph();\n    let node = graph.getNodeByElementID(e.eventData.nodeID);\n    if (!node)\n    {\n      node = graph.createNode(e.postData.x, e.postData.y, e.postData.nodeID);\n    }\n    else\n    {\n      node.x = e.postData.x;\n      node.y = e.postData.y;\n    }\n    node.setNodeLabel(e.postData.label);\n    node.setNodeAccept(e.postData.accept);\n    node.setNodeCustom(e.postData.custom);\n  }\n}\nexport default UserCreateNodeEventHandler;\n","import EventHandler from './EventHandler.js';\n\nclass UserToggleNodeEventHandler extends EventHandler\n{\n  constructor(eventLogger, graphController)\n  {\n    super(eventLogger, graphController, \"userToggleNode\");\n  }\n\n  //Override\n  captureEvent(graph, node, prevAccept)\n  {\n    return {\n      nodeID: node.getGraphElementID(),\n      prevAccept: prevAccept\n    };\n  }\n\n  //Override - this = event\n  applyUndo(e)\n  {\n    const graph = this.controller.getGraph();\n    const node = graph.getNodeByElementID(e.eventData.nodeID);\n    if (!node) throw new Error(\"Unable to find target in graph\");\n\n    node.setNodeAccept(e.eventData.prevAccept);\n  }\n\n  //Override - this = event\n  applyRedo(e)\n  {\n    const graph = this.controller.getGraph();\n    const node = graph.getNodeByElementID(e.eventData.nodeID);\n    if (!node) throw new Error(\"Unable to find target in graph\");\n\n    node.setNodeAccept(!e.eventData.prevAccept);\n  }\n}\nexport default UserToggleNodeEventHandler;\n","import EventHandler from './EventHandler.js';\n\nimport * as FSAGraphParser from 'modules/fsa/graph/FSAGraphParser.js';\n\nclass UserDeleteNodesEventHandler extends EventHandler\n{\n  constructor(eventLogger, graphController)\n  {\n    super(eventLogger, graphController, \"userPreDeleteNodes\", \"userPostDeleteNodes\");\n  }\n\n  //Override\n  captureEvent(graph, node, targetNodes, prevX, prevY)\n  {\n    const targets = [];\n    for(const target of targetNodes)\n    {\n      targets.push(target.getGraphElementID());\n    }\n    const dx = node.x - prevX;\n    const dy = node.y - prevY;\n\n    return {\n      graphData: FSAGraphParser.JSON.objectify(graph),\n      targets: targets,\n      dx: dx,\n      dy: dy\n    };\n  }\n\n  //Override\n  capturePostEvent(graph, node, targetNodes, prevX, prevY)\n  {\n    return {\n      graphData: FSAGraphParser.JSON.objectify(graph)\n    };\n  }\n\n  //Override - this = event\n  applyUndo(e)\n  {\n    const graph = this.controller.getGraph();\n    FSAGraphParser.JSON.parse(e.eventData.graphData, this.controller.getGraph());\n    for(const targetID of e.eventData.targets)\n    {\n      const node = graph.getNodeByElementID(targetID);\n      if (!node) throw new Error(\"Unable to find target in graph\");\n\n      node.x -= e.eventData.dx;\n      node.y -= e.eventData.dy;\n    }\n  }\n\n  //Override - this = event\n  applyRedo(e)\n  {\n    FSAGraphParser.JSON.parse(e.postData.graphData, this.controller.getGraph());\n  }\n}\nexport default UserDeleteNodesEventHandler;\n","import EventHandler from './EventHandler.js';\n\nclass UserRenameNodeEventHandler extends EventHandler\n{\n  constructor(eventLogger, graphController)\n  {\n    super(eventLogger, graphController, \"userRenameNode\");\n  }\n\n  //Override\n  captureEvent(graph, node, nextLabel, prevLabel, isPrevCustom)\n  {\n    return {\n      node: node,\n      nodeID: node.getGraphElementID(),\n      nextLabel: nextLabel,\n      prevLabel: prevLabel,\n      prevCustom: isPrevCustom\n    };\n  }\n\n  //Override - this = event\n  applyUndo(e)\n  {\n    const graph = this.controller.getGraph();\n    const node = graph.getNodeByElementID(e.eventData.nodeID);\n    if (!node) throw new Error(\"Unable to find target in graph\");\n\n    node.setNodeLabel(e.eventData.prevLabel);\n    node.setNodeCustom(e.eventData.prevCustom);\n  }\n\n  //Override - this = event\n  applyRedo(e)\n  {\n    const graph = this.controller.getGraph();\n    const node = graph.getNodeByElementID(e.eventData.nodeID);\n    if (!node) throw new Error(\"Unable to find target in graph\");\n\n    node.setNodeLabel(e.eventData.nextLabel);\n    node.setNodeCustom(true);\n  }\n}\nexport default UserRenameNodeEventHandler;\n","import EventHandler from './EventHandler.js';\n\nclass UserCreateEdgeEventHandler extends EventHandler\n{\n  constructor(eventLogger, graphController)\n  {\n    super(eventLogger, graphController, \"userPostCreateEdge\");\n  }\n\n  //Override\n  captureEvent(graph, edge)\n  {\n    const edgeQuad = edge.getQuadratic();\n    return {\n      edge: edge,\n      edgeID: edge.getGraphElementID(),\n      fromID: edge.getSourceNode().getGraphElementID(),\n      toID: edge.getDestinationNode() ? edge.getDestinationNode().getGraphElementID() : null,\n      label: edge.getEdgeLabel(),\n      quad: { radians: edgeQuad.radians, length: edgeQuad.length }\n    };\n  }\n\n  //Override - this = event\n  applyUndo(e)\n  {\n    //TODO: when formatting edges change an edge different than this one, it does not revert them.\n    const graph = this.controller.getGraph();\n    const edge = graph.getEdgeByElementID(e.eventData.edgeID);\n    if (!edge) throw new Error(\"Unable to find target in graph\");\n\n    graph.deleteEdge(edge);\n  }\n\n  //Override - this = event\n  applyRedo(e)\n  {\n    const graph = this.controller.getGraph();\n    let edge = graph.getEdgeByElementID(e.postData.edgeID);\n\n    const from = graph.getNodeByElementID(e.postData.fromID);\n    if (!from) throw new Error(\"Trying to create a sourceless edge\");\n    const to = graph.getNodeByElementID(e.postData.toID) || null;\n\n    if (!edge)\n    {\n      edge = graph.createEdge(from, to, e.postData.edgeID);\n    }\n    else\n    {\n      edge.setSourceNode(from);\n      edge.changeDestinationNode(to);\n    }\n\n    edge.setEdgeLabel(e.postData.label);\n    edge.setQuadratic(e.postData.quad.radians, e.postData.quad.length);\n  }\n}\nexport default UserCreateEdgeEventHandler;\n","import EventHandler from './EventHandler.js';\n\nclass UserDeleteEdgeEventHandler extends EventHandler\n{\n  constructor(eventLogger, graphController)\n  {\n    super(eventLogger, graphController, \"userPreDeleteEdge\");\n  }\n\n  //Override\n  captureEvent(graph, edge, prevTo, prevQuad)\n  {\n    return {\n      edge: edge,\n      edgeID: edge.getGraphElementID(),\n      fromID: edge.getSourceNode().getGraphElementID(),\n      toID: prevTo ? prevTo.getGraphElementID() : null,\n      label: edge.getEdgeLabel(),\n      quad: Object.assign({}, prevQuad)\n    };\n  }\n\n  //Override - this = event\n  applyUndo(e)\n  {\n    const graph = this.controller.getGraph();\n    let edge = graph.getEdgeByElementID(e.eventData.edgeID);\n\n    const from = graph.getNodeByElementID(e.eventData.fromID);\n    if (!from) throw new Error(\"Trying to create a sourceless edge\");\n    const to = graph.getNodeByElementID(e.eventData.toID) || null;\n\n    if (!edge)\n    {\n      edge = graph.createEdge(from, to, e.eventData.edgeID);\n    }\n    else\n    {\n      edge.setSourceNode(from);\n      edge.changeDestinationNode(to);\n    }\n\n    edge.setEdgeLabel(e.eventData.label);\n    edge.setQuadratic(e.eventData.quad.radians, e.eventData.quad.length);\n  }\n\n  //Override - this = event\n  applyRedo(e)\n  {\n    const graph = this.controller.getGraph();\n    const edge = graph.getEdgeByElementID(e.eventData.edgeID);\n    if (!edge) throw new Error(\"Unable to find target in graph\");\n\n    graph.deleteEdge(edge);\n  }\n}\nexport default UserDeleteEdgeEventHandler;\n","import EventHandler from './EventHandler.js';\n\nimport * as FSAGraphParser from 'modules/fsa/graph/FSAGraphParser.js';\n\nclass UserImportGraphEventHandler extends EventHandler\n{\n  constructor(eventLogger, graphController, machineController)\n  {\n    super(eventLogger, graphController, \"userPreImportGraph\", \"userPostImportGraph\");\n\n    this.machineController = machineController;\n  }\n\n  //Override\n  captureEvent(graph)\n  {\n    return {\n      graphName: this.machineController.getMachineName(),\n      graphData: FSAGraphParser.JSON.objectify(graph)\n    };\n  }\n\n  //Override\n  capturePostEvent(graph)\n  {\n    return {\n      graphName: this.machineController.getMachineName(),\n      graphData: FSAGraphParser.JSON.objectify(graph)\n    };\n  }\n\n  //Override - this = event\n  applyUndo(e)\n  {\n    FSAGraphParser.JSON.parse(e.eventData.graphData, this.controller.getGraph());\n\n    this.machineController.setMachineName(e.eventData.graphName);\n  }\n\n  //Override - this = event\n  applyRedo(e)\n  {\n    FSAGraphParser.JSON.parse(e.postData.graphData, this.controller.getGraph());\n\n    this.machineController.setMachineName(e.postData.graphName);\n  }\n}\nexport default UserImportGraphEventHandler;\n","import EventHandler from './EventHandler.js';\n\nimport * as FSAGraphParser from 'modules/fsa/graph/FSAGraphParser.js';\n\nclass SafeGraphEventHandler extends EventHandler\n{\n  constructor(eventLogger, graphController, eventName, postEventName)\n  {\n    super(eventLogger, graphController, eventName, postEventName);\n  }\n\n  //Override\n  captureEvent(graph)\n  {\n    return {\n      graphData: FSAGraphParser.JSON.objectify(graph)\n    };\n  }\n\n  //Override\n  capturePostEvent(graph)\n  {\n    return {\n      graphData: FSAGraphParser.JSON.objectify(graph)\n    };\n  }\n\n  //Override - this = event\n  applyUndo(e)\n  {\n    FSAGraphParser.JSON.parse(e.eventData.graphData, this.controller.getGraph());\n  }\n\n  //Override - this = event\n  applyRedo(e)\n  {\n    FSAGraphParser.JSON.parse(e.postData.graphData, this.controller.getGraph());\n  }\n}\nexport default SafeGraphEventHandler;\n","import EventHandler from './EventHandler.js';\n\nclass UserChangeMachineEventHandler extends EventHandler\n{\n  constructor(eventLogger, machineController)\n  {\n    super(eventLogger, machineController, \"userChangeMachine\");\n  }\n\n  //Override\n  captureEvent(machineBuilder, nextMachineType, prevMachineType)\n  {\n    return {\n      prevType: prevMachineType,\n      nextType: nextMachineType\n    };\n  }\n\n  //Override - this = event\n  applyUndo(e)\n  {\n    this.controller.setMachineType(e.eventData.prevType);\n  }\n\n  //Override - this = event\n  applyRedo(e)\n  {\n    this.controller.setMachineType(e.postData.nextType);\n  }\n}\nexport default UserChangeMachineEventHandler;\n","import EventHandler from './EventHandler.js';\n\nimport * as FSAGraphParser from 'modules/fsa/graph/FSAGraphParser.js';\n\nclass UserConvertMachineEventHandler extends EventHandler\n{\n  constructor(eventLogger, machineController, graphController)\n  {\n    super(eventLogger, machineController, \"userPreConvertMachine\", \"userPostConvertMachine\");\n\n    this.graphController = graphController;\n  }\n\n  //Override\n  captureEvent(machineBuilder, nextMachineType, prevMachineType)\n  {\n    const graph = this.graphController.getGraph();\n\n    return {\n      graphData: FSAGraphParser.JSON.objectify(graph),\n      prevType: prevMachineType\n    };\n  }\n\n  //Override\n  capturePostEvent(machineBuilder, nextMachineType, prevMachineType)\n  {\n    const graph = this.graphController.getGraph();\n\n    return {\n      graphData: FSAGraphParser.JSON.objectify(graph),\n      nextType: nextMachineType\n    };\n  }\n\n  //Override - this = event\n  applyUndo(e)\n  {\n    FSAGraphParser.JSON.parse(e.eventData.graphData, this.graphController.getGraph());\n    this.controller.setMachineType(e.eventData.prevType);\n  }\n\n  //Override - this = event\n  applyRedo(e)\n  {\n    FSAGraphParser.JSON.parse(e.postData.graphData, this.graphController.getGraph());\n    this.controller.setMachineType(e.postData.nextType);\n  }\n}\nexport default UserConvertMachineEventHandler;\n","import EventHandler from './EventHandler.js';\n\nclass UserRenameMachineEventHandler extends EventHandler\n{\n  constructor(eventLogger, machineController)\n  {\n    super(eventLogger, machineController, \"userRenameMachine\");\n  }\n\n  //Override\n  captureEvent(machineBuilder, nextMachineName, prevMachineName)\n  {\n    return {\n      prevName: prevMachineName,\n      nextName: nextMachineName\n    };\n  }\n\n  //Override - this = event\n  applyUndo(e)\n  {\n    this.controller.setMachineName(e.eventData.prevName);\n  }\n\n  //Override - this = event\n  applyRedo(e)\n  {\n    this.controller.setMachineName(e.postData.nextName);\n  }\n}\nexport default UserRenameMachineEventHandler;\n","import EventHandler from './EventHandler.js';\n\nimport * as FSAGraphParser from 'modules/fsa/graph/FSAGraphParser.js';\n\nclass UserRenameSymbolEventHandler extends EventHandler\n{\n  constructor(eventLogger, machineController, graphController)\n  {\n    super(eventLogger, machineController, \"userPreRenameSymbol\", \"userPostRenameSymbol\");\n\n    this.graphController = graphController;\n  }\n\n  //Override\n  captureEvent(machineBuilder, symbol, prevSymbol)\n  {\n    const graph = this.graphController.getGraph();\n    return {\n      graphData: FSAGraphParser.JSON.objectify(graph),\n      symbol: symbol,\n      prevSymbol: prevSymbol\n    };\n  }\n\n  //Override\n  capturePostEvent(machineBuilder, symbol, prevSymbol, targets)\n  {\n    const graph = this.graphController.getGraph();\n    const targetIDs = [];\n\n    for(const target of targets)\n    {\n      targetIDs.push(target.getGraphElementID());\n    }\n\n    return {\n      graphData: FSAGraphParser.JSON.objectify(graph),\n      symbol: symbol,\n      prevSymbol: prevSymbol,\n      targets: targetIDs\n    };\n  }\n\n  //Override - this = event\n  applyUndo(e)\n  {\n    //TODO: restore machine custom alphabet\n    FSAGraphParser.JSON.parse(e.eventData.graphData, this.graphController.getGraph());\n  }\n\n  //Override - this = event\n  applyRedo(e)\n  {\n    //TODO: restore machine custom alphabet\n    FSAGraphParser.JSON.parse(e.postData.graphData, this.graphController.getGraph());\n  }\n}\nexport default UserRenameSymbolEventHandler;\n","import EventHandler from './EventHandler.js';\n\nimport * as FSAGraphParser from 'modules/fsa/graph/FSAGraphParser.js';\n\nclass UserDeleteSymbolEventHandler extends EventHandler\n{\n  constructor(eventLogger, machineController, graphController)\n  {\n    super(eventLogger, machineController, \"userPreDeleteSymbol\", \"userPostDeleteSymbol\");\n\n    this.graphController = graphController;\n  }\n\n  //Override\n  captureEvent(machineBuilder, symbol)\n  {\n    const graph = this.graphController.getGraph();\n    return {\n      graphData: FSAGraphParser.JSON.objectify(graph),\n      symbol: symbol\n    };\n  }\n\n  //Override\n  capturePostEvent(machineBuilder, symbol, targets)\n  {\n    const graph = this.graphController.getGraph();\n    const targetIDs = [];\n\n    for(const target of targets)\n    {\n      targetIDs.push(target.getGraphElementID());\n    }\n\n    return {\n      graphData: FSAGraphParser.JSON.objectify(graph),\n      symbol: symbol,\n      targets: targetIDs\n    };\n  }\n\n  //Override - this = event\n  applyUndo(e)\n  {\n    //TODO: restore machine custom alphabet\n    FSAGraphParser.JSON.parse(e.eventData.graphData, this.graphController.getGraph());\n  }\n\n  //Override - this = event\n  applyRedo(e)\n  {\n    //TODO: restore machine custom alphabet\n    FSAGraphParser.JSON.parse(e.postData.graphData, this.graphController.getGraph());\n  }\n}\nexport default UserDeleteSymbolEventHandler;\n","import React from 'react';\nimport './LabelEditor.css';\n\nimport Config from 'config.js';\nimport { SYMBOL_SEPARATOR, EMPTY_CHAR } from 'modules/fsa/graph/FSAEdge.js';\n\nimport FormattedInput from 'system/formattedinput/FormattedInput.js';\n\n//TODO: This is equivalent to 4em for toolbar height\nconst LABEL_OFFSET_Y = -64;\nconst EDITOR_OFFSET_Y = -36;\nconst DELETE_KEY = 8;\nconst DELETE_FORWARD_KEY = 46;\n\nconst RECOMMENDED_SYMBOLS = [\"0\", \"1\"];\nconst DEFAULT_SYMBOLS = [EMPTY_CHAR];\nconst DELETE_ON_EMPTY = true;\n\nclass LabelEditor extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.parentElement = null;\n    this.inputElement = null;\n\n    //HACK: this is so if the click is focused back to the label editor, then it will NOT close\n    this._timer = null;\n    this._prevValue = \"\";\n\n    this.state = {\n      target: null,\n      callback: null\n    };\n\n    this.onContextMenu = this.onContextMenu.bind(this);\n    this.onFormat = this.onFormat.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  openEditor(targetEdge, defaultText=null, replace=true, callback=null)\n  {\n    //If not yet initilized, ignore any editor access\n    if (!this.inputElement || !this.parentElement)\n    {\n      throw new Error(\"Trying to open editor that has not yet mounted\");\n    }\n\n    this.setState((prev, props) => {\n      return {\n        target: targetEdge,\n        callback: callback\n      };\n    });\n\n    this.inputElement.resetValue(targetEdge.getEdgeLabel(), () => {\n      if (defaultText) this.inputElement.setValue(defaultText);\n\n      this._prevValue = targetEdge.getEdgeLabel();\n      this.parentElement.focus();\n      this.inputElement.focus(replace);\n    });\n  }\n\n  closeEditor(saveOnExit=false)\n  {\n    //If not yet initilized, ignore any editor access\n    if (!this.inputElement || !this.parentElement)\n    {\n      throw new Error(\"Trying to open editor that has not yet mounted\");\n    }\n\n    //Save data\n    if (this.state.target !== null)\n    {\n      if (saveOnExit)\n      {\n        let value = this.inputElement.value;\n        this.state.target.setEdgeLabel(value);\n      }\n      else\n      {\n        if (!this.state.target.getEdgeLabel())\n        {\n          //Make sure its empty (and let edge handle default labels)\n          this.state.target.setEdgeLabel(null);\n\n          //Delete it since it is not a valid edge\n          if (DELETE_ON_EMPTY)\n          {\n            this.props.graphController.getGraph().deleteEdge(this.state.target);\n          }\n        }\n      }\n\n      this.setState({target: null});\n\n      if (this.state.callback) this.state.callback();\n    }\n\n    //Reset label editor\n    this.inputElement.blur();\n  }\n\n  hasFocus()\n  {\n    return this.inputElement.hasFocus();\n  }\n\n  isEditorOpen()\n  {\n    return this.state.target !== null;\n  }\n\n  onContextMenu(e)\n  {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  appendSymbol(symbol)\n  {\n    this.inputElement.appendValue(symbol, SYMBOL_SEPARATOR);\n    this.inputElement.focus(false);\n  }\n\n  onSubmit(newValue, prevValue)\n  {\n    //this._prevValue = newValue;\n    //If the value has changed or the value remained empty...\n    if (newValue != prevValue)\n    {\n      //this.closeEditor(true);\n    }\n    else\n    {\n      //TODO: This was commented out for some reason...\n      //Will close due to timer...\n      this.closeEditor(false);\n    }\n  }\n\n  onFormat(value)\n  {\n    //return this.props.machineController.getMachineBuilder().formatAlphabetString(value, false);\n    return this.props.machineController.getLabelFormatter().call(null, value, false);\n  }\n\n  render()\n  {\n    const inputController = this.props.inputController;\n    const viewport = inputController.getInputAdapter().getViewport();\n    const graphController = this.props.graphController;//This is used in closeEditor()\n    const machineController = this.props.machineController;//This is also used in callbacks\n    const screen = this.props.screen;\n\n    const targetStyle = {\n      visibility: \"hidden\"\n    };\n\n    const target = this.state.target;\n\n    if (target)\n    {\n      targetStyle.visibility = \"visible\";\n\n      //Assumes target is an instance of Edge\n      const center = target.getCenterPoint();\n      const screenPos = transformViewToScreen(screen,\n        center.x + viewport.getOffsetX(),\n        center.y + viewport.getOffsetY());\n      const x = screenPos.x;\n      const y = screenPos.y + LABEL_OFFSET_Y + EDITOR_OFFSET_Y;\n      const offsetX = -(this.parentElement.offsetWidth / 2);\n      const offsetY = -(this.parentElement.offsetHeight / 2);\n\n      targetStyle.top = (y + offsetY) + \"px\";\n      targetStyle.left = (x + offsetX) + \"px\";\n    }\n\n    const usedAlphabet = machineController.getMachineBuilder().getMachine().getAlphabet();\n\n    return <div className=\"bubble\" id=\"label-editor\" ref={ref=>this.parentElement=ref}\n      tabIndex={\"0\"/*This is to allow div's to focus/blur*/}\n      style={targetStyle}\n      onContextMenu={this.onContextMenu}\n      onFocus={(e)=>{\n        //HACK: delete the timer that will exit labelEditor\n        clearTimeout(this._timer);\n      }}\n      onBlur={(e)=>{\n        //HACK: start the timer that will exit labelEditor if not return focus\n        this._timer = setTimeout(() => this.closeEditor(true), 10);\n      }}>\n      <FormattedInput className=\"label-editor-input\" ref={ref=>this.inputElement=ref}\n        formatter={this.onFormat}\n        onSubmit={this.onSubmit}\n        captureOnExit={\"none\"}/>\n      <div className=\"label-editor-tray\">\n        {\n          usedAlphabet &&\n          <span className=\"label-editor-tray-used\">\n            {\n              usedAlphabet.map((e, i) => {\n                if (e.length < 1) return null;\n                return <button key={i} onClick={ev=>this.appendSymbol(e)}>{e}</button>\n              })\n            }\n          </span>\n        }\n        <span className=\"label-editor-tray-default\">\n          {\n            usedAlphabet &&\n            usedAlphabet.length <= 1 &&\n            RECOMMENDED_SYMBOLS.map((e, i) => {\n              return <button key={i} onClick={ev=>this.appendSymbol(e)}>\n              {e}\n              </button>;\n            })\n          }\n          {\n            DEFAULT_SYMBOLS.map((e, i) => {\n              return <button key={i} onClick={ev=>this.appendSymbol(e)}>\n              {e}\n              </button>;\n            })\n          }\n        </span>\n      </div>\n    </div>;\n  }\n}\n\nfunction transformViewToScreen(svg, x, y)\n{\n  const ctm = svg.getScreenCTM();\n  return {\n    x: (x * ctm.a) + ctm.e,\n    y: (y * ctm.d) + ctm.f\n  };\n}\n\nexport default LabelEditor;\n","import AbstractGraphExporter from 'modules/abstract/exporter/AbstractGraphExporter.js';\n\nimport JSONFileIcon from 'icons/flat/JSONIcon.js';\nimport { JSON as JSONGraphParser } from 'modules/fsa/graph/FSAGraphParser.js';\nimport { downloadText } from 'util/Downloader.js';\n\nclass FSAGraphExporter extends AbstractGraphExporter\n{\n  constructor() { super(); }\n\n  fromJSON(data, module)\n  {\n    const graphController = module.getGraphController();\n    const machineController = module.getMachineController();\n    const machineBuilder = machineController.getMachineBuilder();\n    const graph = graphController.getGraph();\n\n    const metadata = '_metadata' in data ? data['_metadata'] : {};\n    const newGraph = JSONGraphParser.parse(data.graphData, graph);\n\n    //HACK: this should be calculated elsewhere\n    const machineData = data.machineData;\n    const machineName = machineData.name;\n    if (machineName) machineController.setMachineName(machineName);\n    const machineType = machineData.type;\n    if (machineType) machineController.setMachineType(machineType);\n    const customSymbols = machineData.symbols;\n    if (customSymbols)\n    {\n      machineBuilder._symbols.length = 0;\n      for(const symbol of customSymbols)\n      {\n        machineBuilder._symbols.push(symbol);\n      }\n    }\n    const statePrefix = machineData.statePrefix;\n    if (statePrefix) machineBuilder.getLabeler().prefix = statePrefix;\n\n    return newGraph;\n  }\n\n  toJSON(graphData, module)\n  {\n    const graphController = module.getGraphController();\n    const machineController = module.getMachineController();\n    const machineBuilder = machineController.getMachineBuilder();\n\n    const dst = {};\n    dst[\"_metadata\"] = {\n      module: module.getModuleName(),\n      version: process.env.VERSION + \":\" + module.getModuleVersion(),\n      timestamp: new Date().toString()\n    };\n    dst[\"graphData\"] = graphData;\n    dst[\"machineData\"] = {\n      name: machineController.getMachineName(),\n      type: machineController.getMachineType(),\n      symbols: machineController.getCustomSymbols(),\n      statePrefix: machineBuilder.getLabeler().prefix\n    };\n    return dst;\n  }\n\n  //Override\n  importFromData(data, module)\n  {\n    this.fromJSON(data, module);\n  }\n\n  //Override\n  exportToData(module)\n  {\n    const graph = module.getGraphController().getGraph();\n    const graphData = JSONGraphParser.objectify(graph);\n    const result = this.toJSON(graphData, module);\n    return result;\n  }\n\n  //Override\n  doesSupportData()\n  {\n    return true;\n  }\n\n  //Override\n  importFromFile(fileBlob, module)\n  {\n    return new Promise((resolve, reject) => {\n      const filename = fileBlob.name;\n      if (!filename.endsWith(this.getFileType()))\n      {\n        throw new Error(\"Trying to import invalid file type for \\'\" + this.getFileType() + \"\\': \" + filename);\n      }\n\n      const reader = new FileReader();\n      reader.onload = e => {\n        const graphController = module.getGraphController();\n        const machineController = module.getMachineController();\n        const data = e.target.result;\n        const name = filename.substring(0, filename.length - this.getFileType().length - 1);\n        const graph = graphController.getGraph();\n\n        //TODO: this should not be here, this should exist somewhere in graphController\n        graphController.emit(\"userPreImportGraph\", graph);\n\n        try\n        {\n          const jsonData = JSON.parse(data);\n\n          this.fromJSON(jsonData, module);\n\n          graphController.emit(\"userImportGraph\", graph);\n\n          if (machineController)\n          {\n            machineController.setMachineName(name);\n          }\n\n          resolve();\n        }\n        catch (e)\n        {\n          reader.abort();\n          reject(e);\n        }\n        finally\n        {\n          graphController.emit(\"userPostImportGraph\", graph);\n        }\n      };\n\n      reader.onerror = e => {\n        reject(new Error(\"Unable to import file: \" + e.target.error.code));\n      }\n\n      reader.readAsText(fileBlob);\n    });\n  }\n\n  //Override\n  exportToFile(filename, module)\n  {\n    const graph = module.getGraphController().getGraph();\n    const graphData = JSONGraphParser.objectify(graph);\n    const dst = this.toJSON(graphData, module);\n    const jsonString = JSON.stringify(dst);\n    downloadText(filename + '.' + this.getFileType(), jsonString);\n  }\n\n  //Override\n  doesSupportFile()\n  {\n    return true;\n  }\n\n  //Override\n  canImport()\n  {\n    return true;\n  }\n\n  //Override\n  getTitle()\n  {\n    return I18N.toString(\"file.export.machine.hint\");\n  }\n\n  //Override\n  getLabel()\n  {\n    return I18N.toString(\"file.export.machine\");\n  }\n\n  //Override\n  getFileType()\n  {\n    return \"json\";\n  }\n\n  //Override\n  getIconClass()\n  {\n    return JSONFileIcon;\n  }\n}\n\nexport default FSAGraphExporter;\n","//https://www.flaticon.com/free-icon/json-file_136525\nimport React from 'react';\n\nclass JSONIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"json-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 56 56\">\n      <g>\n        <path fill=\"#E9E9E0\" d=\"M36.985,0H7.963C7.155,0,6.5,0.655,6.5,1.926V55c0,0.345,0.655,1,1.463,1h40.074 c0.808,0,1.463-0.655,1.463-1V12.978c0-0.696-0.093-0.92-0.257-1.085L37.607,0.257C37.442,0.093,37.218,0,36.985,0z\"/>\n        <polygon fill=\"#D9D7CA\" points=\"37.5,0.151 37.5,12 49.349,12 \t\"/>\n        <path fill=\"#9777A8\" d=\"M48.037,56H7.963C7.155,56,6.5,55.345,6.5,54.537V39h43v15.537C49.5,55.345,48.845,56,48.037,56z\"/>\n        <g>\n          <path fill=\"#FFFFFF\" d={\"M17.021,42.719v7.848c0,0.474-0.087,0.873-0.26,1.196s-0.405,0.583-0.697,0.779 \" +\n            \"s-0.627,0.333-1.005,0.41c-0.378,0.077-0.768,0.116-1.169,0.116c-0.2,0-0.436-0.021-0.704-0.062s-0.547-0.104-0.834-0.191 \" +\n            \"s-0.563-0.185-0.827-0.294s-0.487-0.232-0.67-0.369l0.697-1.107c0.091,0.063,0.221,0.13,0.39,0.198s0.354,0.132,0.554,0.191 \" +\n            \"s0.41,0.111,0.629,0.157s0.424,0.068,0.615,0.068c0.483,0,0.868-0.094,1.155-0.28s0.439-0.504,0.458-0.95v-7.711H17.021z\"}/>\n          <path fill=\"#FFFFFF\" d={\"M25.184,50.238c0,0.364-0.075,0.718-0.226,1.06s-0.362,0.643-0.636,0.902s-0.61,0.467-1.012,0.622 \" +\n            \"s-0.856,0.232-1.367,0.232c-0.219,0-0.444-0.012-0.677-0.034s-0.467-0.062-0.704-0.116c-0.237-0.055-0.463-0.13-0.677-0.226 \" +\n            \"s-0.398-0.212-0.554-0.349l0.287-1.176c0.128,0.073,0.289,0.144,0.485,0.212s0.398,0.132,0.608,0.191s0.419,0.107,0.629,0.144 \" +\n            \"s0.405,0.055,0.588,0.055c0.556,0,0.982-0.13,1.278-0.39s0.444-0.645,0.444-1.155c0-0.31-0.104-0.574-0.314-0.793 \" +\n            \"s-0.472-0.417-0.786-0.595s-0.654-0.355-1.019-0.533s-0.706-0.388-1.025-0.629s-0.583-0.526-0.793-0.854s-0.314-0.738-0.314-1.23 \" +\n            \"c0-0.446,0.082-0.843,0.246-1.189s0.385-0.641,0.663-0.882s0.602-0.426,0.971-0.554s0.759-0.191,1.169-0.191 \" +\n            \"c0.419,0,0.843,0.039,1.271,0.116s0.774,0.203,1.039,0.376c-0.055,0.118-0.118,0.248-0.191,0.39s-0.142,0.273-0.205,0.396 \" +\n            \"s-0.118,0.226-0.164,0.308s-0.073,0.128-0.082,0.137c-0.055-0.027-0.116-0.063-0.185-0.109s-0.166-0.091-0.294-0.137 \" +\n            \"s-0.296-0.077-0.506-0.096s-0.479-0.014-0.807,0.014c-0.183,0.019-0.355,0.07-0.52,0.157s-0.31,0.193-0.438,0.321 \" +\n            \"s-0.228,0.271-0.301,0.431s-0.109,0.313-0.109,0.458c0,0.364,0.104,0.658,0.314,0.882s0.47,0.419,0.779,0.588 \" +\n            \"s0.647,0.333,1.012,0.492s0.704,0.354,1.019,0.581s0.576,0.513,0.786,0.854S25.184,49.7,25.184,50.238z\"}/>\n          <path fill=\"#FFFFFF\" d={\"M35.082,47.914c0,0.848-0.107,1.595-0.321,2.242s-0.511,1.185-0.889,1.613s-0.82,0.752-1.326,0.971 \" +\n            \"s-1.06,0.328-1.661,0.328s-1.155-0.109-1.661-0.328s-0.948-0.542-1.326-0.971s-0.675-0.966-0.889-1.613s-0.321-1.395-0.321-2.242 \" +\n            \"s0.107-1.593,0.321-2.235s0.511-1.178,0.889-1.606s0.82-0.754,1.326-0.978s1.06-0.335,1.661-0.335s1.155,0.111,1.661,0.335 \" +\n            \"s0.948,0.549,1.326,0.978s0.675,0.964,0.889,1.606S35.082,47.066,35.082,47.914z M30.844,51.729c0.337,0,0.658-0.066,0.964-0.198 \" +\n            \"s0.579-0.349,0.82-0.649s0.431-0.695,0.567-1.183s0.21-1.082,0.219-1.784c-0.009-0.684-0.08-1.265-0.212-1.743 \" +\n            \"s-0.314-0.873-0.547-1.183s-0.497-0.533-0.793-0.67s-0.608-0.205-0.937-0.205c-0.337,0-0.658,0.063-0.964,0.191 \" +\n            \"s-0.579,0.344-0.82,0.649s-0.431,0.699-0.567,1.183c-0.137,0.483-0.21,1.075-0.219,1.777c0.009,0.684,0.08,1.267,0.212,1.75 \" +\n            \"s0.314,0.877,0.547,1.183s0.497,0.528,0.793,0.67S30.516,51.729,30.844,51.729z\"}/>\n          <path fill=\"#FFFFFF\" d=\"M44.68,42.924V53h-1.668l-3.951-6.945V53h-1.668V42.924h1.668l3.951,6.945v-6.945H44.68z\"/>\n        </g>\n        <g>\n          <path fill=\"#9777A8\" d=\"M19.5,19v-4c0-0.551,0.448-1,1-1c0.553,0,1-0.448,1-1s-0.447-1-1-1c-1.654,0-3,1.346-3,3v4 c0,1.103-0.897,2-2,2c-0.553,0-1,0.448-1,1s0.447,1,1,1c1.103,0,2,0.897,2,2v4c0,1.654,1.346,3,3,3c0.553,0,1-0.448,1-1 s-0.447-1-1-1c-0.552,0-1-0.449-1-1v-4c0-1.2-0.542-2.266-1.382-3C18.958,21.266,19.5,20.2,19.5,19z\"/>\n          <circle fill=\"#9777A8\" cx=\"27.5\" cy=\"18.5\" r=\"1.5\"/>\n          <path fill=\"#9777A8\" d=\"M39.5,21c-1.103,0-2-0.897-2-2v-4c0-1.654-1.346-3-3-3c-0.553,0-1,0.448-1,1s0.447,1,1,1 c0.552,0,1,0.449,1,1v4c0,1.2,0.542,2.266,1.382,3c-0.84,0.734-1.382,1.8-1.382,3v4c0,0.551-0.448,1-1,1c-0.553,0-1,0.448-1,1 s0.447,1,1,1c1.654,0,3-1.346,3-3v-4c0-1.103,0.897-2,2-2c0.553,0,1-0.448,1-1S40.053,21,39.5,21z\"/>\n          <path fill=\"#9777A8\" d=\"M27.5,24c-0.553,0-1,0.448-1,1v3c0,0.552,0.447,1,1,1s1-0.448,1-1v-3 C28.5,24.448,28.053,24,27.5,24z\"/>\n        </g>\n      </g>\n    </svg>;\n  }\n}\n\nexport default JSONIcon;\n","import AbstractGraphExporter from 'modules/abstract/exporter/AbstractGraphExporter.js';\n\nimport XMLFileIcon from 'icons/flat/XMLIcon.js';\nimport { XML as XMLGraphParser } from 'modules/fsa/graph/FSAGraphParser.js';\nimport { downloadText } from 'util/Downloader.js';\n\nclass JFLAPGraphExporter extends AbstractGraphExporter\n{\n  constructor() { super(); }\n\n  //Override\n  importFromFile(fileBlob, module)\n  {\n    return new Promise((resolve, reject) => {\n      const filename = fileBlob.name;\n      if (!filename.endsWith(this.getFileType()))\n      {\n        throw new Error(\"Trying to import invalid file type for \\'\" + this.getFileType() + \"\\': \" + filename);\n      }\n\n      const reader = new FileReader();\n      reader.onload = e => {\n        const graphController = module.getGraphController();\n        const machineController = module.getMachineController();\n        const data = e.target.result;\n        const name = filename.substring(0, filename.length - this.getFileType().length - 1);\n        const graph = graphController.getGraph();\n\n        //TODO: this should not be here, this should exist somewhere in graphController\n        graphController.emit(\"userPreImportGraph\", graph);\n\n        try\n        {\n          const xmlData = new DOMParser().parseFromString(data, \"text/xml\");\n          XMLGraphParser.parse(xmlData, graph);\n\n          graphController.emit(\"userImportGraph\", graph);\n\n          if (machineController)\n          {\n            machineController.setMachineName(name);\n          }\n\n          resolve();\n        }\n        catch (e)\n        {\n          reader.abort();\n          reject(e);\n        }\n        finally\n        {\n          graphController.emit(\"userPostImportGraph\", graph);\n        }\n      };\n\n      reader.onerror = e => {\n        reject(new Error(\"Unable to import file: \" + e.target.error.code));\n      }\n\n      reader.readAsText(fileBlob);\n    });\n  }\n\n  //Override\n  exportToFile(filename, module)\n  {\n    const graph = module.getGraphController().getGraph();\n    const graphData = XMLGraphParser.objectify(graph);\n    const xmlString = new XMLSerializer().serializeToString(graphData);\n    downloadText(filename + '.' + this.getFileType(), xmlString);\n  }\n\n  //Override\n  doesSupportFile()\n  {\n    return true;\n  }\n\n  //Override\n  canImport()\n  {\n    return true;\n  }\n\n  //Override\n  getTitle()\n  {\n    return I18N.toString(\"file.export.jff.hint\");\n  }\n\n  //Override\n  getLabel()\n  {\n    return I18N.toString(\"file.export.jff\");\n  }\n\n  //Override\n  getFileType()\n  {\n    return \"jff\";\n  }\n\n  //Override\n  getIconClass()\n  {\n    return XMLFileIcon;\n  }\n}\n\nexport default JFLAPGraphExporter;\n","//https://www.flaticon.com/free-icon/xml_136526\nimport React from 'react';\n\nclass XMLIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"xml-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 56 56\">\n      <g>\n        <path fill=\"#E9E9E0\" d=\"M36.985,0H7.963C7.155,0,6.5,0.655,6.5,1.926V55c0,0.345,0.655,1,1.463,1h40.074 c0.808,0,1.463-0.655,1.463-1V12.978c0-0.696-0.093-0.92-0.257-1.085L37.607,0.257C37.442,0.093,37.218,0,36.985,0z\"/>\n        <polygon fill=\"#D9D7CA\" points=\"37.5,0.151 37.5,12 49.349,12 \t\"/>\n        <path fill=\"#F29C1F\" d=\"M48.037,56H7.963C7.155,56,6.5,55.345,6.5,54.537V39h43v15.537C49.5,55.345,48.845,56,48.037,56z\"/>\n        <g>\n          <path fill=\"#FFFFFF\" d=\"M19.379,48.105L21.936,53h-1.9l-1.6-3.801h-0.137L16.576,53h-1.9l2.557-4.895l-2.721-5.182h1.873 l1.777,4.102h0.137l1.928-4.102H22.1L19.379,48.105z\"/>\n          <path fill=\"#FFFFFF\" d=\"M31.998,42.924h1.668V53h-1.668v-6.932l-2.256,5.605h-1.449l-2.27-5.605V53h-1.668V42.924h1.668 l2.994,6.891L31.998,42.924z\"/>\n          <path fill=\"#FFFFFF\" d=\"M37.863,42.924v8.832h4.635V53h-6.303V42.924H37.863z\"/>\n        </g>\n        <path fill=\"#F29C1F\" d=\"M15.5,24c-0.256,0-0.512-0.098-0.707-0.293c-0.391-0.391-0.391-1.023,0-1.414l6-6 c0.391-0.391,1.023-0.391,1.414,0s0.391,1.023,0,1.414l-6,6C16.012,23.902,15.756,24,15.5,24z\"/>\n        <path fill=\"#F29C1F\" d=\"M21.5,30c-0.256,0-0.512-0.098-0.707-0.293l-6-6c-0.391-0.391-0.391-1.023,0-1.414 s1.023-0.391,1.414,0l6,6c0.391,0.391,0.391,1.023,0,1.414C22.012,29.902,21.756,30,21.5,30z\"/>\n        <path fill=\"#F29C1F\" d=\"M33.5,30c-0.256,0-0.512-0.098-0.707-0.293c-0.391-0.391-0.391-1.023,0-1.414l6-6 c0.391-0.391,1.023-0.391,1.414,0s0.391,1.023,0,1.414l-6,6C34.012,29.902,33.756,30,33.5,30z\"/>\n        <path fill=\"#F29C1F\" d=\"M39.5,24c-0.256,0-0.512-0.098-0.707-0.293l-6-6c-0.391-0.391-0.391-1.023,0-1.414 s1.023-0.391,1.414,0l6,6c0.391,0.391,0.391,1.023,0,1.414C40.012,23.902,39.756,24,39.5,24z\"/>\n        <path fill=\"#F29C1F\" d=\"M24.5,32c-0.11,0-0.223-0.019-0.333-0.058c-0.521-0.184-0.794-0.755-0.61-1.276l6-17 c0.185-0.521,0.753-0.795,1.276-0.61c0.521,0.184,0.794,0.755,0.61,1.276l-6,17C25.298,31.744,24.912,32,24.5,32z\"/>\n      </g>\n    </svg>;\n  }\n}\n\nexport default XMLIcon;\n","class HotKeys\n{\n  constructor()\n  {\n    this.app = null;\n    this.workspace = null;\n    this.toolbar = null;\n    this.undoManager = null;\n    this.graphController = null;\n    this.machineController = null;\n\n    this.onKeyDown = this.onKeyDown.bind(this);\n  }\n\n  initialize(app)\n  {\n    this.app = app;\n    this.workspace = app.workspace;\n    this.toolbar = app.toolbar;\n    this.undoManager = app.getUndoManager();\n    this.graphController = app.getGraphController();\n    this.machineController = app.getMachineController();\n\n    window.addEventListener('keydown', this.onKeyDown);\n  }\n\n  destroy()\n  {\n    window.removeEventListener('keydown', this.onKeyDown);\n  }\n\n  onKeyDown(e)\n  {\n    //Ctrl-S\n    if (event.which == 83 && (event.metaKey || event.ctrlKey))\n    {\n      //Save as machine file\n      const exporter = this.app.getCurrentModule().getDefaultGraphExporter();\n      const machineName = this.machineController.getMachineName();\n      exporter.exportToFile(machineName, this.app.getCurrentModule());\n\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    //Ctrl-Z\n    else if (event.which == 90 && (event.metaKey || event.ctrlKey))\n    {\n      if (event.shiftKey)\n      {\n        //Redo\n        this.undoManager.redo();\n      }\n      else\n      {\n        //Undo\n        this.undoManager.undo();\n      }\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    //Ctrl-P\n    else if (event.which == 80 && (event.metaKey || event.ctrlKey))\n    {\n      //Export to PNG\n      const imageExporters = this.app.getCurrentModule().getImageExporters();\n      if (imageExporter.length >= 1)\n      {\n        const exporter = imageExporters[0];\n        const machineName = this.machineController.getMachineName();\n        exporter.exportToFile(machineName, this.app.getCurrentModule());\n      }\n      else\n      {\n        throw new Error(\"Unable to find valid image exporter for module \\'\" + this.app.getCurrentModule().getModuleName() + \"\\'\");\n      }\n\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }\n}\n\nexport default HotKeys;\n","import React from 'react';\nimport './Toolbar.css';\n\nimport Config from 'config.js';\n\nimport UploadButton from \"./UploadButton.js\";\nimport HelpButton from \"./HelpButton.js\";\nimport MachineName from './MachineName.js';\n\nimport IconButton from 'icons/IconButton.js';\n\nimport MoreIcon from 'icons/MoreIcon.js';\nimport UploadIcon from 'icons/UploadIcon.js';\nimport CreateIcon from 'icons/PageNewIcon.js';\n//import CreateIcon from 'icons/CreateIcon.js';\nimport SaveIcon from 'icons/SaveIcon.js';\n//import SaveIcon from 'icons/DiskSaveIcon.js';\nimport UndoIcon from 'icons/UndoIcon.js';\nimport RedoIcon from 'icons/RedoIcon.js';\nimport HelpIcon from 'icons/HelpIcon.js';\nimport LanguageIcon from 'icons/LanguageIcon.js';\nimport OfflineIcon from 'icons/OfflineIcon.js';\nimport OfflinePinIcon from 'icons/OfflinePinIcon.js';\nimport BugReportIcon from 'icons/BugReportIcon.js';\n\nimport Drawer from 'content/drawer/Drawer.js';\n\nconst BUG_REPORT_URL = \"https://goo.gl/forms/XSil43Xl5xLHsa0E2\";\n\nclass Toolbar extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.state = {\n      langOn: false\n    };\n\n    this.onMachineNameChange = this.onMachineNameChange.bind(this);\n    this.onMachineNameKeyDown = this.onMachineNameKeyDown.bind(this);\n    this.langOnClick = this.langOnClick.bind(this);\n  }\n\n  onMachineNameChange(e)\n  {\n    this.props.currentModule.getMachineController().renameMachine(e.value);\n  }\n\n  onMachineNameKeyDown()\n  {\n\n  }\n\n  onMachineNameBlur()\n  {\n\n  }\n\n  langOnClick()\n  {\n    this.setState({langOn: !this.state.langOn});\n  }\n\n  render()\n  {\n    const app = this.props.app;\n    const currentModule = this.props.currentModule;\n    const drawer = this.props.drawer;\n    const graphController = currentModule.getGraphController();\n    const machineController = currentModule.getMachineController();\n    const undoManager = app.getUndoManager();\n\n    const graph = graphController.getGraph();\n\n    const offline = navigator && navigator.onLine;\n\n    return <div className=\"toolbar-container\">\n      <div className=\"toolbar-title\">\n        <div className=\"toolbar-title-name\">\n          {/*Machine Name*/}\n          <MachineName id=\"machine-name\" value={machineController.getMachineName()} onSubmit={this.onMachineNameChange}/>\n          {/*Toolbar Alt. Title*/}\n          <div className=\"toolbar-title-alt\">\n            {/*Offline Button*/}\n            <IconButton id=\"toolbar-lang\" title={I18N.toString(\"action.toolbar.lang\")}\n              onClick={() => {\n                if ('serviceWorker' in navigator)\n                {\n                  if (navigator.serviceWorker.getRegistration(\"./app.html\"))\n                  {\n                    alert(I18N.toString(\"message.offline.ready\"));\n                  }\n                  else\n                  {\n                    alert(I18N.toString(\"message.offline.failed\"));\n                  }\n                }\n                else\n                {\n                  alert(I18N.toString(\"message.offline.nosupport\"));\n                }\n              }} disabled={offline}>\n              <OfflineIcon/>\n            </IconButton>\n            {/*Upload Button\n            <div id=\"toolbar-upload-alt\"\n              title={I18N.toString(\"action.toolbar.uploadmachine\")}>\n              <MoreIcon/>\n            </div>\n            */}\n          </div>\n        </div>\n        {/*Machine Type*/}\n        <label id=\"machine-type\"\n          onClick={()=>drawer.setTab(0)}>\n          {currentModule.getLocalizedModuleName()}\n        </label>\n      </div>\n\n      <div className=\"toolbar-tray\">\n        {/*New Button*/}\n        <IconButton className=\"navicon\" id=\"toolbar-new\" title={I18N.toString(\"action.toolbar.newmachine\")}\n          onClick={() => {\n            if (window.confirm(I18N.toString(\"alert.graph.clear\")))\n            {\n              graph.clear();\n              undoManager.clear();\n              machineController.setMachineName(null);\n            }\n          }}>\n          <CreateIcon/>\n        </IconButton>\n        {/*Upload Button*/}\n        <UploadButton className=\"navicon\" id=\"toolbar-upload\" title={I18N.toString(\"action.toolbar.uploadmachine\")}\n          app={app}\n          graphController={graphController}>\n          <UploadIcon/>\n        </UploadButton>\n        {/*Undo Button*/}\n        <IconButton className=\"navicon\" id=\"toolbar-undo\" title={I18N.toString(\"action.toolbar.undo\")}\n          disabled={!undoManager.canUndo()}\n          onClick={()=>undoManager.undo()}>\n          <UndoIcon/>\n        </IconButton>\n        {/*Redo Button*/}\n        <IconButton className=\"navicon\" id=\"toolbar-redo\" title={I18N.toString(\"action.toolbar.redo\")}\n          disabled={!undoManager.canRedo()}\n          onClick={()=>undoManager.redo()}>\n          <RedoIcon/>\n        </IconButton>\n        {/*Save Button*/}\n        <IconButton className=\"navicon\" id=\"toolbar-save\" title={I18N.toString(\"action.toolbar.save\")}\n          onClick={()=>drawer.setTab(Drawer.EXPORTING_PANEL_TAB_INDEX)} disabled={graph.isEmpty()}>\n          <SaveIcon/>\n        </IconButton>\n\n        {/*Right Alt. Toolbar*/}\n        <div className=\"toolbar-tray-alt\">\n          {/*Report a Bug Button*/}\n          <IconButton className=\"navicon\" id=\"toolbar-bug\" title={I18N.toString(\"action.toolbar.bug\")}\n            onClick={e => window.open(BUG_REPORT_URL, '_blank')}>\n            <BugReportIcon/>\n          </IconButton>\n          {/*Help Button*/}\n          <HelpButton className=\"navicon\" id=\"toolbar-help\" title={I18N.toString(\"action.toolbar.help\")}>\n            <HelpIcon/>\n          </HelpButton>\n          {/*Language Button*/}\n          <IconButton className=\"navicon\" id=\"toolbar-lang\" title={I18N.toString(\"action.toolbar.lang\")}\n            onClick={(e) => {document.activeElement.blur(); this.langOnClick();}} >\n            <LanguageIcon/>\n          </IconButton>\n          {/*Language Select*/}\n          <select id=\"toolbar-lang-select\" style={{maxWidth: (this.state.langOn ? \"10em\" : \"0\")}} onChange={(e) => {I18N.fetchLanguageFile(e.target.value);}}>\n            <option value=\"en_us\">English</option>\n            <option value=\"xx_pirate\">Pirate Speak</option>\n          </select>\n        </div>\n      </div>\n    </div>;\n  }\n}\n\nexport default Toolbar;\n","import React from 'react';\nimport Notifications from 'system/notification/Notifications.js';\n\nclass UploadButton extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.onUploadFileChange = this.onUploadFileChange.bind(this);\n  }\n\n  onUploadFileChange(e)\n  {\n    const files = e.target.files;\n    if (files.length > 0)\n    {\n      this.props.app.getCurrentModule().getGraphImporter().importFile(files[0], this.props.app.getCurrentModule())\n        .catch((e) => {\n          Notifications.addErrorMessage(\"ERROR: Unable to load invalid JSON file.\", \"errorUpload\");\n          console.error(e);\n        });\n\n      //Makes sure you can upload the same file again.\n      e.target.value = \"\";\n    }\n  }\n\n  render()\n  {\n    const inputID = this.props.id + \"-input\";\n    return <button\n      className={\"icon-button button-upload \" + this.props.className}\n      id={this.props.id}\n      title={this.props.title}\n      style={this.props.style}\n      disabled={this.props.disabled}\n      onClick={this.props.onClick}>\n      <input id={inputID} type=\"file\" name=\"import\"\n        style={{display:\"none\"}}\n        onChange={this.onUploadFileChange}\n        accept={this.props.app.getCurrentModule().getGraphImporter().getImportFileTypes().join(\",\")}/>\n      <label htmlFor={inputID}>\n        {this.props.children}\n      </label>\n    </button>;\n  }\n}\n\nexport default UploadButton;\n","import React from 'react';\nimport Notifications from 'system/notification/Notifications.js';\n\nclass HelpButton extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick(e)\n  {\n    if (Notifications.hasMessages())\n    {\n      Notifications.addMessage(I18N.toString(\"message.help.3\"));\n      Notifications.addMessage(I18N.toString(\"message.help.1\"));\n    }\n    else\n    {\n      Notifications.addMessage(I18N.toString(\"message.help.2\"));\n    }\n\n    //The tutorial\n    const LINK = \"https://github.com/flapjs/FLAPJS-WebApp/blob/master/docs/HELP.md\";\n    const newTab = window.open(LINK, '_blank');\n\n    if (this.props.onClick)\n    {\n      this.props.onClick(e);\n    }\n  }\n\n  render()\n  {\n    return <button\n      className={\"icon-button button-help \" + this.props.className}\n      id={this.props.id}\n      title={this.props.title}\n      style={this.props.style}\n      disabled={this.props.disabled}\n      onClick={this.onClick}>\n      {this.props.children}\n    </button>;\n  }\n}\n\nexport default HelpButton;\n","import React from 'react';\n\nclass MachineName extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.state = {\n      value: null\n    };\n\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.onFocus = this.onFocus.bind(this);\n    this.onBlur = this.onBlur.bind(this);\n  }\n\n  onChange(e)\n  {\n    this.setState({value: e.target.value});\n  }\n\n  onKeyDown(e)\n  {\n    if (e.key === 'Escape')\n    {\n      const target = e.target;\n      this.setState({value: null}, () => target.blur());\n      return false;\n    }\n    else if (e.key === 'Enter')\n    {\n      e.target.blur();\n      return false;\n    }\n  }\n\n  onFocus(e)\n  {\n    this.setState({value: this.props.value});\n  }\n\n  onBlur(e)\n  {\n    if (this.state.value)\n    {\n      if (this.props.onSubmit) this.props.onSubmit({value: this.state.value});\n    }\n\n    this.setState({value: null});\n  }\n\n  render()\n  {\n    return <input type=\"text\"\n      className={this.props.className}\n      id={this.props.id}\n      value={this.state.value != null ? this.state.value : this.props.value}\n      onChange={this.onChange}\n      onKeyDown={this.onKeyDown}\n      onFocus={this.onFocus}\n      onBlur={this.onBlur}>\n    </input>;\n  }\n}\n\nexport default MachineName;\n","import React from 'react';\n\nclass PageNewIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"pagenew-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n      <path d=\"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 2zm-3-7V3.5L18.5 9H13z\"/>\n    </svg>;\n  }\n}\n\nexport default PageNewIcon;\n","import React from 'react';\n\nclass HelpIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"help-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n      <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z\"/>\n    </svg>;\n  }\n}\n\nexport default HelpIcon;\n","import React from 'react';\n\nclass LanguageIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"language-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n        <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n        <path d={\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 \" +\n        \"22 12S17.52 2 11.99 2zm6.93 6h-2.95c-.32-1.25-.78-2.45-1.38-3.56 1.84.63 \" +\n        \"3.37 1.91 4.33 3.56zM12 4.04c.83 1.2 1.48 2.53 1.91 3.96h-3.82c.43-1.43 \" +\n        \"1.08-2.76 1.91-3.96zM4.26 14C4.1 13.36 4 12.69 4 12s.1-1.36.26-2h3.38c-.08.66-.14 \" +\n        \"1.32-.14 2 0 .68.06 1.34.14 2H4.26zm.82 2h2.95c.32 1.25.78 2.45 \" +\n        \"1.38 3.56-1.84-.63-3.37-1.9-4.33-3.56zm2.95-8H5.08c.96-1.66 2.49-2.93 \" +\n        \"4.33-3.56C8.81 5.55 8.35 6.75 8.03 8zM12 19.96c-.83-1.2-1.48-2.53-1.91-3.96h3.82c-.43 \" +\n        \"1.43-1.08 2.76-1.91 3.96zM14.34 14H9.66c-.09-.66-.16-1.32-.16-2 \" +\n        \"0-.68.07-1.35.16-2h4.68c.09.65.16 1.32.16 2 0 .68-.07 1.34-.16 2zm.25 \" +\n        \"5.56c.6-1.11 1.06-2.31 1.38-3.56h2.95c-.96 1.65-2.49 2.93-4.33 3.56zM16.36 \" +\n        \"14c.08-.66.14-1.32.14-2 0-.68-.06-1.34-.14-2h3.38c.16.64.26 1.31.26 2s-.1 \" +\n        \"1.36-.26 2h-3.38z\"}/>\n    </svg>;\n  }\n}\n\nexport default LanguageIcon;\n","import React from 'react';\n\nclass OfflineIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"offline-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path fill=\"none\" d=\"M0 0h24v24H0z\"/>\n      <path d=\"M12 2.02c-5.51 0-9.98 4.47-9.98 9.98s4.47 9.98 9.98 9.98 9.98-4.47 9.98-9.98S17.51 2.02 12 2.02zM11.48 20v-6.26H8L13 4v6.26h3.35L11.48 20z\"/>\n    </svg>;\n  }\n}\n\nexport default OfflineIcon;\n","import React from 'react';\n\nclass BugReportIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  //Override\n  render()\n  {\n    return <svg className=\"bugreport-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path d={\"M20 8h-2.81c-.45-.78-1.07-1.45-1.82-1.96L17 4.41 15.59 \" +\n      \"3l-2.17 2.17C12.96 5.06 12.49 5 12 5s-.96.06-1.41.17L8.41 3 7 \" +\n      \"4.41l1.62 1.63C7.88 6.55 7.26 7.22 6.81 8H4v2h2.09c-.05.33-.09.66-.09 \" +\n      \"1v1H4v2h2v1c0 .34.04.67.09 1H4v2h2.81c1.04 1.79 2.97 3 5.19 \" +\n      \"3s4.15-1.21 5.19-3H20v-2h-2.09c.05-.33.09-.66.09-1v-1h2v-2h-2v-1c0-.\"\n      + \"34-.04-.67-.09-1H20V8zm-4 4v3c0 .22-.03.47-.07.7l-.1.65-.37.65c-.72 \" +\n      \"1.24-2.04 2-3.46 2s-2.74-.77-3.46-2l-.37-.64-.1-.65C8.03 \" +\n      \"15.48 8 15.23 8 15v-4c0-.23.03-.48.07-.7l.1-.65.37-.65c.3-.52.72-.97 \" +\n      \"1.21-1.31l.57-.39.74-.18c.31-.08.63-.12.94-.12.32 0 \" +\n      \".63.04.95.12l.68.16.61.42c.5.34.91.78 1.21 1.31l.38.65.1.65c.04.22.07\" +\n      \".47.07.69v1zm-6 2h4v2h-4zm0-4h4v2h-4z\"}/>\n    </svg>;\n  }\n}\n\nexport default BugReportIcon;\n","import React from 'react';\nimport './DrawerExpander.css';\n\nclass DrawerExpander extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick(e)\n  {\n    const app = this.props.app;\n    if (app.state.isFullscreen)\n    {\n      app.setState({isFullscreen: false});\n    }\n    else if (app.state.isOpen)\n    {\n      app.closeDrawer();\n    }\n    else\n    {\n      app.openDrawer();\n    }\n  }\n\n  //Override\n  render()\n  {\n    const app = this.props.app;\n    const open = app.state.isOpen;\n\n    return <div className={\"drawer-expand\" + (open ? \" open\" : \"\")}\n      onClick={this.onClick}>\n      <svg viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path d=\"M5 3.737l12.395 8.263-12.395 8.263v-16.526zm-2-3.737v24l18-12-18-12z\"/>\n      </svg>\n    </div>;\n  }\n}\n\nexport default DrawerExpander;\n","import React from 'react';\nimport './Workspace.css';\n\nimport Config from 'config.js';\n\nimport Subtitle from './Subtitle.js';\n\nconst WORKSPACE_OFFSET_X = 0;\nconst WORKSPACE_OFFSET_Y = 0;\nconst EXPORT_PADDING_X = 30;\nconst EXPORT_PADDING_Y = 0;\n\nconst GRAPH_RENDER_LAYER = \"graph\";\nconst GRAPH_OVERLAY_RENDER_LAYER = \"graphoverlay\";\n\nclass Workspace extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.ref = null;\n  }\n\n  getSVGForExport(width, height)\n  {\n    const svg = this.ref;\n    if (!svg) return null;\n\n    const currentModule = this.props.currentModule;\n    const inputController = currentModule.getInputController();\n    const graphController = currentModule.getGraphController();\n\n    const viewport = inputController.getInputAdapter().getViewport();\n    const offsetX = viewport.getOffsetX();\n    const offsetY = viewport.getOffsetY();\n    const bounds = graphController.getGraph().getBoundingRect();\n    const dx = bounds.minX + offsetX - EXPORT_PADDING_X;\n    const dy = bounds.minY + offsetY - EXPORT_PADDING_Y;\n    const w = bounds.width + EXPORT_PADDING_X * 2;\n    const h = bounds.height + EXPORT_PADDING_Y * 2;\n    const clone = svg.cloneNode(true);\n    clone.setAttribute('viewBox', dx + \" \" + dy + \" \" + w + \" \" + h);\n    clone.setAttribute('width', width);\n    clone.setAttribute('height', height);\n\n    //Apply the workspace font (refer to Workspace.css)\n    clone.setAttribute('font-size', \"16px\");\n    clone.setAttribute('font-family', \"monospace\");\n    clone.setAttribute('style', \".graph-ui {display: none;}\");\n\n    /*\n    //TODO: Link the font family to svg\n    const link = document.createElement(\"link\");\n    link.setAttribute(\"rel\", \"stylesheet\");\n    clone.appendChild(link);\n    */\n\n    //Remove unwanted ui elements from image\n    const uiElements = clone.getElementsByClassName(\"graph-ui\");\n    while(uiElements.length > 0)\n    {\n      const e = uiElements[0];\n      e.remove();//This will propagate changes to uiElements, so be careful\n    }\n\n    return clone;\n  }\n\n  render()\n  {\n    const currentModule = this.props.currentModule;\n    const graphController = currentModule.getGraphController();\n    const inputController = currentModule.getInputController();\n    const machineController = currentModule.getMachineController();\n\n    const GraphRenderer = currentModule.getRenderer(GRAPH_RENDER_LAYER);\n    const GraphOverlayRenderer = currentModule.getRenderer(GRAPH_OVERLAY_RENDER_LAYER);\n\n    const graph = graphController.getGraph();\n    const viewport = inputController.getInputAdapter().getViewport();\n\n    let size = Config.DEFAULT_GRAPH_SIZE * Math.max(Number.MIN_VALUE, viewport.getScale());\n    const halfSize = size / 2;\n\n    //Must not be a block content (must inline)\n    return <svg id=\"workspace-content\" ref={ref=>this.ref=ref}\n      viewBox={(-halfSize + WORKSPACE_OFFSET_X) + \" \"\n        + (-halfSize + WORKSPACE_OFFSET_Y) + \" \"\n        + size + \" \" + size}\n      xmlns=\"http://www.w3.org/2000/svg\">\n\n      {/* Graph subtitle */}\n      <Subtitle visible={graph.isEmpty()}/>\n\n      {/* Graph elements */}\n      <g id=\"workspace-content-elements\" transform={\"translate(\"\n        + viewport.getOffsetX() + \" \"\n        + viewport.getOffsetY() + \")\"}>\n\n        {/* Graph origin crosshair */}\n        <g className=\"graph-ui\">\n          <line x1=\"0\" y1=\"-5\" x2=\"0\" y2=\"5\" stroke=\"#E6E6E6\"/>\n          <line x1=\"-5\" y1=\"0\" x2=\"5\" y2=\"0\" stroke=\"#E6E6E6\"/>\n        </g>\n\n        {/* Graph objects */}\n        { GraphRenderer &&\n          <GraphRenderer {...this.props} parent={this}/> }\n\n        {/* Graph overlays */}\n        { GraphOverlayRenderer &&\n          <GraphOverlayRenderer {...this.props} parent={this}/> }\n      </g>\n    </svg>;\n  }\n}\n\nexport default Workspace;\n","import React from 'react';\nimport './Subtitle.css';\n\nimport Config from 'config.js';\n\nclass Subtitle extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.state = { active: false };\n\n    this.messageTimer = null;\n  }\n\n  componentDidMount()\n  {\n    this.messageTimer = setTimeout(() => {\n      this.setState({ active: true });\n    }, Config.INIT_WAITTIME);\n  }\n\n  render()\n  {\n    const visible = this.state.active ? this.props.visible : false;\n    return <text y=\"-1em\" className={\"graph-ui subtitle\" + (visible ? \" visible\" : \"\")}\n      textAnchor=\"middle\">{I18N.toString(\"message.workspace.empty\")}</text>;\n  }\n}\n\nexport default Subtitle;\n","import Notifications from 'system/notification/Notifications.js';\nimport LocalSave from 'system/localsave/LocalSave.js';\nimport Config from 'config.js';\n\nclass Tutorial\n{\n  constructor()\n  {\n    this.app = null;\n  }\n\n  start(app)\n  {\n    if (LocalSave.getStringFromStorage(\"skipWelcome\") !== \"true\")\n    {\n      Notifications.addMessage(I18N.toString(\"message.tutorial.1\"));\n      Notifications.addMessage(I18N.toString(\"message.intro.2\"));\n    }\n  }\n}\n\nexport default Tutorial;\n","/**\n * Used by InputAdapter to hold input event data.\n */\nclass InputPointer\n{\n  constructor(adapter, element, viewport)\n  {\n    this._adapter = adapter;\n    this._element = element;\n    this._viewport = viewport;\n\n    this._active = false;\n    this._x = 0;\n    this._y = 0;\n\n    this._inputpos = {x: 0, y: 0};\n  }\n\n  get x() { return this._x; }\n  get y() { return this._y; }\n\n  setPosition(x, y)\n  {\n    this._x = x;\n    this._y = y;\n    return this;\n  }\n\n  beginInput()\n  {\n    this._active = true;\n    this._inputpos.x = this._x;\n    this._inputpos.y = this._y;\n  }\n\n  /**\n   * Returns the position which the input began at. This is mutable.\n   */\n  getInputEventPosition()\n  {\n    return this._inputpos;\n  }\n\n  changeInputEventPosition(x, y)\n  {\n    this._inputpos.x = x;\n    this._inputpos.y = y;\n  }\n\n  endInput()\n  {\n    this._active = false;\n  }\n\n  isActive()\n  {\n    return this._active;\n  }\n\n  getDistanceSquToInitial()\n  {\n    const pos = this._inputpos;\n    const dx = pos.x - this._x;\n    const dy = pos.y - this._y;\n    return dx * dx + dy * dy;\n  }\n\n  /**\n   * The DOM element for which this pointer provides context for; this should be\n   * the same element as in the input adapter.\n   */\n  getElement()\n  {\n    return this._element;\n  }\n\n  /**\n   * The viewport for this pointer operates within; this should be the same\n   * viewport as in the input adapter.\n   */\n  getViewport()\n  {\n    return this._viewport;\n  }\n\n  /**\n   * The input adapter that controls this pointer's properties\n   */\n  getAdapter()\n  {\n    return this._adapter;\n  }\n}\n\nexport default InputPointer;\n","/**\n * Represents and handles the transformations to the interactible viewport of\n * the SVG element.\n */\nclass ViewportAdapter\n{\n  constructor()\n  {\n    this._element = null;\n    this._offsetX = 0;\n    this._offsetY = 0;\n    this._nextOffsetX = 0;\n    this._nextOffsetY = 0;\n    this._offsetDamping = 0.1;\n\n    this._scaleFactor = 1;\n    this._minScale = 1;\n    this._maxScale = 1;\n  }\n\n  setElement(element)\n  {\n    this._element = element;\n    return this;\n  }\n\n  setMinScale(scale)\n  {\n    this._minScale = scale;\n    if (this._scaleFactor < this._minScale) this._scaleFactor = this._minScale;\n    return this;\n  }\n\n  setMaxScale(scale)\n  {\n    this._maxScale = scale;\n    if (this._scaleFactor > this._maxScale) this._scaleFactor = this._maxScale;\n    return this;\n  }\n\n  setOffsetDamping(damping)\n  {\n    this._offsetDamping = damping;\n    return this;\n  }\n\n  update()\n  {\n    const dx = this._nextOffsetX - this._offsetX;\n    this._offsetX += dx * this._offsetDamping;\n    const dy = this._nextOffsetY - this._offsetY;\n    this._offsetY += dy * this._offsetDamping;\n  }\n\n  transformScreenToView(clientX, clientY)\n  {\n    if (!this._element) return {x: clientX - this._offsetX, y: clientY - this._offsetY};\n\n    const ctm = this._element.getScreenCTM();\n    return {\n      x: (clientX - ctm.e) / ctm.a - this._offsetX,\n      y: (clientY - ctm.f) / ctm.d - this._offsetY\n    };\n  }\n\n  setOffset(x, y, immediate=false)\n  {\n    if (immediate)\n    {\n      this._nextOffsetX = this._offsetX = x;\n      this._nextOffsetY = this._offsetY = y;\n    }\n    else\n    {\n      this._nextOffsetX = x;\n      this._nextOffsetY = y;\n    }\n  }\n\n  addOffset(dx, dy, immediate=false)\n  {\n    if (immediate)\n    {\n      this._offsetX += dx;\n      this._offsetY += dy;\n      this._nextOffsetX = this._offsetX;\n      this._nextOffsetY = this._offsetY;\n    }\n    else\n    {\n      this._nextOffsetX += dx;\n      this._nextOffsetY += dy;\n    }\n  }\n\n  setScale(scale)\n  {\n    this._scaleFactor = Math.min(this._maxScale, Math.max(this._minScale, scale));\n  }\n\n  addScale(dscale)\n  {\n    this._scaleFactor += dscale;\n\n    if (this._scaleFactor > this._maxScale) this._scaleFactor = this._maxScale;\n    else if (this._scaleFactor < this._minScale) this._scaleFactor = this._minScale;\n  }\n\n  getOffsetX()\n  {\n    return this._offsetX;\n  }\n\n  getOffsetY()\n  {\n    return this._offsetY;\n  }\n\n  getOffsetDamping()\n  {\n    return this._offsetDamping;\n  }\n\n  getScale()\n  {\n    return this._scaleFactor;\n  }\n\n  getMinScale()\n  {\n    return this._minScale;\n  }\n\n  getMaxScale()\n  {\n    return this._maxScale;\n  }\n\n  getElement()\n  {\n    return this._element;\n  }\n}\n\nexport default ViewportAdapter;\n","import React from 'react';\nimport './NotificationMessage.css';\n\nclass NotificationMessage extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.onExitMessage = this.onExitMessage.bind(this);\n  }\n\n  onExitMessage(e)\n  {\n    const message = this.props.value;\n    message.close();\n  }\n\n  //Override\n  render()\n  {\n    const message = this.props.value;\n    return <div className={\"notification-message-container notification-message-type-\" + message.getType() + \" \" + this.props.className}\n      id={this.props.id} style={this.props.style}>\n      { this.props.children || message.value.split(\"\\\\n\").map(e => <p key={e}>{e}</p>) || message }\n      <button onClick={this.onExitMessage}>{I18N.toString(\"message.action.close\")}</button>\n    </div>;\n  }\n}\nexport default NotificationMessage;\n","import React from 'react';\nimport { hot } from 'react-hot-loader/root';\nimport './LandingPage.css';\n\nimport Router from 'router.js';\n\nimport Logo from './Logo.js';\nimport Quote from './Quote.js';\n\nimport App from 'content/App.js';\n\nconst LAUNCH_BUTTON_TEXT = \"Launch Workspace\";\nconst SMALL_LAUNCH_BUTTON_TEXT = \"Get Started!\";\nconst SMALLER_LAUNCH_BUTTON_TEXT = \"Proceed.\";\nconst TUTORIAL_BUTTON_TEXT = \"= Want to try our awesome tutorial? =\";\n\nconst QUOTES = [\n  [\"Explore what it means to be \\'computable\\'.\", \"- Prof. Mia Minnes\"],\n  [\"Lush has an interactive background in Mozilla\", \"- David\"],\n  [\"Good almost afternoon (I totally didn’t just wake up).\", \"- Noah\"],\n  [\"RONALDO IS MY GOD\", \"- David\"],\n  [\"If you dream it, you can do it.\", \"- Walt Disney\"],\n  [\"Never, never, never give up.\", \"- Winston Churchill\"],\n  [\"Don't wait. The time will never be just right.\", \"- Napolean Hill\"],\n  [\"I can, therefore I am.\", \"- Simone Wei\"],\n  [\"Turn your wounds into wisdom.\", \"- Oprah Winfrey\"],\n  [\"Believe you can and you're halfway there.\", \"- Theodore Roosevelt\"],\n  [\"80% of success is showing up.\", \"- Woody Allen\"],\n  [\"A jug fills drop by drop.\", \"- Buddha\"],\n  [\"If you have never failed you have never lived.\", \"- Human\"],\n  [\"Dream big and dare to fail.\", \"- Norman Vaughan\"],\n  [\"Have faith in yourself and in the future.\", \"- Ted Kennedy\"],\n  [\"It's kind of fun to do the impossible.\", \"- Walt Disney\"],\n  [\"Find out who you are and do it on purpose.\", \"- Dolly Parton\"],\n  [\"The only journey is the one within.\", \"- Rainer Maria Rilke\"],\n  [\"Every moment is a fresh beginning.\", \"- T.S. Eliot\"],\n  [\"Be willing to be a beginner every single morning.\", \"- Meister Eckhart\"]\n];\nconst QUOTE_INDEX = Math.floor(Math.random() * QUOTES.length);\nconst [CONTENT_QUOTE, CONTENT_SUBQUOTE] = QUOTES[QUOTE_INDEX];\n\nconst TUTORIAL_LINK = \"https://github.com/flapjs/FLAPJS-WebApp/blob/master/docs/HELP.md\";\nconst HELP_LINK = \"https://github.com/flapjs/FLAPJS-WebApp/blob/master/docs/HELP.md\";\nconst ABOUT_LINK = \"https://github.com/flapjs/FLAPJS-WebApp/blob/master/README.md\";\nconst REPORT_BUG_LINK = \"https://goo.gl/forms/XSil43Xl5xLHsa0E2\";\nconst GITHUB_LINK = \"https://github.com/flapjs/FLAPJS-WebApp/\";\n\nconst PROFMINNES_LINK = \"http://cseweb.ucsd.edu/~minnes/\";\nconst MAYA_LINK = \"https://www.linkedin.com/in/maya-bello-6b8637a7/\";\nconst NOAH_LINK = \"https://www.linkedin.com/in/noah-solomon-9a8526129/\";\nconst DAVID_LINK = \"https://www.linkedin.com/in/osunadavid/\";\nconst ERIK_LINK = \"https://www.linkedin.com/in/xuanqiang-zhao-364225153/\";\nconst LIXUAN_LINK = \"https://www.linkedin.com/in/lixuan-lang-3ba206143/\";\nconst ANDREW_LINK = \"https://www.linkedin.com/in/andrew-kuo-790243132/\";\nconst SETH_LINK = \"\";\nconst RAVNEET_LINK = \"\";\n\nclass LandingPage extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.footer = null;\n    this.returnHome = null;\n\n    this.onLaunchButton = this.onLaunchButton.bind(this);\n    this.onTutorialButton = this.onTutorialButton.bind(this);\n    this.onReturnHomeButton = this.onReturnHomeButton.bind(this);\n    this.onReportBugButton = this.onReportBugButton.bind(this);\n    this.onAboutButton = this.onAboutButton.bind(this);\n    this.onHelpButton = this.onHelpButton.bind(this);\n    this.onGithubButton = this.onGithubButton.bind(this);\n  }\n\n  componentDidMount()\n  {\n    //Parallax effect for footer\n    window.onscroll = (e) => {\n      let height = Math.max(\n        document.body.scrollHeight, document.documentElement.scrollHeight,\n        document.body.offsetHeight, document.documentElement.offsetHeight,\n        document.body.clientHeight, document.documentElement.clientHeight\n      ) - window.innerHeight;\n      let scroll = window.pageYOffset;\n      const value = Math.round(height - scroll) / 5;\n\n      if (this.footer && this.returnHome)\n      {\n        this.footer.style.bottom = value + \"px\";\n        this.returnHome.style.opacity = (scroll / height);\n      }\n    };\n  }\n\n  onLaunchButton(e)\n  {\n    //import(/* webpackChunkName: \"content\" */ 'content/App.js').then(({ default: _ }) => { Router.routeTo( _ ); });\n    Router.routeTo(App);\n  }\n\n  onTutorialButton(e)\n  {\n    const newTab = window.open(TUTORIAL_LINK, '_blank');\n    newTab.focus();\n  }\n\n  onReturnHomeButton(e)\n  {\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  }\n\n  onReportBugButton(e)\n  {\n    const newTab = window.open(REPORT_BUG_LINK, '_blank');\n    newTab.focus();\n  }\n\n  onAboutButton(e)\n  {\n    const newTab = window.open(ABOUT_LINK, '_blank');\n    newTab.focus();\n  }\n\n  onHelpButton(e)\n  {\n    const newTab = window.open(HELP_LINK, '_blank');\n    newTab.focus();\n  }\n\n  onGithubButton(e)\n  {\n    const newTab = window.open(GITHUB_LINK, '_blank');\n    newTab.focus();\n  }\n\n  render()\n  {\n    let launchText;\n\n    //Smallest\n    if (window.matchMedia(\"(max-width: 400px)\").matches)\n    {\n      launchText = \"\";\n    }\n    //Smaller\n    else if (window.matchMedia(\"(max-width: 760px)\").matches)\n    {\n      launchText = SMALLER_LAUNCH_BUTTON_TEXT;\n    }\n    //Small\n    else if (window.matchMedia(\"(max-width: 68em)\").matches)\n    {\n      launchText = SMALL_LAUNCH_BUTTON_TEXT;\n    }\n    //Default\n    else\n    {\n      launchText = LAUNCH_BUTTON_TEXT;\n    }\n\n    return <div className=\"landing-container\">\n\n      <div className=\"content-container\">\n\n        {/* HEADER*/}\n        <header>\n          <Logo id=\"logo\"/>\n        </header>\n\n        {/* CONTENT */}\n        <div className=\"content\">\n          <div className=\"content-quote-container\">\n            <Quote value={CONTENT_QUOTE} label={CONTENT_SUBQUOTE} />\n          </div>\n          <div className=\"launch-container\">\n            <div className=\"set-container\">\n              <span className=\"openset\">{\"{\"}</span>\n              <button id=\"launch-button\" onClick={this.onLaunchButton}>\n                {launchText}\n              </button>\n              <span className=\"closeset\">{\"}\"}</span>\n            </div>\n            <div id=\"tutorial-button-container\">\n              <button id=\"tutorial-button\" onClick={this.onTutorialButton}>\n                {TUTORIAL_BUTTON_TEXT}\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <div ref={ref=>this.returnHome=ref} id=\"return-home\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"\n            onClick={this.onReturnHomeButton}>\n              <path fill=\"none\" d=\"M0 0h24v24H0V0z\"/>\n              <path d=\"M4 12l1.41 1.41L11 7.83V20h2V7.83l5.58 5.59L20 12l-8-8-8 8z\"/>\n          </svg>\n        </div>\n      </div>\n\n      {/* FOOTER */}\n      <footer ref={ref=>this.footer=ref}>\n        <div className=\"utility\">\n          <div><a className=\"info\" onClick={this.onReportBugButton}>Report a Bug</a></div>\n          <div><a className=\"info\" onClick={this.onAboutButton}>About</a></div>\n          <div><a className=\"info\" onClick={this.onHelpButton}>Help</a></div>\n        </div>\n        <div className=\"credits\">\n          <span className=\"space\"></span>\n          <span className=\"left\">\n            <div>Professor</div>\n            <a className=\"nobreak\" onClick={()=>window.open(PROFMINNES_LINK, '_blank').focus()}>Mia Minnes</a>\n          </span>\n          <span className=\"right\">\n            <div>Developers</div>\n            <a onClick={()=>window.open(ANDREW_LINK, '_blank').focus()}>Andrew</a>\n            <a onClick={()=>window.open(LIXUAN_LINK, '_blank').focus()}>Lixuan</a>\n            <a onClick={()=>window.open(RAVNEET_LINK, '_blank').focus()}>Ravneet</a>\n            <a onClick={()=>window.open(SETH_LINK, '_blank').focus()}>Seth</a>\n            <div>+</div>\n            <a onClick={()=>window.open(MAYA_LINK, '_blank').focus()}>Maya</a>\n            <a onClick={()=>window.open(NOAH_LINK, '_blank').focus()}>Noah</a>\n            <a onClick={()=>window.open(DAVID_LINK, '_blank').focus()}>David</a>\n            <a onClick={()=>window.open(ERIK_LINK, '_blank').focus()}>Erik</a>\n          </span>\n          <span className=\"space\"></span>\n        </div>\n\n        <div>\n          <a className=\"info\" onClick={this.onGithubButton}>\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n              <path fill=\"none\" d=\"M0 0h24v24H0V0z\"/>\n              <path d=\"M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z\"/>\n            </svg>\n            Find it on <b>GitHub</b>\n          </a>\n        </div>\n\n        <div className=\"subtitle-container\">\n          <div className=\"subtitle\">\n            {\"\\u00A9 2018 University of California, San Diego. All rights reserved.\"}\n          </div>\n          <div className=\"subtitle\">\n            <label>{\"Thank you for reading me! Stay amazing!\"}</label>\n          </div>\n        </div>\n      </footer>\n    </div>;\n  }\n}\n\n//For hotloading this class\nexport default hot(LandingPage);\n","import React from 'react';\n\nclass Logo extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  //Override\n  render()\n  {\n    return <svg version=\"1.1\" id={this.props.id} xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\"\n    \t viewBox=\"0 0 300 100\">\n      <style type=\"text/css\">\n      {\n      \t`.st0{fill:none;stroke:#000000;stroke-miterlimit:10;}\n      \t.st1{fill:#FFC82C;stroke:#7E55F3;stroke-width:2;stroke-miterlimit:10;}\n      \t.st2{fill:none;stroke:#000000;stroke-width:2;stroke-miterlimit:10;}\n      \t.st3{font-family:'PTSans-Regular';}\n      \t.st4{font-size:90px;}\n      \t.st5{fill:none;}`\n      }\n      </style>\n      <path className=\"st0\" d=\"M43.7,20.1c0-9.4-8.5-17.1-19.1-17.1\"/>\n      <circle className=\"st1\" cx=\"44.1\" cy=\"45.3\" r=\"29.6\"/>\n      <polygon className=\"st2\" points=\"44.1,42.1 20.2,83.5 68,83.5 \"/>\n      <text transform=\"matrix(1 0 0 1 74.1533 77.1901)\" className=\"st3 st4\">flap.js</text>\n      <path className=\"st5\" d=\"M40.9,89c0,2.9,73.6,5.2,164.6,5.2\"/>\n      <path className=\"st5\" d=\"M228.2,65.6c0,15.8-10.1,28.6-22.7,28.6\"/>\n      <path className=\"st5\" d=\"M42.4,83.9c0,7,73,12.6,163.1,12.6\"/>\n      <path className=\"st5\" d=\"M228.2,65.6c0,15.8-10.1,28.6-22.7,28.6\"/>\n      <path className=\"st5\" d=\"M228.2,65.6c0,15.8-10.1,28.6-22.7,28.6\"/>\n      <path className=\"st0\" d=\"M227.6,72.1c0,13.7-22.7,24.8-50.7,24.8\"/>\n      <path className=\"st0\" d=\"M6,20.1C6,10.7,14.5,3.1,25,3.1\"/>\n      <line className=\"st0\" x1=\"6\" y1=\"20.1\" x2=\"6\" y2=\"77.2\"/>\n      <path className=\"st0\" d=\"M6,77.2C6,88.1,27,96.9,53,96.9\"/>\n      <line className=\"st0\" x1=\"57.3\" y1=\"96.9\" x2=\"177.4\" y2=\"96.9\"/>\n      <line className=\"st0\" x1=\"53\" y1=\"96.9\" x2=\"64.5\" y2=\"96.9\"/>\n    </svg>;\n  }\n}\n\nexport default Logo;\n","import React from 'react';\nimport './Quote.css';\n\nclass Quote extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <div className=\"quote-container\">\n      <div className=\"quote\">\n        {this.props.value}\n      </div>\n      <div className=\"subquote\">\n        {this.props.label}\n      </div>\n    </div>;\n  }\n}\n\nexport default Quote;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n//Changelog: imports\nimport Changelog from 'changelog.js';\n\n//Router: imports\nimport Router from 'router.js';\nimport App from 'content/App.js';\nimport LandingPage from 'landing/components/LandingPage.js';\n\n//Config: imports\nimport Config from 'config.js';\nimport { loadConfig, saveConfig } from 'config.js';\nconst AUTOSAVE_CONFIG = true;\n//LocalSave: imports\nimport LocalSave from 'system/localsave/LocalSave.js';\n\nconst SHOULD_WARN_USERS_ON_EXIT = true;\n\n//Setup viewport\nwindow.addEventListener('load', (event) => {\n  console.log(\"Preparing for \\'\" + process.env.NODE_ENV + \"\\' environment...\");\n  loadApplication();\n  window.requestAnimationFrame(updateApplication);\n});\n\n//Warn user before exit\nwindow.addEventListener('beforeunload', (event) => {\n  //Config: Only save if changes were made\n  if (AUTOSAVE_CONFIG) saveConfig();\n\n  if (SHOULD_WARN_USERS_ON_EXIT && LocalSave.getStringFromStorage(\"disableExitWarning\") !== \"true\")\n  {\n    const message = I18N.toString(\"alert.window.exit\");\n    event = event || window.event;\n    // For IE and Firefox\n    if (event) event.returnValue = message;\n\n    //For Safari\n    return message;\n  }\n});\n\n//Tell the client that an update is available\nwindow.isUpdateAvailable.then(hasUpdate => {\n  if (hasUpdate)\n  {\n    let message = \"\";\n    if (Changelog && Changelog['show'])\n    {\n      message += Changelog['log'];\n    }\n\n    console.log(\"[App] Found update for version \" + process.env.VERSION + \"...\");\n    window.alert(\"*** New update available! *** \\n Please restart the browser.\" +\n      (message ? \"\\n\" + message : \"\"));\n  }\n});\n\n//Setup application\nconst FRAMES_PER_SECOND = 60;\nvar prevtime = 0;\nvar root;\nvar dt;\n\n//Load application\nfunction loadApplication()\n{\n  loadConfig();\n  root = document.getElementById(\"root\");\n\n  //This should be the same as the one referred to by OptionsPanel\n  if (LocalSave.getStringFromStorage(\"enableExperimental\") === \"true\")\n  {\n    import(/* webpackChunkName: \"experimental\" */ 'experimental/App.js')\n      .then(({ default: _ }) => Router.routeTo( _ ));\n  }\n  else if (LocalSave.getStringFromStorage(\"skipWelcome\") === \"true\")\n  {\n    Router.routeTo(App);\n  }\n  else\n  {\n    Router.routeTo(LandingPage);\n  }\n}\n\n//Update application\nfunction updateApplication(time)\n{\n  dt = (time - prevtime) / FRAMES_PER_SECOND;\n  {\n    const page = Router.getCurrentPage();\n    if (page)\n    {\n      ReactDOM.render(React.createElement(page), root);\n    }\n  }\n  prevtime = time;\n  window.requestAnimationFrame(updateApplication);\n}\n","export function solveDFA(dfa, input)\n{\n  if (typeof input == 'string') input = input[Symbol.iterator]();\n  \n  let state = dfa.getStartState();\n  let symbol = null;\n  while((symbol = input.next().value) != null)\n  {\n    state = dfa.doTransition(state, symbol);\n  }\n  return dfa.isFinalState(state);\n};\n","import React from 'react';\n\nclass WorkingIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"working-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path d=\"M19 8l-4 4h3c0 3.31-2.69 6-6 6-1.01 0-1.97-.25-2.8-.7l-1.46 1.46C8.97 19.54 10.43 20 12 20c4.42 0 8-3.58 8-8h3l-4-4zM6 12c0-3.31 2.69-6 6-6 1.01 0 1.97.25 2.8.7l1.46-1.46C15.03 4.46 13.57 4 12 4c-4.42 0-8 3.58-8 8H1l4 4 4-4H6z\"/>\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n    </svg>;\n  }\n}\n\nexport default WorkingIcon;\n","import React from 'react';\n\nclass StateErrorMessage extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.targetIndex = 0;\n    this.targetLabel = \"\";\n    const targets = props.message.value.targets;\n    for(const target of targets)\n    {\n      if (this.targetLabel.length > 0)\n      {\n        this.targetLabel += \", \";\n      }\n      this.targetLabel += target.getNodeLabel();\n    }\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick(e)\n  {\n    const graphController = this.props.graphController;\n    const machineController = this.props.machineController;\n    const buttonValue = e.target.value;\n    const message = this.props.message;\n    switch(buttonValue)\n    {\n      case \"locate\":\n      {\n        const targets = message.value.targets;\n        const targetLength = targets.length;\n        if (targetLength > 0 && this.targetIndex < targetLength)\n        {\n          //Locate the target edge\n          const target = targets[this.targetIndex++];\n          if (this.targetIndex >= targetLength) this.targetIndex = 0;\n\n          //Move pointer to target\n          graphController.focusOnNode(target);\n        }\n      }\n      break;\n      case \"deleteall\":\n      {\n        const targets = message.value.targets;\n        //Delete all target nodes\n        graphController.deleteTargetNodes(targets);\n\n        //Sort the nodes after deleting if enabled...\n        machineController.getMachineBuilder().labeler.sortDefaultNodeLabels();\n\n        //Exit the message\n        message.close();\n      }\n      break;\n      default:\n        throw new Error(\"Unknown button value for message\");\n    }\n  }\n\n  //Override\n  render()\n  {\n    const message = this.props.message;\n    return <div>\n      <p>{message.value.text + \": \" + this.targetLabel}</p>\n      <button value=\"locate\" onClick={this.onClick}>{I18N.toString(\"message.action.locate\")}</button>\n      <button value=\"deleteall\" onClick={this.onClick}>{I18N.toString(\"message.action.deleteall\")}</button>\n    </div>;\n  }\n}\n\nexport default StateErrorMessage;\n","import React from 'react';\n\nclass MoreIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"more-icon\" xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n      <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n      <path d=\"M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"/>\n    </svg>;\n  }\n}\n\nexport default MoreIcon;\n","import React from 'react';\n\nclass OfflinePinIcon extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  render()\n  {\n    return <svg className=\"offline-pin-icon\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\">\n        <path d=\"M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm5 16H7v-2h10v2zm-6.7-4L7 10.7l1.4-1.4 1.9 1.9 5.3-5.3L17 7.3 10.3 14z\"/>\n    </svg>;\n  }\n}\n\nexport default OfflinePinIcon;\n"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/app/graph/parser/NodalGraphParser.js","webpack:///./src/app/modules/default/DefaultGraphExporter.js","webpack:///./src/app/modules/default/GraphPicker.js","webpack:///./src/app/modules/default/DefaultInputController.js","webpack:///./src/app/modules/default/DefaultGraphLabeler.js","webpack:///./src/app/modules/default/DefaultGraphController.js","webpack:///./src/app/modules/default/DefaultMachineController.js","webpack:///./src/app/modules/default/DefaultPanel.js","webpack:///./src/app/graph/renderer/GraphNodeRenderer.js","webpack:///./src/app/graph/renderer/QuadraticEdgeRenderer.js","webpack:///./src/app/modules/default/DefaultGraphRenderer.js","webpack:///./src/app/modules/default/DefaultGraphOverlayRenderer.js","webpack:///./src/app/modules/default/DefaultViewportRenderer.js","webpack:///./src/app/modules/default/DefaultLabelEditor.js","webpack:///./src/app/modules/default/DefaultModule.js","webpack:///./src/app/modules/dfs/DFSModule.js"],"names":["JSON","data","dst","arguments","length","undefined","nodeDatas","nodeCount","Math","min","edgeDatas","edgeCount","hasQuad","clear","NodalGraph","GraphNode","QuadraticEdge","GraphEdge","nodeIndices","Map","i","nodeData","node","createNode","setNodeLabel","set","edgeData","sourceNode","get","destinationNode","edge","createEdge","setEdgeLabel","quadData","setQuadratic","graph","graphNodes","getNodes","graphEdges","getEdges","Array","elementID","getGraphElementID","id","x","y","label","getNodeLabel","flag","quad","getQuadratic","edgeSource","getSourceNode","edgeDestination","getDestinationNode","sourceIndex","has","destinationIndex","from","to","getEdgeLabel","radians","nodes","edges","_version","DefaultGraphExporter","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","AbstractGraphExporter","module","getGraphController","getGraph","JSONGraphParser","graphData","getModuleName","version","process","getModuleVersion","timestamp","Date","toString","fromJSON","toJSON","fileBlob","_this","Promise","resolve","reject","filename","name","endsWith","getFileType","Error","reader","FileReader","onload","e","graphController","target","result","substring","emit","jsonData","parse","abort","onerror","error","code","readAsText","jsonString","stringify","downloadText","JSONFileIcon","GraphPicker","GraphPicker_classCallCheck","selectionBox","fromX","fromY","toX","toY","visible","targets","targetType","initialTarget","initialTargetType","type","getEdgeByEndPointAt","getNodeAt","getEdgeAt","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","value","dx","dy","Config","NODE_RADIUS_SQU","err","return","center","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","getCenterPoint","EDGE_RADIUS_SQU","end","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","getEndPoint","ENDPOINT_RADIUS_SQU","box","mx","max","my","lx","ly","clearSelection","x1","y1","x2","y2","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","push","getNodesWithin","includes","getSelection","DEFAULT_SHOULD_DESTROY_POINTLESS_EDGE","DefaultInputController","inputAdapter","DefaultInputController_classCallCheck","DefaultInputController_possibleConstructorReturn","DefaultInputController_getPrototypeOf","_picker","_graphController","prevPointerX","prevPointerY","isNewEdge","shouldDestroyPointlessEdges","_swapMouseScheme","_trashMode","AbstractModuleInputController","_get","prototype","picker","_inputAdapter","getPointerX","getPointerY","updateTarget","hasTarget","document","body","style","cursor","pointer","getPicker","setInitialTarget","hasSelection","isTargetInSelection","isTrashMode","prevX","prevY","deleteSelectedNodes","deleteTargetNode","deleteTargetEdge","openLabelEditor","getInputAdapter","getViewport","isMoveMode","isPlaceholder","Node","Edge","targetQuad","prevQuad","ghostInitialMarker","getGraphLabeler","getDefaultEdgeLabel","edgeQuad","beginSelection","prevEdgeTo","moveMultipleNodesTo","moveNodeTo","moveEdgeTo","moveEndpointTo","isSelecting","updateSelection","deleteEdge","changeDestinationNode","endSelection","clearTarget","zoomValue","prevValue","enabled","shouldInputFirst","isAltInput","isDragging","isPointerActive","labelFormatter","string","DefaultGraphLabeler","DefaultGraphLabeler_classCallCheck","DefaultGraphLabeler_possibleConstructorReturn","DefaultGraphLabeler_getPrototypeOf","AbstractGraphLabeler","DefaultGraphController","DefaultGraphController_classCallCheck","DefaultGraphController_possibleConstructorReturn","DefaultGraphController_getPrototypeOf","inputController","machineController","labelEditorElement","registerEvent","AbstractModuleGraphController","DefaultGraphController_get","getInputController","getMachineController","prev","isPrevCustom","getNodeCustom","setNodeCustom","newNodeLabel","getDefaultNodeLabel","random","SPAWN_RADIUS","selectedNode","selection","slice","deleteNode","other","nodeSize","getNodeSize","angle","atan2","diameter","nextDX","cos","nextDY","sin","pos","getInputEventPosition","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","changeInputEventPosition","setQuadraticByCoords","isSelfLoop","PI","_this2","placeholder","replace","callback","prevLabel","openEditor","setOffset","ax","ay","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","Eventable","mixin","DefaultMachineController","DefaultMachineController_classCallCheck","DefaultMachineController_possibleConstructorReturn","DefaultMachineController_getPrototypeOf","_machineName","AbstractModuleMachineController","DefaultPanel","props","DefaultPanel_classCallCheck","DefaultPanel_possibleConstructorReturn","DefaultPanel_getPrototypeOf","container","React","Component","react_default","a","createElement","className","ref","GraphNodeRenderer","GraphNodeRenderer_classCallCheck","GraphNodeRenderer_possibleConstructorReturn","GraphNodeRenderer_getPrototypeOf","fill","stroke","cx","cy","r","pointerEvents","userSelect","fontSize","textAnchor","SIXTH_PI","QuadraticEdgeRenderer","QuadraticEdgeRenderer_classCallCheck","QuadraticEdgeRenderer_possibleConstructorReturn","QuadraticEdgeRenderer_getPrototypeOf","start","getStartPoint","quadCoords","getQuadraticAsCoords","edgeDir","getEdgeDirection","flipLabel","quadLine","arrowAngle","isQuadratic","labels","split","d","transform","map","str","yy","key","alignmentBaseline","HLSMGraphRenderer","DefaultGraphRenderer_classCallCheck","DefaultGraphRenderer_possibleConstructorReturn","DefaultGraphRenderer_getPrototypeOf","currentModule","renderer_GraphNodeRenderer","renderer_QuadraticEdgeRenderer","DefaultGraphOverlayRenderer","DefaultGraphOverlayRenderer_classCallCheck","DefaultGraphOverlayRenderer_possibleConstructorReturn","DefaultGraphOverlayRenderer_getPrototypeOf","parent","getSelectionBox","HighlightRenderer","SelectionBoxRenderer","DefaultViewportRenderer","DefaultViewportRenderer_classCallCheck","DefaultViewportRenderer_possibleConstructorReturn","DefaultViewportRenderer_getPrototypeOf","screen","LabelEditor","getLabelEditor","width","CursorMode","TrashCan","viewport","EMPTY_CHAR","DefaultLabelEditor","DefaultLabelEditor_classCallCheck","DefaultLabelEditor_getPrototypeOf","parentElement","inputElement","_timer","_prevValue","state","onContextMenu","bind","DefaultLabelEditor_assertThisInitialized","onFormat","onSubmit","targetElement","defaultText","setState","targetLabel","resetValue","setValue","focus","saveOnExit","blur","hasFocus","preventDefault","stopPropagation","symbol","appendValue","SYMBOL_SEPARATOR","newValue","closeEditor","getEdgeLabelFormatter","_this3","targetStyle","visibility","screenPos","svg","ctm","getScreenCTM","f","transformViewToScreen","getOffsetX","getOffsetY","offsetX","offsetWidth","offsetY","offsetHeight","top","left","tabIndex","onFocus","clearTimeout","onBlur","setTimeout","FormattedInput","formatter","captureOnExit","multiline","PANELS","EXPORTERS","DefaultModule","app","DefaultModule_classCallCheck","DefaultModule_getPrototypeOf","_inputController","DefaultModule_assertThisInitialized","_machineController","AbstractModule","DefaultModule_get","renderLayer","DefaultGraphRenderer","DFSModule"],"mappings":"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","file":"module_dfs.bundle.5e4d502360db3dcf1543.js","sourcesContent":["import NodalGraph from '../NodalGraph.js';\n\nimport GraphNode from '../GraphNode.js';\nimport GraphEdge from '../GraphEdge.js';\nimport QuadraticEdge from '../QuadraticEdge.js';\n\nconst GRAPH_PARSER_VERSION = \"1.0.0\";\n\nexport const JSON = {\n  parse(data, dst=null)\n  {\n    const nodeDatas = data['nodes'] || [];\n    const nodeCount = Math.min(nodeDatas.length || 0, data['nodeCount'] || 0);\n    const edgeDatas = data['edges'] || [];\n    const edgeCount = Math.min(edgeDatas.length || 0, data['edgeCount'] || 0);\n    const hasQuad = data['quad'] || false;\n\n    if (!dst) dst = new NodalGraph(GraphNode, hasQuad ? QuadraticEdge : GraphEdge);\n    else dst.clear();\n\n    const nodeIndices = new Map();\n    for(let i = 0; i < nodeCount; ++i)\n    {\n      const nodeData = nodeDatas[i];\n      if (!nodeData) continue;\n\n      //NOTE: Assumes createNode will maintain order\n      const node = dst.createNode(nodeData['x'] || 0, nodeData['y'] || 0, nodeData['id']);\n      node.setNodeLabel(nodeData['label'] || \"\");\n\n      nodeIndices.set(i, node);\n    }\n\n    for(let i = 0; i < edgeCount; ++i)\n    {\n      const edgeData = edgeDatas[i];\n      if (!edgeData) continue;\n      const sourceNode = nodeIndices.get(edgeData['from']) || null;\n      //Cannot create source-less edges\n      if (!sourceNode) continue;\n      const destinationNode = nodeIndices.get(edgeData['to']) || null;\n      //NOTE: Assumes createEdge will maintain order\n      const edge = dst.createEdge(sourceNode, destinationNode, edgeData['id']);\n      edge.setEdgeLabel(edgeData['label'] || \"\");\n\n      if (edge instanceof QuadraticEdge)\n      {\n        const quadData = edgeData['quad'] || {};\n        edge.setQuadratic(quadData['radians'] || 0, quadData['length'] || 0);\n      }\n    }\n\n    return dst;\n  },\n  objectify(graph)\n  {\n    const graphNodes = graph.getNodes() || [];\n    const nodeCount = graphNodes.length || 0;\n    const graphEdges = graph.getEdges() || [];\n    const edgeCount = graphEdges.length || 0;\n\n    const nodeDatas = new Array(nodeCount);\n    const nodeIndices = new Map();\n    for(let i = 0; i < nodeCount; ++i)\n    {\n      const node = graphNodes[i];\n      if (node)\n      {\n        //NOTE: Assumes node must have an id\n        const elementID = node.getGraphElementID();\n\n        nodeIndices.set(node, i);\n        nodeDatas[i] = {\n          id: elementID,\n          x: node.x || 0, y: node.y || 0,\n          label: node.getNodeLabel() || \"\"\n        };\n      }\n    }\n\n    let flag = false;\n    const edgeDatas = new Array(edgeCount);\n    for(let i = 0; i < edgeCount; ++i)\n    {\n      const edge = graphEdges[i];\n      if (edge)\n      {\n        //NOTE: Assumes edge must have an id\n        const elementID = edge.getGraphElementID();\n\n        const quad = edge.getQuadratic() || {};\n        const edgeSource = edge.getSourceNode();\n        const edgeDestination = edge.getDestinationNode();\n        const sourceIndex = nodeIndices.has(edgeSource) ? nodeIndices.get(edgeSource) : -1;\n        const destinationIndex = nodeIndices.has(edgeDestination) ? nodeIndices.get(edgeDestination) : -1;\n        edgeDatas[i] = {\n          id: elementID,\n          from: sourceIndex,\n          to: destinationIndex,\n          label: edge.getEdgeLabel() || \"\"\n        };\n\n        if (edge instanceof QuadraticEdge)\n        {\n          flag = true;\n          edgeDatas[i]['quad'] = {\n            radians: quad['radians'] || 0,\n            length: quad['length'] || 0\n          };\n        }\n      }\n    }\n\n    return {\n      nodeCount: nodeCount,\n      nodes: nodeDatas,\n      edgeCount: edgeCount,\n      edges: edgeDatas,\n      hasQuad: flag,\n      _version: GRAPH_PARSER_VERSION\n    };\n  }\n};\n","import AbstractGraphExporter from 'modules/abstract/exporter/AbstractGraphExporter.js';\n\nimport JSONFileIcon from 'icons/flat/JSONIcon.js';\nimport { JSON as JSONGraphParser } from 'graph/parser/NodalGraphParser.js';\nimport { downloadText } from 'util/Downloader.js';\n\nclass DefaultGraphExporter extends AbstractGraphExporter\n{\n  constructor() { super(); }\n\n  fromJSON(data, module)\n  {\n    const graphController = module.getGraphController();\n    const graph = graphController.getGraph();\n\n    const metadata = '_metadata' in data ? data['_metadata'] : {};\n    const newGraph = JSONGraphParser.parse(data.graphData, graph);\n    return newGraph;\n  }\n\n  toJSON(graphData, module)\n  {\n    const graphController = module.getGraphController();\n\n    const dst = {};\n    dst[\"_metadata\"] = {\n      module: module.getModuleName(),\n      version: process.env.VERSION + \":\" + module.getModuleVersion(),\n      timestamp: new Date().toString()\n    };\n    dst[\"graphData\"] = graphData;\n    return dst;\n  }\n\n  //Override\n  importFromData(data, module)\n  {\n    this.fromJSON(data, module);\n  }\n\n  //Override\n  exportToData(module)\n  {\n    const graph = module.getGraphController().getGraph();\n    const graphData = JSONGraphParser.objectify(graph);\n    const result = this.toJSON(graphData, module);\n    return result;\n  }\n\n  //Override\n  importFromFile(fileBlob, module)\n  {\n    return new Promise((resolve, reject) => {\n      const filename = fileBlob.name;\n      if (!filename.endsWith(this.getFileType()))\n      {\n        throw new Error(\"Trying to import invalid file type for \\'\" + this.getFileType() + \"\\': \" + filename);\n      }\n\n      const reader = new FileReader();\n      reader.onload = e => {\n        const graphController = module.getGraphController();\n        const data = e.target.result;\n        const name = filename.substring(0, filename.length - this.getFileType().length - 1);\n        const graph = graphController.getGraph();\n\n        //TODO: this should not be here, this should exist somewhere in graphController\n        graphController.emit(\"userPreImportGraph\", graph);\n\n        try\n        {\n          const jsonData = JSON.parse(data);\n\n          this.fromJSON(jsonData, module);\n\n          graphController.emit(\"userImportGraph\", graph);\n\n          resolve();\n        }\n        catch (e)\n        {\n          reader.abort();\n          reject(e);\n        }\n        finally\n        {\n          graphController.emit(\"userPostImportGraph\", graph);\n        }\n      };\n\n      reader.onerror = e => {\n        reject(new Error(\"Unable to import file: \" + e.target.error.code));\n      }\n\n      reader.readAsText(fileBlob);\n    });\n  }\n\n  //Override\n  exportToFile(filename, module)\n  {\n    const graph = module.getGraphController().getGraph();\n    const graphData = JSONGraphParser.objectify(graph);\n    const dst = this.toJSON(graphData, module);\n    const jsonString = JSON.stringify(dst);\n    downloadText(filename + '.' + this.getFileType(), jsonString);\n  }\n\n  //Override\n  doesSupportData() { return true; }\n  //Override\n  doesSupportFile() { return true; }\n  //Override\n  canImport() { return true; }\n  //Override\n  getTitle() { return \"Save machine to JSON\"; }\n  //Override\n  getLabel() { return \"Save machine to JSON\"; }\n  //Override\n  getFileType() { return \"json\"; }\n  //Override\n  getIconClass() { return JSONFileIcon; }\n}\n\nexport default DefaultGraphExporter;\n","import Config from 'config.js';\n\nclass GraphPicker\n{\n  constructor()\n  {\n    this.selectionBox = {\n      fromX: 0, fromY: 0,\n      toX: 0, toY: 0,\n      visible: false\n    };\n    this.targets = [];\n\n    this.target = null;\n    this.targetType = \"\";\n\n    this.initialTarget = null;\n    this.initialTargetType = \"\";\n  }\n\n  setInitialTarget(target, type)\n  {\n    this.initialTarget = target;\n    this.initialTargetType = type;\n  }\n\n  updateTarget(graph, x, y)\n  {\n    if (this.target = this.getEdgeByEndPointAt(graph, x, y))\n    {\n      //Clicked on endpoint\n      this.targetType = \"endpoint\";\n    }\n    else if (this.target = this.getNodeAt(graph, x, y))\n    {\n      //Clicked on node\n      this.targetType = \"node\";\n    }\n    else if (this.target = this.getEdgeAt(graph, x, y))\n    {\n      //Clicked on edge\n      this.targetType = \"edge\";\n    }\n    else\n    {\n      //Clicked on graph\n      this.target = null;\n      this.targetType = \"none\";\n    }\n\n    return this.target;\n  }\n\n  clearTarget()\n  {\n    this.target = null;\n    this.targetType = \"none\";\n  }\n\n  hasTarget()\n  {\n    return this.target != null;\n  }\n\n  getNodeAt(graph, x, y)\n  {\n    //Search graph\n    for(const node of graph.getNodes())\n    {\n      const dx = x - node.x;\n      const dy = y - node.y;\n      if (dx * dx + dy * dy < Config.NODE_RADIUS_SQU)\n      {\n        return node;\n      }\n    }\n    return null;\n  }\n\n  getEdgeAt(graph, x, y)\n  {\n    const center = {x: 0, y: 0};\n\n    //Search graph\n    for(const edge of graph.getEdges())\n    {\n      edge.getCenterPoint(center);\n      const dx = x - center.x;\n      const dy = y - center.y;\n      if (dx * dx + dy * dy < Config.EDGE_RADIUS_SQU)\n      {\n        return edge;\n      }\n    }\n    return null;\n  }\n\n  getEdgeByEndPointAt(graph, x, y)\n  {\n    const end = {x: 0, y: 0};\n    //Search graph\n    for(const edge of graph.getEdges())\n    {\n      edge.getEndPoint(end);\n      const dx = x - end.x;\n      const dy = y - end.y;\n      if (dx * dx + dy * dy < Config.ENDPOINT_RADIUS_SQU)\n      {\n        return edge;\n      }\n    }\n    return null;\n  }\n\n  getSelectionBox()\n  {\n    return this.selectionBox;\n  }\n\n  getSelection(graph, forceUpdate=false)\n  {\n    if (forceUpdate)\n    {\n      const box = this.selectionBox;\n      const mx = Math.max(box.toX, box.fromX);\n      const my = Math.max(box.toY, box.fromY);\n      const lx = Math.min(box.toX, box.fromX);\n      const ly = Math.min(box.toY, box.fromY);\n      this.clearSelection();\n      getNodesWithin(graph, lx, ly, mx, my, this.targets);\n    }\n\n    return this.targets;\n  }\n\n  hasSelection()\n  {\n    return this.targets.length > 0;\n  }\n\n  clearSelection()\n  {\n    this.targets.length = 0;\n  }\n\n  isTargetInSelection(target)\n  {\n    return this.targets.includes(target || this.target);\n  }\n\n  isTarget(target)\n  {\n    return this.target == target;\n  }\n\n  beginSelection(graph, x, y)\n  {\n    const box = this.selectionBox;\n    box.fromX = box.toX = x;\n    box.fromY = box.toY = y;\n    this.clearSelection();\n\n    box.visible = true;\n  }\n\n  updateSelection(graph, x, y)\n  {\n    const box = this.selectionBox;\n    box.toX = x;\n    box.toY = y;\n    this.getSelection(graph, true);\n  }\n\n  endSelection(graph, x, y)\n  {\n    const box = this.selectionBox;\n    box.toX = x;\n    box.toY = y;\n    this.getSelection(graph, true);\n\n    box.visible = false;\n  }\n\n  isSelecting()\n  {\n    return this.selectionBox.visible;\n  }\n}\n\nfunction getNodesWithin(graph, x1, y1, x2, y2, dst)\n{\n  const fromX = Math.min(x1, x2);\n  const fromY = Math.min(y1, y2);\n  const toX = Math.max(x1, x2);\n  const toY = Math.max(y1, y2);\n\n  for(const node of graph.getNodes())\n  {\n    if (node.x >= fromX && node.x < toX &&\n        node.y >= fromY && node.y < toY)\n    {\n      dst.push(node);\n    }\n  }\n  return dst;\n}\n\nexport default GraphPicker;\n","import AbstractModuleInputController from 'modules/abstract/AbstractModuleInputController.js';\n\nimport GraphPicker from './GraphPicker.js';\nimport Node from 'graph/GraphNode.js';\nimport Edge from 'graph/QuadraticEdge.js';\n\nconst DEFAULT_SHOULD_DESTROY_POINTLESS_EDGE = true;\nconst STR_TRANSITION_DEFAULT_LABEL = \"\";\n\nclass DefaultInputController extends AbstractModuleInputController\n{\n  constructor(module, inputAdapter)\n  {\n    super(module, inputAdapter);\n\n    this._picker = new GraphPicker();\n\n    this._graphController = null;\n\n    //Used to check if target needs to be updated for the hover effect\n    this.prevPointerX = 0;\n    this.prevPointerY = 0;\n\n    //Make sure this is always false when moving endpoints\n    this.isNewEdge = false;\n\n    //Whether to destroy pointless edges\n    this.shouldDestroyPointlessEdges = DEFAULT_SHOULD_DESTROY_POINTLESS_EDGE;\n\n    //Swap left to right clicks and vice versa on anything else but Macs\n    this._swapMouseScheme = true;//!navigator.platform.startsWith(\"Mac\");\n\n    //Used to determine whether the target should be destroyed because of trash mode\n    this._trashMode = false;\n  }\n\n  //Override\n  initialize(module)\n  {\n    super.initialize(module);\n\n    this._graphController = module.getGraphController();\n  }\n\n  //Override\n  destroy(module)\n  {\n    super.destroy(module);\n  }\n\n  //Override\n  update(module)\n  {\n    const graph = this._graphController.getGraph();\n    const picker = this._picker;\n    const x = this._inputAdapter.getPointerX();\n    const y = this._inputAdapter.getPointerY();\n\n    if (x != this.prevPointerX || y != this.prevPointerY)\n    {\n      this.prevPointerX = x;\n      this.prevPointerY = y;\n\n      //Update target\n      picker.updateTarget(graph, x, y);\n\n      //HACK: to make the cursor look like a pointer when targeting\n      if (picker.hasTarget())\n      {\n        document.body.style.cursor = \"pointer\";\n      }\n      else\n      {\n        document.body.style.cursor = \"auto\";\n      }\n    }\n  }\n\n  //Override\n  onPreInputEvent(pointer)\n  {\n    const inputController = this;\n    const graphController = this._graphController;\n\n    const graph = graphController.getGraph();\n    const picker = inputController.getPicker();\n    picker.updateTarget(graph, pointer.x, pointer.y);\n    picker.setInitialTarget(picker.target, picker.targetType);\n\n    const target = picker.initialTarget;\n    const targetType = picker.initialTargetType;\n\n    if (picker.hasSelection())\n    {\n      //Unselect everything is clicked on something other than nodes...\n      if (targetType != \"node\" || !picker.isTargetInSelection(target))\n      {\n        picker.clearSelection();\n      }\n    }\n\n    return super.onPreInputEvent(pointer);\n  }\n\n  //Override\n  onInputEvent(pointer)\n  {\n    const inputController = this;\n    const graphController = this._graphController;\n\n    const x = pointer.x;\n    const y = pointer.y;\n\n    const graph = graphController.getGraph();\n    const picker = inputController.getPicker();\n    picker.updateTarget(graph, x, y);\n    const target = picker.initialTarget;\n    const targetType = picker.initialTargetType;\n\n    //If is in trash mode... capture all events!\n    if (inputController.isTrashMode())\n    {\n      //Click to delete node\n      if (targetType === 'node')\n      {\n        //So that the emitted 'delete' events can use this\n        graphController.prevX = target.x;\n        graphController.prevY = target.y;\n\n        //If there exists selected states, delete them all!\n        if (picker.hasSelection())\n        {\n          //Delete all selected nodes\n          graphController.deleteSelectedNodes(target);\n        }\n        else\n        {\n          //Delete a single node\n          graphController.deleteTargetNode(target);\n        }\n\n        return true;\n      }\n      else if (targetType === 'edge' || targetType === 'endpoint')\n      {\n        //Delete a single edge\n        graphController.deleteTargetEdge(target);\n        return true;\n      }\n\n      //Clicked on something you cannot delete\n      //return true;\n      return false;\n    }\n\n    //If not in Trash Mode, then events should pass through to here...\n    //Otherwise, ALL events are captured to prevent ALL default behavior.\n\n    //Edit label for selected edge\n    if (targetType === 'node')\n    {\n      graphController.openLabelEditor(target, x, y);\n      return true;\n    }\n    //Edit label for selected edge\n    if (targetType === 'edge')\n    {\n      graphController.openLabelEditor(target, x, y);\n      return true;\n    }\n    if (targetType !== 'none')\n    {\n      //Do nothing\n      return true;\n    }\n\n    return super.onInputEvent(pointer);\n  }\n\n  //Override\n  onDblInputEvent(pointer)\n  {\n    const graphController = this._graphController;\n    const x = pointer.x;\n    const y = pointer.y;\n\n    if (!this.isTrashMode())\n    {\n      //Create state at position\n      graphController.createNode(x, y);\n      return true;\n    }\n    else\n    {\n      graphController.emit(\"tryCreateWhileTrash\");\n      return true;\n    }\n\n    return super.onDblInputEvent(pointer);\n  }\n\n  //Override\n  onDragStart(pointer)\n  {\n    const inputController = this;\n    const graphController = this._graphController;\n\n    const graph = graphController.getGraph();\n    const picker = inputController.getPicker();\n    const x = pointer.x;\n    const y = pointer.y;\n    const target = picker.initialTarget;\n    const targetType = picker.initialTargetType;\n\n    const viewport = inputController.getInputAdapter().getViewport();\n\n    //If is in move mode...\n    if (inputController.isMoveMode())\n    {\n      //Make sure it is not in trash mode\n      if (inputController.isTrashMode())\n      {\n        //inputController.setMoveMode(false, true);//Set to false\n\n        graphController.emit(\"tryCreateWhileTrash\");\n        return false;\n      }\n\n      //Make sure it is not in new edge mode\n      inputController.isNewEdge = false;\n\n      //Makes sure that placeholders are not quadratics!\n      if (targetType === 'edge' && target.isPlaceholder())\n      {\n        //inputController.setMoveMode(false, true);//Set to false\n\n        //Ignore drag event...\n        return false;\n      }\n      //Moving node (and selected nodes)\n      else if (targetType === 'node')\n      {\n        //target MUST be an instance of Node...\n        if (!(target instanceof Node))\n          throw new Error(\"Invalid target \" + target + \" for type \\'\" + targetType + \"\\'. Must be an instance of Node.\");\n\n        //Ready to move node(s)...\n        graphController.prevX = target.x;\n        graphController.prevY = target.y;\n        return true;\n      }\n      //Moving edge center point\n      else if (targetType === 'edge')\n      {\n        //target MUST be an instance of Edge...\n        if (!(target instanceof Edge))\n          throw new Error(\"Invalid target \" + target + \" for type \\'\" + targetType + \"\\'. Must be an instance of Edge.\");\n\n        //Makes sure that placeholders are not quadratics!\n        if (target.isPlaceholder())\n        {\n          //inputController.setMoveMode(false, true);//Set to false\n          return false;\n        }\n\n        //Save previous quadratics\n        const targetQuad = target.getQuadratic();\n        graphController.prevQuad.radians = targetQuad.radians;\n        graphController.prevQuad.length = targetQuad.length;\n\n        //Ready to move the edge vertex to pointer...\n        return true;\n      }\n      //Moving initial marker\n      else if (targetType === 'initial')\n      {\n        inputController.ghostInitialMarker = pointer;\n\n        //Ready to move the initial marker to another state...\n        return true;\n      }\n    }\n    //If is NOT in move mode...\n    else\n    {\n      //If input dragged a node...\n      if (targetType === 'node')\n      {\n        if (!inputController.isTrashMode())\n        {\n          const edge = graph.createEdge(target, pointer);\n          edge.setEdgeLabel(graphController.getGraphLabeler().getDefaultEdgeLabel());\n\n          //Redirect pointer to refer to the edge as the new target\n          picker.setInitialTarget(edge, \"endpoint\");\n          inputController.isNewEdge = true;\n\n          //Reset previous quad values for new proxy edge\n          const edgeQuad = edge.getQuadratic();\n          graphController.prevQuad.radians = edgeQuad.radians;\n          graphController.prevQuad.length = edgeQuad.length;\n\n          //Ready to move proxy edge to pointer...\n          //inputController.setMoveMode(true, true);\n          return true;\n        }\n        else\n        {\n          graphController.emit(\"tryCreateWhileTrash\");\n          return false;\n        }\n      }\n      else if (targetType == 'edge')\n      {\n        //Do nothing.\n        return false;\n      }\n      //If input dragged nothing...\n      else if (targetType === 'none')\n      {\n        //Begin selection box...\n        picker.beginSelection(graph, x, y);\n        return true;\n      }\n    }\n\n    //In either moving or not... moving endpoints\n    if (targetType === 'endpoint')\n    {\n      //target MUST be an instance of Edge...\n      if (!(target instanceof Edge))\n        throw new Error(\"Invalid target \" + target + \" for type \\'\" + targetType + \"\\'. Must be an instance of Edge.\");\n\n      const targetQuad = target.getQuadratic();\n      graphController.prevQuad.radians = targetQuad.radians;\n      graphController.prevQuad.length = targetQuad.length;\n\n      graphController.prevEdgeTo = target.getDestinationNode();\n      inputController.isNewEdge = inputController.isMoveMode() ? false : true;\n\n      //Ready to move the edge endpoint to pointer...\n      return true;\n    }\n\n    //All input should be handled\n    //throw new Error(\"Unknown target type \\'\" + targetType + \"\\'.\");\n\n    return super.onDragStart(pointer);\n  }\n\n  //Override\n  onDragMove(pointer)\n  {\n    const inputController = this;\n    const graphController = this._graphController;\n    const graph = graphController.getGraph();\n\n    const picker = inputController.getPicker();\n    const x = pointer.x;\n    const y = pointer.y;\n    const target = picker.initialTarget;\n    const targetType = picker.initialTargetType;\n\n    //If is in move mode...\n    if (inputController.isMoveMode())\n    {\n      //Continue to move node(s)\n      if (targetType === 'node')\n      {\n        if (picker.hasSelection())\n        {\n          graphController.moveMultipleNodesTo(pointer, picker.getSelection(graph), x, y);\n        }\n        else\n        {\n          graphController.moveNodeTo(pointer, target, x, y);\n        }\n        return true;\n      }\n      //Continue to move edge vertex\n      else if (targetType === 'edge')\n      {\n        graphController.moveEdgeTo(pointer, target, x, y);\n        return true;\n      }\n      //Continue to move edge endpoint\n      else if (targetType === 'endpoint')\n      {\n        graphController.moveEndpointTo(pointer, target, x, y);\n        return true;\n      }\n      //Continue to move initial\n      else if (targetType === 'initial')\n      {\n        //Move initial marker to node or pointer\n        const dst = picker.getNodeAt(graph, x, y) || pointer;\n        inputController.ghostInitialMarker = dst;\n        return true;\n      }\n      //Continue to move graph if on none\n      else if (targetType !== 'none')\n      {\n        //All move drag should be handled\n        throw new Error(\"Unknown target type \\'\" + targetType + \"\\'.\");\n      }\n    }\n    //If is NOT in move mode...\n    else\n    {\n      if (inputController.isNewEdge)\n      {\n        graphController.moveEndpointTo(pointer, target, x, y);\n        return true;\n      }\n\n      //If the selection box is active...\n      if (picker.isSelecting())\n      {\n        //Update the selection box\n        picker.updateSelection(graph, x, y);\n        return true;\n      }\n\n      //Otherwise, don't do anything. Cause even input drags will become move drags.\n    }\n\n    return super.onDragMove(pointer);\n  }\n\n  //Override\n  onDragStop(pointer)\n  {\n    const inputController = this;\n    const graphController = this._graphController;\n\n    const graph = graphController.getGraph();\n    const picker = inputController.getPicker();\n    const x = pointer.x;\n    const y = pointer.y;\n    picker.updateTarget(graph, x, y);\n    const target = picker.initialTarget;\n    const targetType = picker.initialTargetType;\n\n    //If is in move mode...\n    if (inputController.isMoveMode() || inputController.isNewEdge)\n    {\n      //If stopped dragging a node...\n      if (targetType === 'node')\n      {\n        //Delete it if withing trash area...\n        if (inputController.isTrashMode())\n        {\n          //If there exists selected states, delete them all!\n          if (picker.hasSelection())\n          {\n            graphController.deleteSelectedNodes(target);\n          }\n          else\n          {\n            //Delete a single node\n            graphController.deleteTargetNode(target);\n          }\n\n          return true;\n        }\n        //If dragged to an empty space (not trash)\n        else\n        {\n          //Do nothing, since should have moved to position\n          if (picker.hasSelection())\n          {\n            const dx = x - graphController.prevX;\n            const dy = y - graphController.prevY;\n            graphController.emit(\"nodeMoveAll\", graph, picker.getSelection(graph), dx, dy);\n          }\n          else\n          {\n            graphController.emit(\"nodeMove\", graph, target, x, y, graphController.prevX, graphController.prevY);\n          }\n          return true;\n        }\n      }\n      //If stopped dragging a edge...\n      else if (targetType === 'edge')\n      {\n        //Delete it if withing trash area...\n        if (inputController.isTrashMode())\n        {\n          graphController.deleteTargetEdge(target);\n        }\n        else\n        {\n          //Do nothing, since should have moved to position\n          graphController.emit(\"edgeMove\", graph, target, target.getQuadratic(), graphController.prevQuad);\n        }\n        return true;\n      }\n      //If stopped dragging a endpoint...\n      else if (inputController.isNewEdge || targetType === 'endpoint')\n      {\n        //Delete it if withing trash area...\n        if (inputController.isTrashMode())\n        {\n          graphController.deleteTargetEdge(target);\n          return true;\n        }\n        //If hovering over a node...\n        else if (target.getDestinationNode() instanceof Node)\n        {\n          const result = target;//FIXME: graph.formatEdge(target);\n\n          //If a different edge is the result of the target...\n          if (result !== target)\n          {\n            //Allow the user to edit the merged labels\n            graphController.openLabelEditor(result, x, y, result.getEdgeLabel(), false);\n\n            //Delete the merged label\n            graph.deleteEdge(target);\n            return true;\n          }\n          //Open label editor if a new edge...\n          else\n          {\n            if (inputController.isNewEdge)\n            {\n              graphController.openLabelEditor(target, x, y, null, true, () => {\n                graphController.emit(\"userPostCreateEdge\", graph, target);\n              });\n            }\n            else\n            {\n              graphController.openLabelEditor(target, x, y);\n            }\n          }\n\n          if (inputController.isNewEdge)\n          {\n            //Must be after openLabelEditor() to allow the function to check it...\n            inputController.isNewEdge = false;\n\n            //Emit event\n            graphController.emit(\"userCreateEdge\", graph, target);\n          }\n          else if (graphController.prevEdgeTo !== null)\n          {\n            //Emit event\n            graphController.emit(\"edgeDestination\", graph, target, target.getDestinationNode(), graphController.prevEdgeTo, graphController.prevQuad);\n          }\n\n          return true;\n        }\n        //If hovering over anything else...\n        else\n        {\n          //Destroy any edge that no longer have a destination\n          if (inputController.shouldDestroyPointlessEdges)\n          {\n            if (!inputController.isNewEdge)\n            {\n              graphController.deleteTargetEdge(target);\n            }\n            else\n            {\n              graph.deleteEdge(target);\n            }\n            return true;\n          }\n          //Keep edges as placeholders (used in DFA's)\n          else\n          {\n            target.changeDestinationNode(null);\n\n            //Open label editor if default edge...\n            if (target.getEdgeLabel().length <= 0)\n            {\n              graphController.openLabelEditor(target, x, y);\n            }\n            return true;\n          }\n        }\n      }\n      else if (targetType !== 'none')\n      {\n        //All move drag should be handled\n        throw new Error(\"Unknown target type \\'\" + targetType + \"\\'.\");\n      }\n    }\n    //If is NOT in move mode...\n    else\n    {\n      //If was trying to select...\n      if (picker.isSelecting())\n      {\n        //Stop selecting stuff, fool.\n        picker.endSelection(graph, x, y);\n        return true;\n      }\n    }\n\n    return super.onDragStop(pointer);\n  }\n\n  //Override\n  onPostInputEvent(pointer)\n  {\n    const inputController = this;\n    const graphController = this._graphController;\n    const graph = graphController.getGraph();\n    const picker = inputController.getPicker();\n\n    picker.clearTarget();\n    picker.updateTarget(graph, pointer.x, pointer.y);\n\n    return super.onPostInputEvent(pointer);\n  }\n\n  //Override\n  onZoomChange(pointer, zoomValue, prevValue)\n  {\n    return super.onZoomChange(pointer, zoomValue, prevValue);\n  }\n\n  setTrashMode(enabled)\n  {\n    this._trashMode = enabled;\n  }\n\n  isTrashMode()\n  {\n    return this._trashMode;\n  }\n\n  setInputScheme(shouldInputFirst)\n  {\n    this._swapMouseScheme = !shouldInputFirst;\n  }\n\n  getInputScheme()\n  {\n    return this._swapMouseScheme;\n  }\n\n  isMoveMode()\n  {\n    const result = this._inputAdapter.isAltInput();\n    return this._swapMouseScheme ? !result : result;\n  }\n\n  isDragging()\n  {\n    return this._inputAdapter.isDragging();\n  }\n\n  isActionMode(graphController)\n  {\n    return this._inputAdapter.isPointerActive() ?\n      //Is considered an input when NOT moving or when creating a new edge...\n      graphController.isNewEdge || !this.isMoveMode() :\n      //If not active, just show default input...\n      !this._swapMouseScheme;\n  }\n\n  getPicker()\n  {\n    return this._picker;\n  }\n}\n\nexport default DefaultInputController;\n","import AbstractGraphLabeler from 'graph/AbstractGraphLabeler.js';\n\nclass DefaultGraphLabeler extends AbstractGraphLabeler\n{\n  constructor()\n  {\n    super();\n  }\n\n  //Override\n  getNodeLabelFormatter()\n  {\n    return labelFormatter;\n  }\n\n  //Override\n  getEdgeLabelFormatter()\n  {\n    return labelFormatter;\n  }\n}\n\nfunction labelFormatter(string)\n{\n  return string || \"\";\n}\n\nexport default DefaultGraphLabeler;\n","import AbstractModuleGraphController from 'modules/abstract/AbstractModuleGraphController.js';\n\nimport Config from 'config.js';\nimport Eventable from 'util/Eventable.js';\n\nimport NodalGraph from 'graph/NodalGraph.js';\nimport GraphNode from 'graph/GraphNode.js';\nimport GraphEdge from 'graph/GraphEdge.js';\nimport QuadraticEdge from 'graph/QuadraticEdge.js';\n\nimport DefaultGraphLabeler from './DefaultGraphLabeler.js';\n\nclass DefaultGraphController extends AbstractModuleGraphController\n{\n  constructor(module)\n  {\n    super(module, new NodalGraph(GraphNode, QuadraticEdge), new DefaultGraphLabeler());\n\n    this.inputController = null;\n    this.machineController = null;\n\n    this.labelEditorElement = null;\n\n    this.prevQuad = {\n      radians: 0, length: 0,\n      x: 0, y: 0\n    };\n    this.prevEdgeTo = null;\n    this.prevX = 0;\n    this.prevY = 0;\n\n    //The difference between controller events vs graph events is: controller has user-intent\n\n    //userCreateNode(graph, node) - When user creates a node\n    this.registerEvent(\"userCreateNode\");\n    this.registerEvent(\"userPreCreateNode\");//(graph, nextNodeID, x, y)\n    this.registerEvent(\"userPostCreateNode\");//(graph, node)\n\n    //userDeleteNodes(graph, node, targetNodes, prevX, prevY) - When user deletes one or more nodes\n    this.registerEvent(\"userDeleteNodes\");\n    this.registerEvent(\"userPreDeleteNodes\");\n    this.registerEvent(\"userPostDeleteNodes\");\n\n    //userDeleteEdge(graph, edge, prevTo, prevQuad) - When user deletes an edge\n    this.registerEvent(\"userDeleteEdge\");\n    this.registerEvent(\"userPreDeleteEdge\");\n    this.registerEvent(\"userPostDeleteEdge\");\n\n    //userCreateEdge(graph, edge) - When user creates an edge, after naming it\n    this.registerEvent(\"userCreateEdge\");\n    //this.registerEvent(\"userPreCreateEdge\");\n    this.registerEvent(\"userPostCreateEdge\");\n\n    /*\n    //userMoveNodes(graph, nodes, dx, dy) - When user moves one or more nodes\n    this.registerEvent(\"userMoveNodes\");\n    //userMoveInitial(graph, node, prevNode) - When user moves the initial marker to another\n    this.registerEvent(\"userMoveInitial\");\n    //userPreCreateEdge(graph, edge) - When user is about to create an edge, before src\n    this.registerEvent(\"userPreCreateEdge\");\n    //userBeginEdge(graph, edge, src) - When user begins to create an edge, after src and before naming it\n    this.registerEvent(\"userBeginEdge\");\n    //userEndEdge(graph, edge, src, dst) - When user finishes creating an edge, after dst and before naming it (dst could be null for deletion)\n    this.registerEvent(\"userEndEdge\");\n    //userPostCreateEdge(graph, edge) - When user is finished creating an edge, after dst and after quad changes\n    this.registerEvent(\"userPostCreateEdge\");\n    //userMoveEdge(graph, edge, prevDest) - When user changes the dst of edge\n    this.registerEvent(\"userChangeEdge\");\n    //userBendEdge(graph, edge, prevQuad) - When user bends the edge\n    this.registerEvent(\"userBendEdge\");\n    //userLabelEdge(graph, edge, prevLabel) - When user re-labels the edge\n    this.registerEvent(\"userLabelEdge\");\n    */\n\n    //userRenameNode(graph, node, nextLabel, prevLabel, isPrevCustom) - When user sets the label of node\n    this.registerEvent(\"userRenameNode\");\n\n    //userChangeLayout(graph, prevLayout) - When user re-layouts the graph\n    this.registerEvent(\"userChangeLayout\");\n    this.registerEvent(\"userPreChangeLayout\");//before any changes\n    this.registerEvent(\"userPostChangeLayout\");//after all changes\n\n    //userImportGraph(graph) - When user imports a graph\n    this.registerEvent(\"userImportGraph\");\n    this.registerEvent(\"userPreImportGraph\");//before any changes\n    this.registerEvent(\"userPostImportGraph\");//after all changes\n\n    //nodeMove(targetNode, nextX, nextY, prevX, prevY)\n    this.registerEvent(\"nodeMove\");\n    //nodeMoveAll(targetNodes, dx, dy)\n    this.registerEvent(\"nodeMoveAll\");\n    //nodeInitial(nextInitial, prevInitial)\n    this.registerEvent(\"nodeInitial\");\n    //edgeDestination(targetEdge, nextDestination, prevDestination, prevQuad)\n    this.registerEvent(\"edgeDestination\");\n    //edgeMove(targetEdge, nextQuad, prevQuad)\n    this.registerEvent(\"edgeMove\");\n    //edgeLabel(targetEdge, nextLabel, prevLabel)\n    this.registerEvent(\"edgeLabel\");\n    //tryCreateWhileTrash()\n    this.registerEvent(\"tryCreateWhileTrash\");\n  }\n\n  //Override\n  initialize(module)\n  {\n    super.initialize(module);\n\n    this.inputController = module.getInputController();\n    this.machineController = module.getMachineController();\n  }\n\n  //Override\n  destroy(module)\n  {\n    super.destroy(module);\n  }\n\n  renameNode(node, name)\n  {\n    const prev = node.getNodeLabel();\n    const isPrevCustom = node.getNodeCustom();\n\n    node.setNodeLabel(name);\n    node.setNodeCustom(true);\n\n    this.emit(\"userRenameNode\", this.getGraph(), node, name, prev, isPrevCustom);\n  }\n\n  createNode(x, y)\n  {\n    const newNodeLabel = this.getGraphLabeler().getDefaultNodeLabel();\n\n    if (typeof x === 'undefined') x = (Math.random() * Config.SPAWN_RADIUS * 2) - Config.SPAWN_RADIUS;\n    if (typeof y === 'undefined') y = (Math.random() * Config.SPAWN_RADIUS * 2) - Config.SPAWN_RADIUS;\n\n    this.emit(\"userPreCreateNode\", this.getGraph(), newNodeLabel, x, y);\n\n    const node = this.getGraph().createNode(x, y);\n    node.setNodeLabel(newNodeLabel);\n\n    this.emit(\"userCreateNode\", this.getGraph(), node);\n\n    this.emit(\"userPostCreateNode\", this.getGraph(), node);\n    return node;\n  }\n\n  deleteSelectedNodes(selectedNode)\n  {\n    const picker = this.inputController.getPicker();\n    const selection = picker.getSelection(this.getGraph()).slice();\n\n    this.emit(\"userPreDeleteNodes\", this.getGraph(), selectedNode, selection, this.prevX, this.prevY);\n\n    //Remove from graph\n    for(const node of selection)\n    {\n      this.getGraph().deleteNode(node);\n    }\n\n    //Remove from selection\n    picker.clearSelection();\n\n    //Emit event\n    this.emit(\"userDeleteNodes\", this.getGraph(), selectedNode, selection, this.prevX, this.prevY);\n    this.emit(\"userPostDeleteNodes\", this.getGraph(), selectedNode, selection, this.prevX, this.prevY);\n  }\n\n  deleteTargetNode(target)\n  {\n    this.emit(\"userPreDeleteNodes\", this.getGraph(), target, [target], this.prevX, this.prevY);\n\n    this.getGraph().deleteNode(target);\n\n    //Emit event\n    this.emit(\"userDeleteNodes\", this.getGraph(), target, [target], this.prevX, this.prevY);\n    this.emit(\"userPostDeleteNodes\", this.getGraph(), target, [target], this.prevX, this.prevY);\n  }\n\n  deleteTargetNodes(targets)\n  {\n    if (!targets || targets.length <= 0) return;\n\n    this.emit(\"userPreDeleteNodes\", this.getGraph(), targets[0], targets, this.prevX, this.prevY);\n\n    const graph = this.getGraph();\n    for(const node of targets)\n    {\n      graph.deleteNode(node);\n    }\n\n    //Emit event\n    this.emit(\"userDeleteNodes\", this.getGraph(), targets[0], targets, this.prevX, this.prevY);\n    this.emit(\"userPostDeleteNodes\", this.getGraph(), targets[0], targets, this.prevX, this.prevY);\n  }\n\n  deleteTargetEdge(target)\n  {\n    this.emit(\"userPreDeleteEdge\", this.getGraph(), target, this.prevEdgeTo, this.prevQuad);\n    this.getGraph().deleteEdge(target);\n\n    //Emit event\n    this.emit(\"userDeleteEdge\", this.getGraph(), target, this.prevEdgeTo, this.prevQuad);\n    this.emit(\"userPostDeleteEdge\", this.getGraph(), target, this.prevEdgeTo, this.prevQuad);\n  }\n\n  deleteTargetEdges(targets)\n  {\n    if (!targets || targets.length <= 0) return;\n\n    for(const target of targets)\n    {\n      this.deleteTargetEdge(target);\n    }\n  }\n\n  moveNodeTo(pointer, node, x, y)\n  {\n    for(const other of this.getGraph().getNodes())\n    {\n      //Update node collision\n      if (node === other) continue;\n      const nodeSize = node.getNodeSize();\n\n      const dx = x - other.x;\n      const dy = y - other.y;\n      const angle = Math.atan2(dy, dx);\n\n      const diameter = (nodeSize * 2);\n      const nextDX = other.x + (Math.cos(angle) * diameter) - x;\n      const nextDY = other.y + (Math.sin(angle) * diameter) - y;\n\n      if (dx * dx + dy * dy < nodeSize * nodeSize * 4)\n      {\n        x += nextDX;\n        y += nextDY;\n      }\n    }\n\n    node.x = x;\n    node.y = y;\n  }\n\n  moveMultipleNodesTo(pointer, nodes, x, y)\n  {\n    //Moves all nodes by difference between initial position with passed-in x and y\n    const pos = pointer.getInputEventPosition();\n    const dx = x - pos.x;\n    const dy = y - pos.y;\n    for(const node of nodes)\n    {\n      node.x += dx;\n      node.y += dy;\n    }\n\n    //Updates initial position to passed-in x and y to maintain relative position\n    pointer.changeInputEventPosition(x, y);\n  }\n\n  moveEdgeTo(pointer, edge, x, y)\n  {\n    edge.setQuadraticByCoords(x, y);\n  }\n\n  moveEndpointTo(pointer, edge, x, y)\n  {\n    //Get ONLY node at x and y (cannot use hover target, since it is not ONLY nodes)\n    const picker = this.inputController.getPicker();\n    const dst = picker.getNodeAt(this.getGraph(), x, y) || pointer;\n\n    edge.changeDestinationNode(dst);\n\n    //If the cursor returns to the state after leaving it...\n    if (edge.isSelfLoop())\n    {\n      //Make it a self loop\n      const sourceNode = edge.getSourceNode();\n      const dx = sourceNode.x - x;\n      const dy = sourceNode.y - y;\n      const radians = Math.atan2(dy, dx) + Math.PI;\n      edge.setQuadratic(radians);\n    }\n    //Otherwise, maintain original curve\n    else\n    {\n      //TODO: This also causes self-loops to act weird when no longer a self loop\n      edge.setQuadratic(this.prevQuad.radians, this.prevQuad.length);\n    }\n  }\n\n  openLabelEditor(target, x, y, placeholder=null, replace=true, callback=null)\n  {\n    if (!this.labelEditorElement)\n    {\n      if (callback) callback();\n      return;\n    }\n\n    const prevLabel = placeholder || target instanceof GraphEdge ? target.getEdgeLabel() : target.getNodeLabel();\n    this.labelEditorElement.openEditor(target, placeholder, replace, () => {\n      const label = target instanceof GraphEdge ? target.getEdgeLabel() : target.getNodeLabel();\n      if (prevLabel && prevLabel.length > 0 && label != prevLabel)\n      {\n        this.emit(target instanceof GraphEdge ? \"edgeLabel\" : \"nodeLabel\", this.getGraph(), target, label, prevLabel);\n      }\n\n      if (callback)\n      {\n        callback();\n      }\n    });\n  }\n\n  focusOnNode(node)\n  {\n    //Center workspace at focused node; inverted due to graph-to-screen space\n    this.inputController.getInputAdapter().getViewport().setOffset(-node.x, -node.y);\n  }\n\n  focusOnEdge(edge)\n  {\n    //Center workspace at focused edge; inverted due to graph-to-screen space\n    const center = edge.getCenterPoint();\n    this.inputController.getInputAdapter().getViewport().setOffset(-center.x, -center.y);\n  }\n\n  focusOnNodes(nodes)\n  {\n    //Center workspace at the average of focused nodes; inverted due to graph-to-screen space\n    const length = nodes.length;\n    let ax = 0;\n    let ay = 0;\n    for(const node of nodes)\n    {\n      ax += node.x;\n      ay += node.y;\n    }\n    this.inputController.getInputAdapter().getViewport().setOffset(-ax / length, -ay / length);\n  }\n}\n//Mixin Eventable\nEventable.mixin(DefaultGraphController);\n\nfunction moveNodesOutOfEdges(target, graph)\n{\n\n  const x1 = target.getSourceNode().x;\n  const y1 = target.getSourceNode().y;\n  const x2 = target.getDestinationNode().x;\n  const y2 = target.getDestinationNode().y;\n  const dist12sq = (x2-x1)*(x2-x1) + (y2-y1)*(y2-y1);\n  let vertical = false;\n  let m = 0;\n  let b = 0;\n  if(x1 > x2) {\n    m = (y1-y2) / (x1-x2);\n    b = y2-m*x2;\n  } else if (x1 < x2) {\n    m = (y2-y1) / (x2-x1);\n    b = y1-m*x1;\n  } else {\n    vertical = true;\n  }\n\n  for(const node of graph.getNodes())\n  {\n    if(node === target.getSourceNode() || node === target.getDestinationNode()) continue;\n\n    const x0 = node.x;\n    const y0 = node.y;\n\n    const dist01sq = (x1-x0)*(x1-x0) + (y1-y0)*(y1-y0);\n    const dist02sq = (x2-x0)*(x2-x0) + (y2-y0)*(y2-y0);\n    if(dist01sq > dist12sq || dist02sq > dist12sq) continue;\n\n\n    let dist = 0;\n    let xint = 0;\n    let yint = 0;\n    let m0 = 0;\n    let horizontal = false;\n    if(vertical) {\n      dist = Math.abs(x1-x0);\n      xint = x1;\n      yint = y0;\n      m0 = 0;\n    } else {\n      dist = Math.abs(b+ m*x0 - y0) / Math.sqrt(1+m*m);\n      xint = (x0 + m*y0 - m*b) / (m*m + 1);\n      yint = m * xint + b;\n      if(m !== 0) {\n        m0 = 1 / m;\n      } else {\n        horizontal = true;\n      }\n    }\n\n    if(dist < Config.NODE_RADIUS) {\n      const toMove = Config.NODE_RADIUS - dist + 10;\n      const distx = x0 - xint;\n      const disty = y0 - yint;\n      let signx = -1;\n      let signy = -1;\n      if(distx > 0) signx = 1;\n      if(disty > 0) signy = 1;\n\n      if(horizontal) {\n        node.y = y0 + signy * toMove;\n      } else {\n        let toMovex = toMove / Math.sqrt(m0*m0 + 1);\n        let toMovey = Math.abs(m0) * toMovex;\n        node.x = x0 + signx * toMovex;\n        node.y = y0 + signy * toMovey;\n      }\n    }\n  }\n}\n\nexport default DefaultGraphController;\n","import AbstractModuleMachineController from 'modules/abstract/AbstractModuleMachineController.js';\n\nclass DefaultMachineController extends AbstractModuleMachineController\n{\n  constructor(module)\n  {\n    super(module);\n\n    this._machineName = \"\";\n  }\n\n  setMachineName(name) { this._machineName = name; }\n  getMachineName() { return this._machineName; }\n}\nexport default DefaultMachineController;\n","import React from 'react';\n\nclass DefaultPanel extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.container = null;\n  }\n\n  //Override\n  render()\n  {\n    return <div className={\"panel-container \" + this.props.className} id=\"about\" ref={ref=>this.container=ref} style={this.props.style}>\n      <div className=\"panel-title\">\n        <h1>Default</h1>\n      </div>\n      <div className=\"panel-content\">\n        <p>{\"Brought to you with \\u2764 by the Flap.js team.\"}</p>\n        <p>{\"<- Tap on a tab to begin!\"}</p>\n      </div>\n      <div className=\"panel-bottom\"></div>\n    </div>;\n  }\n}\n\nexport default DefaultPanel;\n","import React from 'react';\n\nconst GRAPH_NODE_CONTAINER_STYLE_NAME = \"graph-node-container\";\nconst GRAPH_NODE_BODY_STYLE_NAME = \"graph-node\";\nconst GRAPH_NODE_LABEL_STYLE_NAME = \"graph-node-label\";\n\nclass GraphNodeRenderer extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  //Override\n  render()\n  {\n    const node = this.props.node;\n    const fill = this.props.fill || \"#FFFFFF\";\n    const stroke = this.props.stroke || \"#000000\";\n\n    const label = node.getNodeLabel() || \"\";\n\n    return (\n      <g className={GRAPH_NODE_CONTAINER_STYLE_NAME}>\n        {/*Outer circle*/}\n        <circle className={GRAPH_NODE_BODY_STYLE_NAME}\n          cx={node.x} cy={node.y}\n          r={node.getNodeSize()}\n\n          fill={fill}\n          stroke={stroke}/>\n\n        //Label\n        <text className={GRAPH_NODE_LABEL_STYLE_NAME}\n          x={node.x} y={node.y + 4}\n          pointerEvents=\"none\"\n          style={{\n            userSelect: \"none\",\n            fontSize: (1 - Math.min(Math.max(label.length - 2, 0) / 6, 0.5)) + \"em\"\n          }}\n          textAnchor=\"middle\">\n          {label}\n        </text>\n      </g>\n    );\n  }\n}\n\nexport default GraphNodeRenderer;\n","import React from 'react';\n\nconst GRAPH_EDGE_CONTAINER_STYLE_NAME = \"graph-edge-container\";\nconst GRAPH_EDGE_BODY_STYLE_NAME = \"graph-edge\";\nconst GRAPH_EDGE_LABEL_STYLE_NAME = \"graph-edge-label\";\n\nconst ARROW_WIDTH = 10;\nconst SIXTH_PI = Math.PI / 6;\n\nclass QuadraticEdgeRenderer extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  //Override\n  render()\n  {\n    const stroke = this.props.stroke || \"#000000\";\n\n    const edge = this.props.edge;\n    const start = edge.getStartPoint();\n    const end = edge.getEndPoint();\n    const center = edge.getCenterPoint();\n    const label = edge.getEdgeLabel();\n    const quad = edge.getQuadratic();\n    const quadCoords = edge.getQuadraticAsCoords();\n    const edgeDir = edge.getEdgeDirection();\n    const flipLabel = quadCoords.y > 0;\n\n    //Calculate curved lines...\n    let quadLine = null;\n    let arrowAngle = 0;\n    if (!edge.isQuadratic())\n    {\n      //Straight line\n      arrowAngle = Math.atan2(start.x - end.x, start.y - end.y) + Math.PI;\n      quadLine = \"L \" + end.x + \" \" + end.y;\n    }\n    else\n    {\n      //Quadratic curve\n      //center = (midpoint + the quadratic offset) + the quadratic offset\n      const cx = center.x + quadCoords.x;\n      const cy = center.y + quadCoords.y;\n      arrowAngle = Math.atan2(cx - end.x, cy - end.y) + Math.PI;\n      quadLine = \"Q \" + cx + \" \" + cy + \" \" + end.x + \" \" + end.y;\n    }\n\n    //Draw multiple labels\n    const labels = label ? label.split('\\n') : [];\n    let dy = 0;\n\n    const cx = (center && center.x || 0);\n    const cy = (center && center.y || 0);\n\n    return (\n      <g className={GRAPH_EDGE_CONTAINER_STYLE_NAME}>\n        //Draw lines\n        <path className={GRAPH_EDGE_BODY_STYLE_NAME} id={\"edge:\" + edge.getGraphElementID()}\n          d={\n            \"M \" + start.x + \" \" + start.y + \" \" +\n            quadLine + \" \" +\n            \"M \" +\n              (end.x - (ARROW_WIDTH * Math.sin(arrowAngle - SIXTH_PI))) + \" \" +\n              (end.y - (ARROW_WIDTH * Math.cos(arrowAngle - SIXTH_PI))) + \" \" +\n            \"L \" + end.x + \" \" + end.y + \" \" +\n            \"L \" +\n              (end.x - (ARROW_WIDTH * Math.sin(arrowAngle + SIXTH_PI))) + \" \" +\n              (end.y - (ARROW_WIDTH * Math.cos(arrowAngle + SIXTH_PI)))}\n          fill=\"none\"\n\n          stroke={stroke}/>\n\n        {/*Draw labels*/}\n        <g transform={\"translate(\" + (cx) + \",\" + (cy) + \") rotate(\" + (edgeDir * 180 / Math.PI) + \")\"}>\n        { labels.length > 0 && labels.map((str, i) => {\n            const yy = (i + 1) * -15;\n\n            //TODO: ctx.clearRect(xx - cx - 2, yy - 5, (cx * 2) + 4, 10);\n            return <text\n              key={str + \".\" + i}\n              className={GRAPH_EDGE_LABEL_STYLE_NAME}\n              transform={\"translate(0, \" + yy + \")\" + (flipLabel ? \" scale(-1, -1)\" : \"\")}\n              alignmentBaseline=\"central\"\n              pointerEvents=\"none\"\n              style={{userSelect: \"none\"}}\n              textAnchor=\"middle\">\n              {str}\n            </text>;\n        })}\n        </g>\n      </g>\n    );\n  }\n}\n\nexport default QuadraticEdgeRenderer;\n","import React from 'react';\nimport DefaultGraphRenderer from './DefaultGraphRenderer.css';\n\nimport GraphNodeRenderer from 'graph/renderer/GraphNodeRenderer.js';\nimport QuadraticEdgeRenderer from 'graph/renderer/QuadraticEdgeRenderer.js';\n\nclass HLSMGraphRenderer extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  //Override\n  render()\n  {\n    //Inherits props from parent\n    const currentModule = this.props.currentModule;\n    const graphController = currentModule.getGraphController();\n    const graph = graphController.getGraph();\n\n    return <g>\n      {graph.getNodes().map((e, i) => <GraphNodeRenderer key={e.getGraphElementID() || i} node={e}/>)}\n      {graph.getEdges().map((e, i) => <QuadraticEdgeRenderer key={e.getGraphElementID() || i} edge={e}/>)}\n    </g>;\n  }\n}\n\nexport default HLSMGraphRenderer;\n","import React from 'react';\n\nimport SelectionBoxRenderer from 'content/workspace/renderer/SelectionBoxRenderer.js';\nimport HighlightRenderer from 'content/workspace/renderer/HighlightRenderer.js';\n\nclass DefaultGraphOverlayRenderer extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  //Override\n  render()\n  {\n    //Inherits props from parent\n    const parent = this.props.parent;\n    const currentModule = this.props.currentModule;\n\n    const graphController = currentModule.getGraphController();\n    const inputController = currentModule.getInputController();\n\n    const graph = graphController.getGraph();\n    const picker = inputController.getPicker();\n    const selectionBox = picker.getSelectionBox();\n\n    return <g>\n      {/* Selected elements */}\n      { picker.hasSelection() &&\n        picker.getSelection(graph).map((e, i) =>\n          <HighlightRenderer key={e.getGraphElementID()} className={inputController.isTrashMode() ? \"highlight-error\" : \"highlight-select\"} target={e} type=\"node\"/>) }\n\n      {/* Selection box */}\n      <SelectionBoxRenderer visible={selectionBox.visible}\n        fromX={selectionBox.fromX} fromY={selectionBox.fromY}\n        toX={selectionBox.toX} toY={selectionBox.toY}/>\n\n      {/* Hover markers */}\n      { picker.hasTarget() &&\n        !picker.isTargetInSelection() &&\n        <HighlightRenderer className={inputController.isTrashMode() ? \"highlight-error\" : \"highlight-select\"} target={picker.target} type={picker.targetType}/> }\n    </g>;\n  }\n}\n\nexport default DefaultGraphOverlayRenderer;\n","import React from 'react';\n\nimport TrashCan from 'content/viewport/TrashCan.js';\nimport CursorMode from 'content/viewport/CursorMode.js';\n\nclass DefaultViewportRenderer extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n  }\n\n  //Override\n  render()\n  {\n    //Inherits props from parent\n    const parent = this.props.parent;\n    const currentModule = this.props.currentModule;\n    const screen = this.props.screen;\n\n    const inputController = currentModule.getInputController();\n    const graphController = currentModule.getGraphController();\n    const machineController = currentModule.getMachineController();\n\n    const LabelEditor = currentModule.getLabelEditor();\n\n    return <span>\n    { LabelEditor &&\n      <LabelEditor ref={ref=>graphController.labelEditorElement=ref}\n      inputController={inputController}\n      graphController={graphController}\n      machineController={machineController}\n      screen={screen}/> }\n      <span>\n        <div className=\"anchor-bottom-left\" style={{width: \"100%\"}}>\n          <CursorMode inputController={inputController} graphController={graphController}/>\n        </div>\n        <div className=\"anchor-bottom-right\">\n          <TrashCan inputController={inputController} viewport={parent}/>\n        </div>\n      </span>\n    </span>;\n  }\n}\nexport default DefaultViewportRenderer;\n","import React from 'react';\nimport './DefaultLabelEditor.css';\n\nimport GraphEdge from 'graph/GraphEdge.js';\n\nimport Config from 'config.js';\nimport { SYMBOL_SEPARATOR, EMPTY_CHAR } from 'modules/fsa/graph/FSAEdge.js';\n\nimport FormattedInput from 'system/formattedinput/FormattedInput.js';\n\n//TODO: This is equivalent to 4em for toolbar height\nconst LABEL_OFFSET_Y = -64;\nconst EDITOR_OFFSET_Y = -36;\nconst DELETE_KEY = 8;\nconst DELETE_FORWARD_KEY = 46;\n\nconst RECOMMENDED_SYMBOLS = [\"0\", \"1\"];\nconst DEFAULT_SYMBOLS = [EMPTY_CHAR];\nconst DELETE_ON_EMPTY = true;\n\nclass DefaultLabelEditor extends React.Component\n{\n  constructor(props)\n  {\n    super(props);\n\n    this.parentElement = null;\n    this.inputElement = null;\n\n    //HACK: this is so if the click is focused back to the label editor, then it will NOT close\n    this._timer = null;\n    this._prevValue = \"\";\n\n    this.state = {\n      target: null,\n      callback: null\n    };\n\n    this.onContextMenu = this.onContextMenu.bind(this);\n    this.onFormat = this.onFormat.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  openEditor(targetElement, defaultText=null, replace=true, callback=null)\n  {\n    //If not yet initilized, ignore any editor access\n    if (!this.inputElement || !this.parentElement)\n    {\n      throw new Error(\"Trying to open editor that has not yet mounted\");\n    }\n\n    this.setState((prev, props) => {\n      return {\n        target: targetElement,\n        callback: callback\n      };\n    });\n\n    const targetLabel = targetElement instanceof GraphEdge ?\n      targetElement.getEdgeLabel() :\n      targetElement.getNodeLabel();\n    this.inputElement.resetValue(targetLabel, () => {\n      if (defaultText) this.inputElement.setValue(defaultText);\n\n      this._prevValue = targetLabel;\n      this.parentElement.focus();\n      this.inputElement.focus(replace);\n    });\n  }\n\n  closeEditor(saveOnExit=false)\n  {\n    //If not yet initilized, ignore any editor access\n    if (!this.inputElement || !this.parentElement)\n    {\n      throw new Error(\"Trying to open editor that has not yet mounted\");\n    }\n\n    //Save data\n    const targetElement = this.state.target;\n    if (targetElement !== null)\n    {\n      if (saveOnExit)\n      {\n        let value = this.inputElement.value;\n        if (targetElement instanceof GraphEdge)\n        {\n          targetElement.setEdgeLabel(value);\n        }\n        else\n        {\n          targetElement.setNodeLabel(value);\n        }\n      }\n      else\n      {\n        const targetLabel = targetElement instanceof GraphEdge ?\n          targetElement.getEdgeLabel() :\n          targetElement.getNodeLabel();\n        if (!targetLabel)\n        {\n          //Make sure its empty (and let edge handle default labels)\n          if (targetElement instanceof GraphEdge)\n          {\n            targetElement.setEdgeLabel(null);\n          }\n          else\n          {\n            targetElement.setNodeLabel(null);\n          }\n\n          //Delete it since it is not a valid element\n          if (DELETE_ON_EMPTY)\n          {\n            if (targetElement instanceof GraphEdge)\n            {\n              this.props.graphController.getGraph().deleteEdge(targetElement);\n            }\n            else\n            {\n              this.props.graphController.getGraph().deleteNode(targetElement)\n            }\n          }\n        }\n      }\n\n      this.setState({target: null});\n\n      if (this.state.callback) this.state.callback();\n    }\n\n    //Reset label editor\n    this.inputElement.blur();\n  }\n\n  hasFocus()\n  {\n    return this.inputElement.hasFocus();\n  }\n\n  isEditorOpen()\n  {\n    return this.state.target !== null;\n  }\n\n  onContextMenu(e)\n  {\n    e.preventDefault();\n    e.stopPropagation();\n  }\n\n  appendSymbol(symbol)\n  {\n    this.inputElement.appendValue(symbol, SYMBOL_SEPARATOR);\n    this.inputElement.focus(false);\n  }\n\n  onSubmit(newValue, prevValue)\n  {\n    //this._prevValue = newValue;\n    //If the value has changed or the value remained empty...\n    if (newValue != prevValue)\n    {\n      //this.closeEditor(true);\n    }\n    else\n    {\n      //TODO: This was commented out for some reason...\n      //Will close due to timer...\n      this.closeEditor(false);\n    }\n  }\n\n  onFormat(value)\n  {\n    return this.props.graphController.getGraphLabeler().getEdgeLabelFormatter().call(null, value);\n  }\n\n  render()\n  {\n    const inputController = this.props.inputController;\n    const viewport = inputController.getInputAdapter().getViewport();\n    const graphController = this.props.graphController;//This is used in closeEditor()\n    const machineController = this.props.machineController;//This is also used in callbacks\n    const screen = this.props.screen;\n\n    const targetStyle = {\n      visibility: \"hidden\"\n    };\n\n    const target = this.state.target;\n\n    if (target)\n    {\n      targetStyle.visibility = \"visible\";\n\n      //Assumes target is an instance of Edge\n      const center = target instanceof GraphEdge ?\n        target.getCenterPoint() :\n        target/* GraphNode themselves have x/y attribs */;\n      const screenPos = transformViewToScreen(screen,\n        center.x + viewport.getOffsetX(),\n        center.y + viewport.getOffsetY());\n      const x = screenPos.x;\n      const y = screenPos.y + LABEL_OFFSET_Y + EDITOR_OFFSET_Y;\n      const offsetX = -(this.parentElement.offsetWidth / 2);\n      const offsetY = -(this.parentElement.offsetHeight / 2);\n\n      targetStyle.top = (y + offsetY) + \"px\";\n      targetStyle.left = (x + offsetX) + \"px\";\n    }\n\n    return <div className=\"bubble\" id=\"label-editor\" ref={ref=>this.parentElement=ref}\n      tabIndex={\"0\"/*This is to allow div's to focus/blur*/}\n      style={targetStyle}\n      onContextMenu={this.onContextMenu}\n      onFocus={(e)=>{\n        //HACK: delete the timer that will exit labelEditor\n        clearTimeout(this._timer);\n      }}\n      onBlur={(e)=>{\n        //HACK: start the timer that will exit labelEditor if not return focus\n        this._timer = setTimeout(() => this.closeEditor(true), 10);\n      }}>\n      <FormattedInput className=\"label-editor-input\" ref={ref=>this.inputElement=ref}\n        formatter={this.onFormat}\n        onSubmit={this.onSubmit}\n        captureOnExit={\"none\"}\n        multiline={true}/>\n    </div>;\n  }\n}\n\nfunction transformViewToScreen(svg, x, y)\n{\n  const ctm = svg.getScreenCTM();\n  return {\n    x: (x * ctm.a) + ctm.e,\n    y: (y * ctm.d) + ctm.f\n  };\n}\n\nexport default DefaultLabelEditor;\n","import AbstractModule from 'modules/abstract/AbstractModule.js';\n\nimport DefaultGraphExporter from './DefaultGraphExporter.js';\n\nimport DefaultInputController from './DefaultInputController.js';\nimport DefaultGraphController from './DefaultGraphController.js';\nimport DefaultMachineController from './DefaultMachineController.js';\n\nimport DefaultPanel from './DefaultPanel.js';\nimport DefaultGraphRenderer from './DefaultGraphRenderer.js';\nimport DefaultGraphOverlayRenderer from './DefaultGraphOverlayRenderer.js';\nimport DefaultViewportRenderer from './DefaultViewportRenderer.js';\n\nimport DefaultLabelEditor from './DefaultLabelEditor.js';\n\nconst VERSION = \"0.0.1\";\nconst PANELS = [DefaultPanel];\nconst EXPORTERS = [new DefaultGraphExporter()];\n\nclass DefaultModule extends AbstractModule\n{\n  constructor(app)\n  {\n    super(app);\n\n    const inputAdapter = app.getInputAdapter();\n    this._inputController = new DefaultInputController(this, inputAdapter);\n    this._graphController = new DefaultGraphController(this);\n    this._machineController = new DefaultMachineController(this);\n  }\n\n  getLabelEditor()\n  {\n    return DefaultLabelEditor;\n  }\n\n  //Override\n  initialize(app)\n  {\n    super.initialize(app);\n  }\n\n  //Override\n  destroy(app)\n  {\n    super.destroy(app);\n  }\n\n  //Override\n  update(app)\n  {\n    super.update(app);\n  }\n\n  //Override\n  getRenderer(renderLayer)\n  {\n    switch(renderLayer)\n    {\n      case \"graph\":\n        return DefaultGraphRenderer;\n      case \"graphoverlay\":\n        return DefaultGraphOverlayRenderer;\n      case \"viewport\":\n        return DefaultViewportRenderer;\n    }\n    return null;\n  }\n  //Override\n  getInputController() { return this._inputController; }\n  //Override\n  getGraphController() { return this._graphController; }\n  //Override\n  getMachineController() { return this._machineController; }\n  //Override\n  getGraphExporters() { return EXPORTERS; }\n  //Override\n  getModuleVersion() { return VERSION; }\n  //Override\n  getModulePanels() { return PANELS; }\n  //Override\n  getModuleName() { return \"default\"; }\n  //Override\n  getLocalizedModuleName() { return \"Default\"; }\n}\n\nexport default DefaultModule;\n","import DefaultModule from 'modules/default/DefaultModule.js';\n\nclass DFSModule extends DefaultModule\n{\n  constructor(app)\n  {\n    super(app);\n  }\n\n  //Override\n  getModuleName() { return \"dfs\"; }\n  //Override\n  getLocalizedModuleName() { return \"Depth-First Search\"; }\n}\n\nexport default DFSModule;\n"],"sourceRoot":""}
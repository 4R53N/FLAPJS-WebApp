{"version":3,"sources":["webpack:///./src/app/graph/elements/GraphNode.js","webpack:///./src/app/graph/elements/GraphEdge.js","webpack:///./src/app/graph/elements/GraphElement.js","webpack:///./src/app/modules/fsa2/machine/FSA.js","webpack:///./src/app/modules/fsa/graph/FSAEdge.js","webpack:///./src/app/components/iconset/RunningManIcon.js","webpack:///./src/app/modules/fsa/graph/GraphLayout.js","webpack:///./src/app/session/manager/undo/AbstractEventHandler.js","webpack:///./src/app/components/iconset/flat/JSONFileIcon.js","webpack:///./src/app/util/file/import/Importer.js","webpack:///./src/app/session/SessionImporter.js","webpack:///./src/app/graph/elements/QuadraticEdge.js","webpack:///./src/app/modules/fsa/graph/FSAGraph.js","webpack:///./src/app/graph/NodeGraph.js","webpack:///./src/app/util/Downloader.js","webpack:///./src/app/components/iconset/PageContentIcon.js","webpack:///./src/app/components/iconset/CrossIcon.js","webpack:///./src/app/components/iconset/AddIcon.js","webpack:///./src/app/components/iconset/SubtractIcon.js","webpack:///./src/app/components/iconset/CheckCircleIcon.js","webpack:///./src/app/components/iconset/CrossCircleIcon.js","webpack:///./src/app/components/iconset/PendingIcon.js","webpack:///./src/app/modules/fsa2/machine/util/ConvertFSA.js","webpack:///./src/app/modules/fsa2/machine/util/SolveFSA.js","webpack:///./src/app/modules/fsa2/machine/util/IntersectFSA.js","webpack:///./src/app/modules/fsa2/machine/util/InvertDFA.js","webpack:///./src/app/modules/fsa2/machine/util/EqualFSA.js","webpack:///./src/app/modules/fsa2/machine/FSAUtils.js","webpack:///./src/app/deprecated/config.js","webpack:///./src/app/modules/fsa/graph/FSANode.js","webpack:///./src/app/modules/fsa/graph/FSAGraphParser.js","webpack:///./src/app/modules/re/machine/RE.js","webpack:///./src/app/modules/re/machine/REParser.js","webpack:///./src/app/modules/re/machine/util/ConvertRE.js","webpack:///./src/app/modules/re/ExpressionChangeHandler.js","webpack:///./src/app/modules/re/MachineController.js","webpack:///./src/app/modules/re/REErrorChecker.js","webpack:///./src/app/modules/re/components/notifications/RENotifications.js","webpack:///./src/app/modules/re/SafeExpressionEventHandler.js","webpack:///./src/app/modules/re/components/panels/overview/alphabet/AlphabetListElement.js","webpack:///./src/app/modules/re/components/panels/overview/alphabet/AlphabetListView.js","webpack:///./src/app/modules/re/components/panels/overview/OverviewPanel.js","webpack:///./src/app/modules/re/components/panels/analysis/AnalysisPanel.js","webpack:///./src/app/modules/re/components/panels/testing/TestItem.js","webpack:///./src/app/modules/re/components/panels/testing/TestListView.js","webpack:///./src/app/modules/re/components/panels/testing/TestingPanel.js","webpack:///./src/app/modules/re/components/views/ExpressionView.js","webpack:///./src/app/modules/re/filehandlers/REImporter.js","webpack:///./src/app/modules/re/filehandlers/REExporter.js","webpack:///./src/app/modules/re/filehandlers/REToFSAExporter.js","webpack:///./src/app/modules/re/REModule.js"],"names":["GraphNode","id","_this","x","arguments","length","undefined","y","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_label","GraphElement","dst","label","usePosition","_get","prototype","Math","floor","GraphEdge","from","to","_from","_to","node","Error","HALFPI","PI","result","isPlaceholder","dy","dx","atan2","halfPlaceholderLength","getPlaceholderLength","placeholderLength","getNodeSize","src","getHashString","elementID","_id","EMPTY_SYMBOL","State","_src","getGraphElementID","guid","_createClass","key","value","Transition","symbols","_symbols","slice","symbol","push","includes","join","FSA","deterministic","_states","Map","_alphabet","_transitions","_finalStates","Set","_customSymbols","_startState","_deterministic","_errors","fsa","clear","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","entries","Symbol","iterator","next","done","_step$value","_slicedToArray","copy","set","isStartState","isFinalState","add","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_step2$value","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_step3$value","get","getSourceState","getStateID","getDestinationState","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","error","foundSymbols","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","keys","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","values","state","transitions","getOutgoingTransitions","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","_iteratorNormalCompletion9","_didIteratorError9","_iteratorError9","_step9","_iterator9","addState","stateID","has","size","delete","_iteratorNormalCompletion10","_didIteratorError10","_iteratorError10","_step10","_iterator10","getStateLabel","_iteratorNormalCompletion11","_didIteratorError11","_iteratorError11","_step11","_iterator11","hasState","transitionKey","transition","hasSymbol","addSymbol","_incrSymbolCount","getSymbols","index","indexOf","_decrSymbolCount","splice","_iteratorNormalCompletion12","_didIteratorError12","_iteratorError12","_step12","_iterator12","symbolCount","isCustomSymbol","newSymbol","_iteratorNormalCompletion13","_didIteratorError13","_iteratorError13","_step13","_iterator13","count","cache","_iteratorNormalCompletion14","_didIteratorError14","_iteratorError14","_step14","_iterator14","_step14$value","_i2","custom","forceNondeterminism","_typeof","fromTransitionKey","_iteratorNormalCompletion15","_didIteratorError15","_iteratorError15","_step15","_iterator15","startsWith","_iteratorNormalCompletion16","_didIteratorError16","_iteratorError16","_step16","_iterator16","toState","doClosureTransition","_iteratorNormalCompletion17","_didIteratorError17","_iteratorError17","_step17","_iterator17","s","i","_iteratorNormalCompletion18","_didIteratorError18","_iteratorError18","_step18","_iterator18","_iteratorNormalCompletion19","_didIteratorError19","_iteratorError19","_step19","_iterator19","_iteratorNormalCompletion20","_didIteratorError20","_iteratorError20","_step20","_iterator20","string","_iteratorNormalCompletion21","_didIteratorError21","_iteratorError21","_step21","_iterator21","_iteratorNormalCompletion22","_didIteratorError22","_iteratorError22","_step22","_iterator22","_iteratorNormalCompletion23","_didIteratorError23","_iteratorError23","_step23","_iterator23","stringHash","SYMBOL_SEPARATOR","EMPTY_CHAR","FSAEdge","QuadraticEdge","getEdgeLabel","split","Icon","props","React","Component","react__WEBPACK_IMPORTED_MODULE_0___default","a","createElement","className","style","xmlns","width","height","viewBox","d","GraphLayout","graph","reachableNode","reachable","startNode","getStartNode","getEdges","edge","getReachableState","unreachableNode","getNodes","filter","numOfReachable","numOfUnreachable","numOfNode","maxNum","max","radius","currentStep","degree","sin","cos","degree_re","degree_un","AbstractEventHandler","undoManager","fill","points","cx","cy","r","Importer","fileName","fileType","fileData","Promise","resolve","SessionImporter","app","SessionImporter_classCallCheck","_app","session","getApp","getUndoManager","captureEvent","sessionData","projectName","getSession","currentModule","getCurrentModule","onParseSession","onPreImportSession","onImportSession","substring","setProjectName","onPostImportSession","_quad","radians","coords","changeDestinationNode","fromx","fromy","midpointx","midpointy","angleOffset","sqrt","outrad","inrad","maxdr","abs","getDirectionalVector","isQuadratic","getQuadraticAsCoords","px","py","nodeSize","getMidPoint","qcoords","qx","qy","isSelfLoop","setQuadraticRadians","setQuadraticLength","getSelfLoopHeight","prevDest","angle","formatAsPlaceholder","formatAsSelfLoop","FSAGraph","FSANode","_nodes","NodeGraph","prev","edgeSource","getEdgeFrom","edgeDestination","getEdgeTo","edgeLabel","getEdgeSymbolsFromLabel","otherEdge","otherSymbols","concat","setEdgeLabel","flag","getQuadratic","parallelEdgeHeight","maxNodeSize","x1","y1","x2","y2","dist12sq","vertical","m","b","x0","y0","nodeClass","edgeClass","_nodeClass","_edgeClass","_nodeMapping","_edgeMapping","clearEdges","clearNodes","minX","minY","maxX","maxY","minNX","Number","MAX_VALUE","minNY","maxNX","MIN_VALUE","maxNY","min","minEX","minEY","maxEX","maxEY","startPoint","endPoint","centerPoint","getStartPoint","getEndPoint","getCenterPoint","sx","sy","ex","ey","addNode","setGraphElementID","nullSourceEdges","setEdgeTo","_i","deleteEdge","getNodeLabel","Array","addEdge","__webpack_require__","__webpack_exports__","downloadText","filename","textData","downloadURL","encodeURIComponent","url","element","document","headerIndex","setAttribute","display","body","appendChild","click","removeChild","convertToDFA","isDeterministic","setDeterministic","startState","getStartState","dfaData","nfaSource","dfaStateMap","dfaFinalStates","dfaTransitionMap","dfaStartState","dfaTrapState","startStatesByClosure","getDFAStateFromNFAStates","statePowerSet","states","len","getPowerSetOfStates","getStates","nfaStates","expandNFAStatesToDFA","dfaState","getAlphabet","dfaTransitionKey","getDFATransitionKeyFromDFAStateAndSymbol","setStartState","finalState","setFinalState","addTransition","fromDFAState","nfaTerminals","fromNFAState","doTerminalTransition","nfaStateKey","nfaState","getNFAStateKeyFromNFAStates","final","dfaStateLabel","MAX_COMPUTATION_STEPS","solveFSA","input","doTransition","cachedStates","cachedSymbols","relatedState","counter","solveFSAByStep","nfa","nextStates","nextIndex","cstate","nextState","apply","intersectDFA","dfa1","dfa2","fsa1","fsa2","alphabet","checkSameAlphabet","start1","start2","pairIDs","finalPairIDs","startPair","startPairID","remainingPairIDs","parentPairID","pop","parentPair","parent1","parent2","state1","state2","newPairID","pairToState","statePairID","statePair","createState","fromPairID","toPairID","fromState","invertDFA","toBeRejected","getFinalStates","isEquivalentFSA","dfa3","intersectionOfComplement","isLanguageNotEmpty","dfa4","isEquivalentDFA","m1","m2","alphabet1","alphabet2","isUsedSymbol","haveTheSameUsedAlphabet","dfa","explored","frontier","path","current","shift","pathUpTill","dest","cfg","setValue","hasOwnProperty","_userDefined","_dirty","bind","MACHINE_ERRORS_MESSAGE_TAG","MACHINE_CONVERSION_MESSAGE_TAG","ERROR_CHECK_INTERVAL","GRAPH_IMMEDIATE_INTERVAL","SMOOTH_OFFSET_DAMPING","SCROLL_SENSITIVITY","MIN_SCALE","MAX_SCALE","INIT_WAITTIME","STR_TRANSITION_DEFAULT_LABEL","STR_STATE_LABEL","PARALLEL_EDGE_HEIGHT","SELF_LOOP_HEIGHT","SUBMIT_KEY","CLEAR_KEY","TAB_KEY","UP_KEY","DOWN_KEY","DELETE_KEY","DELETE_FORWARD_KEY","DEFAULT_GRAPH_SIZE","NODE_RADIUS","NODE_RADIUS_SQU","NODE_DIAMETER","NODE_RADIUS_INNER","INITIAL_MARKER_OFFSET_X","EDGE_RADIUS","EDGE_RADIUS_SQU","ARROW_WIDTH","PLACEHOLDER_LENGTH","ENDPOINT_RADIUS","ENDPOINT_RADIUS_SQU","HOVER_RADIUS_OFFSET","CURSOR_RADIUS","CURSOR_RADIUS_SQU","DOUBLE_TAP_TICKS","LONG_TAP_TICKS","SPAWN_RADIUS","DEFAULT_SHOULD_DESTROY_POINTLESS_EDGE","DRAGGING_BUFFER","DRAGGING_BUFFER_SQU","PADDING_RADIUS_SQU","_accept","_custom","Config","JSON","XML","_FSAGraph_js__WEBPACK_IMPORTED_MODULE_0__","_FSAEdge_js__WEBPACK_IMPORTED_MODULE_1__","parse","data","nodeDatas","nodeCount","edgeDatas","edgeCount","initialIndex","nodeIndices","nodeData","createNode","setNodeLabel","setNodeAccept","setNodeCustom","initialNode","setStartNode","edgeData","sourceNode","destinationNode","createEdge","quadData","objectify","graphNodes","graphEdges","graphInitial","accept","getNodeAccept","getNodeCustom","quad","sourceIndex","destinationIndex","nodes","edges","initial","_version","nodeElements","getElementsByTagName","edgeElements","nodeElementIDs","nodeElement","nodeElementID","getAttribute","xElements","xElement","hasChildNodes","xValue","childNodes","parseFloat","nodeValue","e","yElements","yElement","yValue","boundingRect","getBoundingRect","transitionMapping","edgeElement","sourceID","fromElements","fromElement","fromValue","destinationID","toElements","toElement","toValue","readElements","readElement","readValue","transitionID","doc","DOMParser","parseFromString","structure","type","innerHTML","automaton","read","EMPTY","CONCAT","UNION","KLEENE","SIGMA","EMPTY_SET","PLUS","RE","expression","_expression","_terminals","re","terminal","isExpressionValid","getExpression","charAt","areParenthesisBalanced","currChar","prevChar","nextChar","setExpression","ASTNode","isTerminal","parentNode","REParser_classCallCheck","_symbol","_isTerminal","_parent","_children","_childrenLimit","_index","childNode","hasRoomForChildren","originalChild","newChild","newChildrenLimit","REParser","rootNode","indexToNode","closedParensIndicies","regex","clearTerminals","currNode","openParenStack","char","createOpenParenNode","createUnaryOperNode","createBinaryOperNode","createTerminalNode","addTerminal","newParentNode","targetNode","originalParent","getParent","setParent","addChild","replaceChild","newNode","makeParentOf","makeParentOfParent","parentSym","getSymbol","grandparent","symbolNode","spaceIndex","scope","scopeFromCharAtIndex","parseRegex","currentNode","smallest","smallestIndexOfChildren","largest","largestIndexOfChildren","getIndex","getChildren","child","convertToNFA","prevExpression","replace","insertConcatSymbols","parser","ASTtoNFA","astNode","emptySet","terminals","getTerminals","charNFAs","character","or","sigma","kleene","state0","stateIndex","aStateMap","firstAState","newState","bStateMap","firstBState","lastBState","aTransitions","getTransitions","newFromState","newToState","newFinalState","bTransitions","stateMap","firstState","lastAState","lastState","ExpressionChangeHandler","refreshTicks","ExpressionChangeHandler_classCallCheck","_cachedExpressionHash","_refreshTicks","_elapsedTicks","Infinity","_listeners","listener","expr","exprHash","EXPRESSION_REFRESH_RATE","MachineController","MachineController_classCallCheck","_machine","_parser","_expressionChangeHandler","_equalFSA","_equalREHash","update","setMachineExpression","hasTerminal","isSymbol","nextSymbol","nextExpression","RegExp","validate","getErrors","REErrorChecker","machineController","REErrorChecker_classCallCheck","_machineController","_showErrorOnChange","onExpressionChange","getExpressionChangeHandler","addListener","showErrors","enabled","errors","getMachine","notificationManager","getNotificationManager","clearNotifications","pushNotification","I18N","toString","SUCCESS_LAYOUT_ID","name","message","ERROR_LAYOUT_ID","SafeExpressionEventHandler","SafeExpressionEventHandler_classCallCheck","getMachineExpression","prevEvent","getPreviousEvent","applyRedo","AlphabetListElement","AlphabetListElement_classCallCheck","AlphabetListElement_getPrototypeOf","_inputElement","onValueChange","AlphabetListElement_assertThisInitialized","onFocus","onBlur","onKeyDown","onKeyUp","target","setState","select","keyCode","preventDefault","stopPropagation","blur","trim","onChange","focus","_this2","inputSymbol","displaySymbol","symbolUsed","used","react_default","Style","element_container","ref","spellCheck","maxLength","TerminalListView","AlphabetListView_classCallCheck","AlphabetListView_getPrototypeOf","newSymbolComponent","useNewSymbol","onElementAdd","AlphabetListView_assertThisInitialized","onElementFocus","onElementBlur","onElementChange","renameSymbol","deleteSymbol","overview_alphabet_AlphabetListElement","_this3","getMachineTerminals","list_container","element_list","renderTerminalList","OverviewPanel","OverviewPanel_classCallCheck","OverviewPanel_possibleConstructorReturn","OverviewPanel_getPrototypeOf","drawer","getMachineController","drawerFull","isDrawerFullscreen","PanelContainer","title","TITLE","PanelSection","full","alphabet_AlphabetListView","Object","defineProperty","AnalysisPanel","AnalysisPanel_classCallCheck","AnalysisPanel_getPrototypeOf","onConvertToNFA","AnalysisPanel_assertThisInitialized","getExportManager","tryExportFile","analysis_button","onClick","DEFAULT_MODE","TestItem","TestItem_classCallCheck","TestItem_getPrototypeOf","inputElement","defaultValue","status","TestItem_assertThisInitialized","callback","nextValue","onDelete","onTest","active","placeholder","test_item_container","IconButton","test_button","disabled","CheckCircleIcon","CrossCircleIcon","PendingIcon","RunningManIcon","test_input","subtitle","delete_button","SubtractIcon","ACCEPT_FILE_TYPES","TEST_FILENAME","TestListView","TestListView_classCallCheck","TestListView_getPrototypeOf","_testList","_testName","onTestNew","TestListView_assertThisInitialized","onTestUpload","onTestDownload","onTestClose","onTestAdd","onTestDelete","onTestTest","onTestRunAll","removeListener","resetStatus","isEmpty","fileBlob","reader","FileReader","onload","event","tests","test","abort","readAsText","testStrings","getValue","nextTest","item","itemValue","getEquivalentFSA","_this4","empty","test_container","test_control_tray","test_control_button","PageContentIcon","IconUploadButton","onUpload","UploadIcon","DownloadIcon","CrossIcon","test_list_container","test_list_add","AddIcon","test_list_count","test_list_scroll_container","test_list","map","testCallback","panels_testing_TestItem","test_list_runall","TestingPanel","TestingPanel_classCallCheck","TestingPanel_getPrototypeOf","onAutoErrorCheckChange","TestingPanel_assertThisInitialized","errorChecker","getErrorChecker","errorCheck","isErrorChecking","setErrorChecking","panel_container","panels_testing_TestListView","PanelSwitch","checked","ExpressionView","ExpressionView_classCallCheck","ExpressionView_getPrototypeOf","onInputChange","ExpressionView_assertThisInitialized","cursorPos","selectionStart","scopeFromSpaceIndexing","setSelectionRange","currentExpression","newExpression","isValid","readableValue","view_pane","view_widget","ExpressionViewStyle","expression_tray","tray_important","_appendSymbol","tray_symbol","REImporter","REImporter_classCallCheck","REImporter_possibleConstructorReturn","REImporter_getPrototypeOf","_prevExpression","machineExpression","REExporter","REExporter_classCallCheck","REExporter_possibleConstructorReturn","REExporter_getPrototypeOf","SessionExporter","JSONFileIcon","REToFSAExporter","REToFSAExporter_classCallCheck","REToFSAExporter_possibleConstructorReturn","REToFSAExporter_getPrototypeOf","machine","getStateCount","formattedEdge","formatEdge","applyLayout","setGraphToFSA","graphData","JSONGraphParser","REModule","REModule_classCallCheck","_errorChecker","getDrawerManager","addPanelClass","getViewportManager","addViewClass","setEventHandlerFactory","registerExporter","getImportManager","addImporter","getHotKeyManager","registerHotKey","CTRL_KEY","undo","SHIFT_KEY","redo","window","confirm","getToolbarComponent","closeBar"],"mappings":"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","file":"module_re.bundle.d455c87e6b1375d4d6a1.js","sourcesContent":["import GraphElement from './GraphElement.js';\n\n/**\n * A class that represents the node elements of a graph.\n *\n * @see {@link NodeGraph}\n * @extends GraphElement\n */\nclass GraphNode extends GraphElement\n{\n    /**\n   * Creates a node with the unique id.\n   * \n   * @param {String} id     the element id for this node.\n   * @param {Number} [x=0]  the initial x position\n   * @param {Number} [y=0]  the initial y position\n   */\n    constructor(id, x = 0, y = 0)\n    {\n        super(id);\n\n        this.x = x;\n        this.y = y;\n\n        this._label = '';\n    }\n\n    /** @override */\n    getCenterPoint(dst={x: 0, y: 0})\n    {\n        dst.x = this.x;\n        dst.y = this.y;\n        return dst;\n    }\n\n    /**\n   * Sets the node label to the passed-in string.\n   *\n   * Assumes the label is NOT null.\n   * @param {String} label  The new node label.\n   * @returns {this}\n   */\n    setNodeLabel(label)\n    {\n        this._label = label;\n        return this;\n    }\n\n    /**\n   * Gets the label of the node. If the node has no label, it will return an\n   * empty string.\n   * @returns {String} The node's label.\n   */\n    getNodeLabel() { return this._label; }\n\n    /**\n   * Gets the size of the node. Can be overriden to specify a different size.\n   * @returns {Number} The radius of the node.\n   */\n    getNodeSize() { return 16; }\n\n    /** @override */\n    getHashString(usePosition=true)\n    {\n        if (usePosition)\n        {\n            return super.getHashString(usePosition) + ':' +\n        Math.floor(this.x) + ',' + Math.floor(this.y) + '.' + this._label;\n        }\n        else\n        {\n            return super.getHashString(usePosition) + ':' + this._label;\n        }\n    }\n}\n\nexport default GraphNode;\n","import GraphElement from './GraphElement.js';\n\n/**\n * A class that represents the edge elements of a graph.\n * \n * @see {@link NodeGraph}\n * @extends GraphElement\n */\nclass GraphEdge extends GraphElement\n{\n    /**\n     * Creates a edge with the unique id.\n     * \n     * @param {String} id           The element id for this node.\n     * @param {GraphNode} from      The from node of the edge.\n     * @param {GraphNode} [to=null] The to node of the edge.\n     */\n    constructor(id, from, to=null)\n    {\n        super(id);\n\n        this._from = from;\n        this._to = to;\n\n        this._label = '';\n    }\n\n    // DEPRECATED!\n    changeDestinationNode(node)\n    {\n        this._to = node;\n    }\n\n    setEdgeFrom(node)\n    {\n        if (!node) throw new Error('Source of edge cannot be null');\n\n        this._from = node;\n        return this;\n    }\n\n    setEdgeTo(node)\n    {\n        this._to = node;\n        return this;\n    }\n\n    /**\n     * Sets the edge label to the passed-in string.\n     *\n     * Assumes the label is NOT null.\n     * @param {String} label  The new edge label.\n     * @returns {this}\n     */\n    setEdgeLabel(label)\n    {\n        this._label = label;\n        return this;\n    }\n\n    getEdgeDirection()\n    {\n        const from = this._from;\n        const to = this._to;\n        const HALFPI = Math.PI / 2;\n        let result = 0;\n\n        if (this.isPlaceholder())\n        {\n            result = Math.PI / 4;\n        }\n        else\n        {\n            const dy = to.y - from.y;\n            const dx = to.x - from.x;\n            result = Math.atan2(dy, dx);\n        }\n\n        if (result > HALFPI || result < -HALFPI)\n        {\n            result += Math.PI;\n        }\n\n        return result;\n    }\n\n    getStartPoint(dst = { x: 0, y: 0 })\n    {\n        const from = this._from;\n        dst.x = from.x;\n        dst.y = from.y;\n        return dst;\n    }\n\n    /** @override */\n    getCenterPoint(dst = { x: 0, y: 0 })\n    {\n        const from = this._from;\n        const to = this._to;\n        if (this.isPlaceholder())\n        {\n            const halfPlaceholderLength = this.getPlaceholderLength() / 2;\n            dst.x = from.x + halfPlaceholderLength;\n            dst.y = from.y + halfPlaceholderLength;\n        }\n        else\n        {\n            dst.x = from.x + (to.x - from.x) / 2;\n            dst.y = from.y + (to.y - from.y) / 2;\n        }\n        return dst;\n    }\n\n    getEndPoint(dst = { x: 0, y: 0 })\n    {\n        if (this.isPlaceholder())\n        {\n            const from = this._from;\n            const placeholderLength = this.getPlaceholderLength();\n            dst.x = from.x + placeholderLength;\n            dst.y = from.y + placeholderLength;\n        }\n        else\n        {\n            const to = this._to;\n            dst.x = to.x;\n            dst.y = to.y;\n        }\n        return dst;\n    }\n\n    getPlaceholderLength() { return this._from.getNodeSize(); }\n    isPlaceholder() { return this._to === null; }\n    isSelfLoop() { return this._from === this._to; }\n\n    /**\n     * Gets the label of the edge. If the edge has no label, it will return an\n     * empty string.\n     * @returns {String} The edge's label.\n     */\n    getEdgeLabel() { return this._label; }\n\n    getEdgeFrom() { return this._from; }\n    getEdgeTo() { return this._to; }\n\n    /** @override */\n    getHashString(usePosition = true)\n    {\n        const src = this._from ? this._from.getHashString(usePosition) : '';\n        // HACK: to may be a pointer, which is not a node, so getHashString does not exist.\n        const dst = this._to ? this._to.getHashString ? this._to.getHashString(usePosition) : '0' : '';\n        return super.getHashString(usePosition) + ':' + src + ',' + dst + '.' + this._label;\n    }\n}\n\nexport default GraphEdge;","/**\n * A class that represents any positioned, unique object in a graph. Usually\n * this is not instantiated, but rather extended. Look at {@link NodeElement}\n * and {@link EdgeElement} as examples.\n */\nclass GraphElement\n{\n    /**\n   * Creates an element with the unique id.\n   * \n   * @param {Number} elementID The unique id that represents the element.\n   */\n    constructor(elementID)\n    {\n        this._id = elementID;\n    }\n\n    /**\n   * Sets the element's id to the passed-in id.\n   * @param {String} elementID  The new id.\n   * @returns {this}\n   */\n    setGraphElementID(elementID)\n    {\n        this._id = elementID;\n        return this;\n    }\n\n    /**\n   * Compute the center point of the element and store the result in dst. The\n   * properties changed in dst are: x, y.\n   * @param  {Object} [dst={x: 0, y: 0}]    The object to store the result.\n   * @returns {Object}                       The passed-in dst.\n   */\n    getCenterPoint(dst = { x: 0, y: 0 })\n    {\n        dst.x = dst.y = 0;\n        return dst;\n    }\n\n    /**\n   * A unique identifier for this graph element\n   * @returns {String} The unique identifier for this element.\n   */\n    getGraphElementID() { return this._id; }\n\n    /**\n   * Computes the hash string that represents this element and its current state\n   * uniquely and deterministically. {@link NodeGraph} uses this to compute its\n   * hash code that distinguishes it from other graphs. The generated string\n   * should only be used to differentiate between other objects of the same hash\n   * function. In other words, every instance should only be compared to other\n   * instances of the same class (or extended class without override).\n   * @param  {Boolean} [usePosition=true] Whether to consider positioning as\n   *                                      part of the unique state.\n   * @returns {String}                     The hash string that represents this\n   *                                      current state.\n   */\n    getHashString(usePosition = true) { return this._id; }\n}\n\nexport default GraphElement;\n","import GraphElement from 'graph/elements/GraphElement.js';\nimport { guid, stringHash } from 'util/MathHelper.js';\n\n// const FROM_STATE_INDEX = 0;\nconst SYMBOL_INDEX = 1;\nconst TO_STATE_INDEX = 2;\n\nexport const EMPTY_SYMBOL = '&empty';\n\nexport class State\n{\n    constructor(label='', src=null)\n    {\n        this._label = label;\n\n        this._src = src;\n        this._id = src instanceof GraphElement ? src.getGraphElementID() : guid();\n    }\n\n    copy()\n    {\n        const result = new State();\n        result._label = this._label;\n        result._src = this._src;\n        result._id = this._id;\n        return result;\n    }\n\n    getStateLabel() { return this._label; }\n\n    getStateID() { return this._id; }\n    getSource() { return this._src; }\n\n    getHashString()\n    {\n        return this._id;\n    }\n}\n\nexport class Transition\n{\n    constructor(from, to, symbols=[])\n    {\n        this._from = from;\n        this._to = to;\n        this._symbols = symbols;\n    }\n\n    copy()\n    {\n        const result = new Transition();\n        result._from = this._from;\n        result._to = this._to;\n        result._symbols = this._symbols.slice();\n        return result;\n    }\n\n    getSourceState() { return this._from; }\n    getDestinationState() { return this._to; }\n\n    addSymbol(symbol) { this._symbols.push(symbol); }\n    hasSymbol(symbol) { return this._symbols.includes(symbol); }\n    getSymbols() { return this._symbols; }\n\n    getHashString()\n    {\n        return this._from.getHashString() + ':' + this._symbols.join(',') + ':' + this._to.getHashString();\n    }\n}\n\nclass FSA\n{\n    constructor(deterministic=false)\n    {\n    //state id -> state\n        this._states = new Map();\n        //symbol -> symbol use counter\n        this._alphabet = new Map();\n        //transition key (from + to) -> transition object\n        this._transitions = new Map();\n        this._finalStates = new Set();\n        this._customSymbols = new Set();\n        this._startState = null;\n\n        this._deterministic = deterministic;\n        this._errors = [];\n    }\n\n    /**\n   * Performs a shallow copy of the 2 machines. Any changes to a state will be\n   * reflected in both. However, changes to transitions, alphabet, and final\n   * states will not propagate.\n   */\n    copy(fsa)\n    {\n    //You are already yourself, don't copy nothing.\n        if (fsa === this) return;\n\n        //Make room for the copy...\n        this.clear();\n\n        //Copy state\n        for(const [key, value] of fsa._states.entries())\n        {\n            const result = value.copy();\n            this._states.set(key, result);\n\n            //Copy start state\n            if (fsa.isStartState(value))\n            {\n                this._startState = result;\n            }\n            //Copy final states\n            if (fsa.isFinalState(value))\n            {\n                this._finalStates.add(result);\n            }\n        }\n        //Copy alphabet\n        for(const [key, value] of fsa._alphabet.entries())\n        {\n            this._alphabet.set(key, value);\n        }\n        //Copy transitions\n        for(const [key, value] of fsa._transitions.entries())\n        {\n            const result = value.copy();\n            result._from = this._states.get(value.getSourceState().getStateID());\n            result._to = this._states.get(value.getDestinationState().getStateID());\n            this._transitions.set(key, result);\n        }\n        //Copy custom symbols\n        for(const symbol of fsa._customSymbols)\n        {\n            this._customSymbols.add(symbol);\n        }\n\n        //Copy determinism\n        this._deterministic = fsa._deterministic;\n\n        //Copy errors\n        for(const error of fsa._errors)\n        {\n            //WARNING: if the error's store state objects, they need to be redirected to the copies\n            this._errors.push(error);\n        }\n    }\n\n    clear()\n    {\n        this._states.clear();\n        this._alphabet.clear();\n        this._transitions.clear();\n        this._finalStates.clear();\n        this._customSymbols.clear();\n        this._startState = null;\n\n        this._errors.length = 0;\n    }\n\n    setDeterministic(deterministic) { this._deterministic = deterministic; }\n    isDeterministic() { return this._deterministic; }\n\n    validate()\n    {\n    //Reset errors\n        this._errors.length = 0;\n\n        if (this._deterministic)\n        {\n            const foundSymbols = new Map();\n            for(const key of this._alphabet.keys())\n            {\n                foundSymbols.set(key, false);\n            }\n\n            for(const state of this._states.values())\n            {\n                //Get all outgoing transitions\n                const transitions = this.getOutgoingTransitions(state);\n                for(const transition of transitions)\n                {\n                    const symbol = transition[SYMBOL_INDEX];\n\n                    //We don't need to worry about empty symbols cause this is a DFA\n                    //So just assume every symbol is a valid one\n                    if (!foundSymbols.get(symbol))\n                    {\n                        foundSymbols.set(symbol, true);\n                    }\n                    else\n                    {\n                        //Found duplicate\n                        this._errors.push('duplicate symbol: ' + symbol);\n                        return false;\n                    }\n                }\n\n                //Reset foundSymbols for next state\n                for(const key of foundSymbols.keys())\n                {\n                    if (!foundSymbols.get(key))\n                    {\n                        //Found missing symbol for state\n                        this._errors.push('missing symbol: ' + key);\n                        return false;\n                    }\n\n                    //Reset found symbol\n                    foundSymbols.set(key, false);\n                }\n            }\n\n            //No errors found\n            this._errors.length = 0;\n            return true;\n        }\n        else\n        {\n            //It is a valid NFA already\n            this._errors.length = 0;\n            return true;\n        }\n    }\n    isValid() { return this._errors.length == 0; }\n    getErrors() { return this._errors; }\n\n    createState(label='')\n    {\n        return this.addState(new State(label));\n    }\n\n    addState(state)\n    {\n        const stateID = state.getStateID();\n        if (this._states.has(stateID)) throw new Error('Already added state with id \\'' + stateID + '\\'');\n        //Make state as new start state if no other states exist...\n        if (this._states.size <= 0) this._startState = state;\n        //Add to state set\n        this._states.set(stateID, state);\n        return state;\n    }\n\n    removeState(state)\n    {\n        const stateID = state.getStateID();\n        if (!this._states.has(stateID)) return false;\n        this._states.delete(stateID);\n\n        //Deleted the start state, so must pick another one...\n        if (this._startState === state)\n        {\n            if (this._states.size <= 0)\n            {\n                //If no more states to choose from, don't choose anything\n                this._startState = null;\n            }\n            else\n            {\n                //Choose an arbitrary start state\n                this._startState = this._states.values().next().value;\n            }\n        }\n\n        return true;\n    }\n\n    hasStateWithLabel(label)\n    {\n        for(const state of this._states.values())\n        {\n            if (state.getStateLabel() == label)\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    getStatesByLabel(label, dst=[])\n    {\n        for(const state of this._states.values())\n        {\n            if (state.getStateLabel() == label)\n            {\n                dst.push(state);\n            }\n        }\n        return dst;\n    }\n\n    getStateByID(id)\n    {\n        return this._states.get(id);\n    }\n\n    hasState(state) { return this._states.has(state.getStateID()); }\n\n    getStates() { return this._states.values(); }\n\n    getStateCount() { return this._states.size; }\n\n    addTransition(from, to, symbol)\n    {\n        if (!this.hasState(from)) throw new Error('Trying to add a transition to unknown state with label \\'' + from.getStateLabel() + '\\'');\n        if (!this.hasState(to)) throw new Error('Trying to add a transition to unknown state with label \\'' + to.getStateLabel() + '\\'');\n        if (!symbol) throw new Error('Cannot add transition for null symbol - use the empty symbol instead');\n\n        const transitionKey = from.getStateID() + '->' + to.getStateID();\n        if (this._transitions.has(transitionKey))\n        {\n            const transition = this._transitions.get(transitionKey);\n            if (!transition.hasSymbol(symbol))\n            {\n                transition.addSymbol(symbol);\n            }\n            else\n            {\n                //Didn't add anything...\n                return false;\n            }\n        }\n        else\n        {\n            this._transitions.set(transitionKey, new Transition(from, to, [symbol]));\n        }\n\n        //Add to alphabet...\n        this._incrSymbolCount(symbol);\n        return true;\n    }\n\n    removeTransition(from, to, symbol=null)\n    {\n        const transitionKey = from.getStateID() + '->' + to.getStateID();\n        if (!this._transitions.has(transitionKey)) return false;\n\n        const transition = this._transitions.get(transitionKey);\n        const symbols = transition.getSymbols();\n\n        //If deleting a specific symbol...\n        if (symbol)\n        {\n            const index = symbols.indexOf(symbol);\n            if (index >= 0)\n            {\n                //Update symbol counts...\n                this._decrSymbolCount(symbol);\n\n                symbols.splice(index, 1);\n                if (symbols.length <= 0) this._transitions.delete(transitionKey);\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        //If deleting a all associated symbols...\n        else\n        {\n            //Update symbol counts...\n            for(const symbol of symbols)\n            {\n                this._decrSymbolCount(symbol);\n            }\n\n            //Remove transition\n            this._transitions.delete(transitionKey);\n            return true;\n        }\n    }\n\n    hasTransition(from, to, symbol=null)\n    {\n        const transitionKey = from.getStateID() + '->' + to.getStateID();\n        if (!this._transitions.has(transitionKey)) return false;\n        //Not checking for specific symbols...\n        if (!symbol) return true;\n\n        //Find the symbol...\n        return this._transitions.get(transitionKey).hasSymbol(symbol);\n    }\n\n    getTransitionSymbols(from, to)\n    {\n        const transitionKey = from.getStateID() + '->' + to.getStateID();\n        if (!this._transitions.has(transitionKey)) return null;\n        return this._transitions.get(transitionKey).getSymbols();\n    }\n\n    getTransitions() { return this._transitions.values(); }\n\n    _incrSymbolCount(symbol)\n    {\n    //Don't add empty symbol to the alphabet\n        if (symbol === EMPTY_SYMBOL) return;\n\n        const symbolCount = this._alphabet.get(symbol) || 0;\n        this._alphabet.set(symbol, symbolCount + 1);\n    }\n\n    _decrSymbolCount(symbol)\n    {\n        if (!this._alphabet.has(symbol)) throw new Error('Unable to find valid transition symbol in alphabet');\n\n        //Empty symbol is not in the alphabet\n        if (symbol === EMPTY_SYMBOL) return;\n\n        const symbolCount = this._alphabet.get(symbol);\n        //Delete the symbol, since it is no longer used...\n        if (symbolCount <= 1)\n        {\n            if (!this.isCustomSymbol(symbol))\n            {\n                //Regular symbols are removed if unused...\n                this._alphabet.delete(symbol);\n            }\n            else\n            {\n                //Custom symbols stay in the alphabet, even if unused...\n                this._alphabet.set(symbol, 0);\n            }\n        }\n        else\n        {\n            //Still being used by someone...\n            this._alphabet.set(symbol, symbolCount - 1);\n        }\n    }\n\n    changeSymbol(symbol, newSymbol)\n    {\n        if (symbol === EMPTY_SYMBOL) throw new Error('Cannot change the empty symbol');\n        if (newSymbol === EMPTY_SYMBOL) throw new Error('Cannot change to the empty symbol');\n        if (this._alphabet.has(newSymbol)) throw new Error('Cannot change symbol to another existing symbol');\n\n        for(const transition of this._transitions.values())\n        {\n            const symbols = transition.getSymbols();\n            const index = symbols.indexOf(symbol);\n\n            //Change the symbol from the transition\n            if (index >= 0)\n            {\n                symbols[index] = newSymbol;\n            }\n        }\n\n        //Exchange symbol counts...\n        const count = this._alphabet.get(symbol);\n        this._alphabet.set(newSymbol, count);\n        this._alphabet.delete(symbol);\n\n        //Check if custom symbol...\n        if (this._customSymbols.has(symbol))\n        {\n            this._customSymbols.delete(symbol);\n            this._customSymbols.add(newSymbol);\n        }\n    }\n\n    removeSymbol(symbol)\n    {\n        const cache = [];\n        for(const [key, transition] of this._transitions.entries())\n        {\n            const symbols = transition.getSymbols();\n            const index = symbols.indexOf(symbol);\n\n            //Delete the symbol from the transition\n            if (index >= 0)\n            {\n                symbols.splice(index, 1);\n\n                //If no more symbols, make sure to delete it from the map later...\n                if (symbols.length <= 0)\n                {\n                    cache.push(key);\n                }\n            }\n        }\n\n        //Delete any transitions that have no more symbols...\n        for(const transitionKey of cache)\n        {\n            this._transitions.delete(transitionKey);\n        }\n\n        //Remove from alphabet if possible...\n        if (symbol !== EMPTY_SYMBOL)\n        {\n            if (this._customSymbols.has(symbol))\n            {\n                this._alphabet.set(symbol, 0);\n            }\n            else\n            {\n                this._alphabet.delete(symbol);\n            }\n        }\n    }\n\n    setCustomSymbol(symbol, custom=true)\n    {\n        if (symbol === EMPTY_SYMBOL) throw new Error('Cannot change the empty symbol as a custom symbol');\n\n        if (custom)\n        {\n            if (!this._customSymbols.has(symbol))\n            {\n                this._customSymbols.add(symbol);\n\n                //Add symbol to alphabet if missing...\n                if (!this._alphabet.has(symbol)) this._alphabet.set(symbol, 0);\n            }\n        }\n        else\n        {\n            if (this._customSymbols.has(symbol))\n            {\n                this._customSymbols.delete(symbol);\n\n                //If symbol is unused, delete it\n                if (this._alphabet.has(symbol) && this._alphabet.get(symbol) <= 0) this._alphabet.delete(symbol);\n            }\n        }\n    }\n\n    isCustomSymbol(symbol)\n    {\n        return this._customSymbols.has(symbol);\n    }\n\n    getCustomSymbols()\n    {\n        return this._customSymbols;\n    }\n\n    clearCustomSymbols()\n    {\n        this._customSymbols.clear();\n    }\n\n    isUsedSymbol(symbol)\n    {\n        return this._alphabet.has(symbol) && this._alphabet.get(symbol) > 0;\n    }\n\n    isSymbol(symbol)\n    {\n        return this._alphabet.has(symbol);\n    }\n\n    getAlphabet()\n    {\n        return this._alphabet.keys();\n    }\n\n    setStartState(state)\n    {\n        const stateID = state.getStateID();\n        if (!this._states.has(stateID))\n        {\n            //Add it to the state set\n            this._states.set(stateID, state);\n        }\n        this._startState = state;\n    }\n    isStartState(state) { return this._startState === state; }\n    getStartState() { return this._startState; }\n\n    setFinalState(state, final=true)\n    {\n    //Make final\n        if (final)\n        {\n            //If missing from state set, add it in...\n            if (!this._states.has(state.getStateID()))\n            {\n                this.addState(state);\n            }\n\n            this._finalStates.add(state);\n        }\n        else\n        {\n            //If missing from state set, it would be effectively the same thing as\n            //calling addState(state). So due to ambiguity, don't do it.\n            if (!this._states.has(state.getStateID())) throw new Error('Trying to change final for missing state \\'' + state.getStateLabel() + '\\'');\n\n            this._finalStates.delete(state);\n        }\n    }\n    isFinalState(state) { return this._finalStates.has(state); }\n    getFinalStates() { return this._finalStates; }\n\n    doTransition(state, symbol, forceNondeterminism=false, dst=[])\n    {\n        if (!state) return dst;\n        if (!(state instanceof State)) throw new Error('Invalid state instance type \\'' + (typeof state) + '\\'');\n        if (!this._states.has(state.getStateID())) throw new Error('Unable to find source state with id \\'' + state.getStateID() + '\\'');\n\n        if (!symbol) symbol = EMPTY_SYMBOL;\n\n        const fromTransitionKey = state.getStateID() + '->';\n        for(const key of this._transitions.keys())\n        {\n            if (key.startsWith(fromTransitionKey))\n            {\n                const transition = this._transitions.get(key);\n                if (transition.hasSymbol(symbol))\n                {\n                    dst.push(transition.getDestinationState());\n\n                    //There will only ever be 1 transition for deterministic machines\n                    if (!forceNondeterminism && this._deterministic) return dst;\n                }\n            }\n        }\n        return dst;\n    }\n\n    doTerminalTransition(state, symbol, dst=[])\n    {\n        if (!state) return dst;\n        if (!this._states.has(state.getStateID())) throw new Error('Unable to find source state with id \\'' + state.getStateID() + '\\'');\n\n        if (!symbol) symbol = EMPTY_SYMBOL;\n\n        const fromTransitionKey = state.getStateID() + '->';\n        for(const key of this._transitions.keys())\n        {\n            if (key.startsWith(fromTransitionKey))\n            {\n                const transition = this._transitions.get(key);\n                if (transition.hasSymbol(symbol))\n                {\n                    const toState = transition.getDestinationState();\n                    const result = this.doClosureTransition(toState);\n                    for(const s of result)\n                    {\n                        if (!dst.includes(s)) dst.push(s);\n                    }\n                }\n            }\n        }\n\n        return dst;\n    }\n\n    doClosureTransition(state, dst=[])\n    {\n        if (!state) return dst;\n\n        dst.push(state);\n        for(let i = 0; i < dst.length; ++i)\n        {\n            const transitions = this.getOutgoingTransitions(dst[i]);\n            for(const transition of transitions)\n            {\n                if (transition[SYMBOL_INDEX] === EMPTY_SYMBOL)\n                {\n                    const toState = transition[TO_STATE_INDEX];\n                    if (!dst.includes(toState))\n                    {\n                        dst.push(toState);\n                    }\n                }\n            }\n        }\n        return dst;\n    }\n\n    getOutgoingTransitions(state, dst=[])\n    {\n        if (!state) return dst;\n        if (!this._states.has(state.getStateID())) throw new Error('Unable to find source state with id \\'' + state.getStateID() + '\\'');\n\n        const fromTransitionKey = state.getStateID() + '->';\n        for(const key of this._transitions.keys())\n        {\n            if (key.startsWith(fromTransitionKey))\n            {\n                const transition = this._transitions.get(key);\n                const symbols = transition.getSymbols();\n                for(const symbol of symbols)\n                {\n                    dst.push([state, symbol, transition.getDestinationState()]);\n                }\n            }\n        }\n\n        return dst;\n    }\n\n    getHashCode()\n    {\n        let string = '';\n        for(const state of this._states.values())\n        {\n            string += state.getHashString() + ',';\n        }\n        string += '|';\n        for(const transition of this._transitions.values())\n        {\n            string += transition.getHashString() + ',';\n        }\n        string += '|';\n        for(const state of this._finalStates)\n        {\n            string += state.getHashString();\n        }\n        string += '|';\n        string += this._startState ? this._startState.getHashString() : '';\n        string += '|';\n        string += this._deterministic ? 'd' : 'n';\n        return stringHash(string);\n    }\n}\n\nexport default FSA;\n","import QuadraticEdge from 'graph/elements/QuadraticEdge.js';\n\nexport const SYMBOL_SEPARATOR = ' ';\nexport const EMPTY_CHAR = '\\u03B5';\n\nclass FSAEdge extends QuadraticEdge\n{\n    constructor(id, from, to=null)\n    {\n        super(id, from, to);\n    }\n\n    /** @override */\n    setEdgeLabel(label)\n    {\n        if (typeof label === 'string')\n        {\n            super.setEdgeLabel(label);\n        }\n        else\n        {\n            super.setEdgeLabel(EMPTY_CHAR);\n        }\n    }\n\n    getEdgeSymbolsFromLabel()\n    {\n        return this.getEdgeLabel().split(SYMBOL_SEPARATOR);\n    }\n}\n\nexport default FSAEdge;\n","import React from 'react';\n\nclass Icon extends React.Component\n{\n    constructor(props) { super(props); }\n\n    /** @override */\n    render()\n    {\n        return (\n            <svg id={this.props.id} className={this.props.className} style={this.props.style}\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n                <path d=\"M13.49 5.48c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm-3.6 13.9l1-4.4 2.1 2v6h2v-7.5l-2.1-2 .6-3c1.3 1.5 3.3 2.5 5.5 2.5v-2c-1.9 0-3.5-1-4.3-2.4l-1-1.6c-.4-.6-1-1-1.7-1-.3 0-.5.1-.8.1l-5.2 2.2v4.7h2v-3.4l1.8-.7-1.6 8.1-4.9-1-.4 2 7 1.4z\"/>\n            </svg>\n        );\n    }\n}\nexport default Icon;\n","\nfunction getReachableState(graph)\n{\n    let reachable = [];\n    let startNode = graph.getStartNode();\n    reachable.push(startNode);\n    for(let i = 0; i < reachable.length; i++)\n    {\n        for (const edge of graph.getEdges())\n        {\n            if(edge._from == reachable[i])\n            {\n                if(!reachable.includes(edge._to))\n                {\n                    reachable.push(edge._to);\n                }\n            }\n        }\n    }\n    return reachable;\n}\n\nclass GraphLayout\n{\n    static applyLayout(graph, type='circle')\n    {\n        if (type != 'circle') throw new Error('Invalid layout type');\n        //seperate node to reachable and unreachable\n        const reachableNode= getReachableState(graph);\n        function unreachable(node)\n        {\n            return !reachableNode.includes(node);\n        }\n        const unreachableNode = graph.getNodes().filter(unreachable);\n\n        //get num of nodes\n        const numOfReachable = reachableNode.length;\n        const numOfUnreachable = unreachableNode.length;\n        const numOfNode = graph.getNodes().length;\n        const maxNum = Math.max(numOfReachable, numOfUnreachable);\n        if(numOfNode == 0)\n        {\n            return;\n        }\n        //set radius\n        var radius;\n        if(numOfReachable < 10 && numOfUnreachable < 10)\n        {\n            radius = maxNum/4 * 50 + 30;\n        }\n        else\n        {\n            radius = (maxNum/5) * 40 + 30;\n        }\n\n        let currentStep = 0;\n        if (numOfReachable == 1)\n        {\n            let degree = 2* Math.PI/numOfNode;\n            for(const node of graph.getNodes())\n            {\n                node.y = Math.sin(degree*currentStep + Math.PI)*radius;\n                node.x = Math.cos(degree*currentStep + Math.PI)*radius;\n                currentStep += 1;\n            }\n        }\n        else \n        {\n            const degree_re = 2* Math.PI/numOfReachable;\n            const degree_un = 2* Math.PI/numOfUnreachable;\n\n            currentStep = 0;\n            for(const node of reachableNode)\n            {\n                node.y = Math.sin(degree_re*currentStep + Math.PI)*radius;\n                node.x = Math.cos(degree_re*currentStep + Math.PI)*radius;\n                currentStep += 1;\n            }\n            currentStep = 0;\n            for(const node of unreachableNode)\n            {\n                node.y = Math.sin(degree_un*currentStep + Math.PI)*(radius + 100);\n                node.x = Math.cos(degree_un*currentStep + Math.PI)*(radius + 100);\n                currentStep += 1;\n            }\n        }\n    /*for(const node of graph.getNodes())\n    {\n      node.y = Math.sin(degree*currentStep + Math.PI)*radius;\n      node.x = Math.cos(degree*currentStep + Math.PI)*radius;\n      currentStep += 1\n    }*/\n    }\n\n\n}\n\nexport default GraphLayout;\n","class AbstractEventHandler\n{\n    constructor() {}\n\n    applyUndo(undoManager)\n    {\n        throw new Error('Undo operation for handler not supported');\n    }\n\n    applyRedo(undoManager)\n    {\n        throw new Error('Redo operation for handler not supported');\n    }\n}\n\nexport default AbstractEventHandler;\n","import React from 'react';\n\nclass Icon extends React.Component\n{\n    constructor(props) { super(props); }\n\n    /** @override */\n    render()\n    {\n        return (\n            <svg id={this.props.id} className={this.props.className} style={this.props.style}\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"24\" height=\"24\" viewBox=\"0 0 56 56\">\n                <path fill=\"#E9E9E0\" d=\"M36.985,0H7.963C7.155,0,6.5,0.655,6.5,1.926V55c0,0.345,0.655,1,1.463,1h40.074 c0.808,0,1.463-0.655,1.463-1V12.978c0-0.696-0.093-0.92-0.257-1.085L37.607,0.257C37.442,0.093,37.218,0,36.985,0z\"/>\n                <polygon fill=\"#D9D7CA\" points=\"37.5,0.151 37.5,12 49.349,12 \t\"/>\n                <path fill=\"#9777A8\" d=\"M48.037,56H7.963C7.155,56,6.5,55.345,6.5,54.537V39h43v15.537C49.5,55.345,48.845,56,48.037,56z\"/>\n                <path fill=\"#FFFFFF\" d={'M17.021,42.719v7.848c0,0.474-0.087,0.873-0.26,1.196s-0.405,0.583-0.697,0.779 s-0.627,0.333-1.005,0.41c-0.378,0.077-0.768,0.116-1.169,0.116c-0.2,0-0.436-0.021-0.704-0.062s-0.547-0.104-0.834-0.191 s-0.563-0.185-0.827-0.294s-0.487-0.232-0.67-0.369l0.697-1.107c0.091,0.063,0.221,0.13,0.39,0.198s0.354,0.132,0.554,0.191 s0.41,0.111,0.629,0.157s0.424,0.068,0.615,0.068c0.483,0,0.868-0.094,1.155-0.28s0.439-0.504,0.458-0.95v-7.711H17.021z'}/>\n                <path fill=\"#FFFFFF\" d={'M25.184,50.238c0,0.364-0.075,0.718-0.226,1.06s-0.362,0.643-0.636,0.902s-0.61,0.467-1.012,0.622 s-0.856,0.232-1.367,0.232c-0.219,0-0.444-0.012-0.677-0.034s-0.467-0.062-0.704-0.116c-0.237-0.055-0.463-0.13-0.677-0.226 s-0.398-0.212-0.554-0.349l0.287-1.176c0.128,0.073,0.289,0.144,0.485,0.212s0.398,0.132,0.608,0.191s0.419,0.107,0.629,0.144 s0.405,0.055,0.588,0.055c0.556,0,0.982-0.13,1.278-0.39s0.444-0.645,0.444-1.155c0-0.31-0.104-0.574-0.314-0.793 s-0.472-0.417-0.786-0.595s-0.654-0.355-1.019-0.533s-0.706-0.388-1.025-0.629s-0.583-0.526-0.793-0.854s-0.314-0.738-0.314-1.23 c0-0.446,0.082-0.843,0.246-1.189s0.385-0.641,0.663-0.882s0.602-0.426,0.971-0.554s0.759-0.191,1.169-0.191 c0.419,0,0.843,0.039,1.271,0.116s0.774,0.203,1.039,0.376c-0.055,0.118-0.118,0.248-0.191,0.39s-0.142,0.273-0.205,0.396 s-0.118,0.226-0.164,0.308s-0.073,0.128-0.082,0.137c-0.055-0.027-0.116-0.063-0.185-0.109s-0.166-0.091-0.294-0.137 s-0.296-0.077-0.506-0.096s-0.479-0.014-0.807,0.014c-0.183,0.019-0.355,0.07-0.52,0.157s-0.31,0.193-0.438,0.321 s-0.228,0.271-0.301,0.431s-0.109,0.313-0.109,0.458c0,0.364,0.104,0.658,0.314,0.882s0.47,0.419,0.779,0.588 s0.647,0.333,1.012,0.492s0.704,0.354,1.019,0.581s0.576,0.513,0.786,0.854S25.184,49.7,25.184,50.238z'}/>\n                <path fill=\"#FFFFFF\" d={'M35.082,47.914c0,0.848-0.107,1.595-0.321,2.242s-0.511,1.185-0.889,1.613s-0.82,0.752-1.326,0.971 s-1.06,0.328-1.661,0.328s-1.155-0.109-1.661-0.328s-0.948-0.542-1.326-0.971s-0.675-0.966-0.889-1.613s-0.321-1.395-0.321-2.242 s0.107-1.593,0.321-2.235s0.511-1.178,0.889-1.606s0.82-0.754,1.326-0.978s1.06-0.335,1.661-0.335s1.155,0.111,1.661,0.335 s0.948,0.549,1.326,0.978s0.675,0.964,0.889,1.606S35.082,47.066,35.082,47.914z M30.844,51.729c0.337,0,0.658-0.066,0.964-0.198 s0.579-0.349,0.82-0.649s0.431-0.695,0.567-1.183s0.21-1.082,0.219-1.784c-0.009-0.684-0.08-1.265-0.212-1.743 s-0.314-0.873-0.547-1.183s-0.497-0.533-0.793-0.67s-0.608-0.205-0.937-0.205c-0.337,0-0.658,0.063-0.964,0.191 s-0.579,0.344-0.82,0.649s-0.431,0.699-0.567,1.183c-0.137,0.483-0.21,1.075-0.219,1.777c0.009,0.684,0.08,1.267,0.212,1.75 s0.314,0.877,0.547,1.183s0.497,0.528,0.793,0.67S30.516,51.729,30.844,51.729z'}/>\n                <path fill=\"#FFFFFF\" d=\"M44.68,42.924V53h-1.668l-3.951-6.945V53h-1.668V42.924h1.668l3.951,6.945v-6.945H44.68z\"/>\n                <path fill=\"#9777A8\" d=\"M19.5,19v-4c0-0.551,0.448-1,1-1c0.553,0,1-0.448,1-1s-0.447-1-1-1c-1.654,0-3,1.346-3,3v4 c0,1.103-0.897,2-2,2c-0.553,0-1,0.448-1,1s0.447,1,1,1c1.103,0,2,0.897,2,2v4c0,1.654,1.346,3,3,3c0.553,0,1-0.448,1-1 s-0.447-1-1-1c-0.552,0-1-0.449-1-1v-4c0-1.2-0.542-2.266-1.382-3C18.958,21.266,19.5,20.2,19.5,19z\"/>\n                <circle fill=\"#9777A8\" cx=\"27.5\" cy=\"18.5\" r=\"1.5\"/>\n                <path fill=\"#9777A8\" d=\"M39.5,21c-1.103,0-2-0.897-2-2v-4c0-1.654-1.346-3-3-3c-0.553,0-1,0.448-1,1s0.447,1,1,1 c0.552,0,1,0.449,1,1v4c0,1.2,0.542,2.266,1.382,3c-0.84,0.734-1.382,1.8-1.382,3v4c0,0.551-0.448,1-1,1c-0.553,0-1,0.448-1,1 s0.447,1,1,1c1.654,0,3-1.346,3-3v-4c0-1.103,0.897-2,2-2c0.553,0,1-0.448,1-1S40.053,21,39.5,21z\"/>\n                <path fill=\"#9777A8\" d=\"M27.5,24c-0.553,0-1,0.448-1,1v3c0,0.552,0.447,1,1,1s1-0.448,1-1v-3 C28.5,24.448,28.053,24,27.5,24z\"/>\n            </svg>\n        );\n    }\n}\nexport default Icon;\n","class Importer\n{\n    constructor() {}\n\n    /**\n     * Try to import the target file. Assumes that isValidFile() returns true.\n     * \n     * @param {String} fileName the name of the target file\n     * @param {String} fileType the associated file extension\n     * @param {String} fileData the file content to import\n     * @returns {Promise} a Promise that resolves if imported without errors\n     */\n    importFileData(fileName, fileType, fileData)\n    {\n        return Promise.resolve(fileData);\n    }\n    \n    getDataType() { return 'text'; }\n}\nexport default Importer;\n","import Importer from 'util/file/import/Importer.js';\n\nclass SessionImporter extends Importer\n{\n    constructor(app)\n    {\n        super();\n\n        this._app = app;\n    }\n\n    onParseSession(session, fileData)\n    {\n        return fileData;\n    }\n\n    onPreImportSession(session)\n    {\n        session.getApp().getUndoManager().captureEvent();\n    }\n\n    onImportSession(session, sessionData)\n    {\n        \n    }\n\n    onPostImportSession(session)\n    {\n        session.getApp().getUndoManager().captureEvent();\n    }\n\n    /** @override */\n    importFileData(fileName, fileType, fileData)\n    {\n        const app = this._app;\n        const session = app.getSession();\n        const currentModule = session.getCurrentModule();\n        const result = this.onParseSession(session, fileData);\n\n        this.onPreImportSession(session);\n\n        this.onImportSession(session, result);\n\n        let projectName;\n        if (fileName)\n        {\n            projectName = fileName.substring(0, fileName.length - fileType.length);\n        }\n        else\n        {\n            projectName = result['_metadata']['name'];\n        }\n        \n        app.getSession().setProjectName(projectName);\n\n        this.onPostImportSession(session);\n\n        return currentModule;\n    }\n}\n\nexport default SessionImporter;\n","import GraphEdge from './GraphEdge.js';\nimport { getDirectionalVector, getMidPoint } from 'util/MathHelper.js';\n\n/**\n * A class that represents the curved edge elements of a graph.\n * \n * @see {@link NodeGraph}\n * @extends GraphEdge\n */\nclass QuadraticEdge extends GraphEdge\n{\n    /**\n   * Creates a quadratic edge with the unique id.\n   * @constructor\n   * @param {String} id           The element id for this node.\n   * @param {GraphNode} from      The from node of the edge.\n   * @param {GraphNode} [to=null] The to node of the edge.\n   */\n    constructor(id, from, to = null)\n    {\n        super(id, from, null);\n\n        //radians = the angle in radians, where 0 is the normal of midpoint\n        //length = the distance from midpoint\n        this._quad = {\n            radians: 0,\n            length: 0,\n            coords: { x: 0, y: 0 }\n        };\n\n        // Make sure to format it correctly when creating...\n        this.changeDestinationNode(to);\n    }\n\n    /**\n   * Set the angle of the curve in radians\n   * @param {Number} radians the radians the quadratic should be curved\n   * @returns {this}\n   */\n    setQuadraticRadians(radians)\n    {\n        this._quad.radians = radians;\n        return this;\n    }\n\n    /**\n   * Set the distance of the curve from the midpoint\n   * @param {Number} length the \"height\" of the curve\n   * @returns {this}\n   */\n    setQuadraticLength(length)\n    {\n        this._quad.length = length;\n        return this;\n    }\n\n    /**\n   * Calculates and sets the quadratic vertex to pass through the position.\n   * This will update the radians and length of the curve.\n   * @param {Number} x the x coordinate\n   * @param {Number} y the y coordinate\n   * @returns {this}\n   */\n    setQuadraticByCoords(x, y)\n    {\n        const from = this._from;\n        const to = this._to;\n        const fromx = from.x;\n        const fromy = from.y;\n        const tox = to.x;\n        const toy = to.y;\n\n        let dx = tox - fromx;\n        let dy = toy - fromy;\n        const midpointx = fromx + dx / 2;\n        const midpointy = fromy + dy / 2;\n\n        // Remember: y-axis is flipped because canvas coord-space is -y => +y\n        // Therefore, dy needs to be flipped\n        const angleOffset = Math.atan2(-dy, dx);\n        dx = x - midpointx;\n        dy = y - midpointy;\n\n        const PI = Math.PI;\n        const HALFPI = PI / 2;\n        // 0 rad = to the right\n        // Also: angleOffset is the offset from midpoint angle, the orthogonal base vector\n        // This is because the from and to could be flipped, and\n        // therefore give a negative, or at least a reversed angle.\n        let radians = Math.atan2(dy, dx) + angleOffset;\n        let length = Math.sqrt(dx * dx + dy * dy);\n        if (length < 0) length = 0;\n\n        // -PI / 2 is outward\n        const outrad = radians - (-HALFPI);\n        // PI / 2 is inward\n        const inrad = radians - (HALFPI);\n        // TODO: Should be dependent on length, instead of a constant.\n        const maxdr = PI / 20;\n\n        if (Math.abs(length) < 8)\n        {\n            radians = 0;\n            length = 0;\n        }\n        else if (outrad < maxdr && outrad > -maxdr)\n        {\n            // -PI / 2 is outward\n            radians = -HALFPI;\n        }\n        else if (-inrad < maxdr && -inrad > -maxdr)\n        {\n            // PI / 2 is inward\n            radians = HALFPI;\n        }\n\n        this._quad.radians = radians;\n        this._quad.length = length;\n        return this;\n    }\n\n    getQuadraticLength() { return this._quad.length; }\n    getQuadraticRadians() { return this._quad.radians; }\n    getQuadratic() { return this._quad; }\n    isQuadratic() { return !this.isPlaceholder() && this._quad.length !== 0; }\n\n    getQuadraticAsCoords()\n    {\n        const from = this._from;\n        const to = this._to;\n        const dst = this._quad.coords;\n        if (from == null || to == null)\n        {\n            dst.x = 0;\n            dst.y = 0;\n        }\n        else\n        {\n            /*\n      //To mark dirty...\n      _capture: {\n        fx: 0, fy: 0,\n        tx: 0, ty: 0,\n        ql: 0, qr: 0\n      }\n      */\n            getDirectionalVector(from.x, from.y, to.x, to.y, this._quad.length, this._quad.radians, dst);\n        }\n        return dst;\n    }\n\n    /** @override */\n    getEdgeDirection()\n    {\n        let result = 0;\n        if (this.isQuadratic())\n        {\n            const coords = this.getQuadraticAsCoords();\n            result = Math.atan2(coords.y, coords.x) + Math.PI / 2;\n        }\n        else\n        {\n            result = super.getEdgeDirection();\n        }\n\n        return result;\n    }\n\n    /** @override */\n    getStartPoint(dst = { x: 0, y: 0 })\n    {\n        const from = this._from;\n        const to = this._to;\n\n        if (!from) throw new Error('Source of edge cannot be null.');\n        if (!to)\n        {\n            //Make sure to use quad for placeholder direction (not magnitude)\n            const px = Math.cos(this._quad.radians);\n            const py = Math.sin(this._quad.radians);\n            const nodeSize = from.getNodeSize();\n            dst.x = from.x + px * nodeSize;\n            dst.y = from.y + py * nodeSize;\n            return dst;\n        }\n\n        //Check if edge is following something other than a node...then remain flat\n        if (!to.getNodeSize || !this.isQuadratic())\n        {\n            getDirectionalVector(from.x, from.y, to.x, to.y, from.getNodeSize(), 0, dst);\n            dst.x += from.x;\n            dst.y += from.y;\n            return dst;\n        }\n        else\n        {\n            getMidPoint(from.x, from.y, to.x, to.y, dst);\n            const qcoords = this.getQuadraticAsCoords();\n            const qx = dst.x + qcoords.x;\n            const qy = dst.y + qcoords.y;\n            getDirectionalVector(from.x, from.y, qx, qy, from.getNodeSize(), this.isSelfLoop() ? (Math.PI / 4) : 0, dst);\n            dst.x += from.x;\n            dst.y += from.y;\n            return dst;\n        }\n    }\n\n    /** @override */\n    getCenterPoint(dst = { x: 0, y: 0 })\n    {\n        const from = this._from;\n        const to = this._to;\n\n        if (!from) throw new Error('Source of edge cannot be null.');\n        if (!to)\n        {\n            //Make sure to use quad for placeholder direction (not magnitude)\n            const px = Math.cos(this._quad.radians);\n            const py = Math.sin(this._quad.radians);\n            const placeholderLength = from.getNodeSize() + this.getPlaceholderLength() / 2;\n            dst.x = from.x + px * placeholderLength;\n            dst.y = from.y + py * placeholderLength;\n            return dst;\n        }\n\n        getMidPoint(from.x, from.y, to.x, to.y, dst);\n\n        if (this.isQuadratic())\n        {\n            const qcoords = this.getQuadraticAsCoords();\n            dst.x += qcoords.x;\n            dst.y += qcoords.y;\n        }\n\n        return dst;\n    }\n\n    /** @override */\n    getEndPoint(dst = { x: 0, y: 0 })\n    {\n        const from = this._from;\n        const to = this._to;\n\n        if (!from) throw new Error('Source of edge cannot be null.');\n        if (!to)\n        {\n            //Make sure to use quadCoords for placeholder direction (not magnitude)\n            const px = Math.cos(this._quad.radians);\n            const py = Math.sin(this._quad.radians);\n            const placeholderLength = from.getNodeSize() + this.getPlaceholderLength();\n            dst.x = from.x + px * placeholderLength;\n            dst.y = from.y + py * placeholderLength;\n            return dst;\n        }\n\n        //Get end point for non-nodes...\n        if (!to.getNodeSize)\n        {\n            return to;\n        }\n        //Get end point for straight edges...\n        else if (!this.isQuadratic())\n        {\n            getDirectionalVector(to.x, to.y, from.x, from.y, to.getNodeSize(), 0, dst);\n            dst.x += to.x;\n            dst.y += to.y;\n            return dst;\n        }\n        //Get end point for quadratics...\n        else\n        {\n            getMidPoint(from.x, from.y, to.x, to.y, dst);\n            const qcoords = this.getQuadraticAsCoords();\n            const qx = dst.x + qcoords.x;\n            const qy = dst.y + qcoords.y;\n            getDirectionalVector(to.x, to.y, qx, qy, to.getNodeSize(), this.isSelfLoop() ? -(Math.PI / 4.0) : 0, dst);\n            dst.x += to.x;\n            dst.y += to.y;\n            return dst;\n        }\n    }\n\n    /** @override */\n    getHashString(usePosition = true)\n    {\n        if (usePosition)\n        {\n            return super.getHashString(usePosition) + ':' + this._quad.radians + ',' + this._quad.length;\n        }\n        else\n        {\n            return super.getHashString(usePosition);\n        }\n    }\n\n    // DEPRECATED STUFF BELOW!!!\n\n    getSelfLoopHeight()\n    {\n        return this._from.getNodeSize();\n    }\n\n    formatAsSelfLoop()\n    {\n        this.setQuadraticRadians(-Math.PI / 2);\n        this.setQuadraticLength(this._from.getNodeSize() + this.getSelfLoopHeight());\n    }\n\n    formatAsPlaceholder(prevDest)\n    {\n    //Quad is re-used to determine edge angle for placeholder\n    //This can be used specifically for quad since regular quad is\n    //dependent on this._to != null, which placeholder assumes this._to == null.\n    //Also, quad.length is ignored, because the length should always be\n    //getPlaceholderLength(). This is resolved by getStartPoint(), etc.\n        if (prevDest)\n        {\n            const dx = this._from.x - prevDest.x;\n            const dy = this._from.y - prevDest.y;\n            const angle = -Math.atan2(dx, dy) - (Math.PI / 2);\n            this._quad.radians = angle;\n        }\n        else\n        {\n            this._quad.radians = 0;\n        }\n    }\n\n    /** @override */\n    changeDestinationNode(node)\n    {\n        const prevDest = this._to;\n\n        //Just to optimize this a little :)\n        if (prevDest === node) return;\n\n        super.changeDestinationNode(node);\n\n        if (this.isPlaceholder())\n        {\n            this.formatAsPlaceholder(prevDest);\n        }\n        else if (this.isSelfLoop())\n        {\n            this.formatAsSelfLoop();\n        }\n    }\n}\n\nexport default QuadraticEdge;","import NodeGraph from 'graph/NodeGraph.js';\nimport FSANode from './FSANode.js';\nimport FSAEdge, { SYMBOL_SEPARATOR } from './FSAEdge.js';\n\nconst PARALLEL_EDGE_HEIGHT = 10;\n\nclass FSAGraph extends NodeGraph\n{\n    constructor()\n    {\n        super(FSANode, FSAEdge);\n\n        this._nodes = [];\n    }\n\n    setStartNode(node)\n    {\n        if (this._nodes.length <= 0) throw new Error('Cannot set start node to empty graph');\n\n        //There is only one node, and that is already the start node\n        if (this._nodes.length === 1) return;\n\n        const i = this._nodes.indexOf(node);\n        if (i > 0)\n        {\n            //This does a swap; we could do a prepend but that's more costly...\n            const prev = this._nodes[0];\n            this._nodes[0] = node;\n            this._nodes[i] = prev;\n        }\n        else if (i < 0)\n        {\n            throw new Error('Cannot set start node for unknown node');\n        }\n    }\n\n    getStartNode()\n    {\n        return this._nodes.length > 0 ? this._nodes[0] : null;\n    }\n\n    /** @override */\n    addNode(node)\n    {\n        this._nodes.push(node);\n        return super.addNode(node);\n    }\n\n    /** @override */\n    deleteNode(node)\n    {\n        super.deleteNode(node);\n        const i = this._nodes.indexOf(node);\n        if (i >= 0) this._nodes.splice(i, 1);\n    }\n\n    /** @override */\n    clearNodes()\n    {\n        super.clearNodes();\n        this._nodes.length = 0;\n    }\n\n    //This is more like addEdge() without adding it to the graph and just returns the result\n    //This should only be called once when completing an edge\n    /** @override */\n    formatEdge(edge)\n    {\n        const edgeSource = edge.getEdgeFrom();\n        const edgeDestination = edge.getEdgeTo();\n        const edgeLabel = edge.getEdgeSymbolsFromLabel();\n\n        //Look for an existing edge with similar from and to\n        for (const otherEdge of this.getEdges())\n        {\n            if (otherEdge === edge) continue;\n            if (otherEdge.getEdgeFrom() === edgeSource && otherEdge.getEdgeTo() === edgeDestination)\n            {\n                const otherSymbols = otherEdge.getEdgeSymbolsFromLabel();\n                if (edgeLabel.length > 0)\n                {\n                    const result = otherSymbols.concat(edgeLabel);\n                    otherEdge.setEdgeLabel(result.join(SYMBOL_SEPARATOR));\n                }\n\n                //Merged with newfound edge...\n                return otherEdge;\n            }\n        }\n\n        //Otherwise, format the current edge\n\n        if (!edge.isSelfLoop())\n        {\n            let flag = false;\n\n            //Bend away if there is another edge not bent with the same src/dst\n            const parallelEdgeHeight = PARALLEL_EDGE_HEIGHT;\n            const HALFPI = Math.PI / 2;\n            for (const otherEdge of this.getEdges())\n            {\n                if (otherEdge.isQuadratic() && Math.abs(otherEdge.getQuadratic().length) >= parallelEdgeHeight * 2) continue;\n                if ((otherEdge.getEdgeTo() === edgeSource && otherEdge.getEdgeFrom() === edgeDestination))\n                {\n                    edge.setQuadraticRadians(HALFPI).setQuadraticLength(parallelEdgeHeight);\n                    otherEdge.setQuadraticRadians(HALFPI).setQuadraticLength(parallelEdgeHeight);\n                    flag = true;\n\n                    //ASSUMES that there will only ever be 2 edges that are parallel...\n                    break;\n                }\n            }\n\n            //Try to move the edge away from intersecting nodes...\n            if (!flag)\n            {\n                const maxNodeSize = Math.max(edgeSource.getNodeSize(), edgeDestination.getNodeSize());\n                const x1 = edgeSource.x;\n                const y1 = edgeSource.y;\n                const x2 = edgeDestination.x;\n                const y2 = edgeDestination.y;\n                const dist12sq = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n                let vertical = false;\n                let m = 0;\n                let b = 0;\n\n                if (x1 > x2)\n                {\n                    m = (y1 - y2) / (x1 - x2);\n                    b = y2 - m * x2;\n                }\n                else if (x1 < x2)\n                {\n                    m = (y2 - y1) / (x2 - x1);\n                    b = y1 - m * x1;\n                }\n                else\n                {\n                    vertical = true;\n                }\n\n                for (const node of this.getNodes())\n                {\n                    if (node === edgeSource || node === edgeDestination) continue;\n\n                    const x0 = node.x;\n                    const y0 = node.y;\n\n                    const dist01sq = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);\n                    const dist02sq = (x2 - x0) * (x2 - x0) + (y2 - y0) * (y2 - y0);\n                    if (dist01sq > dist12sq || dist02sq > dist12sq) continue;\n\n                    let dist = 0;\n                    if (vertical)\n                    {\n                        dist = Math.abs(x1 - x0);\n                    }\n                    else\n                    {\n                        dist = Math.abs(b + m * x0 - y0) / Math.sqrt(1 + m * m);\n                    }\n\n                    if (dist < node.getNodeSize())\n                    {\n                        flag = true;\n                        break;\n                    }\n                }\n\n                if (flag)\n                {\n                    edge.setQuadraticRadians(-Math.PI / 2);\n                    edge.setQuadraticLength(maxNodeSize + 10);\n                }\n            }\n        }\n\n        return edge;\n    }\n}\n\nexport default FSAGraph;\n","import GraphNode from './elements/GraphNode.js';\nimport GraphEdge from './elements/GraphEdge.js';\nimport { guid, stringHash } from 'util/MathHelper.js';\n\n/**\n * A class that represents a graph that coordinates nodes and edges.\n * \n */\nclass NodeGraph\n{\n    /**\n   * Create a NodeGraph.\n   * \n   * @param {Class} [nodeClass=GraphNode] The class that represents a node.\n   * @param {Class} [edgeClass=GraphEdge] The class that represents an edge.\n   */\n    constructor(nodeClass = GraphNode, edgeClass = GraphEdge)\n    {\n        this._nodeClass = nodeClass;\n        this._edgeClass = edgeClass;\n\n        this._nodeMapping = new Map();\n        this._edgeMapping = new Map();\n    }\n\n    /**\n   * Removes all nodes and edges from the graph.\n   */\n    clear()\n    {\n        this.clearEdges();\n        this.clearNodes();\n    }\n\n    /**\n   * Checks whether there exists any number of nodes or edges.\n   * @returns {Boolean} Whether the graph is empty.\n   */\n    isEmpty()\n    {\n        return this._nodeMapping.size <= 0 && this._edgeMapping.size <= 0;\n    }\n\n    /**\n   * Computes the boundaries of the graph that surrounds all nodes and edges. If\n   * the graph is empty, a rectangle at the origin of size 1 is returned.\n   * @returns {Object} The object which represents the bounding rectangle. It has\n   *                  the properties: minX, minY, maxX, maxY, width, height.\n   */\n    getBoundingRect()\n    {\n        if (this._nodeMapping.size <= 0) return {\n            minX: 0,\n            minY: 0,\n            maxX: 1,\n            maxY: 1,\n            width: 1,\n            height: 1\n        };\n\n        var minNX = Number.MAX_VALUE;\n        var minNY = Number.MAX_VALUE;\n        var maxNX = Number.MIN_VALUE;\n        var maxNY = Number.MIN_VALUE;\n\n        var maxNodeSize = 0;\n        for (const node of this._nodeMapping.values())\n        {\n            const x = node.x;\n            const y = node.y;\n            const size = node.getNodeSize();\n            if (size > maxNodeSize) maxNodeSize = size;\n\n            minNX = Math.min(minNX, x);\n            maxNX = Math.max(maxNX, x);\n\n            minNY = Math.min(minNY, y);\n            maxNY = Math.max(maxNY, y);\n        }\n\n        minNX -= maxNodeSize;\n        minNY -= maxNodeSize;\n        maxNX += maxNodeSize;\n        maxNY += maxNodeSize;\n\n        var minEX = Number.MAX_VALUE;\n        var minEY = Number.MAX_VALUE;\n        var maxEX = Number.MIN_VALUE;\n        var maxEY = Number.MIN_VALUE;\n\n        const startPoint = { x: 0, y: 0 };\n        const endPoint = { x: 0, y: 0 };\n        const centerPoint = { x: 0, y: 0 };\n        for (const edge of this._edgeMapping.values())\n        {\n            //Will store into point objects...\n            edge.getStartPoint(startPoint);\n            edge.getEndPoint(endPoint);\n            edge.getCenterPoint(centerPoint);\n\n            const sx = startPoint.x;\n            const sy = startPoint.y;\n            const ex = endPoint.x;\n            const ey = endPoint.y;\n            const cx = centerPoint.x;\n            const cy = centerPoint.y;\n\n            minEX = Math.min(minEX, sx, ex, cx);\n            maxEX = Math.max(maxEX, sx, ex, cx);\n\n            minEY = Math.min(minEY, sy, ey, cy);\n            maxEY = Math.max(maxEY, sy, ey, cy);\n        }\n\n        const result = {\n            minX: Math.min(minNX, minEX),\n            minY: Math.min(minNY, minEY),\n            maxX: Math.max(maxNX, maxEX),\n            maxY: Math.max(maxNY, maxEY),\n            width: 0,\n            height: 0\n        };\n        result.width = result.maxX - result.minX;\n        result.height = result.maxY - result.minY;\n        return result;\n    }\n\n    /**\n   * Computes a unique and persistent hash code that describes the current\n   * state.\n   * @param  {Boolean} [usePosition=true] Whether to consider the positioning as\n   *                                      part of the graph's state.\n   * @returns {Number}                    the hash code.\n   */\n    getHashCode(usePosition = true)\n    {\n        let string = '';\n        for (const node of this._nodeMapping.values())\n        {\n            string += node.getHashString(usePosition) + ',';\n        }\n        string += '|';\n        for (const edge of this._edgeMapping.values())\n        {\n            string += edge.getHashString(usePosition) + ',';\n        }\n        return stringHash(string);\n    }\n\n    // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= NODES\n\n    /**\n   * Create node for graph.\n   * @param  {Number} [x=0]       the initial x position\n   * @param  {Number} [y=0]       the initial y position\n   * @param  {String} [id=null]   the new node id (will be generated if null)\n   * @returns {GraphNdoe}         the new node\n   */\n    createNode(x = 0, y = 0, id = null)\n    {\n        return this.addNode(new (this._nodeClass)(id || guid(), x, y));\n    }\n\n    /**\n   * Add existing node to the graph. Any edges connected to the node are NOT\n   * deleted in the process. (so pls delete them first.)\n   * @param {GraphNode} node The node to be added.\n   * @returns {GraphNode} The node that was added to the graph.\n   */\n    addNode(node)\n    {\n        if (!node.getGraphElementID()) node.setGraphElementID(guid());\n        this._nodeMapping.set(node.getGraphElementID(), node);\n        return node;\n    }\n\n    /**\n   * Delete node from graph. Any edges whose source is the target node are also\n   * deleted.\n   * @param  {GraphNode} node        Target node to be deleted.\n   */\n    deleteNode(node)\n    {\n        const elementID = node.getGraphElementID();\n        if (this._nodeMapping.has(elementID))\n        {\n            this._nodeMapping.delete(elementID);\n\n            const nullSourceEdges = [];\n            //Find connected edges without sources...\n            for (const edge of this.getEdges())\n            {\n                if (edge.getEdgeFrom() === node)\n                {\n                    nullSourceEdges.push(edge);\n                }\n                else if (edge.getEdgeTo() === node)\n                {\n                    edge.setEdgeTo(null);\n                }\n            }\n            //Delete sourceless edges...\n            for (const edge of nullSourceEdges)\n            {\n                this.deleteEdge(edge);\n            }\n        }\n    }\n\n    clearNodes() { this._nodeMapping.clear(); }\n\n    getNodeByElementID(elementID)\n    {\n        if (this._nodeMapping.has(elementID))\n        {\n            return this._nodeMapping.get(elementID);\n        }\n        else\n        {\n            return null;\n        }\n    }\n\n    getNodesByLabel(label, dst = [])\n    {\n        for (const node of this.getNodes())\n        {\n            if (node.getNodeLabel() === label)\n            {\n                dst.push(node);\n            }\n        }\n        return dst;\n    }\n\n    getNodes() { return Array.from(this._nodeMapping.values()); }\n    getNodeCount() { return this._nodeMapping.size; }\n    getNodeClass() { return this._nodeClass; }\n\n    // =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= EDGES\n\n    /**\n   * This is more like addEdge() without adding it to the graph and just returns the result.\n   * This should only be called once when completing an edge.\n   */\n    formatEdge(edge)\n    {\n        return edge;\n    }\n\n    /**\n   * Create edge for graph. The id argument can be used to set the id to a\n   * pre-defined value instead of generating a new one.\n   * @param  {GraphNode} from                     the source graph node for the edge\n   * @param  {GraphNode|InputPointer} [to=null]   the destination graph node for the edge\n   * @param  {String} [id=null]                   the new edge id (will be generated if null)\n   * @returns {GraphEdge}                         the new edge\n   */\n    createEdge(from, to = null, id = null)\n    {\n        return this.addEdge(new (this._edgeClass)(id || guid(), from, to));\n    }\n\n    /**\n   * Add existing edge to the graph.\n   * \n   * Assumes that the passed-in edge does not have conflicting id's within this graph.\n   * @param {GraphEdge} edge    the edge to be added.\n   * @returns {GraphEdge}       the edge that was added to the graph.\n   */\n    addEdge(edge)\n    {\n        if (!edge.getGraphElementID()) edge.setGraphElementID(guid());\n        this._edgeMapping.set(edge.getGraphElementID(), edge);\n        return edge;\n    }\n\n    /**\n   * Delete edge from graph. The from and to nodes of the target edge are not\n   * modified.\n   * @param  {GraphEdge} edge      target edge to be deleted.\n   */\n    deleteEdge(edge)\n    {\n        const elementID = edge.getGraphElementID();\n        if (this._edgeMapping.has(elementID))\n        {\n            this._edgeMapping.delete(elementID);\n        }\n    }\n\n    clearEdges() { this._edgeMapping.clear(); }\n\n    getEdgeByElementID(elementID)\n    {\n        if (this._edgeMapping.has(elementID))\n        {\n            return this._edgeMapping.get(elementID);\n        }\n        else\n        {\n            return null;\n        }\n    }\n\n    getEdgesByLabel(label, dst = [])\n    {\n        for (const edge of this.getEdges())\n        {\n            if (edge.getEdgeLabel() === label)\n            {\n                dst.push(edge);\n            }\n        }\n        return dst;\n    }\n\n    getEdges() { return Array.from(this._edgeMapping.values()); }\n    getEdgeCount() { return this._edgeMapping.size; }\n    getEdgeClass() { return this._edgeClass; }\n}\n\nexport default NodeGraph;\n","export const FILE_TYPE_PNG = 'png';\nexport const FILE_TYPE_JPG = 'jpg';\nexport const FILE_TYPE_SVG = 'svg';\n\nexport function downloadText(filename, textData)\n{\n    downloadURL(filename, getTextDataURI(textData));\n}\n\nfunction createBlobFromSVG(svg)\n{\n    const serializer = new XMLSerializer();\n    const svgString = serializer.serializeToString(svg);\n    const blob = new Blob([svgString], { type: 'image/svg+xml' });\n    return blob;\n}\n\nexport function downloadImageFromSVG(filename, filetype, svg, width, height)\n{\n    const blob = createBlobFromSVG(svg);\n    switch (filetype)\n    {\n    case FILE_TYPE_PNG:\n    case FILE_TYPE_JPG:\n        {\n            const url = URL.createObjectURL(blob);\n\n            const canvas = document.createElement('canvas');\n            const ctx = canvas.getContext('2d');\n            const pixelRatio = window.devicePixelRatio || 1;\n            canvas.width = width * pixelRatio;\n            canvas.height = height * pixelRatio;\n            canvas.style.width = width + 'px';\n            canvas.style.height = height + 'px';\n            ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n\n            const image = new Image();\n            image.onload = () => \n            {\n                ctx.drawImage(image, 0, 0);\n                URL.revokeObjectURL(url);\n\n                const imageURI = canvas.toDataURL('image/' + filetype).replace('image/' + filetype, 'image/octet-stream');\n                downloadURL(filename + '.' + filetype, imageURI);\n            };\n            image.src = url;\n        }\n        break;\n    case FILE_TYPE_SVG:\n        {\n            const reader = new FileReader();\n            reader.onload = () => \n            {\n                downloadURL(filename + '.' + filetype, reader.result);\n            };\n            reader.readAsDataURL(blob);\n        }\n        break;\n    default:\n        throw new Error('Unknown file type \\'' + filetype + '\\'');\n    }\n}\n\nexport function downloadURL(filename, url)\n{\n    const element = document.createElement('a');\n    const headerIndex = url.indexOf(';');\n    url = url.substring(0, headerIndex + 1) + 'headers=Content-Disposition%3A%20attachment%3B%20filename=' + filename + ';' + url.substring(headerIndex + 1);\n    element.setAttribute('href', url);\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n    document.body.removeChild(element);\n}\n\nfunction getTextDataURI(data)\n{\n    return 'data:text/plain; charset=utf-8,' + encodeURIComponent(data);\n}\n","import React from 'react';\n\nclass Icon extends React.Component\n{\n    constructor(props) { super(props); }\n\n    /** @override */\n    render()\n    {\n        return (\n            <svg id={this.props.id} className={this.props.className} style={this.props.style}\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n                <path d=\"M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z\"/>\n            </svg>\n        );\n    }\n}\nexport default Icon;\n","import React from 'react';\n\nclass Icon extends React.Component\n{\n    constructor(props) { super(props); }\n\n    /** @override */\n    render()\n    {\n        return (\n            <svg id={this.props.id} className={this.props.className} style={this.props.style}\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n                <path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/>\n            </svg>\n        );\n    }\n}\nexport default Icon;\n","import React from 'react';\n\nclass Icon extends React.Component\n{\n    constructor(props) { super(props); }\n\n    /** @override */\n    render()\n    {\n        return (\n            <svg id={this.props.id} className={this.props.className} style={this.props.style}\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n                <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z\"/>\n            </svg>\n        );\n    }\n}\nexport default Icon;\n","import React from 'react';\n\nclass Icon extends React.Component\n{\n    constructor(props) { super(props); }\n\n    /** @override */\n    render()\n    {\n        return (\n            <svg id={this.props.id} className={this.props.className} style={this.props.style}\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n                <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11H7v-2h10v2z\"/>\n            </svg>\n        );\n    }\n}\nexport default Icon;\n","import React from 'react';\n\nclass Icon extends React.Component\n{\n    constructor(props) { super(props); }\n\n    /** @override */\n    render()\n    {\n        return (\n            <svg id={this.props.id} className={this.props.className} style={this.props.style}\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n                <path d=\"M16.59 7.58L10 14.17l-3.59-3.58L5 12l5 5 8-8zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"/>\n            </svg>\n        );\n    }\n}\nexport default Icon;\n","import React from 'react';\n\nclass Icon extends React.Component\n{\n    constructor(props) { super(props); }\n\n    /** @override */\n    render()\n    {\n        return (\n            <svg id={this.props.id} className={this.props.className} style={this.props.style}\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n                <path d=\"M14.59 8L12 10.59 9.41 8 8 9.41 10.59 12 8 14.59 9.41 16 12 13.41 14.59 16 16 14.59 13.41 12 16 9.41 14.59 8zM12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z\"/>\n            </svg>\n        );\n    }\n}\nexport default Icon;\n","import React from 'react';\n\nclass Icon extends React.Component\n{\n    constructor(props) { super(props); }\n\n    /** @override */\n    render()\n    {\n        return (\n            <svg id={this.props.id} className={this.props.className} style={this.props.style}\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\n                <path d=\"M19 8l-4 4h3c0 3.31-2.69 6-6 6-1.01 0-1.97-.25-2.8-.7l-1.46 1.46C8.97 19.54 10.43 20 12 20c4.42 0 8-3.58 8-8h3l-4-4zM6 12c0-3.31 2.69-6 6-6 1.01 0 1.97.25 2.8.7l1.46-1.46C15.03 4.46 13.57 4 12 4c-4.42 0-8 3.58-8 8H1l4 4 4-4H6z\"/>\n            </svg>\n        );\n    }\n}\nexport default Icon;\n","import FSA, { State } from '../FSA.js';\n\nexport function convertToNFA(fsa, dst=new FSA(false))\n{\n    if (!fsa.isDeterministic())\n    {\n        dst.copy(fsa);\n        return dst;\n    }\n\n    dst.setDeterministic(false);\n    return dst;\n}\n\nexport function convertToDFA(fsa, dst=new FSA(true))\n{\n    if (fsa.isDeterministic())\n    {\n        dst.copy(fsa);\n        return dst;\n    }\n\n    dst.setDeterministic(true);\n\n    const startState = fsa.getStartState();\n\n    const dfaData = {\n        nfaSource: fsa,\n        //To keep track of dfa states in terms of nfa sets\n        dfaStateMap: new Map(),\n        //Array of final dfa states\n        dfaFinalStates: [],\n        //To keep track of dfa transitions in terms of dfa states\n        dfaTransitionMap: new Map(),\n        //The resultant dfa start state\n        dfaStartState: null,\n        //The trap state for all missing transitions\n        dfaTrapState: null\n    };\n\n    //Make new DFA start state\n    const startStatesByClosure = fsa.doClosureTransition(startState);\n    dfaData.dfaStartState = getDFAStateFromNFAStates(startStatesByClosure, dfaData);\n    dfaData.dfaTrapState = getDFAStateFromNFAStates([], dfaData);\n\n    //For every state from the NFA's powerset, add it to DFA with correct transitions\n    const statePowerSet = getPowerSetOfStates(fsa.getStates());\n    for(const nfaStates of statePowerSet)\n    {\n    //As long as it is not the empty set...\n        if (nfaStates.length > 0)\n        {\n            expandNFAStatesToDFA(nfaStates, dfaData);\n        }\n    }\n\n    //Make sure any unused symbols are added as transitions for every state...\n    for(const dfaState of dfaData.dfaStateMap.values())\n    {\n        for(const symbol of fsa.getAlphabet())\n        {\n            //If transition for symbol does not exist...\n            const dfaTransitionKey = getDFATransitionKeyFromDFAStateAndSymbol(dfaState, symbol, dfaData);\n            if (!dfaData.dfaTransitionMap.has(dfaTransitionKey))\n            {\n                dfaData.dfaTransitionMap.set(dfaTransitionKey, [dfaState, symbol, dfaData.dfaTrapState]);\n            }\n        }\n    }\n\n    //Compiled dfa data to dst\n    dst.clear();\n    //Add states\n    for(const dfaState of dfaData.dfaStateMap.values())\n    {\n        dst.addState(dfaState);\n    }\n\n    //Set start state\n    dst.setStartState(dfaData.dfaStartState);\n    //Set final states\n    for(const finalState of dfaData.dfaFinalStates)\n    {\n        dst.setFinalState(finalState);\n    }\n    //Add transitions (will also add any symbols used to alphabet)\n    for(const transition of dfaData.dfaTransitionMap.values())\n    {\n        dst.addTransition(transition[0], transition[2], transition[1]);\n    }\n    return dst;\n}\n\nfunction expandNFAStatesToDFA(nfaStates, dfaData)\n{\n    let fromDFAState = getDFAStateFromNFAStates(nfaStates, dfaData);\n    let dfaState = null;\n\n    let nfaTerminals = [];\n\n    for(const symbol of dfaData.nfaSource.getAlphabet())\n    {\n    //Get all closed reachable states...\n        for(const fromNFAState of nfaStates)\n        {\n            dfaData.nfaSource.doTerminalTransition(fromNFAState, symbol, nfaTerminals);\n        }\n\n        //If has reachable states...\n        if (nfaTerminals.length > 0)\n        {\n            dfaState = getDFAStateFromNFAStates(nfaTerminals, dfaData);\n\n            //Create transition for reachable state\n            //Should guarantee to be unique for state and symbol pair\n            const dfaTransitionKey = getDFATransitionKeyFromDFAStateAndSymbol(fromDFAState, symbol, dfaData);\n            dfaData.dfaTransitionMap.set(dfaTransitionKey, [fromDFAState, symbol, dfaState]);\n        }\n\n        //Reset list\n        nfaTerminals.length = 0;\n    }\n}\n\nfunction getNFAStateKeyFromNFAStates(nfaStates, dfaData)\n{\n    let result = '';\n    for(const nfaState of dfaData.nfaSource.getStates())\n    {\n        if (nfaStates.includes(nfaState))\n        {\n            result += 'x';\n        }\n        else\n        {\n            result += '-';\n        }\n    }\n    return result;\n}\n\nfunction getDFATransitionKeyFromDFAStateAndSymbol(dfaState, symbol, dfaData)\n{\n    return dfaState.getStateID() + ';' + symbol;\n}\n\nfunction getDFAStateFromNFAStates(nfaStates, dfaData)\n{\n    const nfaStateKey = getNFAStateKeyFromNFAStates(nfaStates, dfaData);\n    let result = dfaData.dfaStateMap.get(nfaStateKey);\n\n    //If it doesn't exist, create it...\n    if (!result)\n    {\n        let final = false;\n        //Compute the label from nfa states in set notation...\n        let dfaStateLabel = '{';\n        for(const state of nfaStates)\n        {\n            if (dfaStateLabel.length > 1)\n            {\n                dfaStateLabel += ',';\n            }\n            dfaStateLabel += state.getStateLabel();\n\n            //Check if nfa state is final state...\n            if (!final)\n            {\n                final = dfaData.nfaSource.isFinalState(state);\n            }\n        }\n        dfaStateLabel += '}';\n\n        //Create the state\n        result = new State(dfaStateLabel);\n        dfaData.dfaStateMap.set(nfaStateKey, result);\n\n        //If any nfa states is a final state, make dfa state final...\n        if (final)\n        {\n            dfaData.dfaFinalStates.push(result);\n        }\n    }\n\n    return result;\n}\n\nfunction getPowerSetOfStates(states)\n{\n    var result = [[]];\n\n    for(const state of states)\n    {\n        for(let i = 0, len = result.length; i < len; ++i)\n        {\n            result.push(result[i].concat(state));\n        }\n    }\n    return result;\n}\n","const MAX_COMPUTATION_STEPS = 1000;\n\nexport function solveFSA(fsa, input)\n{\n    if (typeof input === 'string') input = input[Symbol.iterator]();\n\n    if (fsa.isDeterministic())\n    {\n    //Solve if the DFA way...\n        let state = fsa.getStartState();\n        let symbol = null;\n\n        //Is testing null after assignment\n        while((symbol = input.next().value))\n        {\n            const states = fsa.doTransition(state, symbol);\n            if (states.length < 1) return false;\n            //DFA's should only return 1 output\n            state = states[0];\n        }\n        return fsa.isFinalState(state);\n    }\n    else\n    {\n    //Solve it the NFA way...\n        const cachedStates = [];\n        const cachedSymbols = [];\n\n        //Start with the start state...\n        const startState = fsa.getStartState();\n        //(index refers to the \"level\" of computation)\n        cachedStates.push({state: startState, index: 0});\n        //...and any state defined similarly by closure...\n        for(const relatedState of fsa.doClosureTransition(startState))\n        {\n            cachedStates.push({state: relatedState, index: 0});\n        }\n\n        //The next symbol to compute...\n        let symbol = null;\n\n        //Just to be safe from infinite loops...\n        let counter = 0;\n        while(cachedStates.length > 0)\n        {\n            symbol = input.next().value;\n            if (solveFSAByStep(fsa, symbol, cachedStates, cachedSymbols))\n            {\n                return true;\n            }\n\n            //HACK: This is to stop any infinite loops! This should be fixed in the future!\n            ++counter;\n            if (counter > MAX_COMPUTATION_STEPS)\n            {\n                return false;\n            }\n        }\n\n        return false;\n    }\n}\n\n//TODO: When an empty transition occurs, it does a closure transition.\n//The closure chain will be stored as a group\n//Any future transitions must not re-enter the group\nexport function solveFSAByStep(nfa, symbol, cachedStates, cachedSymbols)\n{\n    //initialize variables\n    let state = null;\n    let nextStates = [];\n    let nextIndex = 0;\n\n    if (symbol)\n    {\n        cachedSymbols.push(symbol);\n    }\n\n    for(const cstate of cachedStates)\n    {\n        state = cstate.state;\n        symbol = cstate.index < cachedSymbols.length ? cachedSymbols[cstate.index] : null;\n\n        if (symbol)\n        {\n            //Read to next state...\n            nextIndex = cstate.index + 1;\n            for(const nextState of nfa.doTerminalTransition(state, symbol))\n            {\n                nextStates.push({state: nextState, index: nextIndex});\n            }\n        }\n        else\n        {\n            if (nfa.isFinalState(state)) return true;\n        }\n\n        //Read none to next state...\n        nextIndex = cstate.index;\n    }\n    cachedStates.length = 0;\n    cachedStates.push(...nextStates);\n    return false;\n}\n","import FSA from '../FSA.js';\n// TODO: add function headers-\n\n// TODO:explain intersected FSA\nexport function intersectFSA(fsa1, fsa2, dst=new FSA(true))\n{\n    throw new Error('Unsupported operation - not yet implemented');\n}\n\n\nexport function intersectDFA(dfa1, dfa2, dst=new FSA(true))\n{\n    if (!checkSameAlphabet(dfa1, dfa2))\n        throw new Error('Mismatched machine alphabet');\n\n    const alphabet = dfa1.getAlphabet();\n    const start1 = dfa1.getStartState();\n    const start2 = dfa2.getStartState();\n\n    if (!start1 && !start2)\n    {\n        dst.clear();\n        return dst;\n    }\n    else if (!start1)\n    {\n        return dst.copy(dfa2);\n    }\n    else if (!start2)\n    {\n        return dst.copy(dfa1);\n    }\n\n    const pairIDs = new Map();\n    const finalPairIDs = new Set();\n    const transitions = [];\n\n    //Add start state pair\n    const startPair = [start1, start2];\n    const startPairID = start1.getStateID() + ':' + start2.getStateID();\n    if (dfa1.isFinalState(start1) && dfa2.isFinalState(start2))\n    {\n        finalPairIDs.add(startPairID);\n    }\n    pairIDs.set(startPairID, startPair);\n\n    //Add remaining states by symbol\n    const remainingPairIDs = [];\n    remainingPairIDs.push(startPairID);\n    while(remainingPairIDs.length > 0)\n    {\n        const parentPairID = remainingPairIDs.pop();\n        const parentPair = pairIDs.get(parentPairID);\n        const parent1 = parentPair[0];\n        const parent2 = parentPair[1];\n\n        const result = [];\n        for(const symbol of alphabet)\n        {\n            let state1;\n            let state2;\n\n            dfa1.doTransition(parent1, symbol, false, result);\n            if (result.length !== 1)\n            {\n                throw new Error('Found non-deterministic transition from \\'' +\n          parent1.getStateLabel() + '\\' for \\'' + symbol + '\\' - transitions to \\'' + result.join(',') + '\\'');\n            }\n            state1 = result[0];\n            result.length = 0;\n\n            dfa2.doTransition(parent2, symbol, false, result);\n            if (result.length !== 1)\n            {\n                throw new Error('Found non-deterministic transition from \\'' +\n          parent2.getStateLabel() + '\\' for \\'' + symbol + '\\' - transitions to \\'' + result.join(',') + '\\'');\n            }\n            state2 = result[0];\n            result.length = 0;\n\n            //Get cartesian-product equivalent\n            const newPairID = state1.getStateID() + ':' + state2.getStateID();\n            if (!pairIDs.has(newPairID))\n            {\n                pairIDs.set(newPairID, [state1, state2]);\n                remainingPairIDs.push(newPairID);\n\n                //Only accept if both do\n                if (dfa1.isFinalState(state1) && dfa2.isFinalState(state2))\n                {\n                    finalPairIDs.add(newPairID);\n                }\n            }\n\n            //Add the transition\n            transitions.push([\n                /*FROM PAIR ID*/ parentPairID,\n                /*SYMBOL*/ symbol,\n                /*TO PAIR ID*/ newPairID\n            ]);\n        }\n    }\n\n    dst.clear();\n\n    //Add state/final pairs to the machine\n    const pairToState = new Map();\n    for(const [statePairID, statePair] of pairIDs.entries())\n    {\n        const state = dst.createState('(' + statePair[0].getStateLabel() + ',' + statePair[1].getStateLabel() + ')');\n        if (finalPairIDs.has(statePairID))\n        {\n            dst.setFinalState(state, true);\n        }\n        pairToState.set(statePairID, state);\n    }\n\n    //Add start pair to the machine\n    const startState = pairToState.get(startPairID);\n    if (!startState) throw new Error('Unable to find start state for pair');\n    dst.setStartState(startState);\n\n    //Add transitions to the machine\n    for(const transition of transitions)\n    {\n        const fromPairID = transition[0];\n        const symbol = transition[1];\n        const toPairID = transition[2];\n\n        const fromState = pairToState.get(fromPairID);\n        const toState = pairToState.get(toPairID);\n        if (!fromState || !toState) throw new Error('Cannot find state for pair');\n\n        dst.addTransition(fromState, toState, symbol);\n    }\n\n    return dst;\n}\n\nfunction checkSameAlphabet(fsa1, fsa2)\n{\n    const alphabet = new Set();\n    for(let symbol of fsa1.getAlphabet()) { alphabet.add(symbol); }\n\n    for(let symbol of fsa2.getAlphabet())\n    {\n        if (!alphabet.has(symbol))\n        {\n            return false;\n        }\n        else\n        {\n            alphabet.delete(symbol);\n        }\n    }\n\n    return alphabet.size <= 0;\n}\n","import FSA from '../FSA.js';\n\nexport function invertDFA(fsa, dst=new FSA(true))\n{\n    dst.copy(fsa);\n\n    const toBeRejected = new Set(dst.getFinalStates());\n    for(const state of dst.getStates())\n    {\n        if (toBeRejected.has(state))\n        {\n            dst.setFinalState(state, false);\n        }\n        else\n        {\n            dst.setFinalState(state, true);\n        }\n    }\n\n    return dst;\n}\n","import { convertToDFA } from './ConvertFSA.js';\nimport { intersectDFA } from './IntersectFSA.js';\nimport { invertDFA } from './InvertDFA.js';\n// import FSA from '../FSA.js';\n\nexport function isEquivalentFSA(fsa1, fsa2)\n{\n    const dfa1 = fsa1.isDeterministic() ? fsa1 : convertToDFA(fsa1);\n    const dfa2 = fsa2.isDeterministic() ? fsa2 : convertToDFA(fsa2);\n    return isEquivalentDFA(dfa1, dfa2);\n}\n\nexport function isEquivalentDFA(dfa1, dfa2)\n{\n    // L(dfa3) = L(dfa1) && !L(dfa2)\n    let dfa3 = intersectionOfComplement(dfa1, dfa2);\n    if (!dfa3) \n    {\n        //console.log(\"dfa1 and dfa2 use different alphabets\");\n        return false;\n    }\n    let dfa3acceptssomething = isLanguageNotEmpty(dfa3);\n    if(dfa3acceptssomething) \n    {\n        //console.log(`dfa1 accepts ${dfa3acceptssomething} while dfa2 doesn't`)\n        return false;\n    }\n    let dfa4 = intersectionOfComplement(dfa2, dfa1);\n    if (!dfa4) \n    {\n        //console.log(\"dfa1 and dfa2 use different alphabets\");\n        return false;\n    }\n    let dfa4acceptssometing = isLanguageNotEmpty(dfa4);\n    if(dfa4acceptssometing) \n    {\n        //console.log(`dfa2 accepts ${dfa4acceptssomething} while dfa1 doesn't`);\n        return false;\n    }\n    return true;\n    // L(dfa4) = L(dfa2) && !L(dfa1)\n}\n\n// TODO: move helper functions to seperate file\n// intersection is closed for DFA\nfunction intersectionOfComplement(dfa1, dfa2)\n{\n    // Returns false if used alphabet is different, else returns the common alphabet\n    const commonAlphabet = haveTheSameUsedAlphabet(dfa1, dfa2);\n    if (!commonAlphabet)\n        return null;\n\n    const inverted = invertDFA(dfa2);\n    return intersectDFA(dfa1, inverted);\n}\n\nfunction isLanguageNotEmpty(dfa)\n{\n    //Perform BFS from start state. If a final state can be reached, then the language\n    //is not empty, and the path is a witness. Else if no final states are ever reached,\n    //the language is empty\n    const explored = [];\n    const frontier = [dfa.getStartState()];\n    const path = new Map();\n    path.set(dfa.getStartState(), '');\n\n    while (frontier.length) \n    {\n        let current = frontier.shift();\n        explored.push(current);\n        let pathUpTill = path.get(current);\n\n        if (dfa.isFinalState(current)) \n        {\n            return pathUpTill;\n        }\n        for (const transition of dfa.getOutgoingTransitions(current)) \n        {\n            let dest = transition[2];\n            if(!explored.includes(dest) && !frontier.includes(dest)) \n            {\n                frontier.push(dest);\n                let symbol = transition[1];\n                path.set(dest, pathUpTill + symbol);\n            }\n        }\n    }\n    return false;\n}\n\n// TODO: same function in intersectFSA\nfunction haveTheSameUsedAlphabet(m1, m2)\n{\n    let alphabet1 = new Set();\n    let alphabet2 = new Set();\n    for (const symbol of m1.getAlphabet()) \n    {\n        if (m1.isUsedSymbol(symbol)) \n        {\n            alphabet1.add(symbol);\n        }\n    }\n    for (const symbol of m2.getAlphabet()) \n    {\n        if (m2.isUsedSymbol(symbol)) \n        {\n            alphabet2.add(symbol);\n        }\n    }\n    if (alphabet1.size != alphabet2.size)\n        return false;\n    for (const symbol of alphabet1) \n    {\n        if (!alphabet2.has(symbol))\n            return false;\n    }\n    return alphabet1;\n}\n\n/*\nexport function isEquivalentDFA(dfa1, dfa2)\n{\n  //Union the alphabets\n  const alphabet = new Set();\n  for(let symbol of dfa1.getAlphabet()) { alphabet.add(symbol); }\n  for(let symbol of dfa2.getAlphabet()) { alphabet.add(symbol); }\n\n  //TODO: to do later... :P\n\n  let s1 = null;\n  let s2 = null;\n  let newSet = null;\n\n  //1. For every state q in Q1 U Q2, MakeSet(q)\n  const sets = new Map();\n  const stack = [];\n  // - For each state q_1 in Q1, make {q_1}\n  let flag1 = false;\n  for(const q of dfa1.getStates())\n  {\n    s1 = \"1_\" + q.getStateID();\n    sets.set(s1, [s1]);\n    flag1 = true;\n  }\n  // - For each state q_2 in Q2, make {q_2}\n  let flag2 = false;\n  for(const q of dfa2.getStates())\n  {\n    s2 = \"2_\" + q.getStateID();\n    sets.set(s2, [s2]);\n    flag2 = true;\n  }\n  //This basically checks for the empty cases...\n  // - If no states exists in both, they are equivalent\n  if (sets.size == 0) return true;\n  // - If no states exists in either, they are not equivalent\n  if (!flag1 || !flag2) return false;\n\n  //2. Union(s1, s2) and Push(s1, s2) to stack S\n  // - Union(q_1, q_2) to refer to the same set\n  s1 = \"1_\" + dfa1.getStartState().getStateID();\n  s2 = \"2_\" + dfa2.getStartState().getStateID();\n  newSet = union(sets.get(s1), sets.get(s2));\n  sets.set(s1, newSet);\n  sets.set(s2, newSet);\n  // - Push(q_1, q_2) to stack\n  stack.push([s1, s2]);\n\n  //3. While S is not empty:\n  while(stack.length > 0)\n  {\n    //  a. Pop pair(q1, q2) from S\n    let set1 = null;\n    let set2 = null;\n    let pair = stack.pop();\n    //  b. For each a of Alphabet\n    for(const a of alphabet)\n    {\n      //    i. r1 = Find(Transition(q1, a))\n      const s1ID = pair[0].substring(2);\n      const s1SRC = dfa1.getStateByID(s1ID);\n      const s1Result = dfa1.doTransition(s1SRC, a);\n      if (s1Result.length > 0)\n      {\n        s1 = \"1_\" + s1Result[0].getStateID();\n        set1 = sets.get(s1);\n      }\n      //    ii. r2 = Find(Transition(q2, a))\n      const s2ID = pair[1].substring(2);\n      const s2SRC = dfa2.getStateByID(s2ID);\n      const s2Result = dfa2.doTransition(s2SRC, a);\n      if (s2Result.length > 0)\n      {\n        s2 = \"2_\" + s2Result[0].getStateID();\n        set2 = sets.get(s2);\n      }\n\n      // - if either lead no where, it is not a valid pair to work with.\n      if (!set1 || !set2) break;\n\n      //    iii. if r1 != r2\n      if (set1 !== set2)\n      {\n        //      1. Union(r1, r2) and Push(r1, r2) to S\n        //        - Union(q_1, q_2) to refer to the same set\n        newSet = union(set1, set2);\n        sets.set(s1, newSet);\n        sets.set(s2, newSet);\n        // - Update all elements in set to refer to the same set\n        for(const key of set1)\n        {\n          sets.set(key, newSet);\n        }\n        // - Update all elements in set to refer to the same set\n        for(const key of set2)\n        {\n          sets.set(key, newSet);\n        }\n        //        - Push(q_1, q_2) to stack\n        stack.push([s1, s2]);\n      }\n    }\n  }\n  //4. if no set contains a final and a non-final state\n  for(const states of sets.values())\n  {\n    let isFinal = false;\n    let isNotFinal = false;\n    for(const state of states)\n    {\n      if (state.startsWith(\"1_\"))\n      {\n        // - Whether a state that belongs to the first machine is a final or not\n        const stateID = state.substring(2);\n        const stateSRC = dfa1.getStateByID(stateID);\n        if (dfa1.isFinalState(stateSRC))\n        {\n          isFinal = true;\n        }\n        else\n        {\n          isNotFinal = true;\n        }\n      }\n      else if (state.startsWith(\"2_\"))\n      {\n        // - Whether a state that belongs to the second machine is a final or not\n        const stateID = state.substring(2);\n        const stateSRC = dfa2.getStateByID(stateID);\n        if (dfa2.isFinalState(stateSRC))\n        {\n          isFinal = true;\n        }\n        else\n        {\n          isNotFinal = true;\n        }\n      }\n      else\n      {\n        throw new Error(\"Found state from unknown machine.\");\n      }\n    }\n\n    // - If this set contains BOTH a final and non-final state, then it is not equal\n    if (isFinal && isNotFinal)\n    {\n      return false;\n    }\n  }\n  return true;\n};\n\nfunction union(set1, set2)\n{\n  const set = new Set();\n  for(const e of set1)\n  {\n    set.add(e);\n  }\n  for(const e of set2)\n  {\n    set.add(e);\n  }\n  return Array.from(set);\n}\n\n*/\n","export {convertToDFA, convertToNFA} from './util/ConvertFSA.js';\nexport {solveFSA, solveFSAByStep} from './util/SolveFSA.js';\nexport {isEquivalentFSA, isEquivalentDFA} from './util/EqualFSA.js';\nexport {invertDFA} from './util/InvertDFA.js';\nexport {intersectFSA, intersectDFA} from './util/IntersectFSA.js';\n","const LOCAL_STORAGE_ID = \"config\";\n\nconst cfg = {};\ncfg._resetOnLoad = false;\ncfg._userDefined = false;\ncfg._dirty = false;\ncfg.setValue = function(key, value) {\n  if (this.hasOwnProperty(key))\n  {\n    this._userDefined = true;\n    this._dirty = true;\n    this[key] = value;\n  }\n  else\n  {\n    throw new Error(\"Trying to assign value to non-existant key in config\");\n  }\n}.bind(cfg);\nexport default cfg;\n\n//Preferences\n\n//General\ncfg.MACHINE_ERRORS_MESSAGE_TAG = \"machineError\";\ncfg.MACHINE_CONVERSION_MESSAGE_TAG = \"machineConversion\";\n\ncfg.ERROR_CHECK_INTERVAL = 2000;\ncfg.GRAPH_IMMEDIATE_INTERVAL = 50;\n\n//Controller\ncfg.SMOOTH_OFFSET_DAMPING = 0.4;\ncfg.SCROLL_SENSITIVITY = 1.0 / 300.0;\ncfg.MIN_SCALE = 0.1;\ncfg.MAX_SCALE = 10;\n\n//Workspace\ncfg.INIT_WAITTIME = 1500;\n\n//NodalGraph\ncfg.STR_TRANSITION_DEFAULT_LABEL = \"\";\ncfg.STR_STATE_LABEL = \"q\";\ncfg.PARALLEL_EDGE_HEIGHT = 10;\ncfg.SELF_LOOP_HEIGHT = 40;\n\n//Input Fields\ncfg.SUBMIT_KEY = 13; //ENTER\ncfg.CLEAR_KEY = 27; //ESCAPE\ncfg.TAB_KEY = 9; //TAB\ncfg.UP_KEY = 38; //UP\ncfg.DOWN_KEY = 40; //DOWN\ncfg.DELETE_KEY = 8; //DELETE\n\n/** LEGACY CONFIG **/\n\n//Input\ncfg.DELETE_FORWARD_KEY = 46; //DELETE FORWARD\n\n//Geometry\ncfg.DEFAULT_GRAPH_SIZE = 300;\n\ncfg.NODE_RADIUS = 16;\ncfg.NODE_RADIUS_SQU = cfg.NODE_RADIUS * cfg.NODE_RADIUS;\ncfg.NODE_DIAMETER = cfg.NODE_RADIUS * 2;\ncfg.NODE_RADIUS_INNER = 12;\n\ncfg.INITIAL_MARKER_OFFSET_X = -(cfg.NODE_RADIUS + (cfg.NODE_RADIUS / 2));\n\ncfg.EDGE_RADIUS = 12;\ncfg.EDGE_RADIUS_SQU = cfg.EDGE_RADIUS * cfg.EDGE_RADIUS;\ncfg.ARROW_WIDTH = 10;\ncfg.PLACEHOLDER_LENGTH = cfg.NODE_RADIUS * 3;\ncfg.ENDPOINT_RADIUS = 6;\ncfg.ENDPOINT_RADIUS_SQU = cfg.ENDPOINT_RADIUS * cfg.ENDPOINT_RADIUS;\n\ncfg.HOVER_RADIUS_OFFSET = 4;\ncfg.CURSOR_RADIUS = 4;\ncfg.CURSOR_RADIUS_SQU = cfg.CURSOR_RADIUS * cfg.CURSOR_RADIUS;\n\n//Interface\ncfg.DOUBLE_TAP_TICKS = 600;\ncfg.LONG_TAP_TICKS = 600;\ncfg.SPAWN_RADIUS = 64;\ncfg.DEFAULT_SHOULD_DESTROY_POINTLESS_EDGE = true;\ncfg.DRAGGING_BUFFER = 18;\ncfg.DRAGGING_BUFFER_SQU = cfg.DRAGGING_BUFFER * cfg.DRAGGING_BUFFER;\n\n//Graph sorting\ncfg.PADDING_RADIUS_SQU = 2304;\n\n\n/** LOCAL STORAGE FUNCTIONS **/\n\n//check if browser support local storage\nexport function doesSupportLocalStorage()\n{\n  return typeof(Storage) !== 'undefined';\n}\n\nexport function loadConfig()\n{\n  const jsonString = localStorage.getItem(LOCAL_STORAGE_ID);\n  //If cannot find a config...\n  if (!jsonString)\n  {\n    //Just use the default one and don't save anything...\n    console.log(\"Using default config...\");\n    return;\n  }\n\n  try\n  {\n    console.log(\"Loading config...\");\n    const jsonData = JSON.parse(jsonString);\n    if (jsonData['_resetOnLoad'] == true)\n    {\n      //Reset the config\n      clearConfig();\n\n      //Save a new config\n      saveConfig();\n    }\n    else\n    {\n      Object.assign(cfg, jsonData);\n    }\n  }\n  catch (e)\n  {\n    //Reset the config\n    clearConfig();\n  }\n};\n\nexport function saveConfig(forceSave=false)\n{\n  if (forceSave || (cfg._userDefined && cfg._dirty))\n  {\n    try\n    {\n      console.log(\"Saving config...\");\n      const jsonString = JSON.stringify(cfg);\n      localStorage.setItem(LOCAL_STORAGE_ID, jsonString);\n\n      cfg._dirty = false;\n    }\n    catch (e)\n    {\n      //Reset the config\n      clearConfig();\n    }\n  }\n};\n\nexport function clearConfig()\n{\n  localStorage.removeItem(LOCAL_STORAGE_ID);\n\n  cfg._dirty = true;\n};\n","import GraphNode from 'graph/elements/GraphNode.js';\nimport Config from 'deprecated/config.js';\n\nclass FSANode extends GraphNode\n{\n    constructor(id, x, y)\n    {\n        super(id, x, y);\n\n        this._accept = false;\n\n        //this is not saved to hash since it is an aesthetic option\n        this._custom = false;\n    }\n\n    setNodeAccept(value)\n    {\n        this._accept = value;\n    }\n\n    getNodeAccept()\n    {\n        return this._accept;\n    }\n\n    setNodeCustom(value)\n    {\n        this._custom = value;\n    }\n\n    getNodeCustom()\n    {\n        return this._custom;\n    }\n\n    /** @override */\n    getNodeSize()\n    {\n        return Config.NODE_RADIUS;\n    }\n\n    /** @override */\n    getHashString(usePosition=true)\n    {\n        return super.getHashString(usePosition) + ':' + (this._accept ? '1' : '0');\n    }\n}\n\nexport default FSANode;\n","import FSAGraph from './FSAGraph.js';\nimport { SYMBOL_SEPARATOR } from './FSAEdge.js';\n\nconst GRAPH_PARSER_VERSION = '1.0.0';\n\nexport const JSON = {\n    parse(data, dst=null)\n    {\n        if (!dst) dst = new FSAGraph();\n        else dst.clear();\n\n        const nodeDatas = data['nodes'] || [];\n        const nodeCount = Math.min(nodeDatas.length || 0, data['nodeCount'] || 0);\n        const edgeDatas = data['edges'] || [];\n        const edgeCount = Math.min(edgeDatas.length || 0, data['edgeCount'] || 0);\n        const initialIndex = data['initial'] || 0;\n\n        const nodeIndices = new Map();\n        for(let i = 0; i < nodeCount; ++i)\n        {\n            const nodeData = nodeDatas[i];\n            if (!nodeData) continue;\n\n            //NOTE: Assumes createNode will maintain order\n            const node = dst.createNode(nodeData['x'] || 0, nodeData['y'] || 0, nodeData['id']);\n            node.setNodeLabel(nodeData['label'] || '');\n            node.setNodeAccept(nodeData['accept'] || false);\n            node.setNodeCustom(nodeData['custom'] || false);\n\n            nodeIndices.set(i, node);\n        }\n\n        const initialNode = nodeIndices.get(initialIndex);\n        if (initialNode)\n        {\n            dst.setStartNode(initialNode);\n        }\n\n        for(let i = 0; i < edgeCount; ++i)\n        {\n            const edgeData = edgeDatas[i];\n            if (!edgeData) continue;\n            const sourceNode = nodeIndices.get(edgeData['from']) || null;\n            //Cannot create source-less edges\n            if (!sourceNode) continue;\n            const destinationNode = nodeIndices.get(edgeData['to']) || null;\n            //NOTE: Assumes createEdge will maintain order\n            const edge = dst.createEdge(sourceNode, destinationNode, edgeData['id']);\n            const quadData = edgeData['quad'] || {};\n            edge.setEdgeLabel(edgeData['label'] || '');\n            edge.setQuadraticRadians(quadData['radians'] || 0);\n            edge.setQuadraticLength(quadData['length'] || 0);\n        }\n\n        return dst;\n    },\n    objectify(graph)\n    {\n        const graphNodes = graph.getNodes() || [];\n        const nodeCount = graphNodes.length || 0;\n        const graphEdges = graph.getEdges() || [];\n        const edgeCount = graphEdges.length || 0;\n        const graphInitial = graph.getStartNode();\n\n        const nodeDatas = new Array(nodeCount);\n        const nodeIndices = new Map();\n        for(let i = 0; i < nodeCount; ++i)\n        {\n            const node = graphNodes[i];\n            if (node)\n            {\n                //NOTE: Assumes node must have an id\n                const elementID = node.getGraphElementID();\n\n                nodeIndices.set(node, i);\n                nodeDatas[i] = {\n                    id: elementID,\n                    x: node.x || 0, y: node.y || 0,\n                    label: node.getNodeLabel() || '',\n                    accept: node.getNodeAccept() || false,\n                    custom: node.getNodeCustom() || false\n                };\n            }\n        }\n\n        const edgeDatas = new Array(edgeCount);\n        for(let i = 0; i < edgeCount; ++i)\n        {\n            const edge = graphEdges[i];\n            if (edge)\n            {\n                //NOTE: Assumes edge must have an id\n                const elementID = edge.getGraphElementID();\n\n                const quad = edge.getQuadratic() || {};\n                const edgeSource = edge.getEdgeFrom();\n                const edgeDestination = edge.getEdgeTo();\n                const sourceIndex = nodeIndices.has(edgeSource) ? nodeIndices.get(edgeSource) : -1;\n                const destinationIndex = nodeIndices.has(edgeDestination) ? nodeIndices.get(edgeDestination) : -1;\n                edgeDatas[i] = {\n                    id: elementID,\n                    from: sourceIndex,\n                    to: destinationIndex,\n                    quad: { radians: quad['radians'] || 0, length: quad['length'] || 0 },\n                    label: edge.getEdgeLabel() || ''\n                };\n            }\n        }\n\n        const initialIndex = nodeIndices.get(graphInitial) || 0;\n\n        return {\n            nodeCount: nodeCount,\n            nodes: nodeDatas,\n            edgeCount: edgeCount,\n            edges: edgeDatas,\n            initial: initialIndex,\n            _version: GRAPH_PARSER_VERSION\n        };\n    }\n};\n\nexport const XML = {\n    parse(data, dst = null)\n    {\n        if (!dst) dst = new FSAGraph();\n        else dst.clear();\n\n        const nodeElements = data.getElementsByTagName('state') || [];\n        const nodeCount = nodeElements.length;\n        const edgeElements = data.getElementsByTagName('transition') || [];\n        const edgeCount = edgeElements.length;\n        let initialIndex = '0';\n\n        //Get the nodes...\n        const nodeElementIDs = new Map();\n        for(let i = 0; i < nodeCount; ++i)\n        {\n            const nodeElement = nodeElements[i];\n            if (!nodeElement) continue;\n            const nodeElementID = nodeElement.getAttribute('id');\n            if (!nodeElementID) continue;\n\n            //Get x value\n            let x = 0;\n            const xElements = nodeElement.getElementsByTagName('x');\n            //If no elements exists, we are guaranteed an empty list...\n            if (xElements.length > 0)\n            {\n                const xElement = xElements[0];\n                if (xElement.hasChildNodes())\n                {\n                    //hasChildNodes() guarantees at least 1 element\n                    const xValue = xElement.childNodes[0];\n                    if (xValue)\n                    {\n                        try\n                        {\n                            x = parseFloat(xValue.nodeValue) || 0;\n                        }\n                        catch (e)\n                        {\n                            x = 0;\n                        }\n                    }\n                }\n            }\n\n            //Get y value\n            let y = 0;\n            const yElements = nodeElement.getElementsByTagName('y');\n            //If no elements exists, we are guaranteed an empty list...\n            if (yElements.length > 0)\n            {\n                const yElement = yElements[0];\n                if (yElement.hasChildNodes())\n                {\n                    //hasChildNodes() guarantees at least 1 element\n                    const yValue = yElement.childNodes[0];\n                    if (yValue)\n                    {\n                        try\n                        {\n                            y = parseFloat(yValue.nodeValue) || 0;\n                        }\n                        catch (e)\n                        {\n                            y = 0;\n                        }\n                    }\n                }\n            }\n\n            //Get initial flag\n            const initialElements = nodeElement.getElementsByTagName('initial');\n            //If no elements exists, we are guaranteed an empty list...\n            const initial = initialElements.length > 0;\n\n            //Get final flag\n            const finalElements = nodeElement.getElementsByTagName('final');\n            //If no elements exists, we are guaranteed an empty list...\n            const final = finalElements.length > 0;\n\n            //NOTE: Assumes createNode will maintain order\n            const node = dst.createNode(x, y);\n            node.setNodeLabel(nodeElement.getAttribute('name') || '');\n            node.setNodeAccept(final);\n\n            if (initial) initialIndex = nodeElementID;\n            nodeElementIDs.set(nodeElementID, node);\n        }\n\n        //Set the initial node...\n        const initialNode = nodeElementIDs.get(initialIndex);\n        if (initialNode)\n        {\n            dst.setStartNode(initialNode);\n        }\n\n        //Readjust the center of graph...\n        const boundingRect = dst.getBoundingRect();\n        const minX = boundingRect.minX;\n        const minY = boundingRect.minY;\n        const width = boundingRect.width;\n        const height = boundingRect.height;\n        const graphNodes = dst.getNodes();\n        for(let i = 0, len = graphNodes.length; i < len; ++i)\n        {\n            graphNodes[i].x -= minX + width / 2;\n            graphNodes[i].y -= minY + height / 2;\n        }\n\n        //Get the transitions...\n        const transitionMapping = new Map();\n        for(let i = 0; i < edgeCount; ++i)\n        {\n            const edgeElement = edgeElements[i];\n            if (!edgeElement) continue;\n\n            //Get from value\n            let sourceID = null;\n            const fromElements = edgeElement.getElementsByTagName('from');\n            //If no elements exists, we are guaranteed an empty list...\n            if (fromElements.length > 0)\n            {\n                const fromElement = fromElements[0];\n                if (fromElement.hasChildNodes())\n                {\n                    //hasChildNodes() guarantees at least 1 element\n                    const fromValue = fromElement.childNodes[0];\n                    if (fromValue)\n                    {\n                        sourceID = fromValue.nodeValue;\n                    }\n                }\n            }\n\n            //Cannot create source-less edges\n            if (!nodeElementIDs.has(sourceID)) continue;\n\n            //Get to value\n            let destinationID = '';\n            const toElements = edgeElement.getElementsByTagName('to');\n            //If no elements exists, we are guaranteed an empty list...\n            if (toElements.length > 0)\n            {\n                const toElement = toElements[0];\n                if (toElement.hasChildNodes())\n                {\n                    //hasChildNodes() guarantees at least 1 element\n                    const toValue = toElement.childNodes[0];\n                    if (toValue)\n                    {\n                        destinationID = toValue.nodeValue || '';\n                    }\n                }\n            }\n\n            //Get read value\n            let symbol = '';\n            const readElements = edgeElement.getElementsByTagName('read');\n            //If no elements exists, we are guaranteed an empty list...\n            if (readElements.length > 0)\n            {\n                const readElement = readElements[0];\n                if (readElement.hasChildNodes())\n                {\n                    //hasChildNodes() guarantees at least 1 element\n                    const readValue = readElement.childNodes[0];\n                    if (readValue)\n                    {\n                        symbol = readValue.nodeValue || '';\n                    }\n                }\n            }\n\n            const transitionID = sourceID + '\\n' + destinationID;\n            let symbols;\n            if (transitionMapping.has(transitionID))\n            {\n                symbols = transitionMapping.get(transitionID);\n            }\n            else\n            {\n                symbols = [];\n                transitionMapping.set(transitionID, symbols);\n            }\n            symbols.push(symbol);\n        }\n\n        for(const transitionKey of transitionMapping.keys())\n        {\n            const key = transitionKey.split('\\n');\n            if (key.length !== 2) continue;\n\n            const symbols = transitionMapping.get(transitionKey);\n            const label = symbols.join(SYMBOL_SEPARATOR);\n            //Should never be null, since it was checked before...\n            const sourceNode = nodeElementIDs.get(key[0]);\n            const destinationNode = nodeElementIDs.get(key[1]);\n\n            //NOTE: Assumes createEdge will maintain order\n            const edge = dst.createEdge(sourceNode, destinationNode);\n            edge.setEdgeLabel(label);\n        }\n\n        return dst;\n    },\n    objectify(graph)\n    {\n        const graphNodes = graph.getNodes() || [];\n        const nodeCount = graphNodes.length || 0;\n        const graphEdges = graph.getEdges() || [];\n        // const edgeCount = graphEdges.length || 0;\n        const graphInitial = graph.getStartNode();\n\n        const header = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>' +\n      '<!--Created with flap.js ' + GRAPH_PARSER_VERSION + '-->' +\n      '<structure></structure>';\n        const parser = new DOMParser();\n        const doc = parser.parseFromString(header, 'application/xml');\n        const structure = doc.getElementsByTagName('structure')[0];\n\n        const type = doc.createElement('type');\n        type.innerHTML = 'fa'; //finite automata\n        structure.appendChild(type);\n\n        const automaton = doc.createElement('automaton');\n        structure.appendChild(automaton);\n\n        const nodeIndices = new Map();\n        for(let i = 0; i < nodeCount; ++i)\n        {\n            const node = graphNodes[i];\n            nodeIndices.set(node, i);\n\n            //state tag\n            const state = doc.createElement('state');\n            state.id = '' + i;\n            state.setAttribute('name', node.getNodeLabel());\n            automaton.appendChild(state);\n\n            //x tag\n            const x = doc.createElement('x');\n            x.innerHTML = '' + (node.x || 0);\n            state.appendChild(x);\n\n            //y tag\n            const y = doc.createElement('y');\n            y.innerHTML = '' + (node.y || 0);\n            state.appendChild(y);\n\n            //initial tag\n            if (graphInitial === node)\n            {\n                state.appendChild(doc.createElement('initial'));\n            }\n\n            //final tag\n            if (node.getNodeAccept())\n            {\n                state.appendChild(doc.createElement('final'));\n            }\n        }\n\n        for(let edge of graphEdges)\n        {\n            const symbols = edge.getEdgeSymbolsFromLabel();\n            for(let symbol of symbols)\n            {\n                //transition tag\n                const transition = doc.createElement('transition');\n                automaton.appendChild(transition);\n\n                //from tag\n                const from = doc.createElement('from');\n                from.innerHTML = '' + (nodeIndices.get(edge.getEdgeFrom()) || 0);\n                transition.appendChild(from);\n\n                //to tag\n                const to = doc.createElement('to');\n                to.innerHTML = '' + (nodeIndices.get(edge.getEdgeTo()) || 0);\n                transition.appendChild(to);\n\n                //read tag\n                const read = doc.createElement('read');\n                read.innerHTML = '' + (symbol || '');\n                transition.appendChild(read);\n            }\n        }\n\n        return doc;\n    }\n};\n","import { stringHash } from 'util/MathHelper.js';\n\nexport const EMPTY = '\\u03B5';\nexport const CONCAT = '\\u25E6';\nexport const UNION = 'U';\nexport const KLEENE = '*';\nexport const SIGMA = '\\u03A3';\nexport const EMPTY_SET = '\\u2205';\nexport const PLUS = '\\u207A';\n\nclass RE\n{\n    constructor(expression = '')\n    {\n        this._expression = expression;\n        this._terminals = new Set();\n        this._errors = [];\n    }\n\n    /**\n\t * Performs a shallow copy of the 2 machines. Any changes to a state will be\n\t * reflected in both. However, changes to transitions, alphabet, and final\n\t * states will not propagate.\n\t */\n    copy(re)\n    {\n        //You are already yourself, don't copy nothing.\n        if (re === this) return;\n\n        //Make room for the copy...\n        this.clear();\n\n        this._expression = re._expression;\n\n        //Copy terminals\n        for (const terminal of re._terminals)\n        {\n            this._terminals.add(terminal);\n        }\n\n        //Copy errors\n        for (const error of re._errors)\n        {\n            //WARNING: if the error's store state objects, they need to be redirected to the copies\n            this._errors.push(error);\n        }\n    }\n\n    clear()\n    {\n        this._expression = '';\n        this._terminals.clear();\n        this._errors.length = 0;\n    }\n\n    validate()\n    {\n        //Reset errors\n        this._errors.length = 0;\n\n        try\n        {\n            if (this.isExpressionValid())\n            {\n                return true;\n            }\n        }\n        catch (e)\n        {\n            this._errors.push(e);\n        }\n\n        return false;\n    }\n    isValid()\n    {\n        return this._errors.length == 0;\n    }\n    getErrors()\n    {\n        return this._errors;\n    }\n\n    addTerminal(x)\n    {\n        this._terminals.add(x);\n    }\n    hasTerminal(x)\n    {\n        return this._terminals.has(x);\n    }\n    getTerminals()\n    {\n        return this._terminals;\n    }\n    clearTerminals()\n    {\n        this._terminals.clear();\n    }\n\n    areParenthesisBalanced()\n    {\n        let count = 0;\n        let expression = this.getExpression();\n        for (let i = 0; i < expression.length; i++)\n        {\n            if (expression.charAt(i) == '(')\n                count++;\n            else if (expression.charAt(i) == ')')\n                count--;\n            if (count < 0)\n                return false;\n        }\n        return count == 0;\n    }\n\n    isExpressionValid()\n    {\n        let expression = this.getExpression();\n        if (!expression || expression.length == 0) return true;\n        //throw new Error(\"The expression must be nonempty.\");\n        if (!this.areParenthesisBalanced())\n            throw new Error('The parentheses are unbalanced!');\n        switch (expression.charAt(0))\n        {\n        //Only '(' or a symbol can be the first character\n        case ')':\n        case UNION:\n        case KLEENE:\n        case CONCAT:\n        case PLUS:\n            throw new Error('Operators are poorly formatted.');\n        }\n        for (let i = 1; i < expression.length; i++)\n        {\n            let currChar = expression.charAt(i);\n            let prevChar = expression.charAt(i - 1);\n            switch (currChar)\n            {\n            case UNION:\n            case CONCAT:\n                // UNION and CONCAT can't be the last character\n                if (i == expression.length - 1)\n                    throw new Error('Operators are poorly formatted.');\n            // eslint-disable-next-line no-fallthrough\n            case ')':\n            case KLEENE:\n            case PLUS:\n                // Must be preceded with a symbol\n                if (prevChar == '(' || prevChar == UNION || prevChar == CONCAT)\n                    throw new Error('Operators are poorly formatted.');\n                // Kleene and Plus cannot be applied to empty set\n                if ((currChar == KLEENE || currChar == PLUS) && prevChar == EMPTY_SET)\n                    throw new Error('Empty set can only be part of a union or concatenation');\n                break;\n            }\n        }\n        return true;\n    }\n\n    insertConcatSymbols()\n    {\n        let result = '';\n        let expression = this.getExpression();\n        for (let i = 0; i < expression.length; i++)\n        {\n            let currChar = expression.charAt(i);\n            result += currChar;\n            if (i + 1 < expression.length)\n            {\n                let nextChar = expression.charAt(i + 1);\n                if (currChar != '(' && currChar != UNION && currChar != CONCAT &&\n\t\t\t\t\tnextChar != ')' && nextChar != UNION && nextChar != KLEENE && nextChar != PLUS && nextChar != CONCAT)\n                {\n                    result += CONCAT;\n                }\n            }\n        }\n        this.setExpression(result);\n    }\n\n\n    setExpression(expression)\n    {\n        this._expression = expression;\n        return this;\n    }\n\n    getExpression()\n    {\n        return this._expression;\n    }\n\n    getHashCode()\n    {\n        return stringHash(this._expression);\n    }\n}\n\nexport default RE;\n","import {\n    EMPTY,\n    CONCAT,\n    UNION,\n    KLEENE,\n    SIGMA,\n    EMPTY_SET,\n    PLUS\n} from './RE.js';\n\n/**\n* An Abstract Syntax Tree is used for parsing languages, in this case we use them\n* for parsing regular expressions.\n*/\nclass ASTNode\n{\n    constructor(symbol, isTerminal, parentNode, index)\n    {\n        this._symbol = symbol;\t\t\t\t// Character/String to represent symbol from language\n        this._isTerminal = isTerminal;\t\t// Boolean, true if it is a terminal\n        this._parent = parentNode;\n        this._children = [];\n        this._childrenLimit = 2;\t\t\t// By default, ASTNodes can have up to 2 children(binary operators)\n        this._index = index;\t\t\t\t// Index of the symbol in the original String we are parsing\n    }\n\n    addChild(childNode)\n    {\n        if (this.hasRoomForChildren())\n        {\n            this._children.push(childNode);\n            this._isTerminal = false;\n        }\n        else\n        {\n            throw new Error('Trying to add more than 2 children to an ASTNode');\n        }\n    }\n\n    replaceChild(originalChild, newChild)\n    {\n        if (this._children.includes(originalChild))\n        {\n            let index = this._children.indexOf(originalChild);\n            this._children[index] = newChild;\n        }\n        else\n        {\n            throw new Error('The child to replace isn\\'t a child already');\n        }\n    }\n\n    hasRoomForChildren()\n    {\n        return this._children.length < this._childrenLimit;\n    }\n\n    getChildrenLimit()\n    {\n        return this._childrenLimit;\n    }\n\n    setChildrenLimit(newChildrenLimit)\n    {\n        this._childrenLimit = newChildrenLimit;\n    }\n\n    isTerminal()\n    {\n        return this._isTerminal;\n    }\n\n    setTerminal(isTerminal)\n    {\n        this._isTerminal = isTerminal;\n    }\n\n    getSymbol()\n    {\n        return this._symbol;\n    }\n\n    setSymbol(newSymbol)\n    {\n        this._symbol = newSymbol;\n    }\n\n    getParent()\n    {\n        return this._parent;\n    }\n\n    setParent(parentNode)\n    {\n        this._parent = parentNode;\n    }\n\n    getChildren()\n    {\n        return this._children;\n    }\n\n    getIndex()\n    {\n        return this._index;\n    }\n\n    setIndex(index)\n    {\n        this._index = index;\n    }\n}\n\nclass REParser\n{\n    constructor()\n    {\n        this.rootNode = null;\n        this.size = 0;\n        this.indexToNode = new Map();\t// Map of indicies of the regex characters to their ASTNode\n        this.closedParensIndicies = [];\t\t\t// Indicies of the closed parenthesis in the regex\n    }\n\n    parseRegex(regex)\n    {\n        this.rootNode = null;\n        this.size = 0;\n        regex.clearTerminals();\n        if (regex.getExpression().length == 0)\n        {\n            regex.clear();\n            return;\n        }\n        else if (regex.isExpressionValid())\n        {\n            let currNode = this.rootNode;\n            let openParenStack = [];\n            let expression = regex.getExpression();\n            let index = -1;\n\n            for (const char of expression)\n            {\n                this.size = this.size + 1;\n                index++;\n                switch (char)\n                {\n                case '(':\n                    currNode = this.createOpenParenNode(currNode, index);\n                    openParenStack.push(currNode);\n                    break;\n                case ')':\n                    currNode = openParenStack.pop();\n                    this.closedParensIndicies.push(index);\n                    break;\n                case KLEENE:\n                    currNode = this.createUnaryOperNode(currNode, index, KLEENE);\n                    break;\n                case PLUS:\n                    currNode = this.createUnaryOperNode(currNode, index, PLUS);\n                    break;\n                case CONCAT:\n                    currNode = this.createBinaryOperNode(currNode, index, CONCAT);\n                    break;\n                case UNION:\n                    currNode = this.createBinaryOperNode(currNode, index, UNION);\n                    break;\n                    //Ignore spaces\n                case ' ':\n                    break;\n                    //For symbols\n                default:\n                {\n                    currNode = this.createTerminalNode(currNode, index, char);\n                    // Add TERMINALS ONLY to the regex's terminal set\n                    if (char != SIGMA && char != EMPTY_SET && char != EMPTY)\n                    {\n                        regex.addTerminal(char);\n                    }\n                }\n                }\n            }\n        }\n    }\n\n    makeParentOf(newParentNode, targetNode)\n    {\n        let originalParent = targetNode.getParent();\n        newParentNode.setParent(originalParent);\n        newParentNode.addChild(targetNode);\n        if (originalParent != null)\n        {\n            originalParent.replaceChild(targetNode, newParentNode);\n        }\n        targetNode.setParent(newParentNode);\n\n        if (this.rootNode == targetNode)\n        {\n            this.rootNode = newParentNode;\n        }\n    }\n\n    createOpenParenNode(currNode, index)\n    {\n        if (!currNode)\n        {\n            currNode = new ASTNode('(', false, null, index);\n            this.indexToNode.set(index, currNode);\n            this.rootNode = currNode;\n        }\n        else\n        {\n            let newNode = new ASTNode('(', false, currNode, index);\n            this.indexToNode.set(index, newNode);\n            currNode.addChild(newNode);\n            currNode = newNode;\n        }\n        return currNode;\n    }\n\n    createUnaryOperNode(currNode, index, symbol)\n    {\n        let newNode = new ASTNode(symbol, false, currNode.getParent(), index);\n        this.indexToNode.set(index, newNode);\n        this.makeParentOf(newNode, currNode);\n        currNode = newNode;\n        return currNode;\n    }\n\n    createBinaryOperNode(currNode, index, symbol)\n    {\n        if(!currNode.getParent())\n        {\n            let newNode = new ASTNode(symbol, false, null, index);\n            this.indexToNode.set(index, newNode);\n            this.makeParentOf(newNode, currNode);\n            currNode = newNode;\n        }\n        else\n        {\n            //Special cases where the newly created node should be the parent of\n            //the PARENT of the currNode are based off of symbol, so whenever\n            //we add a new binary operator, this is something you should MODIFY\n            let makeParentOfParent = 0;\n            const originalParent = currNode.getParent();\n            const parentSym = originalParent.getSymbol();\n            switch(symbol)\n            {\n            case CONCAT:\n                if(parentSym == CONCAT) makeParentOfParent = 1;\n                break;\n            case UNION:\n                if(parentSym != '(') makeParentOfParent = 1;\n                break;\n            }\n            if(makeParentOfParent)\n            {\n                let grandparent = originalParent.getParent();\n                let newNode = new ASTNode(symbol, false, grandparent, index);\n                this.indexToNode.set(index, newNode);\n                this.makeParentOf(newNode, originalParent);\n                currNode = newNode;\n            }\n            else\n            {\n                let newNode = new ASTNode(symbol, false, originalParent, index);\n                this.indexToNode.set(index, newNode);\n                this.makeParentOf(newNode, currNode);\n                currNode = newNode;\n            }\n        }\n        return currNode;\n    }\n\n    createTerminalNode(currNode, index, symbol)\n    {\n        if (!currNode)\n        {\n            currNode = new ASTNode(symbol, true, null, index);\n            this.indexToNode.set(index, currNode);\n            this.rootNode = currNode;\n        }\n        else\n        {\n            let symbolNode = new ASTNode(symbol, true, currNode, index);\n            this.indexToNode.set(index, symbolNode);\n            currNode.addChild(symbolNode);\n            currNode = symbolNode;\n        }\n        return currNode;\n    }\n\n    /**\n\t * @param {Regex}  regex \tThe regular expression to parse and do scope highlighting on\n\t * @param {Number} spaceIndex is the index of the space between the characters in the regex\n\t * E.g.   A U B\n\t *       0 1 2 3\n\t * A cursor can only be clicked on a spaceIndex, hence its use\n\t * @return {Array} [[start1_spaceIndex, end1_spaceIndex], [start2_spaceIndex, end2_spaceIndex]] of the scope\n\t */\n    scopeFromSpaceIndexing(regex, spaceIndex)\n    {\n        if(spaceIndex == 0) \n        {\n            return [[0, 0], [0, 0]];\n        }\n        else if(spaceIndex > 0 && spaceIndex <= this.size + 1) \n        {\n            const index = spaceIndex - 1;\n            const scope = this.scopeFromCharAtIndex(regex, index);\n            // scope will be null if the character selected is just an operand,\n            // so nothing should be highlighted\n            if (!scope) \n            {\n                return [ [spaceIndex, spaceIndex],  [spaceIndex, spaceIndex] ];\n            }\n            else \n            {\n                scope[1][1] += 1;\t//Increment last index to account for space indexing in highlighting\n                return scope;\n            }\n        }\n        else \n        {\n            throw new Error('Invalid index');\n        }\n    }\n\n    /**\n\t * @param {Regex}  regex \tThe regular expression to parse and do scope highlighting on\n\t * @param {Number} index  \tis the index of the characters in the regex\n\t *  Scope in this context is considered as the operands for a selected operator\n\t *\tFor an operand \t-> there is no scope, return null\n\t *  For a unary operator -> return [[start_index, start_index], [end_index, end_index]]\n\t *\t\t\t\t\t\t\tstart_index is index of beginning index of the sole operand and\n\t *\t\t\t\t\t\t\tend_index is the index of the end\n\t * For a binary operator -> return [[start1_index, end1_index], [start2_index, end2_index]]\n\t *\t\t\t\t\t\t\tstart1_index and end1_index correspond to the first operand\n\t *\t\t\t\t\t\t\tstart2_index and end2_index correspond to the second operand\n\t * Finding the start and end indicies relies on the parse tree made, where operands of an\n\t * operator are descendants in the subtree where the operator is the root node, so earliest\n\t * and latest parts of the operands will be the terminal nodes with the least and highest index\n\t * @return {Array} [[start1_spaceIndex, end1_spaceIndex], [start2_spaceIndex, end2_spaceIndex]] of the scope\n\t */\n    scopeFromCharAtIndex(regex, index)\n    {\n        this.parseRegex(regex);\n        let currentNode = this.indexToNode.get(index);\n        let symbol = currentNode.getSymbol();\n        //Unary operators\n        if(symbol == KLEENE || symbol == PLUS) \n        {\n            let smallest = this.smallestIndexOfChildren(currentNode);\n            let largest = this.largestIndexOfChildren(currentNode);\n            return [ [smallest, smallest], [largest, largest] ];\n        }\n        //Binary operators\n        else if(symbol == UNION || symbol == CONCAT) \n        {\n            let smallest = this.smallestIndexOfChildren(currentNode);\n            let largest = this.largestIndexOfChildren(currentNode);\n            return [ [smallest, index - 1], [index + 1, largest] ];\n        }\n        //Operands\n        else \n        {\n            return null;\n        }\n    }\n\n    // Return child with the largest index\n    largestIndexOfChildren(node)\n    {\n        let max = node.getIndex();\n        for (let child of node.getChildren()) \n        {\n            max = Math.max(max, this.largestIndexOfChildren(child));\n        }\n        return max;\n    }\n\n    // Return child with the smallest index\n    smallestIndexOfChildren(node)\n    {\n        let min = node.getIndex();\n        for (let child of node.getChildren()) \n        {\n            min = Math.min(min, this.smallestIndexOfChildren(child));\n        }\n        return min;\n    }\n\n}\n\nexport default REParser;\n","import FSA, { EMPTY_SYMBOL } from 'modules/fsa2/machine/FSA.js';\nimport\n{\n    EMPTY,\n    CONCAT,\n    UNION,\n    KLEENE,\n    SIGMA,\n    EMPTY_SET,\n    PLUS\n} from '../RE.js';\n\nimport REParser from '../REParser.js';\n\n// Return NFA representation of the input regular expression\n// Construction of NFA is done using Thompson's algorithm\nexport function convertToNFA(re)\n{\n    const prevExpression = re.getExpression();\n    re.setExpression(prevExpression.replace(/\\s/g, ''));\n    re.insertConcatSymbols();\n    const parser = new REParser();\n    parser.parseRegex(re);         //Create parse tree and add terminals to re's terminal set\n    const nfa = ASTtoNFA(parser.rootNode, re);\n    re.setExpression(prevExpression);\n    return nfa;\n}\n\nfunction ASTtoNFA(astNode, re)\n{\n    //Base case, terminal nodes are characters in the alphabet OR\n    //the EmptySet or Sigma\n    if (astNode.isTerminal())\n    {\n        switch (astNode.getSymbol())\n        {\n        case EMPTY_SET:\n            return emptySet();\n        case SIGMA:\n            return sigma(re);\n        default:\n            return character(astNode.getSymbol());\n        }\n    }\n    switch (astNode.getSymbol())\n    {\n    case KLEENE:\n        return kleene(ASTtoNFA(astNode._children[0], re));\n    case PLUS:\n        return plus(ASTtoNFA(astNode._children[0], re));\n    case CONCAT:\n        return concat(ASTtoNFA(astNode._children[0], re), ASTtoNFA(astNode._children[1], re));\n    case UNION:\n        return or(ASTtoNFA(astNode._children[0], re), ASTtoNFA(astNode._children[1], re));\n    case '(':\n        return ASTtoNFA(astNode._children[0], re);\n    default:\n        throw new Error('You\\'ve got a weird node in the AST tree with symbol ' + astNode.getSymbol());\n    }\n}\n\n// For the empty set, the NFA is a start state, with no final state, nor transitions.\nfunction emptySet()\n{\n    const result = new FSA(false);\n    const state0 = result.createState('q0');\n    result.setStartState(state0);\n    return result;\n}\n\n// For Sigma, the NFA is just the union of all the terminals in the regular expression\n// e.g. if Sigma = {0, 1}, then as a regular expression it is just 0 U 1\nfunction sigma(re)\n{\n    const terminals = re.getTerminals();\n    const charNFAs = [];\n\n    if (terminals.size == 0) \n    {\n        return emptySet();\n    }\n    // Build NFAs for each terminal in the terminal set\n    for (const terminal of terminals) \n    {\n        charNFAs.push(character(terminal));\n    }\n    // Unionize them into one big union NFA to return\n    while (charNFAs.length > 1)\n    {\n        charNFAs[0] = or(charNFAs[0], charNFAs[1]);     // Accumulate in the 0th index\n        charNFAs.splice(1, 1);                          // Shift down from 1st index\n    }\n    return charNFAs[0];\n}\n\n// For a symbol of the alphabet, the NFA is two states, a start and a finish state,\n// with the transition being the symbol.\nfunction character(symbol)\n{\n    // Necessary for having empty in an FSA\n    if (symbol == EMPTY) \n    {\n        symbol = EMPTY_SYMBOL;\n    }\n    const result = new FSA(false);\n    const state0 = result.createState('q0');\n    const state1 = result.createState('q1');\n    result.addTransition(state0, state1, symbol);\n    result.setStartState(state0);\n    result.setFinalState(state1);\n    return result;\n}\n\nfunction concat(a, b)\n{\n    const result = new FSA(false);\n    let stateIndex = 0;\n\n    let aStateMap = new Map();\n    let firstAState = null;\n    // let lastAState = null;\n    for (const state of a.getStates())\n    {\n        let newState = result.createState('q' + (stateIndex++));\n        aStateMap.set(state, newState);\n        if (firstAState === null) firstAState = newState;\n        // lastAState = newState;\n    }\n\n    let bStateMap = new Map();\n    let firstBState = null;\n    let lastBState = null;\n    for (const state of b.getStates())\n    {\n        let newState = result.createState('q' + (stateIndex++));\n        bStateMap.set(state, newState);\n        if (firstBState === null) firstBState = newState;\n        // lastBState should only be set to a final state (EMPTY_SET has none)\n        if (b.isFinalState(state)) \n        {\n            lastBState = newState;\n        }\n    }\n\n    const aTransitions = a.getTransitions();\n    for (const transition of aTransitions)\n    {\n        const newFromState = aStateMap.get(transition.getSourceState());\n        const newToState = aStateMap.get(transition.getDestinationState());\n        if (newFromState === null || newToState === null) throw new Error('Unable to find state endpoints for transition');\n        for (const symbol of transition.getSymbols())\n        {\n            result.addTransition(newFromState, newToState, symbol);\n        }\n    }\n\n    for (const finalState of a.getFinalStates())\n    {\n        const newFinalState = aStateMap.get(finalState);\n        result.addTransition(newFinalState, firstBState, EMPTY_SYMBOL);\n    }\n\n    const bTransitions = b.getTransitions();\n    for (const transition of bTransitions)\n    {\n        const newFromState = bStateMap.get(transition.getSourceState());\n        const newToState = bStateMap.get(transition.getDestinationState());\n        if (newFromState === null || newToState === null) throw new Error('Unable to find state endpoints for transition');\n        for (const symbol of transition.getSymbols())\n        {\n            result.addTransition(newFromState, newToState, symbol);\n        }\n    }\n\n    result.setStartState(firstAState);\n    if (lastBState != null) result.setFinalState(lastBState);\n    return result;\n}\n\nfunction kleene(a)\n{\n    const result = new FSA(false);\n    let stateIndex = 0;\n\n    const stateMap = new Map();\n\n    const firstState = result.createState('q' + (stateIndex++));\n    let firstAState = null;\n    let lastAState = null;\n    for (const state of a.getStates())\n    {\n        let newState = result.createState('q' + (stateIndex++));\n        stateMap.set(state, newState);\n\n        if (firstAState === null) firstAState = newState;\n        lastAState = newState;\n    }\n    const lastState = result.createState('q' + (stateIndex++));\n\n    result.addTransition(firstState, firstAState, EMPTY_SYMBOL);\n\n    const aTransitions = a.getTransitions();\n    for (const transition of aTransitions)\n    {\n        const newFromState = stateMap.get(transition.getSourceState());\n        const newToState = stateMap.get(transition.getDestinationState());\n        if (newFromState === null || newToState === null) throw new Error('Unable to find state endpoints for transition');\n        for (const symbol of transition.getSymbols())\n        {\n            result.addTransition(newFromState, newToState, symbol);\n        }\n    }\n\n    result.addTransition(lastAState, lastState, EMPTY_SYMBOL);\n    result.addTransition(lastAState, firstAState, EMPTY_SYMBOL);\n    result.addTransition(firstState, lastState, EMPTY_SYMBOL);\n\n    result.setStartState(firstState);\n    result.setFinalState(lastState);\n    return result;\n}\n\nfunction plus(a)\n{\n    return concat(a, kleene(a));\n}\n\nfunction or(a, b)\n{\n    const result = new FSA(false);\n    let stateIndex = 0;\n\n    const firstState = result.createState('q' + (stateIndex++));\n\n    let aStateMap = new Map();\n    let firstAState = null;\n    let lastAState = null;\n    for (const state of a.getStates())\n    {\n        let newState = result.createState('q' + (stateIndex++));\n        aStateMap.set(state, newState);\n        if (firstAState === null) firstAState = newState;\n        // lastAState should only be set to a final state (EMPTY_SET has none)\n        if (a.isFinalState(state)) \n        {\n            lastAState = newState;\n        }\n    }\n\n    let bStateMap = new Map();\n    let firstBState = null;\n    let lastBState = null;\n    for (const state of b.getStates())\n    {\n        let newState = result.createState('q' + (stateIndex++));\n        bStateMap.set(state, newState);\n        if (firstBState === null) firstBState = newState;\n        // lastBState should only be set to a final state (EMPTY_SET has none)\n        if (b.isFinalState(state)) \n        {\n            lastBState = newState;\n        }\n    }\n\n    const lastState = result.createState('q' + (stateIndex++));\n\n    //A machine\n    result.addTransition(firstState, firstAState, EMPTY_SYMBOL);\n    const aTransitions = a.getTransitions();\n    for (const transition of aTransitions)\n    {\n        const newFromState = aStateMap.get(transition.getSourceState());\n        const newToState = aStateMap.get(transition.getDestinationState());\n        if (newFromState === null || newToState === null) throw new Error('Unable to find state endpoints for transition');\n        for (const symbol of transition.getSymbols())\n        {\n            result.addTransition(newFromState, newToState, symbol);\n        }\n    }\n    if (lastAState != null) \n    {\n        result.addTransition(lastAState, lastState, EMPTY_SYMBOL);\n    }\n\n    //B machine\n    result.addTransition(firstState, firstBState, EMPTY_SYMBOL);\n    const bTransitions = b.getTransitions();\n    for (const transition of bTransitions)\n    {\n        const newFromState = bStateMap.get(transition.getSourceState());\n        const newToState = bStateMap.get(transition.getDestinationState());\n        if (newFromState === null || newToState === null) throw new Error('Unable to find state endpoints for transition');\n        for (const symbol of transition.getSymbols())\n        {\n            result.addTransition(newFromState, newToState, symbol);\n        }\n    }\n    if (lastBState != null) \n    {\n        result.addTransition(lastBState, lastState, EMPTY_SYMBOL);\n    }\n\n    result.setStartState(firstState);\n    result.setFinalState(lastState);\n    return result;\n}\n","import {stringHash} from 'util/MathHelper.js';\n\nclass ExpressionChangeHandler\n{\n    constructor(refreshTicks=10)\n    {\n        this._cachedExpressionHash = 0;\n\n        this._refreshTicks = refreshTicks;\n        this._elapsedTicks = Infinity;\n\n        this._listeners = [];\n    }\n\n    addListener(listener)\n    {\n        if (typeof listener !== 'function')\n            throw new Error('Cannot add uncallable listener');\n        this._listeners.push(listener);\n    }\n\n    removeListener(listener)\n    {\n        const i = this._listeners.indexOf(listener);\n        if (i >= 0)\n        {\n            this._listeners.splice(i, 1);\n            return true;\n        }\n        return false;\n    }\n\n    clearListeners()\n    {\n        this._listeners.length = 0;\n    }\n\n    getListeners()\n    {\n        return this._listeners;\n    }\n\n    reset()\n    {\n        this._elapsedTicks = 0;\n        this._cachedExpressionHash = 0;\n    }\n\n    update(expr)\n    {\n        if (++this._elapsedTicks >= this._refreshTicks)\n        {\n            this._elapsedTicks = 0;\n\n            const exprHash = stringHash(expr);\n            if (exprHash !== this._cachedExpressionHash)\n            {\n                this._cachedExpressionHash = exprHash;\n                for(const listener of this._listeners)\n                {\n                    listener(expr);\n                }\n            }\n        }\n    }\n}\n\nexport default ExpressionChangeHandler;\n","import {stringHash} from 'util/MathHelper.js';\n\nimport RE from './machine/RE.js';\nimport REParser from './machine/REParser.js';\nimport {convertToNFA} from './machine/REUtils.js';\n\nimport ExpressionChangeHandler from './ExpressionChangeHandler.js';\n\nconst EXPRESSION_REFRESH_RATE = 30;\n// const ERROR_MESSAGE_TAG = 're_parse_error';\n\nclass MachineController\n{\n    constructor()\n    {\n        this._machine = new RE();\n        this._parser = new REParser();\n        this._expressionChangeHandler = new ExpressionChangeHandler(EXPRESSION_REFRESH_RATE);\n\n        this._equalFSA = null;\n        this._equalREHash = stringHash(this._machine.getExpression());\n    }\n\n    update()\n    {\n        this._expressionChangeHandler.update(this._machine.getExpression());\n    }\n\n    clear()\n    {\n        this.setMachineExpression('');\n    }\n\n    isSymbol(symbol)\n    {\n        return this._machine.hasTerminal(symbol);\n    }\n\n    isUsedSymbol(symbol)\n    {\n        return this.isSymbol(symbol);\n    }\n\n    renameSymbol(symbol, nextSymbol)\n    {\n        const prevExpression = this._machine.getExpression();\n        const nextExpression = prevExpression.replace(new RegExp(symbol, 'g'), nextSymbol);\n        this.setMachineExpression(nextExpression);\n    }\n\n    deleteSymbol(symbol)\n    {\n        const prevExpression = this._machine.getExpression();\n        const nextExpression = prevExpression.replace(new RegExp(symbol, 'g'), '');\n        this.setMachineExpression(nextExpression);\n    }\n\n    getMachineTerminals()\n    {\n        return Array.from(this._machine.getTerminals());\n    }\n\n    getEquivalentFSA()\n    {\n        if (!this._equalFSA || (stringHash(this._machine.getExpression()) !== this._equalREHash))\n        {\n            this._equalREHash = stringHash(this._machine.getExpression());\n            this._equalFSA = convertToNFA(this._machine);\n        }\n        return this._equalFSA;\n    }\n\n    setMachineExpression(string)\n    {\n        this._machine.setExpression(string);\n        if (this._machine.validate())\n        {\n            this._parser.parseRegex(this._machine);\n        }\n    }\n\n    getMachineExpression()\n    {\n        return this._machine.getExpression() || '';\n    }\n\n    getMachineErrors()\n    {\n        return this._machine.getErrors();\n    }\n\n    getMachine()\n    {\n        return this._machine;\n    }\n\n    getExpressionChangeHandler()\n    {\n        return this._expressionChangeHandler;\n    }\n}\n\nexport default MachineController;\n","import {SUCCESS_LAYOUT_ID, ERROR_LAYOUT_ID} from 'session/manager/notification/NotificationManager.js';\nimport {\n    MACHINE_ERROR_NOTIFICATION_TAG\n} from './components/notifications/RENotifications.js';\n\nclass REErrorChecker\n{\n    constructor(app, machineController)\n    {\n        this._app = app;\n        this._machineController = machineController;\n        this._showErrorOnChange = false;\n\n        this.onExpressionChange = this.onExpressionChange.bind(this);\n\n        machineController.getExpressionChangeHandler().addListener(this.onExpressionChange);\n    }\n\n    onExpressionChange(expression)\n    {\n        if (this._showErrorOnChange)\n        {\n            this.showErrors();\n        }\n    }\n\n    setErrorChecking(enabled)\n    {\n        this._showErrorOnChange = enabled;\n    }\n\n    isErrorChecking()\n    {\n        return this._showErrorOnChange;\n    }\n\n    showErrors()\n    {\n        const errors = this._machineController.getMachine().getErrors();\n\n        const app = this._app;\n        const notificationManager = app.getNotificationManager();\n\n        notificationManager.clearNotifications(MACHINE_ERROR_NOTIFICATION_TAG);\n        if (errors.length <= 0)\n        {\n            notificationManager.pushNotification(\n                I18N.toString('message.error.none'),\n                SUCCESS_LAYOUT_ID, MACHINE_ERROR_NOTIFICATION_TAG, null, false);\n        }\n        else\n        {\n            for(const error of errors)\n            {\n                notificationManager.pushNotification(error.name + ' - ' + error.message,\n                    ERROR_LAYOUT_ID, MACHINE_ERROR_NOTIFICATION_TAG, null, false);\n            }\n        }\n    }\n}\n\nexport default REErrorChecker;\n","export const MACHINE_ERROR_NOTIFICATION_TAG = 'machine-error';\n\nexport function registerNotifications(notificationManager)\n{\n  \n}\n","import AbstractEventHandler from 'session/manager/undo/AbstractEventHandler.js';\n\nclass SafeExpressionEventHandler extends AbstractEventHandler\n{\n    constructor(machineController)\n    {\n        super();\n\n        this._machineController = machineController;\n        this._expression = machineController.getMachineExpression();\n    }\n\n    /** @override */\n    applyUndo(undoManager)\n    {\n        const prevEvent = undoManager.getPreviousEvent();\n        if (prevEvent instanceof SafeExpressionEventHandler)\n        {\n            prevEvent.applyRedo(undoManager);\n        }\n        else\n        {\n            this._machineController.clear();\n        }\n    }\n\n    /** @override */\n    applyRedo(undoManager)\n    {\n        this._machineController.setMachineExpression(this._expression);\n    }\n}\nexport default SafeExpressionEventHandler;\n","import React from 'react';\nimport Style from './AlphabetListElement.css';\n\nconst SUBMIT_KEY_CODE = 'Enter';\nconst CANCEL_KEY_CODE = 'Escape';\n\nclass AlphabetListElement extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n\n        this._inputElement = null;\n\n        this.state = {\n            value: null,\n            error: false\n        };\n\n        this.onValueChange = this.onValueChange.bind(this);\n        this.onFocus = this.onFocus.bind(this);\n        this.onBlur = this.onBlur.bind(this);\n        this.onKeyDown = this.onKeyDown.bind(this);\n        this.onKeyUp = this.onKeyUp.bind(this);\n    }\n\n    onFocus(e)\n    {\n        const target = e.target;\n        const symbol = this.props.symbol;\n\n        this.setState({\n            value: symbol,\n            error: false\n        }, () => target.select());\n\n        //Call any listening focus\n        if (this.props.onFocus) this.props.onFocus(e, this);\n    }\n\n    onBlur(e)\n    {\n        const nextSymbol = this.state.value;\n\n        //Call any listening blurs\n        if (this.props.onBlur) this.props.onBlur(e, this, nextSymbol);\n\n        //Reset to nothing (will use props.symbol instead)\n        this.setState({ value: null, error: false });\n    }\n\n    onKeyDown(e)\n    {\n        const keyCode = e.key;\n        if (keyCode === SUBMIT_KEY_CODE || keyCode === CANCEL_KEY_CODE)\n        {\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    }\n\n    onKeyUp(e)\n    {\n        const keyCode = e.key;\n        const target = e.target;\n\n        if (keyCode === SUBMIT_KEY_CODE)\n        {\n            target.blur();\n        }\n        else if (keyCode === CANCEL_KEY_CODE)\n        {\n            this.setState({\n                value: null,\n                error: false\n            }, () => target.blur());\n        }\n    }\n\n    onValueChange(e)\n    {\n        let value = e.target.value.trim();\n        let error = false;\n\n        if (this.props.onChange)\n        {\n            try\n            {\n                this.props.onChange(e, this, value);\n            }\n            catch(e)\n            {\n                error = true;\n            }\n        }\n\n        this.setState({\n            value: value,\n            error: error\n        });\n    }\n\n    focus()\n    {\n        this._inputElement.focus();\n    }\n\n    /** @override */\n    render()\n    {\n        const inputSymbol = this.state.value;\n        const displaySymbol = inputSymbol === null ? this.props.symbol : inputSymbol;\n\n        const symbolUsed = this.props.used || false;\n\n        return (\n            <div id={this.props.id}\n                className={Style.element_container +\n          (displaySymbol !== null && displaySymbol.length <= 0 ? ' empty ' : '') +\n          (inputSymbol !== null && this.state.error ? ' error ' : '') +\n          (symbolUsed ? ' used ' : '') +\n          ' ' + this.props.className}\n                style={this.props.style}>\n                <input ref={ref=>this._inputElement=ref}\n                    spellCheck={false}\n                    maxLength={1}\n                    style={{width: '1ch'}}\n                    value={displaySymbol}\n                    onChange={this.onValueChange}\n                    onFocus={this.onFocus}\n                    onBlur={this.onBlur}\n                    onKeyDown={this.onKeyDown}\n                    onKeyUp={this.onKeyUp}/>\n            </div>\n        );\n    }\n}\n\nexport default AlphabetListElement;\n","import React from 'react';\nimport Style from './AlphabetListView.css';\n\nimport AlphabetListElement from './AlphabetListElement.js';\n\nclass TerminalListView extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n\n        this.newSymbolComponent = null;\n\n        this.state = {\n            useNewSymbol: false\n        };\n\n        this.onElementAdd = this.onElementAdd.bind(this);\n        this.onElementFocus = this.onElementFocus.bind(this);\n        this.onElementBlur = this.onElementBlur.bind(this);\n        this.onElementChange = this.onElementChange.bind(this);\n    }\n\n    onElementAdd(e)\n    {\n    //Create a new alphabet element...\n        this.setState({useNewSymbol: true}, () => \n        {\n            this.newSymbolComponent.focus();\n        });\n    }\n\n    onElementFocus(e, element)\n    {\n    //Do nothing...\n    }\n\n    onElementBlur(e, element, nextSymbol)\n    {\n        const symbol = element.props.symbol;\n        const machineController = this.props.machineController;\n\n        if (nextSymbol !== null)\n        {\n            if (nextSymbol.length > 0)\n            {\n                if (!machineController.isSymbol(nextSymbol))\n                {\n                    if (symbol)\n                    {\n                        //None other have the same name. Rename it!\n                        machineController.renameSymbol(symbol, nextSymbol);\n                    }\n                    else\n                    {\n                        //None other have the same name. Create it!\n                        //machineController.createSymbol(nextSymbol);\n                    }\n                }\n                else\n                {\n                    //Found something already named that! Ignore!\n                }\n            }\n            else if (symbol)\n            {\n                //Delete!\n                machineController.deleteSymbol(symbol);\n            }\n        }\n\n        //Regardless, just close the \"new\" alphabet element if open.\n        if (this.state.useNewSymbol)\n        {\n            this.setState({ useNewSymbol: false });\n        }\n    }\n\n    onElementChange(e, element, symbol)\n    {\n        const machineController = this.props.machineController;\n\n        if (symbol.length > 0)\n        {\n            //If there are more than 1 symbols by the same name,\n            //OR if the duplicate symbol found is NOT the same symbol\n            if (machineController.isSymbol(symbol) && symbol !== element.props.symbol)\n            {\n                throw new Error('Not a valid symbol');\n            }\n        }\n    }\n\n    renderTerminalList(machineController, terminals)\n    {\n        const result = [];\n        for(const symbol of terminals)\n        {\n            if (!symbol) continue;\n\n            result.push(<AlphabetListElement key={symbol}\n                symbol={symbol}\n                used={machineController.isUsedSymbol(symbol)}\n                onFocus={this.onElementFocus}\n                onBlur={this.onElementBlur}\n                onChange={this.onElementChange}/>);\n        }\n        return result;\n    }\n\n    /** @override */\n    render()\n    {\n        const machineController = this.props.machineController;\n        const terminals = machineController.getMachineTerminals();\n\n        return (\n            <div id={this.props.id}\n                className={Style.list_container}\n                style={this.props.style}>\n                <div className={Style.element_list}>\n                    {this.renderTerminalList(machineController, terminals)}\n                    <AlphabetListElement\n                        ref={ref=>this.newSymbolComponent=ref}\n                        style={{display: this.state.useNewSymbol ? 'block' : 'none'}}\n                        symbol={''}\n                        onFocus={this.onElementFocus}\n                        onBlur={this.onElementBlur}\n                        onChange={this.onElementChange}/>\n                </div>\n                {/*\n          <IconButton className={Style.add_button}\n            title=\"Add Terminal\"\n            onClick={this.onElementAdd}\n            disabled={true}>\n            <BoxAddIcon/>\n          </IconButton>\n        */}\n            </div>\n        );\n    }\n}\n\nexport default TerminalListView;\n","import React from 'react';\n// import Style from './OverviewPanel.css';\n\nimport PanelContainer from 'experimental/panels/PanelContainer.js';\nimport PanelSection from 'experimental/panels/PanelSection.js';\n\nimport AlphabetListView from './alphabet/AlphabetListView.js';\n\nimport {EMPTY, CONCAT, UNION, KLEENE, SIGMA, EMPTY_SET, PLUS} from 'modules/re/machine/RE.js';\n\nclass OverviewPanel extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n    }\n\n    /** @override */\n    render()\n    {\n        const drawer = this.props.drawer;\n        const session = this.props.session;\n        const currentModule = session.getCurrentModule();\n\n        const machineController = currentModule.getMachineController();\n        const drawerFull = drawer.isDrawerFullscreen();\n\n        return (\n            <PanelContainer id={this.props.id}\n                className={this.props.className}\n                style={this.props.style}\n                title={OverviewPanel.TITLE}>\n                <PanelSection title={'Terminals'} initial={true} full={drawerFull}>\n                    <AlphabetListView machineController={machineController}/>\n                </PanelSection>\n                <PanelSection title={'Symbol Key'} initial={true} full={true}>\n                    <table>\n                        <tbody>\n                            <tr><td>Epsilon</td><td>{EMPTY}</td></tr>\n                            <tr><td>Union</td><td>{UNION}</td></tr>\n                            <tr><td>Concat</td><td>{CONCAT}</td></tr>\n                            <tr><td>Kleene Star</td><td>{KLEENE}</td></tr>\n                            <tr><td>Kleene Plus</td><td>{PLUS}</td></tr>\n                            <tr><td>Sigma</td><td>{SIGMA}</td></tr>\n                            <tr><td>Empty Set</td><td>{EMPTY_SET}</td></tr>\n                        </tbody>\n                    </table>\n                </PanelSection>\n            </PanelContainer>\n        );\n    }\n}\nObject.defineProperty(OverviewPanel, 'TITLE', {\n    get: function() { return I18N.toString('component.overview.title'); }\n});\n\nexport default OverviewPanel;\n","import React from 'react';\nimport Style from './AnalysisPanel.css';\n\nimport PanelContainer from 'experimental/panels/PanelContainer.js';\nimport PanelSection from 'experimental/panels/PanelSection.js';\n\nclass AnalysisPanel extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n\n        this.onConvertToNFA = this.onConvertToNFA.bind(this);\n    }\n\n    onConvertToNFA(e)\n    {\n        this.props.session.getApp().getExportManager().tryExportFile('re2fsa', this.props.session);\n    }\n\n    /** @override */\n    render()\n    {\n        // const session = this.props.session;\n\n        return (\n            <PanelContainer id={this.props.id}\n                className={this.props.className}\n                style={this.props.style}\n                title={AnalysisPanel.TITLE}>\n                <PanelSection title={'Optimizations'} initial={true}>\n                    <button className={Style.analysis_button} onClick={this.onConvertToNFA}>\n                        {I18N.toString('action.overview.convertnfa')}\n                    </button>\n                </PanelSection>\n                <PanelSection title={'Related Machines'}>\n                </PanelSection>\n            </PanelContainer>\n        );\n    }\n}\nObject.defineProperty(AnalysisPanel, 'TITLE', {\n    get: function() { return I18N.toString('component.analysis.title'); }\n});\n\nexport default AnalysisPanel;\n","import React from 'react';\nimport Style from './TestItem.css';\n\nimport IconButton from 'experimental/components/IconButton.js';\nimport SubtractIcon from 'components/iconset/SubtractIcon.js';\nimport CheckCircleIcon from 'components/iconset/CheckCircleIcon.js';\nimport CrossCircleIcon from 'components/iconset/CrossCircleIcon.js';\nimport PendingIcon from 'components/iconset/PendingIcon.js';\nimport RunningManIcon from 'components/iconset/RunningManIcon.js';\n\nexport const DEFAULT_MODE = 'default';\nexport const SUCCESS_MODE = 'success';\nexport const FAILURE_MODE = 'failure';\nexport const WORKING_MODE = 'working';\n\nclass TestItem extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n\n        this.inputElement = null;\n\n        this.state = {\n            value: this.props.defaultValue || '',\n            status: DEFAULT_MODE\n        };\n\n        this.onChange = this.onChange.bind(this);\n    }\n\n    focus()\n    {\n        if (this.inputElement)\n        {\n            this.inputElement.focus();\n        }\n    }\n\n    setValue(value, callback=null)\n    {\n        if (this.state.value !== value)\n        {\n            this.setState({value: value}, callback);\n        }\n        else if (callback)\n        {\n            callback();\n        }\n    }\n\n    setStatus(status, callback=null)\n    {\n        if (this.state.status !== status)\n        {\n            this.setState({status: status}, callback);\n        }\n        else if (callback)\n        {\n            callback();\n        }\n    }\n\n    resetStatus(callback=null)\n    {\n        if (this.state.status !== DEFAULT_MODE)\n        {\n            this.setState({status: DEFAULT_MODE}, callback);\n        }\n        else if (callback)\n        {\n            callback();\n        }\n    }\n\n    getValue()\n    {\n        return this.state.value;\n    }\n\n    getStatus()\n    {\n        return this.state.status;\n    }\n\n    onChange(e)\n    {\n        const nextValue = e.target.value;\n        if (this.state.value !== nextValue)\n        {\n            this.setState({value: nextValue, status: DEFAULT_MODE});\n        }\n    }\n\n    /** @override */\n    render()\n    {\n        const onDelete = this.props.onDelete;\n        const showDelete = true;\n\n        const onTest = this.props.onTest;\n        const showTest = true;\n\n        const active = this.props.active;\n        // const subtitle = this.props.subtitle;\n        const placeholder = this.props.placeholder;\n        const status = this.state.status;\n\n        return (\n            <div id={this.props.id}\n                className={Style.test_item_container +\n          (active ? ' active ' : '') +\n          ' ' + status +\n          ' ' + this.props.className}\n                style={this.props.style}>\n                {showTest &&\n          <IconButton className={Style.test_button}\n              title={'Test'}\n              disabled={!onTest}\n              onClick={(e) => onTest(e, this)}>\n              {status === SUCCESS_MODE ?\n                  <CheckCircleIcon/> :\n                  status === FAILURE_MODE ?\n                      <CrossCircleIcon/> :\n                      status === WORKING_MODE ?\n                          <PendingIcon/> :\n                          <RunningManIcon/>}\n          </IconButton>}\n                <div className={Style.test_input}>\n                    <input ref={ref=>this.inputElement=ref} type=\"text\"\n                        placeholder={placeholder}\n                        value={this.state.value}\n                        onChange={this.onChange}/>\n                    <label>{this.props.subtitle}</label>\n                </div>\n                {showDelete &&\n          <IconButton className={Style.delete_button}\n              title={'Delete'}\n              disabled={!onDelete}\n              onClick={(e) => onDelete(e, this)}>\n              <SubtractIcon/>\n          </IconButton>}\n            </div>\n        );\n    }\n}\n\nexport default TestItem;\n","import React from 'react';\nimport Style from './TestListView.css';\n\nimport { guid } from 'util/MathHelper.js';\nimport { downloadText } from 'util/Downloader.js';\n\nimport IconButton from 'experimental/components/IconButton.js';\nimport IconUploadButton from 'experimental/components/IconUploadButton.js';\n\nimport PageContentIcon from 'components/iconset/PageContentIcon.js';\nimport UploadIcon from 'components/iconset/UploadIcon.js';\nimport DownloadIcon from 'components/iconset/DownloadIcon.js';\nimport CrossIcon from 'components/iconset/CrossIcon.js';\nimport AddIcon from 'components/iconset/AddIcon.js';\nimport RunningManIcon from 'components/iconset/RunningManIcon.js';\n\nimport TestItem, {SUCCESS_MODE, FAILURE_MODE, WORKING_MODE} from './TestItem.js';\n\nimport {solveFSA} from 'modules/fsa2/machine/FSAUtils.js';\n\nconst ACCEPT_FILE_TYPES = ['.txt'];\nconst TEST_FILENAME = 'test.txt';\n// const TEST_REFRESH_TICKS = 30;\n\nclass TestListView extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n\n        this._testList = [];\n        this._testName = TEST_FILENAME;\n\n        this.onTestNew = this.onTestNew.bind(this);\n        this.onTestUpload = this.onTestUpload.bind(this);\n        this.onTestDownload = this.onTestDownload.bind(this);\n        this.onTestClose = this.onTestClose.bind(this);\n        this.onTestAdd = this.onTestAdd.bind(this);\n        this.onTestDelete = this.onTestDelete.bind(this);\n        this.onTestTest = this.onTestTest.bind(this);\n        this.onTestRunAll = this.onTestRunAll.bind(this);\n        this.onExpressionChange = this.onExpressionChange.bind(this);\n    }\n\n    /** @override */\n    componentDidMount()\n    {\n        this.props.machineController.getExpressionChangeHandler().addListener(this.onExpressionChange);\n    }\n\n    /** @override */\n    componentWillUnmount()\n    {\n        this.props.machineController.getExpressionChangeHandler().removeListener(this.onExpressionChange);\n    }\n\n    onExpressionChange(expression)\n    {\n        for(const test of this._testList)\n        {\n            test.ref.resetStatus();\n        }\n    }\n\n    onTestNew(e)\n    {\n        if (!this.isEmpty())\n        {\n            this.onTestClose(e);\n        }\n\n        this.onTestAdd(e);\n    }\n\n    onTestUpload(fileBlob)\n    {\n        const reader = new FileReader();\n        reader.onload = (event) => \n        {\n            try\n            {\n                this._testName = fileBlob.name;\n                this._testList.length = 0;\n\n                const tests = event.target.result.split('\\n');\n                for(let test of tests)\n                {\n                    test = test.trim();\n                    if (test.length > 0)\n                    {\n                        this._testList.push({\n                            id: guid(),\n                            defaultValue: test,\n                            ref: null\n                        });\n                    }\n                }\n\n                //Make sure an element exists, at least\n                if (this._testList.length <= 0)\n                {\n                    this.onTestAdd(null);\n                }\n            }\n            catch(e)\n            {\n                reader.abort();\n            }\n        };\n        reader.readAsText(fileBlob);\n    }\n\n    onTestDownload(e)\n    {\n        const testStrings = [];\n        for(const test of this._testList)\n        {\n            const ref = test.ref;\n            if (ref)\n            {\n                testStrings.push(ref.getValue());\n            }\n        }\n\n        downloadText(this._testName, testStrings.join('\\n'));\n    }\n\n    onTestClose(e)\n    {\n        this._testList.length = 0;\n    }\n\n    onTestAdd(e)\n    {\n        this._testList.push({\n            id: guid(),\n            defaultValue: '',\n            ref: null\n        });\n    }\n\n    onTestRunAll(e)\n    {\n        let i = 0;\n\n        const nextTest = () => \n        {\n            const test = this._testList[i];\n            this.onTestTest(null, test.ref, () => \n            {\n                ++i;\n                if (i < this._testList.length)\n                {\n                    nextTest();\n                }\n            });\n        };\n        nextTest();\n    }\n\n    onTestDelete(e, item)\n    {\n    //Already handled in render()\n    }\n\n    onTestTest(e, item, callback=null)\n    {\n        const itemValue = item.getValue();\n\n        item.setState({status: WORKING_MODE});\n\n        const machineController = this.props.machineController;\n        const fsa = machineController.getEquivalentFSA();\n        const result = solveFSA(fsa, itemValue);\n        item.setState({status: result ? SUCCESS_MODE : FAILURE_MODE});\n\n        if (callback)\n        {\n            callback();\n        }\n    }\n\n    isEmpty()\n    {\n        return this._testList.length <= 0;\n    }\n\n    /** @override */\n    render()\n    {\n        const machineController = this.props.machineController;\n\n        const empty = this.isEmpty();\n\n        return (\n            <div id={this.props.id}\n                className={Style.test_container +\n          ' ' + this.props.className}\n                style={this.props.style}>\n                <div className={Style.test_control_tray}>\n                    <IconButton className={Style.test_control_button}\n                        title={I18N.toString('action.testing.new')}\n                        onClick={this.onTestNew}>\n                        <PageContentIcon/>\n                    </IconButton>\n                    <IconUploadButton className={Style.test_control_button}\n                        title={I18N.toString('action.testing.import')}\n                        accept={ACCEPT_FILE_TYPES.join(',')}\n                        onUpload={this.onTestUpload}>\n                        <UploadIcon/>\n                    </IconUploadButton>\n                    <IconButton className={Style.test_control_button}\n                        title={I18N.toString('action.testing.save')}\n                        disabled={empty}\n                        onClick={this.onTestDownload}>\n                        <DownloadIcon/>\n                    </IconButton>\n                    <IconButton className={Style.test_control_button}\n                        title={I18N.toString('action.testing.clear')}\n                        disabled={empty}\n                        onClick={this.onTestClose}>\n                        <CrossIcon/>\n                    </IconButton>\n                </div>\n                <div className={Style.test_list_container +\n          (empty ? ' empty ' : '')}>\n                    <IconButton className={Style.test_list_add}\n                        title={'Add'} onClick={this.onTestAdd}>\n                        <AddIcon/>\n                        <span className={Style.test_list_count}>\n                            {!empty ? '' + this._testList.length : ''}\n                        </span>\n                    </IconButton>\n                    <div className={Style.test_list_scroll_container}>\n                        <div className={Style.test_list}>\n                            {this._testList.map((e, i) => \n                            {\n                                const id = e.id;\n                                const defaultValue = e['defaultValue'] || '';\n                                let testCallback = this.onTestTest;\n                                if (machineController.getMachineExpression().length === 0)\n                                {\n                                    testCallback = null;\n                                }\n                                return <TestItem key={id} ref={ref=>e.ref=ref}\n                                    defaultValue={defaultValue}\n                                    onTest={testCallback}\n                                    onDelete={(e, item) => \n                                    {\n                                        this._testList.splice(i, 1);\n                                        this.onTestDelete(e, item);\n                                    }}/>;\n                            })}\n                        </div>\n                    </div>\n                    <IconButton className={Style.test_list_runall}\n                        title={'Run All'} onClick={this.onTestRunAll}>\n                        <RunningManIcon/>\n                    </IconButton>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default TestListView;\n","import React from 'react';\nimport Style from './TestingPanel.css';\n\nimport PanelContainer from 'experimental/panels/PanelContainer.js';\nimport PanelSwitch from 'experimental/panels/PanelSwitch.js';\n\nimport TestListView from './TestListView.js';\n\nimport {MACHINE_ERROR_NOTIFICATION_TAG} from 'modules/re/components/notifications/RENotifications.js';\n\nclass TestingPanel extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n\n        this.onAutoErrorCheckChange = this.onAutoErrorCheckChange.bind(this);\n    }\n\n    onAutoErrorCheckChange(e)\n    {\n        const currentModule = this.props.session.getCurrentModule();\n        const errorChecker = currentModule.getErrorChecker();\n        const errorCheck = errorChecker.isErrorChecking();\n        errorChecker.setErrorChecking(!errorCheck);\n        if (errorCheck)\n        {\n            //Turning it off\n            this.props.session.getApp().getNotificationManager().clearNotifications(MACHINE_ERROR_NOTIFICATION_TAG);\n        }\n        else\n        {\n            const machineController = currentModule.getMachineController();\n            errorChecker.onExpressionChange(machineController.getMachineExpression());\n        }\n    }\n\n    /** @override */\n    render()\n    {\n        const session = this.props.session;\n        const currentModule = session.getCurrentModule();\n        const machineController = currentModule.getMachineController();\n        const errorChecker = currentModule.getErrorChecker();\n\n        const errorCheck = errorChecker.isErrorChecking();\n\n        return (\n            <PanelContainer id={this.props.id}\n                className={Style.panel_container +\n          ' ' + this.props.className}\n                style={this.props.style}\n                title={TestingPanel.TITLE}>\n\n                <TestListView machineController={machineController}/>\n                <PanelSwitch id={'testing-error-check'} checked={errorCheck} onChange={this.onAutoErrorCheckChange} title={'Auto error checking'}/>\n\n            </PanelContainer>\n        );\n    }\n}\nObject.defineProperty(TestingPanel, 'TITLE', {\n    get: function() { return I18N.toString('component.testing.title'); }\n});\n\nexport default TestingPanel;\n","import React from 'react';\nimport Style from 'experimental/viewport/ViewportView.css';\nimport ExpressionViewStyle from './ExpressionView.css';\n\nimport {EMPTY, CONCAT, UNION, KLEENE, SIGMA, EMPTY_SET, PLUS} from 'modules/re/machine/RE.js';\n\nconst UNION_CHAR = '\\u222A';\n\nclass ExpressionView extends React.Component\n{\n    constructor(props)\n    {\n        super(props);\n\n        this._inputElement = null;\n\n        this.onInputChange = this.onInputChange.bind(this);\n        this.onClick = this.onClick.bind(this);\n    }\n\n    onInputChange(e)\n    {\n        const session = this.props.session;\n        const currentModule = session.getCurrentModule();\n        const machineController = currentModule.getMachineController();\n\n        const value = e.target.value;\n        const result = value.replace(new RegExp(UNION_CHAR, 'g'), UNION);\n\n        machineController.setMachineExpression(result);\n        session.getApp().getUndoManager().captureEvent();\n    }\n\n    onClick(e)\n    {\n        const session = this.props.session;\n        const currentModule = session.getCurrentModule();\n        const machineController = currentModule.getMachineController();\n        const cursorPos = this._inputElement.selectionStart;\n\n        const scope = machineController._parser.scopeFromSpaceIndexing(machineController.getMachine(), cursorPos);\n        this._inputElement.setSelectionRange(scope[0][0], scope[1][1]);\n    }\n\n    _appendSymbol(machineController, symbol)\n    {\n        const session = this.props.session;\n        const currentExpression = machineController.getMachineExpression();\n        const cursorPos = this._inputElement.selectionStart;\n        const newExpression = currentExpression.slice(0, cursorPos) + symbol + currentExpression.slice(cursorPos);\n        machineController.setMachineExpression(newExpression);\n        session.getApp().getUndoManager().captureEvent();\n        this._inputElement.focus();\n    }\n\n    /** @override */\n    render()\n    {\n        const session = this.props.session;\n        const currentModule = session.getCurrentModule();\n        const machineController = currentModule.getMachineController();\n        const terminals = machineController.getMachineTerminals();\n        const error = !machineController.getMachine().isValid();\n\n        const readableValue = machineController.getMachineExpression().replace(new RegExp(UNION, 'g'), UNION_CHAR);\n\n        return (\n            <div id={this.props.id}\n                className={Style.view_pane +\n          ' ' + this.props.className}\n                style={this.props.style}>\n                <div className={Style.view_widget + ' ' +\n          ExpressionViewStyle.expression + ' ' +\n          (error ? 'error' : '')}>\n                    <input ref={ref=>this._inputElement=ref} value={readableValue} onChange={this.onInputChange} onClick={this.onClick}/>\n                </div>\n                <div className={Style.view_widget + ' ' + ExpressionViewStyle.expression_tray + ' ' + ExpressionViewStyle.tray_important}>\n                    <button title=\"Epsilon\"       onClick={() => {this._appendSymbol(machineController, EMPTY);}}>{EMPTY}</button>\n                    <button title=\"Union\"         onClick={() => {this._appendSymbol(machineController, UNION);}}>{UNION_CHAR}</button>\n                    <button title=\"Concat\"        onClick={() => {this._appendSymbol(machineController, CONCAT);}}>{CONCAT}</button>\n                    <button title=\"Kleene Star\"   onClick={() => {this._appendSymbol(machineController, KLEENE);}}>{KLEENE}</button>\n                    <button title=\"Kleene Plus\"   onClick={() => {this._appendSymbol(machineController, PLUS);}}>{PLUS}</button>\n                    <button title=\"Sigma\"         onClick={() => {this._appendSymbol(machineController, SIGMA);}}>{SIGMA}</button>\n                    <button title=\"Empty Set\"     onClick={() => {this._appendSymbol(machineController, EMPTY_SET);}}>{EMPTY_SET}</button>\n                </div>\n\n                <div className={Style.view_widget + ' ' + ExpressionViewStyle.expression_tray + ' ' + ExpressionViewStyle.tray_symbol}>\n                    {terminals.map(e => \n                    {\n                        return (\n                            <button key={e} onClick={() => {this._appendSymbol(machineController, e);}}>{e}</button>\n                        );\n                    })}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ExpressionView;\n","import SessionImporter from 'session/SessionImporter.js';\n\nclass REImporter extends SessionImporter\n{\n    constructor(app)\n    {\n        super(app);\n\n        this._prevExpression = '';\n    }\n\n    /** @override */\n    onParseSession(session, fileData)\n    {\n        return JSON.parse(fileData);\n    }\n\n    /** @override */\n    onPreImportSession(session)\n    {\n        const currentModule = session.getCurrentModule();\n        const machineController = currentModule.getMachineController();\n        this._prevExpression = machineController.getMachineExpression();\n\n        // TODO: this should not be here, this should exist somewhere in graphController\n        if (!this._prevExpression)\n        {\n            session.getApp().getUndoManager().captureEvent();\n        }\n    }\n\n    /** @override */\n    onImportSession(session, sessionData)\n    {\n        const currentModule = session.getCurrentModule();\n        const machineController = currentModule.getMachineController();\n\n        const machineExpression = sessionData['machineData']['expression'];\n        if (machineExpression) machineController.setMachineExpression(machineExpression);\n    }\n\n    /** @override */\n    onPostImportSession(session)\n    {\n        const currentModule = session.getCurrentModule();\n        const machineController = currentModule.getMachineController();\n\n        // Compares the graph hash before and after import, captures event if they are not equal\n        const nextExpression = machineController.getMachineExpression();\n        if (this._prevExpression !== nextExpression)\n        {\n            // TODO: this should not be here\n            session.getApp().getUndoManager().captureEvent();\n        }\n    }\n}\n\nexport default REImporter;\n","import SessionExporter from 'session/SessionExporter.js';\n\nimport JSONFileIcon from 'components/iconset/flat/JSONFileIcon.js';\n\nclass REExporter extends SessionExporter\n{\n    constructor()\n    {\n        super('.re.json');\n    }\n\n    /** @override */\n    onExportSession(session, dst)\n    {\n        const currentModule = session.getCurrentModule();\n        const machineController = currentModule.getMachineController();\n\n        dst['machineData'] = {\n            expression: machineController.getMachineExpression()\n        };\n    }\n    \n    /** @override */\n    getIconClass() { return JSONFileIcon; }\n    /** @override */\n    getLabel() { return I18N.toString('file.export.machine'); }\n    /** @override */\n    getTitle() { return I18N.toString('file.export.machine.hint'); }\n}\n\nexport default REExporter;\n","import SessionExporter from 'session/SessionExporter.js';\n\nimport JSONFileIcon from 'components/iconset/flat/JSONFileIcon.js';\nimport { JSON as JSONGraphParser } from 'modules/fsa/graph/FSAGraphParser.js';\n\nimport FSAGraph from 'modules/fsa/graph/FSAGraph.js';\nimport {EMPTY_SYMBOL} from 'modules/fsa2/machine/FSA.js';\nimport {EMPTY_CHAR, SYMBOL_SEPARATOR} from 'modules/fsa/graph/FSAEdge.js';\nimport GraphLayout from 'modules/fsa/graph/GraphLayout.js';\n\nclass REToFSAExporter extends SessionExporter\n{\n    constructor() { super('.fsa.json'); }\n\n    onExportSession(session, dst)\n    {\n        const currentModule = session.getCurrentModule();\n        const machineController = currentModule.getMachineController();\n        const machine = machineController.getEquivalentFSA();\n\n        const graph = new FSAGraph();\n        setGraphToFSA(graph, machine);\n        const graphData = JSONGraphParser.objectify(graph);\n\n        dst['graphData'] = graphData;\n        dst['machineData'] = {\n            type: 'NFA',\n            symbols: []\n        };\n    }\n    \n    /** @override */\n    getIconClass() { return JSONFileIcon; }\n    /** @override */\n    getLabel() { return I18N.toString('file.export.convertfsa'); }\n    /** @override */\n    getTitle() { return I18N.toString('file.export.convertfsa'); }\n}\n\nfunction setGraphToFSA(graph, machine)\n{\n    graph.clear();\n\n    if (machine.getStateCount() <= 0) return;\n\n    //Add all states\n    let stateMap = new Map();\n    let node;\n    for(const state of machine.getStates())\n    {\n        node = graph.createNode(0, 0);\n        node.setNodeLabel(state.getStateLabel());\n        if (machine.isFinalState(state)) node.setNodeAccept(true);\n        stateMap.set(state, node);\n    }\n\n    //Add all transitions\n    let edge, from, to, read;\n    for(let transition of machine.getTransitions())\n    {\n        from = stateMap.get(transition.getSourceState());\n        to = stateMap.get(transition.getDestinationState());\n        read = [];\n        for(const symbol of transition.getSymbols())\n        {\n            if (symbol === EMPTY_SYMBOL)\n            {\n                read.push(EMPTY_CHAR);\n            }\n            else\n            {\n                read.push(symbol);\n            }\n        }\n        edge = graph.createEdge(from, to);\n        edge.setEdgeLabel(read.join(SYMBOL_SEPARATOR));\n        const formattedEdge = graph.formatEdge(edge);\n        if (edge != formattedEdge) graph.deleteEdge(edge);\n    }\n\n    //Set start state\n    const startState = machine.getStartState();\n    graph.setStartNode(stateMap.get(startState));\n\n    //Auto layout graph\n    GraphLayout.applyLayout(graph);\n}\n\nexport default REToFSAExporter;\n","import React from 'react';\nimport PanelContainer from 'experimental/panels/PanelContainer.js';\n\nimport MachineController from './MachineController.js';\nimport REErrorChecker from './REErrorChecker.js';\nimport SafeExpressionEventHandler from './SafeExpressionEventHandler.js';\n\nimport {registerNotifications} from './components/notifications/RENotifications.js';\n\nimport OverviewPanel from './components/panels/overview/OverviewPanel.js';\nimport AnalysisPanel from './components/panels/analysis/AnalysisPanel.js';\nimport TestingPanel from './components/panels/testing/TestingPanel.js';\n\nimport ExpressionView from './components/views/ExpressionView.js';\nimport {CTRL_KEY, SHIFT_KEY} from 'session/manager/hotkey/HotKeyManager.js';\n\nimport REImporter from './filehandlers/REImporter.js';\nimport REExporter from './filehandlers/REExporter.js';\nimport REToFSAExporter from './filehandlers/REToFSAExporter.js';\n\nconst MODULE_NAME = 're';\nconst MODULE_VERSION = '0.0.1';\nconst MODULE_LOCALIZED_NAME = 'RE';\n\nclass REModule\n{\n    constructor(app)\n    {\n        this._app = app;\n\n        this._machineController = new MachineController();\n        this._errorChecker = new REErrorChecker(app,\n            this._machineController);\n    }\n\n    /** @override */\n    initialize(app)\n    {\n        registerNotifications(app.getNotificationManager());\n\n        app.getDrawerManager()\n            .addPanelClass(props => (\n                <PanelContainer id={props.id}\n                    className={props.className}\n                    style={props.style}\n                    title={'Regular Expressions'}>\n                    <p>{'Brought to you with \\u2764 by the Flap.js team.'}</p>\n                    <p>{'<- Tap on a tab to begin!'}</p>\n                </PanelContainer>\n            ))\n            .addPanelClass(OverviewPanel)\n            .addPanelClass(AnalysisPanel)\n            .addPanelClass(TestingPanel);\n\n        app.getViewportManager()\n            .addViewClass(ExpressionView);\n\n        app.getUndoManager()\n            .setEventHandlerFactory((...args) => \n            {\n                return new SafeExpressionEventHandler(this._machineController);\n            });\n            \n        app.getExportManager()\n            .registerExporter(new REExporter(), 'session')\n            .registerExporter(new REToFSAExporter(), 're2fsa');\n        \n        app.getImportManager()\n            .addImporter(new REImporter(app), '.re.json', '.json');\n\n        app.getHotKeyManager()\n            .registerHotKey('Save as JSON', [CTRL_KEY, 'KeyS'], () => { app.getExportManager().tryExportFile('session', app.getSession()); })\n            .registerHotKey('New', [CTRL_KEY, 'KeyN'], () => {this.clear(app);})\n            .registerHotKey('Undo', [CTRL_KEY, 'KeyZ'], () => {app.getUndoManager().undo();})\n            .registerHotKey('Redo', [CTRL_KEY, SHIFT_KEY, 'KeyZ'], () => {app.getUndoManager().redo();});\n    }\n\n    /** @override */\n    update(app)\n    {\n        this._machineController.update();\n    }\n\n    /** @override */\n    destroy(app)\n    {\n    }\n\n    /** @override */\n    clear(app)\n    {\n        if (window.confirm(I18N.toString('alert.graph.clear')))\n        {\n            this._machineController.setMachineExpression('');\n            app.getUndoManager().clear();\n            app.getSession().setProjectName(null);\n            app.getToolbarComponent().closeBar();\n        }\n    }\n\n    getMachineController() { return this._machineController; }\n    getErrorChecker() { return this._errorChecker; }\n\n    /** @override */\n    getModuleVersion() { return MODULE_VERSION; }\n    /** @override */\n    getModuleName() { return MODULE_NAME; }\n    /** @override */\n    getLocalizedModuleName() { return MODULE_LOCALIZED_NAME; }\n    /** @override */\n    getApp() { return this._app; }\n}\n\nexport default REModule;\n"],"sourceRoot":""}